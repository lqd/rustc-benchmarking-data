--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name x25519_dalek --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --cfg feature="default" --cfg feature="std" --cfg feature="u64_backend" -C metadata=f8372703d9d7c0d4 -C extra-filename=-f8372703d9d7c0d4 --out-dir /usr/home/liquid/tmp/.tmp7jHXij/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmp7jHXij/target/release/deps --extern curve25519_dalek=/usr/home/liquid/tmp/.tmp7jHXij/target/release/deps/libcurve25519_dalek-dc99a915d91139e4.rmeta --extern rand_core=/usr/home/liquid/tmp/.tmp7jHXij/target/release/deps/librand_core-0e8b069e95d09e68.rmeta --extern zeroize=/usr/home/liquid/tmp/.tmp7jHXij/target/release/deps/libzeroize-a592d72f36349547.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-x25519-dalek-2.0.0-pre.1-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
398,806,911 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
21,006,782 ( 5.27%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
15,257,741 ( 3.83%)  ./elf/dl-lookup.c:do_lookup_x
12,351,308 ( 3.10%)  ./malloc/malloc.c:_int_malloc
12,203,125 ( 3.06%)  ./malloc/malloc.c:_int_free
 9,560,568 ( 2.40%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 7,769,820 ( 1.95%)  ./malloc/malloc.c:malloc
 6,008,505 ( 1.51%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
 5,211,381 ( 1.31%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,068,024 ( 1.02%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 3,723,488 ( 0.93%)  ./malloc/malloc.c:free
 3,029,479 ( 0.76%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,706,964 ( 0.68%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,535,144 ( 0.64%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,457,544 ( 0.62%)  ./elf/do-rel.h:_dl_relocate_object
 2,349,174 ( 0.59%)  ???:(anonymous namespace)::ModuleBitcodeWriter::writeConstants(unsigned int, unsigned int, bool)
 2,153,140 ( 0.54%)  ./malloc/malloc.c:malloc_consolidate
 1,992,597 ( 0.50%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
 1,984,645 ( 0.50%)  ???:llvm::InstCombinerImpl::run()
 1,927,503 ( 0.48%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 1,908,289 ( 0.48%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 1,871,648 ( 0.47%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 1,867,372 ( 0.47%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,858,651 ( 0.47%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
 1,596,136 ( 0.40%)  ???:void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl<unsigned long>(unsigned int, llvm::ArrayRef<unsigned long>, llvm::StringRef, llvm::Optional<unsigned int>)
 1,510,407 ( 0.38%)  ./elf/dl-lookup.c:check_match
 1,470,639 ( 0.37%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 1,367,047 ( 0.34%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,358,723 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,344,681 ( 0.34%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 1,338,318 ( 0.34%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 1,281,093 ( 0.32%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 1,235,428 ( 0.31%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
 1,176,135 ( 0.29%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
 1,172,173 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,167,667 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,164,245 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,144,860 ( 0.29%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 1,108,303 ( 0.28%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
 1,042,729 ( 0.26%)  ???:llvm::SHA1::hashBlock()
 1,021,625 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 1,012,860 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   963,076 ( 0.24%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
   876,242 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
   866,929 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   864,361 ( 0.22%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   854,991 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   820,650 ( 0.21%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   810,418 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
   809,894 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   804,796 ( 0.20%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
   777,133 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   772,742 ( 0.19%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   757,672 ( 0.19%)  ./malloc/malloc.c:calloc
   756,424 ( 0.19%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   752,834 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   719,673 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<_>>::ty_and_layout_field::field_ty_or_layout::<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>
   716,039 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>>::ty_and_layout_field
   701,514 ( 0.18%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
   695,282 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   678,015 ( 0.17%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
   673,625 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   665,014 ( 0.17%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   662,416 ( 0.17%)  ???:llvm::ConstantDataSequential::getImpl(llvm::StringRef, llvm::Type*)
   656,131 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs:<rustc_const_eval::interpret::intern::InternVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::visit_value
   645,149 ( 0.16%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
   644,199 ( 0.16%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
   634,944 ( 0.16%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
   632,970 ( 0.16%)  ./malloc/malloc.c:realloc
   627,186 ( 0.16%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   626,445 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   626,337 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   614,108 ( 0.15%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   580,586 ( 0.15%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
   536,220 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   527,608 ( 0.13%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   521,911 ( 0.13%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
   517,071 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   511,699 ( 0.13%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
   501,466 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::force_allocation_maybe_sized
   499,298 ( 0.13%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
   482,887 ( 0.12%)  ???:llvm::MD5::update(llvm::StringRef)
   481,488 ( 0.12%)  ???:llvm::Type::getPrimitiveSizeInBits() const
   475,420 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   468,549 ( 0.12%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
   468,408 ( 0.12%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
   460,728 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   460,596 ( 0.12%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
   454,386 ( 0.11%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
   445,013 ( 0.11%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
   442,491 ( 0.11%)  ./malloc/malloc.c:_int_realloc
   438,367 ( 0.11%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
   434,211 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs:<&rustc_middle::ty::TyS as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   433,489 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs:core::slice::sort::recurse::<rustc_span::def_id::DefId, <[rustc_span::def_id::DefId]>::sort_unstable_by_key<(i64, usize), rustc_trait_selection::traits::specialize::specialization_graph_provider::{closure#0}>::{closure#0}>
   430,554 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   427,580 ( 0.11%)  ???:???
   423,936 ( 0.11%)  ???:llvm::RegisterClassInfo::computePSetLimit(unsigned int) const
   422,003 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   414,853 ( 0.10%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
   412,527 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   402,500 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   400,641 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   399,827 ( 0.10%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
   398,944 ( 0.10%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   29,734 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   15,209 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   21,250 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   11,064 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    5,712 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,757,236 ( 0.44%)              let byte = slice[*position];
  878,618 ( 0.22%)              *position += 1;
  878,618 ( 0.22%)              if (byte & 0x80) == 0 {
      262 ( 0.00%)                  return byte as $int_ty;
        .                       }
    8,882 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  650,805 ( 0.16%)                  let byte = slice[*position];
  400,209 ( 0.10%)                  *position += 1;
  433,870 ( 0.11%)                  if (byte & 0x80) == 0 {
  357,949 ( 0.09%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  697,393 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  225,776 ( 0.06%)          Vec { buf: RawVec::NEW, len: 0 }
       19 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  128,260 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    6,257 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   28,101 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   18,794 ( 0.00%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,347 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,119 ( 0.00%)          if self.capacity() > self.len {
    1,793 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      312 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,132 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   24,961 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   23,821 ( 0.01%)              self.len = len;
      251 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   14,552 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  264,165 ( 0.07%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  569,428 ( 0.14%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   45,649 ( 0.01%)          self.len = new_len;
      296 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      238 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       46 ( 0.00%)          let len = self.len();
      112 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      234 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      315 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      234 ( 0.00%)              self.set_len(len + 1);
        .                   }
      204 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
       48 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       48 ( 0.00%)          let len = self.len();
      157 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      400 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      100 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       48 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,230 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      352 ( 0.00%)          self.retain_mut(|elem| f(elem));
   11,976 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,511 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    1,438 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      838 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   15,282 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    3,078 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       88 ( 0.00%)                      g.processed_len += 1;
       22 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      393 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      366 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
      133 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       55 ( 0.00%)          let len = self.len();
      294 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      300 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       68 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      164 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      210 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,451,205 ( 0.36%)          if self.len == self.buf.capacity() {
   53,232 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   22,522 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,543,443 ( 0.39%)              self.len += 1;
        .                   }
      168 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   49,695 ( 0.01%)          if self.len == 0 {
        5 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   37,856 ( 0.01%)                  self.len -= 1;
    5,128 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      126 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    3,706 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   24,777 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,151 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       49 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      169 ( 0.00%)              Drain {
        .                           tail_start: end,
       48 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   21,144 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   19,717 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      193 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      143 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,687 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      225 ( 0.00%)          let len = self.len();
      450 ( 0.00%)          if new_len > len {
    1,392 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,462 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       49 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    1,060 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      106 ( 0.00%)          let len = self.len();
        .           
      318 ( 0.00%)          if new_len > len {
      426 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      106 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   15,433 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      647 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   18,666 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   12,241 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
       20 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,526 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   18,296 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    3,644 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  431,895 ( 0.11%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   86,856 ( 0.02%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   15,516 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   19,188 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    4,401 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  154,111 ( 0.04%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   56,165 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   45,859 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,202 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       24 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   30,048 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       24 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   20,043 ( 0.01%)          while let Some(element) = iterator.next() {
      805 ( 0.00%)              let len = self.len();
   21,361 ( 0.01%)              if len == self.capacity() {
      364 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   20,228 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      150 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      117 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      228 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      144 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   52,072 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   26,978 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   61,088 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  173,362 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs
--------------------------------------------------------------------------------
Ir               

-- line 14 ----------------------------------------
      .           use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};
      .           
      .           use super::{
      .               alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,
      .               ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,
      .               Operand, Pointer, PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit,
      .           };
      .           
 33,968 ( 0.01%)  #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           /// Information required for the sound usage of a `MemPlace`.
      .           pub enum MemPlaceMeta<Tag: Provenance = AllocId> {
      .               /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).
      .               Meta(Scalar<Tag>),
      .               /// `Sized` types or unsized `extern type`
      .               None,
      .               /// The address of this place may not be taken. This protects the `MemPlace` from coming from
      .               /// a ZST Operand without a backing allocation and being converted to an integer address. This
-- line 30 ----------------------------------------
-- line 41 ----------------------------------------
      .                   match self {
      .                       Self::Meta(s) => s,
      .                       Self::None | Self::Poison => {
      .                           bug!("expected wide pointer extra data (e.g. slice length or trait object vtable)")
      .                       }
      .                   }
      .               }
      .               fn has_meta(self) -> bool {
  5,818 ( 0.00%)          match self {
      .                       Self::Meta(_) => true,
      .                       Self::None | Self::Poison => false,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           pub struct MemPlace<Tag: Provenance = AllocId> {
-- line 57 ----------------------------------------
-- line 113 ----------------------------------------
      .               fn deref(&self) -> &MemPlace<Tag> {
      .                   &self.mplace
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {
      .               #[inline(always)]
      .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
  1,286 ( 0.00%)          PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }
      .               }
      .           }
      .           
      .           impl<Tag: Provenance> MemPlace<Tag> {
      .               #[inline(always)]
      .               pub fn from_ptr(ptr: Pointer<Option<Tag>>, align: Align) -> Self {
      .                   MemPlace { ptr, align, meta: MemPlaceMeta::None }
      .               }
-- line 129 ----------------------------------------
-- line 132 ----------------------------------------
      .               pub fn map_provenance(self, f: impl FnOnce(Option<Tag>) -> Option<Tag>) -> Self {
      .                   MemPlace { ptr: self.ptr.map_provenance(f), ..self }
      .               }
      .           
      .               /// Turn a mplace into a (thin or wide) pointer, as a reference, pointing to the same space.
      .               /// This is the inverse of `ref_to_mplace`.
      .               #[inline(always)]
      .               pub fn to_ref(self, cx: &impl HasDataLayout) -> Immediate<Tag> {
     20 ( 0.00%)          match self.meta {
     14 ( 0.00%)              MemPlaceMeta::None => Immediate::from(Scalar::from_maybe_pointer(self.ptr, cx)),
      .                       MemPlaceMeta::Meta(meta) => {
      .                           Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx).into(), meta.into())
      .                       }
      .                       MemPlaceMeta::Poison => bug!(
      .                           "MPlaceTy::dangling may never be used to produce a \
      .                           place that will have the address of its pointee taken"
      .                       ),
      .                   }
-- line 149 ----------------------------------------
-- line 163 ----------------------------------------
      .                   })
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {
      .               /// Produces a MemPlace that works for ZST but nothing else
      .               #[inline]
      .               pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {
     28 ( 0.00%)          let align = layout.align.abi;
      .                   let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address
      .                   // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.
      .                   MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }
      .               }
      .           
      .               #[inline]
      .               pub fn offset(
      .                   &self,
      .                   offset: Size,
      .                   meta: MemPlaceMeta<Tag>,
      .                   layout: TyAndLayout<'tcx>,
      .                   cx: &impl HasDataLayout,
      .               ) -> InterpResult<'tcx, Self> {
203,316 ( 0.05%)          Ok(MPlaceTy { mplace: self.mplace.offset(offset, meta, cx)?, layout })
      .               }
      .           
      .               #[inline]
      .               pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {
     60 ( 0.00%)          MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }
      .               }
      .           
      .               #[inline]
  6,416 ( 0.00%)      pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {
 34,883 ( 0.01%)          if self.layout.is_unsized() {
      .                       // We need to consult `meta` metadata
      .                       match self.layout.ty.kind() {
      .                           ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),
      .                           _ => bug!("len not supported on unsized type {:?}", self.layout.ty),
      .                       }
      .                   } else {
      .                       // Go through the layout.  There are lots of types that support a length,
      .                       // e.g., SIMD types. (But not all repr(simd) types even have FieldsShape::Array!)
 18,978 ( 0.00%)              match self.layout.fields {
 15,905 ( 0.00%)                  FieldsShape::Array { count, .. } => Ok(count),
      .                           _ => bug!("len not supported on sized type {:?}", self.layout.ty),
      .                       }
      .                   }
 12,832 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(super) fn vtable(&self) -> Scalar<Tag> {
      .                   match self.layout.ty.kind() {
      .                       ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),
      .                       _ => bug!("vtable not supported on type {:?}", self.layout.ty),
      .                   }
      .               }
-- line 217 ----------------------------------------
-- line 218 ----------------------------------------
      .           }
      .           
      .           // These are defined here because they produce a place.
      .           impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn try_as_mplace(&self) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {
 36,910 ( 0.01%)          match **self {
171,316 ( 0.04%)              Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),
     14 ( 0.00%)              Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout)),
 27,776 ( 0.01%)              Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),
      .                   }
      .               }
      .           
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Tag> {
      .                   self.try_as_mplace().unwrap()
-- line 237 ----------------------------------------
-- line 263 ----------------------------------------
      .               M: Machine<'mir, 'tcx, PointerTag = Tag>,
      .           {
      .               /// Take a value, which represents a (thin or wide) reference, and make it a place.
      .               /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.
      .               ///
      .               /// Only call this if you are sure the place is "valid" (aligned and inbounds), or do not
      .               /// want to ever use the place for memory access!
      .               /// Generally prefer `deref_operand`.
     40 ( 0.00%)      pub fn ref_to_mplace(
      .                   &self,
      .                   val: &ImmTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   let pointee_type =
     12 ( 0.00%)              val.layout.ty.builtin_deref(true).expect("`ref_to_mplace` called on non-ptr type").ty;
     12 ( 0.00%)          let layout = self.layout_of(pointee_type)?;
     20 ( 0.00%)          let (ptr, meta) = match **val {
      8 ( 0.00%)              Immediate::Scalar(ptr) => (ptr, MemPlaceMeta::None),
      .                       Immediate::ScalarPair(ptr, meta) => (ptr, MemPlaceMeta::Meta(meta.check_init()?)),
      .                   };
      .           
      .                   let mplace = MemPlace {
      .                       ptr: self.scalar_to_ptr(ptr.check_init()?),
      .                       // We could use the run-time alignment here. For now, we do not, because
      .                       // the point of tracking the alignment here is to make sure that the *static*
      .                       // alignment information emitted with the loads is correct. The run-time
      .                       // alignment can only be more restrictive.
      4 ( 0.00%)              align: layout.align.abi,
      .                       meta,
      .                   };
     68 ( 0.00%)          Ok(MPlaceTy { mplace, layout })
     36 ( 0.00%)      }
      .           
      .               /// Take an operand, representing a pointer, and dereference it to a place -- that
      .               /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.
      .               pub fn deref_operand(
      .                   &self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   let val = self.read_immediate(src)?;
-- line 301 ----------------------------------------
-- line 306 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc(
      .                   &self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
      .                   assert!(!place.layout.is_unsized());
  1,920 ( 0.00%)          assert!(!place.meta.has_meta());
  1,920 ( 0.00%)          let size = place.layout.size;
 17,280 ( 0.00%)          self.memory.get(place.ptr, size, place.align)
      .               }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc_mut(
      .                   &mut self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
  3,912 ( 0.00%)          assert!(!place.layout.is_unsized());
  3,898 ( 0.00%)          assert!(!place.meta.has_meta());
  3,898 ( 0.00%)          let size = place.layout.size;
 23,388 ( 0.01%)          self.memory.get_mut(place.ptr, size, place.align)
      .               }
      .           
      .               /// Check if this mplace is dereferenceable and sufficiently aligned.
      .               fn check_mplace_access(
      .                   &self,
      .                   mplace: MPlaceTy<'tcx, M::PointerTag>,
      .                   msg: CheckInAllocMsg,
      .               ) -> InterpResult<'tcx> {
-- line 335 ----------------------------------------
-- line 349 ----------------------------------------
      .               /// This also works for arrays, but then the `usize` index type is restricting.
      .               /// For indexing into arrays, use `mplace_index`.
      .               #[inline(always)]
      .               pub fn mplace_field(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
 60,616 ( 0.02%)          let offset = base.layout.fields.offset(field);
 48,644 ( 0.01%)          let field_layout = base.layout.field(self, field);
      .           
      .                   // Offset may need adjustment for unsized fields.
120,300 ( 0.03%)          let (meta, offset) = if field_layout.is_unsized() {
      .                       // Re-use parent metadata to determine dynamic field layout.
      .                       // With custom DSTS, this *will* execute user-defined code, but the same
      .                       // happens at run-time so that's okay.
      .                       match self.size_and_align_of(&base.meta, &field_layout)? {
      .                           Some((_, align)) => (base.meta, offset.align_to(align)),
      .                           None => {
      .                               // For unsized types with an extern type tail we perform no adjustments.
      .                               // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.
-- line 369 ----------------------------------------
-- line 374 ----------------------------------------
      .                   } else {
      .                       // base.meta could be present; we might be accessing a sized field of an unsized
      .                       // struct.
      .                       (MemPlaceMeta::None, offset)
      .                   };
      .           
      .                   // We do not look at `base.layout.align` nor `field_layout.align`, unlike
      .                   // codegen -- mostly to see if we can get away with that
 25,104 ( 0.01%)          base.offset(offset, meta, field_layout, self)
      .               }
      .           
      .               /// Index into an array.
      .               #[inline(always)]
      .               pub fn mplace_index(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // Not using the layout method because we want to compute on u64
     18 ( 0.00%)          match base.layout.fields {
      6 ( 0.00%)              FieldsShape::Array { stride, .. } => {
     24 ( 0.00%)                  let len = base.len(self)?;
     12 ( 0.00%)                  if index >= len {
      .                               // This can only be reached in ConstProp and non-rustc-MIR.
      .                               throw_ub!(BoundsCheckFailed { len, index });
      .                           }
      .                           let offset = stride * index; // `Size` multiplication
      .                           // All fields have the same layout.
     30 ( 0.00%)                  let field_layout = base.layout.field(self, 0);
      .           
      6 ( 0.00%)                  assert!(!field_layout.is_unsized());
      .                           base.offset(offset, MemPlaceMeta::None, field_layout, self)
      .                       }
      .                       _ => span_bug!(
      .                           self.cur_span(),
      .                           "`mplace_index` called on non-array type {:?}",
      .                           base.layout.ty
      .                       ),
      .                   }
      .               }
      .           
      .               // Iterates over all fields of an array. Much more efficient than doing the
      .               // same by repeatedly calling `mplace_array`.
 64,100 ( 0.02%)      pub(super) fn mplace_array_fields<'a>(
      .                   &self,
      .                   base: &'a MPlaceTy<'tcx, Tag>,
      .               ) -> InterpResult<'tcx, impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>> + 'a>
      .               {
 25,640 ( 0.01%)          let len = base.len(self)?; // also asserts that we have a type where this makes sense
 19,230 ( 0.00%)          let stride = match base.layout.fields {
  6,410 ( 0.00%)              FieldsShape::Array { stride, .. } => stride,
      .                       _ => span_bug!(self.cur_span(), "mplace_array_fields: expected an array layout"),
      .                   };
 12,820 ( 0.00%)          let layout = base.layout.field(self, 0);
  6,410 ( 0.00%)          let dl = &self.tcx.data_layout;
      .                   // `Size` multiplication
151,046 ( 0.04%)          Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))
 57,690 ( 0.01%)      }
      .           
      .               fn mplace_subslice(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   from: u64,
      .                   to: u64,
      .                   from_end: bool,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 439 ----------------------------------------
-- line 481 ----------------------------------------
      .                   variant: VariantIdx,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // Downcasts only change the layout
      .                   assert!(!base.meta.has_meta());
      .                   Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..*base })
      .               }
      .           
      .               /// Project into an mplace
     60 ( 0.00%)      pub(super) fn mplace_projection(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   proj_elem: mir::PlaceElem<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
    144 ( 0.00%)          Ok(match proj_elem {
      .                       Field(field, _) => self.mplace_field(base, field.index())?,
      .                       Downcast(_, variant) => self.mplace_downcast(base, variant)?,
      .                       Deref => self.deref_operand(&base.into())?,
      .           
      6 ( 0.00%)              Index(local) => {
     30 ( 0.00%)                  let layout = self.layout_of(self.tcx.types.usize)?;
     18 ( 0.00%)                  let n = self.access_local(self.frame(), local, Some(layout))?;
     12 ( 0.00%)                  let n = self.read_scalar(&n)?;
      6 ( 0.00%)                  let n = n.to_machine_usize(self)?;
      .                           self.mplace_index(base, n)?
      .                       }
      .           
      .                       ConstantIndex { offset, min_length, from_end } => {
      .                           let n = base.len(self)?;
      .                           if n < min_length {
      .                               // This can only be reached in ConstProp and non-rustc-MIR.
      .                               throw_ub!(BoundsCheckFailed { len: min_length, index: n });
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
      .                               offset
      .                           };
      .           
      .                           self.mplace_index(base, index)?
      .                       }
      .           
      .                       Subslice { from, to, from_end } => self.mplace_subslice(base, from, to, from_end)?,
      .                   })
     48 ( 0.00%)      }
      .           
      .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
      .               /// Also returns the number of elements.
      .               pub fn mplace_to_simd(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 536 ----------------------------------------
-- line 542 ----------------------------------------
      .                   assert_eq!(layout.size, base.layout.size);
      .                   Ok((MPlaceTy { layout, ..*base }, len))
      .               }
      .           
      .               /// Gets the place of a field inside the place, and also the field's type.
      .               /// Just a convenience function, but used quite a bit.
      .               /// This is the only projection that might have a side-effect: We cannot project
      .               /// into the field of a local `ScalarPair`, we have to first allocate it.
 57,400 ( 0.01%)      pub fn place_field(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   // FIXME: We could try to be smarter and avoid allocation for fields that span the
      .                   // entire place.
  5,740 ( 0.00%)          let mplace = self.force_allocation(base)?;
 68,880 ( 0.02%)          Ok(self.mplace_field(&mplace, field)?.into())
 45,920 ( 0.01%)      }
      .           
      .               pub fn place_index(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   let mplace = self.force_allocation(base)?;
      .                   Ok(self.mplace_index(&mplace, index)?.into())
-- line 567 ----------------------------------------
-- line 586 ----------------------------------------
      .           
      .               /// Projects into a place.
      .               pub fn place_projection(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
 23,745 ( 0.01%)          Ok(match proj_elem {
  7,900 ( 0.00%)              Field(field, _) => self.place_field(base, field.index())?,
      .                       Downcast(_, variant) => self.place_downcast(base, variant)?,
      .                       Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),
      .                       // For the other variants, we have to force an allocation.
      .                       // This matches `operand_projection`.
      .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
      3 ( 0.00%)                  let mplace = self.force_allocation(base)?;
     51 ( 0.00%)                  self.mplace_projection(&mplace, proj_elem)?.into()
      .                       }
      .                   })
      .               }
      .           
      .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
      .               /// Also returns the number of elements.
      .               pub fn place_to_simd(
      .                   &mut self,
-- line 610 ----------------------------------------
-- line 611 ----------------------------------------
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   let mplace = self.force_allocation(base)?;
      .                   self.mplace_to_simd(&mplace)
      .               }
      .           
      .               /// Computes a place. You should only use this if you intend to write into this
      .               /// place; for reading, a more efficient alternative is `eval_place_for_read`.
 19,696 ( 0.00%)      pub fn eval_place(
      .                   &mut self,
      .                   place: mir::Place<'tcx>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
 12,310 ( 0.00%)          let mut place_ty = PlaceTy {
      .                       // This works even for dead/uninitialized locals; we check further when writing
      .                       place: Place::Local { frame: self.frame_idx(), local: place.local },
      .                       layout: self.layout_of_local(self.frame(), place.local, None)?,
      .                   };
      .           
  3,166 ( 0.00%)          for elem in place.projection.iter() {
  1,583 ( 0.00%)              place_ty = self.place_projection(&place_ty, &elem)?
      .                   }
      .           
      .                   trace!("{:?}", self.dump_place(place_ty.place));
      .                   // Sanity-check the type we ended up with.
      .                   debug_assert!(mir_assign_valid_types(
      .                       *self.tcx,
      .                       self.param_env,
      .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
      .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
      .                       )?)?,
      .                       place_ty.layout,
      .                   ));
 44,316 ( 0.01%)          Ok(place_ty)
 19,696 ( 0.00%)      }
      .           
      .               /// Write an immediate to a place
      .               #[inline(always)]
      .               pub fn write_immediate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
     24 ( 0.00%)          self.write_immediate_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
-- line 661 ----------------------------------------
-- line 678 ----------------------------------------
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   self.write_scalar(Scalar::from_maybe_pointer(ptr.into(), self), dest)
      .               }
      .           
      .               /// Write an immediate to a place.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
  3,924 ( 0.00%)      fn write_immediate_no_validate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   if cfg!(debug_assertions) {
      .                       // This is a very common path, avoid some checks in release mode
      .                       assert!(!dest.layout.is_unsized(), "Cannot write unsized data");
      .                       match src {
-- line 694 ----------------------------------------
-- line 705 ----------------------------------------
      .                               // FIXME: Can we check anything here?
      .                           }
      .                       }
      .                   }
      .                   trace!("write_immediate: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,
      .                   // but not factored as a separate function.
  7,878 ( 0.00%)          let mplace = match dest.place {
     97 ( 0.00%)              Place::Local { frame, local } => {
     60 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
      .                               Ok(local) => {
      .                                   // Local can be updated in-place.
    389 ( 0.00%)                          *local = LocalValue::Live(Operand::Immediate(src));
      .                                   return Ok(());
      .                               }
      .                               Err(mplace) => {
      .                                   // The local is in memory, go on below.
      .                                   mplace
      .                               }
      .                           }
      .                       }
 23,388 ( 0.01%)              Place::Ptr(mplace) => mplace, // already referring to memory
      .                   };
 35,082 ( 0.01%)          let dest = MPlaceTy { mplace, layout: dest.layout };
      .           
      .                   // This is already in memory, write there.
 42,878 ( 0.01%)          self.write_immediate_to_mplace_no_validate(src, &dest)
  7,848 ( 0.00%)      }
      .           
      .               /// Write an immediate to memory.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
 38,980 ( 0.01%)      fn write_immediate_to_mplace_no_validate(
      .                   &mut self,
      .                   value: Immediate<M::PointerTag>,
      .                   dest: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // Note that it is really important that the type here is the right one, and matches the
      .                   // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here
      .                   // to handle padding properly, which is only correct if we never look at this data with the
      .                   // wrong type.
      .           
      .                   // Invalid places are a thing: the return place of a diverging function
  3,898 ( 0.00%)          let tcx = *self.tcx;
  7,796 ( 0.00%)          let mut alloc = match self.get_alloc_mut(dest)? {
 19,455 ( 0.00%)              Some(a) => a,
      .                       None => return Ok(()), // zero-sized access
      .                   };
      .           
      .                   // FIXME: We should check that there are dest.layout.size many bytes available in
      .                   // memory.  The code below is not sufficient, with enough padding it might not
      .                   // cover all the bytes!
  7,782 ( 0.00%)          match value {
      .                       Immediate::Scalar(scalar) => {
  7,782 ( 0.00%)                  match dest.layout.abi {
      .                               Abi::Scalar(_) => {} // fine
      .                               _ => span_bug!(
      .                                   self.cur_span(),
      .                                   "write_immediate_to_mplace: invalid Scalar layout: {:#?}",
      .                                   dest.layout
      .                               ),
      .                           }
 35,019 ( 0.01%)                  alloc.write_scalar(alloc_range(Size::ZERO, dest.layout.size), scalar)
      .                       }
      .                       Immediate::ScalarPair(a_val, b_val) => {
      .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
      .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
      .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
      .                           let (a, b) = match dest.layout.abi {
      .                               Abi::ScalarPair(a, b) => (a.value, b.value),
      .                               _ => span_bug!(
-- line 776 ----------------------------------------
-- line 785 ----------------------------------------
      .                           // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,
      .                           // but that does not work: We could be a newtype around a pair, then the
      .                           // fields do not match the `ScalarPair` components.
      .           
      .                           alloc.write_scalar(alloc_range(Size::ZERO, a_size), a_val)?;
      .                           alloc.write_scalar(alloc_range(b_offset, b_size), b_val)
      .                       }
      .                   }
 31,184 ( 0.01%)      }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               #[inline(always)]
      .               pub fn copy_op(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
 33,201 ( 0.01%)          self.copy_op_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               /// Also, if you use this you are responsible for validating that things get copied at the
      .               /// right type.
 46,280 ( 0.01%)      fn copy_op_no_validate(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // We do NOT compare the types for equality, because well-typed code can
      .                   // actually "transmute" `&mut T` to `&T` in an assignment without a cast.
104,274 ( 0.03%)          if !mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       span_bug!(
      .                           self.cur_span(),
      .                           "type mismatch when copying!\nsrc: {:?},\ndest: {:?}",
      .                           src.layout.ty,
      .                           dest.layout.ty,
      .                       );
      .                   }
      .           
      .                   // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.
 28,973 ( 0.01%)          let src = match self.try_read_immediate(src)? {
      .                       Ok(src_val) => {
  3,962 ( 0.00%)                  assert!(!src.layout.is_unsized(), "cannot have unsized immediates");
      .                           // Yay, we got a value that we can write directly.
      .                           // FIXME: Add a check to make sure that if `src` is indirect,
      .                           // it does not overlap with `dest`.
 50,986 ( 0.01%)                  return self.write_immediate_no_validate(*src_val, dest);
      .                       }
 14,904 ( 0.00%)              Err(mplace) => mplace,
      .                   };
      .                   // Slow path, this does not fit into an immediate. Just memcpy.
      .                   trace!("copy_op: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // This interprets `src.meta` with the `dest` local's layout, if an unsized local
      .                   // is being initialized!
 24,219 ( 0.01%)          let (dest, size) = self.force_allocation_maybe_sized(dest, src.meta)?;
      .                   let size = size.unwrap_or_else(|| {
  5,580 ( 0.00%)              assert!(
      .                           !dest.layout.is_unsized(),
      .                           "Cannot copy into already initialized unsized place"
      .                       );
  1,860 ( 0.00%)              dest.layout.size
      .                   });
  1,863 ( 0.00%)          assert_eq!(src.meta, dest.meta, "Can only copy between equally-sized instances");
      .           
  1,863 ( 0.00%)          self.memory
  5,589 ( 0.00%)              .copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)
 46,280 ( 0.01%)      }
      .           
      .               /// Copies the data from an operand to a place. The layouts may disagree, but they must
      .               /// have the same size.
    232 ( 0.00%)      pub fn copy_op_transmute(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
    522 ( 0.00%)          if mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       // Fast path: Just use normal `copy_op`
      .                       return self.copy_op(src, dest);
      .                   }
      .                   // We still require the sizes to match.
      .                   if src.layout.size != dest.layout.size {
      .                       // FIXME: This should be an assert instead of an error, but if we transmute within an
      .                       // array length computation, `typeck` may not have yet been run and errored out. In fact
      .                       // most likey we *are* running `typeck` right now. Investigate whether we can bail out
-- line 878 ----------------------------------------
-- line 916 ----------------------------------------
      .               /// Ensures that a place is in memory, and returns where it is.
      .               /// If the place currently refers to a local that doesn't yet have a matching allocation,
      .               /// create such an allocation.
      .               /// This is essentially `force_to_memplace`.
      .               ///
      .               /// This supports unsized types and returns the computed size to avoid some
      .               /// redundant computation when copying; use `force_allocation` for a simpler, sized-only
      .               /// version.
 68,490 ( 0.02%)      pub fn force_allocation_maybe_sized(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .                   meta: MemPlaceMeta<M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {
 76,084 ( 0.02%)          let (mplace, size) = match place.place {
  5,782 ( 0.00%)              Place::Local { frame, local } => {
 11,544 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
 16,884 ( 0.00%)                      Ok(&mut local_val) => {
      .                                   // We need to make an allocation.
      .           
      .                                   // We need the layout of the local.  We can NOT use the layout we got,
      .                                   // that might e.g., be an inner field of a struct with `Scalar` layout,
      .                                   // that has different alignment than the outer field.
      .                                   let local_layout =
  9,422 ( 0.00%)                              self.layout_of_local(&self.stack()[frame], local, None)?;
      .                                   // We also need to support unsized types, and hence cannot use `allocate`.
  7,490 ( 0.00%)                          let (size, align) = self
      .                                       .size_and_align_of(&meta, &local_layout)?
      .                                       .expect("Cannot allocate for non-dyn-sized type");
 13,118 ( 0.00%)                          let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;
      .                                   let mplace = MemPlace { ptr: ptr.into(), align, meta };
  9,380 ( 0.00%)                          if let LocalValue::Live(Operand::Immediate(value)) = local_val {
      .                                       // Preserve old value.
      .                                       // We don't have to validate as we can assume the local
      .                                       // was already valid for its type.
      .                                       let mplace = MPlaceTy { mplace, layout: local_layout };
      .                                       self.write_immediate_to_mplace_no_validate(value, &mplace)?;
      .                                   }
      .                                   // Now we can call `access_mut` again, asserting it goes well,
      .                                   // and actually overwrite things.
 35,602 ( 0.01%)                          *M::access_local_mut(self, frame, local).unwrap().unwrap() =
      .                                       LocalValue::Live(Operand::Indirect(mplace));
 13,132 ( 0.00%)                          (mplace, Some(size))
      .                               }
 38,720 ( 0.01%)                      Err(mplace) => (mplace, None), // this already was an indirect local
      .                           }
      .                       }
 24,180 ( 0.01%)              Place::Ptr(mplace) => (mplace, None),
      .                   };
      .                   // Return with the original layout, so that the caller can go on
 91,296 ( 0.02%)          Ok((MPlaceTy { mplace, layout: place.layout }, size))
 60,880 ( 0.02%)      }
      .           
      .               #[inline(always)]
      .               pub fn force_allocation(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
 51,720 ( 0.01%)          Ok(self.force_allocation_maybe_sized(place, MemPlaceMeta::None)?.0)
      .               }
      .           
    176 ( 0.00%)      pub fn allocate(
      .                   &mut self,
      .                   layout: TyAndLayout<'tcx>,
      .                   kind: MemoryKind<M::MemoryKind>,
      .               ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {
    335 ( 0.00%)          let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;
    132 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    154 ( 0.00%)      }
      .           
      .               /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.
      .               pub fn allocate_str(
      .                   &mut self,
      .                   str: &str,
      .                   kind: MemoryKind<M::MemoryKind>,
      .                   mutbl: Mutability,
      .               ) -> MPlaceTy<'tcx, M::PointerTag> {
-- line 991 ----------------------------------------
-- line 1084 ----------------------------------------
      .                               self.write_immediate(*tag_val, &niche_dest)?;
      .                           }
      .                       }
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
    261 ( 0.00%)      pub fn raw_const_to_mplace(
      .                   &self,
      .                   raw: ConstAlloc<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // This must be an allocation in `tcx`
     87 ( 0.00%)          let _ = self.tcx.global_alloc(raw.alloc_id);
      .                   let ptr = self.global_base_pointer(Pointer::from(raw.alloc_id))?;
     93 ( 0.00%)          let layout = self.layout_of(raw.ty)?;
    174 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    203 ( 0.00%)      }
      .           
      .               /// Turn a place with a `dyn Trait` type into a place with the actual dynamic type.
      .               /// Also return some more information so drop doesn't have to run the same code twice.
      .               pub(super) fn unpack_dyn_trait(
      .                   &self,
      .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (ty::Instance<'tcx>, MPlaceTy<'tcx, M::PointerTag>)> {
      .                   let vtable = self.scalar_to_ptr(mplace.vtable()); // also sanity checks the type
-- line 1109 ----------------------------------------

 97,518 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
184,222 ( 0.05%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
 12,194 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 46,973 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
643,986 ( 0.16%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 92,406 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 92,406 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
101,108 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 17,816 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
 13,314 ( 0.00%)          self.hash = hash.hash;
 12,194 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
    175 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      9 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
117,792 ( 0.03%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

    350 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
513,127 ( 0.13%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
  2,367 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 72,178 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
  3,193 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
118,623 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 11,424 ( 0.00%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
413,565 ( 0.10%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  1,250 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    672 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
  3,962 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    490 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
    898 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

114,676 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .                       $(($idx:tt) -> $T:ident)+
      .                   }
      .               )+) => {
      .                   $(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn eq(&self, other: &($($T,)+)) -> bool {
  3,650 ( 0.00%)                      $(self.$idx == other.$idx)&&+
      .                           }
      .                           #[inline]
      .                           fn ne(&self, other: &($($T,)+)) -> bool {
      .                               $(self.$idx != other.$idx)||+
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
-- line 26 ----------------------------------------
-- line 30 ----------------------------------------
      .                       impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)
      .                               where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {
      .                               lexical_partial_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn lt(&self, other: &($($T,)+)) -> bool {
434,142 ( 0.11%)                      lexical_ord!(lt, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn le(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(le, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn ge(&self, other: &($($T,)+)) -> bool {
      1 ( 0.00%)                      lexical_ord!(ge, $(self.$idx, other.$idx),+)
      .                           }
      .                           #[inline]
      .                           fn gt(&self, other: &($($T,)+)) -> bool {
      .                               lexical_ord!(gt, $(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {
      .                           #[inline]
      .                           fn cmp(&self, other: &($($T,)+)) -> Ordering {
  1,573 ( 0.00%)                      lexical_cmp!($(self.$idx, other.$idx),+)
      .                           }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl<$($T:Default),+> Default for ($($T,)+) {
      .                           #[inline]
      .                           fn default() -> ($($T,)+) {
      .                               ($({ let x: $T = Default::default(); x},)+)
-- line 66 ----------------------------------------

  1,096 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/tuple.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs
--------------------------------------------------------------------------------
Ir               

-- line 49 ----------------------------------------
      .               /// particular allocation. It is primarily used to make as many allocations as possible
      .               /// read-only so LLVM can place them in const memory.
      .               mode: InternMode,
      .               /// This field stores whether we are *currently* inside an `UnsafeCell`. This can affect
      .               /// the intern mode of references we encounter.
      .               inside_unsafe_cell: bool,
      .           }
      .           
    248 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Hash, Eq)]
      .           enum InternMode {
      .               /// A static and its current mutability.  Below shared references inside a `static mut`,
      .               /// this is *immutable*, and below mutable references inside an `UnsafeCell`, this
      .               /// is *mutable*.
      .               Static(hir::Mutability),
      .               /// A `const`.
      .               Const,
      .           }
-- line 65 ----------------------------------------
-- line 69 ----------------------------------------
      .           struct IsStaticOrFn;
      .           
      .           /// Intern an allocation without looking at its children.
      .           /// `mode` is the mode of the environment where we found this pointer.
      .           /// `mutablity` is the mutability of the place to be interned; even if that says
      .           /// `immutable` things might become mutable if `ty` is not frozen.
      .           /// `ty` can be `None` if there is no potential interior mutability
      .           /// to account for (e.g. for vtables).
    372 ( 0.00%)  fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(
      .               ecx: &'rt mut InterpCx<'mir, 'tcx, M>,
      .               leftover_allocations: &'rt mut FxHashSet<AllocId>,
      .               alloc_id: AllocId,
      .               mode: InternMode,
      .               ty: Option<Ty<'tcx>>,
      .           ) -> Option<IsStaticOrFn> {
      .               trace!("intern_shallow {:?} with {:?}", alloc_id, mode);
      .               // remove allocation
     31 ( 0.00%)      let tcx = ecx.tcx;
    465 ( 0.00%)      let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {
    310 ( 0.00%)          Some(entry) => entry,
      .                   None => {
      .                       // Pointer not found in local memory map. It is either a pointer to the global
      .                       // map, or dangling.
      .                       // If the pointer is dangling (neither in local nor global memory), we leave it
      .                       // to validation to error -- it has the much better error messages, pointing out where
      .                       // in the value the dangling reference lies.
      .                       // The `delay_span_bug` ensures that we don't forget such a check in validation.
      .                       if tcx.get_global_alloc(alloc_id).is_none() {
-- line 96 ----------------------------------------
-- line 106 ----------------------------------------
      .               match kind {
      .                   MemoryKind::Stack
      .                   | MemoryKind::Machine(const_eval::MemoryKind::Heap)
      .                   | MemoryKind::CallerLocation => {}
      .               }
      .               // Set allocation mutability as appropriate. This is used by LLVM to put things into
      .               // read-only memory, and also by Miri when evaluating other globals that
      .               // access this one.
     62 ( 0.00%)      if let InternMode::Static(mutability) = mode {
      .                   // For this, we need to take into account `UnsafeCell`. When `ty` is `None`, we assume
      .                   // no interior mutability.
      .                   let frozen = ty.map_or(true, |ty| ty.is_freeze(ecx.tcx, ecx.param_env));
      .                   // For statics, allocation mutability is the combination of place mutability and
      .                   // type mutability.
      .                   // The entire allocation needs to be mutable if it contains an `UnsafeCell` anywhere.
      .                   let immutable = mutability == Mutability::Not && frozen;
      .                   if immutable {
-- line 122 ----------------------------------------
-- line 129 ----------------------------------------
      .                   // No matter what, *constants are never mutable*. Mutating them is UB.
      .                   // See const_eval::machine::MemoryExtra::can_access_statics for why
      .                   // immutability is so important.
      .           
      .                   // Validation will ensure that there is no `UnsafeCell` on an immutable allocation.
      .                   alloc.mutability = Mutability::Not;
      .               };
      .               // link the alloc id to the actual allocation
    713 ( 0.00%)      let alloc = tcx.intern_const_alloc(alloc);
      .               leftover_allocations.extend(alloc.relocations().iter().map(|&(_, alloc_id)| alloc_id));
    124 ( 0.00%)      tcx.set_alloc_id_memory(alloc_id, alloc);
      .               None
    248 ( 0.00%)  }
      .           
      .           impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>
      .               InternVisitor<'rt, 'mir, 'tcx, M>
      .           {
      .               fn intern_shallow(
      .                   &mut self,
      .                   alloc_id: AllocId,
      .                   mode: InternMode,
      .                   ty: Option<Ty<'tcx>>,
      .               ) -> Option<IsStaticOrFn> {
      8 ( 0.00%)          intern_shallow(self.ecx, self.leftover_allocations, alloc_id, mode, ty)
      .               }
      .           }
      .           
      .           impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>
      .               ValueVisitor<'mir, 'tcx, M> for InternVisitor<'rt, 'mir, 'tcx, M>
      .           {
      .               type V = MPlaceTy<'tcx>;
      .           
-- line 160 ----------------------------------------
-- line 164 ----------------------------------------
      .               }
      .           
      .               fn visit_aggregate(
      .                   &mut self,
      .                   mplace: &MPlaceTy<'tcx>,
      .                   fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,
      .               ) -> InterpResult<'tcx> {
      .                   // ZSTs cannot contain pointers, so we can skip them.
  7,440 ( 0.00%)          if mplace.layout.is_zst() {
      .                       return Ok(());
      .                   }
      .           
 23,322 ( 0.01%)          if let Some(def) = mplace.layout.ty.ty_adt_def() {
 33,824 ( 0.01%)              if Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type() {
      .                           // We are crossing over an `UnsafeCell`, we can mutate again. This means that
      .                           // References we encounter inside here are interned as pointing to mutable
      .                           // allocations.
      .                           // Remember the `old` value to handle nested `UnsafeCell`.
      .                           let old = std::mem::replace(&mut self.inside_unsafe_cell, true);
      .                           let walked = self.walk_aggregate(mplace, fields);
      .                           self.inside_unsafe_cell = old;
      .                           return walked;
      .                       }
      .                   }
      .           
 61,646 ( 0.02%)          self.walk_aggregate(mplace, fields)
      .               }
      .           
205,659 ( 0.05%)      fn visit_value(&mut self, mplace: &MPlaceTy<'tcx>) -> InterpResult<'tcx> {
      .                   // Handle Reference types, as these are the only relocations supported by const eval.
      .                   // Raw pointers (and boxes) are handled by the `leftover_relocations` logic.
 22,851 ( 0.01%)          let tcx = self.ecx.tcx;
 22,851 ( 0.01%)          let ty = mplace.layout.ty;
 68,559 ( 0.02%)          if let ty::Ref(_, referenced_ty, ref_mutability) = *ty.kind() {
     20 ( 0.00%)              let value = self.ecx.read_immediate(&(*mplace).into())?;
      6 ( 0.00%)              let mplace = self.ecx.ref_to_mplace(&value)?;
      2 ( 0.00%)              assert_eq!(mplace.layout.ty, referenced_ty);
      .                       // Handle trait object vtables.
      4 ( 0.00%)              if let ty::Dynamic(..) =
      8 ( 0.00%)                  tcx.struct_tail_erasing_lifetimes(referenced_ty, self.ecx.param_env).kind()
      .                       {
      .                           let ptr = self.ecx.scalar_to_ptr(mplace.meta.unwrap_meta());
      .                           if let Some(alloc_id) = ptr.provenance {
      .                               // Explicitly choose const mode here, since vtables are immutable, even
      .                               // if the reference of the fat pointer is mutable.
      .                               self.intern_shallow(alloc_id, InternMode::Const, None);
      .                           } else {
      .                               // Validation will error (with a better message) on an invalid vtable pointer.
      .                               // Let validation show the error message, but make sure it *does* error.
      .                               tcx.sess
      .                                   .delay_span_bug(tcx.span, "vtables pointers cannot be integer pointers");
      .                           }
      .                       }
      .                       // Check if we have encountered this pointer+layout combination before.
      .                       // Only recurse for allocation-backed pointers.
      6 ( 0.00%)              if let Some(alloc_id) = mplace.ptr.provenance {
      .                           // Compute the mode with which we intern this. Our goal here is to make as many
      .                           // statics as we can immutable so they can be placed in read-only memory by LLVM.
      8 ( 0.00%)                  let ref_mode = match self.mode {
      .                               InternMode::Static(mutbl) => {
      .                                   // In statics, merge outer mutability with reference mutability and
      .                                   // take into account whether we are in an `UnsafeCell`.
      .           
      .                                   // The only way a mutable reference actually works as a mutable reference is
      .                                   // by being in a `static mut` directly or behind another mutable reference.
      .                                   // If there's an immutable reference or we are inside a `static`, then our
      .                                   // mutable reference is equivalent to an immutable one. As an example:
-- line 230 ----------------------------------------
-- line 254 ----------------------------------------
      .                               }
      .                               InternMode::Const => {
      .                                   // Ignore `UnsafeCell`, everything is immutable.  Validity does some sanity
      .                                   // checking for mutable references that we encounter -- they must all be
      .                                   // ZST.
      .                                   InternMode::Const
      .                               }
      .                           };
      6 ( 0.00%)                  match self.intern_shallow(alloc_id, ref_mode, Some(referenced_ty)) {
      .                               // No need to recurse, these are interned already and statics may have
      .                               // cycles, so we don't want to recurse there
      .                               Some(IsStaticOrFn) => {}
      .                               // intern everything referenced by this value. The mutability is taken from the
      .                               // reference. It is checked above that mutable references only happen in
      .                               // `static mut`
     18 ( 0.00%)                      None => self.ref_tracking.track((mplace, ref_mode), || ()),
      .                           }
      .                       }
      .                       Ok(())
      .                   } else {
      .                       // Not a reference -- proceed recursively.
      .                       self.walk_value(mplace)
      .                   }
205,659 ( 0.05%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Hash, Eq)]
      .           pub enum InternKind {
      .               /// The `mutability` of the static, ignoring the type which may have interior mutability.
      .               Static(hir::Mutability),
      .               Constant,
      .               Promoted,
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
      .           }
      .           
      .           /// Intern `ret` and everything it references.
      .           ///
      .           /// This *cannot raise an interpreter error*.  Doing so is left to validation, which
      .           /// tracks where in the value we are and thus can show much better error messages.
      .           /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures
      .           /// are hard errors.
    232 ( 0.00%)  #[tracing::instrument(level = "debug", skip(ecx))]
    232 ( 0.00%)  pub fn intern_const_alloc_recursive<
      .               'mir,
      .               'tcx: 'mir,
      .               M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>,
      .           >(
      .               ecx: &mut InterpCx<'mir, 'tcx, M>,
      .               intern_kind: InternKind,
      .               ret: &MPlaceTy<'tcx>,
      .           ) -> Result<(), ErrorReported> {
     58 ( 0.00%)      let tcx = ecx.tcx;
    203 ( 0.00%)      let base_intern_mode = match intern_kind {
      .                   InternKind::Static(mutbl) => InternMode::Static(mutbl),
      .                   // `Constant` includes array lengths.
      .                   InternKind::Constant | InternKind::Promoted => InternMode::Const,
      .               };
      .           
      .               // Type based interning.
      .               // `ref_tracking` tracks typed references we have already interned and still need to crawl for
      .               // more typed information inside them.
      .               // `leftover_allocations` collects *all* allocations we see, because some might not
      .               // be available in a typed way. They get interned at the end.
      .               let mut ref_tracking = RefTracking::empty();
      .               let leftover_allocations = &mut FxHashSet::default();
      .           
      .               // start with the outermost allocation
    116 ( 0.00%)      intern_shallow(
      .                   ecx,
      .                   leftover_allocations,
      .                   // The outermost allocation must exist, because we allocated it with
      .                   // `Memory::allocate`.
     29 ( 0.00%)          ret.ptr.provenance.unwrap(),
      .                   base_intern_mode,
     29 ( 0.00%)          Some(ret.layout.ty),
      .               );
      .           
      .               ref_tracking.track((*ret, base_intern_mode), || ());
      .           
    310 ( 0.00%)      while let Some(((mplace, mode), _)) = ref_tracking.todo.pop() {
    310 ( 0.00%)          let res = InternVisitor {
      .                       ref_tracking: &mut ref_tracking,
      .                       ecx,
      .                       mode,
      .                       leftover_allocations,
      .                       inside_unsafe_cell: false,
      .                   }
      .                   .visit_value(&mplace);
      .                   // We deliberately *ignore* interpreter errors here.  When there is a problem, the remaining
      .                   // references are "leftover"-interned, and later validation will show a proper error
      .                   // and point at the right part of the value causing the problem.
     62 ( 0.00%)          match res {
      .                       Ok(()) => {}
      .                       Err(error) => {
      .                           ecx.tcx.sess.delay_span_bug(
      .                               ecx.tcx.span,
      .                               &format!(
      .                                   "error during interning should later cause validation failure: {}",
      .                                   error
      .                               ),
-- line 352 ----------------------------------------
-- line 354 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               // Intern the rest of the allocations as mutable. These might be inside unions, padding, raw
      .               // pointers, ... So we can't intern them according to their type rules
      .           
      .               let mut todo: Vec<_> = leftover_allocations.iter().cloned().collect();
      6 ( 0.00%)      while let Some(alloc_id) = todo.pop() {
      .                   if let Some((_, mut alloc)) = ecx.memory.alloc_map.remove(&alloc_id) {
      .                       // We can't call the `intern_shallow` method here, as its logic is tailored to safe
      .                       // references and a `leftover_allocations` set (where we only have a todo-list here).
      .                       // So we hand-roll the interning logic here again.
      .                       match intern_kind {
      .                           // Statics may contain mutable allocations even behind relocations.
      .                           // Even for immutable statics it would be ok to have mutable allocations behind
      .                           // raw pointers, e.g. for `static FOO: *const AtomicUsize = &AtomicUsize::new(42)`.
-- line 370 ----------------------------------------
-- line 396 ----------------------------------------
      .                       }
      .                       let alloc = tcx.intern_const_alloc(alloc);
      .                       tcx.set_alloc_id_memory(alloc_id, alloc);
      .                       for &(_, alloc_id) in alloc.relocations().iter() {
      .                           if leftover_allocations.insert(alloc_id) {
      .                               todo.push(alloc_id);
      .                           }
      .                       }
      4 ( 0.00%)          } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {
      .                       // Codegen does not like dangling pointers, and generally `tcx` assumes that
      .                       // all allocations referenced anywhere actually exist. So, make sure we error here.
      .                       ecx.tcx.sess.span_err(ecx.tcx.span, "encountered dangling pointer in final constant");
      .                       return Err(ErrorReported);
      8 ( 0.00%)          } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {
      .                       // We have hit an `AllocId` that is neither in local or global memory and isn't
      .                       // marked as dangling by local memory.  That should be impossible.
      .                       span_bug!(ecx.tcx.span, "encountered unknown alloc id {:?}", alloc_id);
      .                   }
      .               }
      .               Ok(())
      .           }
      .           
-- line 417 ----------------------------------------

  4,422 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/intern.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,100 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,700 ( 0.00%)          let tcx = self.tcx();
303,290 ( 0.08%)          DecodeContext {
 30,766 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,700 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 17,078 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 28,134 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,100 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 76,353 ( 0.02%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 32,475 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 85,599 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 17,405 ( 0.00%)          T::decode(&mut dcx)
 97,239 ( 0.02%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     35 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     10 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  9,513 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
105,533 ( 0.03%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 47,318 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 46,578 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  7,881 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 15,762 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 13,761 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 24,936 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 47,318 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
125,270 ( 0.03%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
109,263 ( 0.03%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 15,609 ( 0.00%)          let tcx = self.tcx();
      .           
 15,609 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 49,996 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  3,110 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
140,481 ( 0.04%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 15,760 ( 0.00%)          self.opaque = old_opaque;
  3,152 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 57,128 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    119 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 98,466 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    238 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 64,440 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 16,110 ( 0.00%)          let cdata = decoder.cdata();
 16,110 ( 0.00%)          let sess = decoder.sess.unwrap();
 32,220 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    104 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 80,550 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  2,184 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    312 ( 0.00%)          let local_cdata = decoder.cdata();
    312 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
     35 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    175 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    175 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    350 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  2,496 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
128,256 ( 0.03%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 16,032 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 32,064 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 48,066 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 33,509 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      7 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     14 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
      7 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 48,066 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 63,968 ( 0.02%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  2,928 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  1,465 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  1,458 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  2,930 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 64,088 ( 0.02%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
144,288 ( 0.04%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 15,212 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 13,483 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 16,393 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    291 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     97 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    485 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    194 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    388 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    291 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    485 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     63 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      8 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     32 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     67 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     62 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      7 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      2 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      4 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
      9 ( 0.00%)      }
      .           
 11,814 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  8,782 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  4,529 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    135 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 15,112 ( 0.00%)      }
      .           
     92 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,006 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    184 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 15,222 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 60,888 ( 0.02%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 45,666 ( 0.01%)      }
      .           
  5,145 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  3,885 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  2,940 ( 0.00%)      }
      .           
    828 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,464 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    460 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
     16 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
     10 ( 0.00%)              ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
      .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
      6 ( 0.00%)                      helper_attrs,
      .                           )
      .                       }
      .                       ProcMacro::Attr { name, client } => {
      .                           (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
      .                       }
      .                       ProcMacro::Bang { name, client } => {
      .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
      .                       }
      .                   };
      .           
      5 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
     12 ( 0.00%)          SyntaxExtension::new(
      .                       sess,
      5 ( 0.00%)              kind,
      .                       self.get_span(id, sess),
      4 ( 0.00%)              helper_attrs,
      3 ( 0.00%)              self.root.edition,
      1 ( 0.00%)              Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    403 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    124 ( 0.00%)          match self.kind(item_id) {
     31 ( 0.00%)              EntryKind::Trait(data) => {
    186 ( 0.00%)                  let data = data.decode((self, sess));
    496 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     62 ( 0.00%)                      data.unsafety,
     62 ( 0.00%)                      data.paren_sugar,
     62 ( 0.00%)                      data.has_auto_impl,
     62 ( 0.00%)                      data.is_marker,
     31 ( 0.00%)                      data.skip_array_during_method_dispatch,
     31 ( 0.00%)                      data.specialization_kind,
    124 ( 0.00%)                      self.def_path_hash(item_id),
     31 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    279 ( 0.00%)      }
      .           
    126 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
     56 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
     70 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     52 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     28 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    308 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
     56 ( 0.00%)              data.discr,
     84 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     28 ( 0.00%)                      did: self.local_def_id(index),
     56 ( 0.00%)                      name: self.item_ident(index, sess).name,
     56 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     14 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    126 ( 0.00%)      }
      .           
    210 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     56 ( 0.00%)          let kind = self.kind(item_id);
     28 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     66 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     10 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
     34 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     96 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    206 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     98 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    860 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    860 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      8 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     95 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,577 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,205 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    160 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    205 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    162 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,891 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    108 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 41,298 ( 0.01%)          match self.kind(id) {
 34,415 ( 0.01%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 20,418 ( 0.01%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     64 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     13 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    755 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 82,103 ( 0.02%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,255 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     96 ( 0.00%)          tcx.arena.alloc_from_iter(
     64 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     64 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    288 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    192 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    384 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    768 ( 0.00%)              for child_index in children.decode((self, sess)) {
  4,860 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,047 ( 0.00%)                      let kind = self.def_kind(child_index);
    698 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,332 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     17 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    492 ( 0.00%)          match self.kind(id) {
     36 ( 0.00%)              EntryKind::Mod(exports) => {
    802 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     76 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
     16 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,645 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     15 ( 0.00%)          self.root
      .                       .tables
      .                       .mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     95 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
      8 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    580 ( 0.00%)          match self.kind(id) {
    464 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    336 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    144 ( 0.00%)              tcx.arena.alloc_from_iter(
     48 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  1,464 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    854 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
    876 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    111 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
    777 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     22 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  2,196 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  1,098 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     50 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    601 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    260 ( 0.00%)                  let vdata = data.decode(self);
    237 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    320 ( 0.00%)      }
      .           
    108 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    381 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
     81 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    325 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    920 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    160 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     54 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     20 ( 0.00%)          tcx.arena.alloc_from_iter(
     25 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    128 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  8,928 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    992 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,316 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    856 ( 0.00%)              tcx.arena.alloc_from_iter(
    428 ( 0.00%)                  impls
      .                               .decode(self)
  7,301 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  7,936 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    116 ( 0.00%)          let def_key = self.def_key(id);
    145 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    252 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     64 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    160 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
      .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
      .               }
      .           
      .               fn exported_symbols(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
     18 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
      .               }
      .           
      .               fn get_rendered_const(self, id: DefIndex) -> String {
      .                   match self.kind(id) {
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     48 ( 0.00%)          match self.kind(id) {
      8 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     27 ( 0.00%)          let constness = match self.kind(id) {
      6 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1508 ----------------------------------------
      .                       EntryKind::Fn(data) => data.decode(self).asyncness,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
      .                       _ => bug!("asyncness: expected function kind"),
      .                   }
      .               }
      .           
      .               fn is_foreign_item(self, id: DefIndex) -> bool {
    220 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
    209 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    205 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 14,518 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
  4,156 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  5,520 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 16,592 ( 0.00%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      8 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  1,078 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    660 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  3,773 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  4,312 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 32,044 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 32,044 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,005 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 32,037 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     48 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,621 ( 0.00%)                          mut name,
  3,606 ( 0.00%)                          src_hash,
    601 ( 0.00%)                          start_pos,
  1,202 ( 0.00%)                          end_pos,
  3,005 ( 0.00%)                          mut lines,
  3,005 ( 0.00%)                          mut multibyte_chars,
  3,606 ( 0.00%)                          mut non_narrow_chars,
  3,005 ( 0.00%)                          mut normalized_pos,
  3,606 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,202 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
772,388 ( 0.19%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,740 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    930 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,818 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,813 ( 0.00%)                          name,
  4,207 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,202 ( 0.00%)                          self.cnum,
  3,005 ( 0.00%)                          lines,
  3,606 ( 0.00%)                          multibyte_chars,
  3,005 ( 0.00%)                          non_narrow_chars,
  2,404 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,803 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    384 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     96 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     96 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     32 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    736 ( 0.00%)          CrateMetadata {
     32 ( 0.00%)              blob,
     96 ( 0.00%)              root,
    128 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    128 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    224 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    128 ( 0.00%)              cnum_map,
    160 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    384 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    288 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    165 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
     24 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    184 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      6 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    180 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  9,922 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  4,672 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

375,083 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
  1,267 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      2 ( 0.00%)      pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
  1,398 ( 0.00%)      Spanned { node: t, span: sp }
    480 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
     19 ( 0.00%)      respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
      .           
      .           /// An abstraction over the fs operations used by the Parser.
      .           pub trait FileLoader {
-- line 99 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     16 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     16 ( 0.00%)      }
      .           
      4 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      6 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     54 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,202 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  3,030 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    606 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,636 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 176 ----------------------------------------
      .               // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.
      .               path_mapping: FilePathMapping,
      .           
      .               /// The algorithm used for hashing the contents of each source file.
      .               hash_kind: SourceFileHashAlgorithm,
      .           }
      .           
      .           impl SourceMap {
      3 ( 0.00%)      pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
     12 ( 0.00%)              path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      3 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
     23 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
     10 ( 0.00%)          &self.path_mapping
     10 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     20 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     22 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      8 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     36 ( 0.00%)          Ok(self.new_source_file(filename, src))
     18 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     60 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
    180 ( 0.00%)      }
      .           
     20 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     25 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    606 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    606 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,818 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     40 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     60 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     45 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     65 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
     10 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     30 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     30 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     45 ( 0.00%)                      filename,
     15 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,808 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
386,194 ( 0.10%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    870 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    620 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,803 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,808 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,409 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    110 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
     40 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
     40 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
     20 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
     20 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
     90 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    280 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    280 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     80 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     40 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
    160 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
    120 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    480 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    360 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
    440 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
    160 ( 0.00%)          match self.span_to_snippet(sp) {
    160 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     80 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
    200 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
    360 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     80 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  1,320 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    440 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  1,100 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    363 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     33 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
    132 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
     66 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
     66 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    297 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  1,716 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    143 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
    770 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
    990 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    220 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    440 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    110 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    440 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    330 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
    660 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    440 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    440 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  1,287 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  1,500 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    300 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    600 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  1,500 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  1,818 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,212 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  2,424 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    280 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
     32 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
     16 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      8 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      3 ( 0.00%)      pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      3 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     24 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
    144 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     80 ( 0.00%)          (path, false)
    144 ( 0.00%)      }
      .           
     40 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
     10 ( 0.00%)          match file {
      4 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     28 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      2 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     20 ( 0.00%)                  (FileName::Real(realfile), mapped)
      8 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
     33 ( 0.00%)              other => (other.clone(), false),
      .                   }
     24 ( 0.00%)      }
      .           }

  6,063 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// indices mapping from the entry hash to its index.
      .               indices: RawTable<usize>,
      .               /// entries is a dense vec of entries in their order.
      .               entries: Vec<Bucket<K, V>>,
      .           }
      .           
      .           #[inline(always)]
      .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
 90,884 ( 0.02%)      move |&i| entries[i].hash.get()
      .           }
      .           
      .           #[inline]
      .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
      .               key: &'a Q,
      .               entries: &'a [Bucket<K, V>],
      .           ) -> impl Fn(&usize) -> bool + 'a {
 15,794 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
      .           }
      .           
      .           #[inline]
      .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
      .               table.erase_entry(hash.get(), move |&i| i == index);
      .           }
      .           
      .           #[inline]
-- line 50 ----------------------------------------
-- line 132 ----------------------------------------
      .                   IndexMapCore {
      .                       indices: RawTable::with_capacity(n),
      .                       entries: Vec::with_capacity(n),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn len(&self) -> usize {
    591 ( 0.00%)          self.indices.len()
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn capacity(&self) -> usize {
      .                   cmp::min(self.indices.capacity(), self.entries.capacity())
      .               }
      .           
      .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
      .           
      .               pub(crate) fn truncate(&mut self, len: usize) {
      .                   if len < self.len() {
      .                       self.erase_indices(len, self.entries.len());
      .                       self.entries.truncate(len);
      .                   }
      .               }
      .           
    207 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
     69 ( 0.00%)          let range = simplify_range(range, self.entries.len());
      .                   self.erase_indices(range.start, range.end);
      .                   self.entries.drain(range)
    184 ( 0.00%)      }
      .           
      .               #[cfg(feature = "rayon")]
      .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
      .               where
      .                   K: Send,
      .                   V: Send,
      .                   R: RangeBounds<usize>,
      .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
      .               /// Reserve capacity for `additional` more key-value pairs.
      .               pub(crate) fn reserve(&mut self, additional: usize) {
      .                   self.indices.reserve(additional, get_hash(&self.entries));
      .                   self.reserve_entries();
      .               }
      .           
      .               /// Reserve entries capacity to match the indices
      .               fn reserve_entries(&mut self) {
  2,294 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
      .                   self.entries.reserve_exact(additional);
      .               }
      .           
      .               /// Shrink the capacity of the map as much as possible.
      .               pub(crate) fn shrink_to_fit(&mut self) {
      .                   self.indices.shrink_to(0, get_hash(&self.entries));
      .                   self.entries.shrink_to_fit();
      .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Append a key-value pair, *without* checking whether it already exists,
      .               /// and return the pair's new index.
      .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 12,927 ( 0.00%)          let i = self.entries.len();
      .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
 26,070 ( 0.01%)          if i == self.entries.capacity() {
      .                       // Reserve our own capacity synced to the indices,
      .                       // rather than letting `Vec::push` just double it.
      .                       self.reserve_entries();
      .                   }
 82,673 ( 0.02%)          self.entries.push(Bucket { hash, key, value });
      .                   i
      .               }
      .           
      .               /// Return the index in `entries` where an equivalent key can be found
    636 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
    190 ( 0.00%)          let eq = equivalent(key, &self.entries);
      .                   self.indices.get(hash.get(), eq).copied()
    642 ( 0.00%)      }
      .           
    874 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
      .               where
      .                   K: Eq,
      .               {
     10 ( 0.00%)          match self.get_index_of(hash, &key) {
      .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
     80 ( 0.00%)              None => (self.push(hash, key, value), None),
      .                   }
    812 ( 0.00%)      }
      .           
      .               /// Remove an entry by shifting all entries that follow it
      .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
      .                   let eq = equivalent(key, &self.entries);
      .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
      .                   let (init, shifted_entries) = self.entries.split_at(end);
      .                   let (start_entries, erased_entries) = init.split_at(start);
      .           
      .                   let erased = erased_entries.len();
      .                   let shifted = shifted_entries.len();
      .                   let half_capacity = self.indices.buckets() / 2;
      .           
      .                   // Use a heuristic between different strategies
     46 ( 0.00%)          if erased == 0 {
      .                       // Degenerate case, nothing to do
      .                   } else if start + shifted < half_capacity && start < erased {
      .                       // Reinsert everything, as there are few kept indices
      .                       self.indices.clear();
      .           
      .                       // Reinsert stable indices
      .                       for (i, entry) in enumerate(start_entries) {
      .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 468 ----------------------------------------
      .                       Entry::Vacant(entry) => entry.insert(default),
      .                   }
      .               }
      .           
      .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
 11,040 ( 0.00%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
      .               where
      .                   F: FnOnce() -> V,
      .               {
  2,760 ( 0.00%)          match self {
    542 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
    970 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
      .                   }
 11,040 ( 0.00%)      }
      .           
      .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
      .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
      .               /// an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
      .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
      .                       x => x,
      .                   }
      .               }
      .           
      .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
 99,134 ( 0.02%)      pub fn or_default(self) -> &'a mut V
      .               where
      .                   V: Default,
      .               {
 28,324 ( 0.01%)          match self {
  2,417 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 35,235 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
      .                   }
113,296 ( 0.03%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match *self {
      .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
      .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
      .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
      .           
      .               /// Return the index where the key-value pair will be inserted.
      .               pub fn index(&self) -> usize {
      .                   self.map.len()
      .               }
      .           
      .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
      .               /// to the value.
  2,526 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 36,299 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
     15 ( 0.00%)          &mut self.map.entries[i].value
  3,040 ( 0.00%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple(stringify!(VacantEntry))
      .                       .field(self.key())
      .                       .finish()
      .               }
-- line 653 ----------------------------------------

 92,220 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .           ///
      .           /// `Decodable` can still be implemented in cases where `Decodable` is required
      .           /// by a trait bound.
      .           pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {
      .               fn decode(d: &mut D) -> &'tcx Self;
      .           }
      .           
      .           /// Encode the given value or a previously cached shorthand.
  2,784 ( 0.00%)  pub fn encode_with_shorthand<'tcx, E, T, M>(
      .               encoder: &mut E,
      .               value: &T,
      .               cache: M,
      .           ) -> Result<(), E::Error>
      .           where
      .               E: TyEncoder<'tcx>,
      .               M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,
      .               T: EncodableWithShorthand<'tcx, E>,
-- line 86 ----------------------------------------
-- line 90 ----------------------------------------
      .               let existing_shorthand = cache(encoder).get(value).copied();
      .               if let Some(shorthand) = existing_shorthand {
      .                   return encoder.emit_usize(shorthand);
      .               }
      .           
      .               let variant = value.variant();
      .           
      .               let start = encoder.position();
    279 ( 0.00%)      variant.encode(encoder)?;
    186 ( 0.00%)      let len = encoder.position() - start;
      .           
      .               // The shorthand encoding uses the same usize as the
      .               // discriminant, with an offset so they can't conflict.
      .               let discriminant = intrinsics::discriminant_value(variant);
      .               assert!(SHORTHAND_OFFSET > discriminant as usize);
      .           
    186 ( 0.00%)      let shorthand = start + SHORTHAND_OFFSET;
      .           
      .               // Get the number of bits that leb128 could fit
      .               // in the same space as the fully encoded type.
    186 ( 0.00%)      let leb128_bits = len * 7;
      .           
      .               // Check that the shorthand is a not longer than the
      .               // full encoding itself, i.e., it's an obvious win.
    651 ( 0.00%)      if leb128_bits >= 64 || (shorthand as u64) < (1 << leb128_bits) {
      .                   cache(encoder).insert(*value, shorthand);
      .               }
      .           
      .               Ok(())
  2,278 ( 0.00%)  }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for Ty<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
  1,517 ( 0.00%)          encode_with_shorthand(e, self, TyEncoder::type_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.bound_vars().encode(e)?;
     24 ( 0.00%)          encode_with_shorthand(e, &self.skip_binder(), TyEncoder::predicate_shorthands)
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Predicate<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.kind().encode(e)
      .               }
      .           }
-- line 138 ----------------------------------------
-- line 141 ----------------------------------------
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   e.encode_alloc_id(self)
      .               }
      .           }
      .           
      .           macro_rules! encodable_via_deref {
      .               ($($t:ty),+) => {
      .                   $(impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for $t {
    215 ( 0.00%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     43 ( 0.00%)                  (**self).encode(e)
    195 ( 0.00%)              }
      .                   })*
      .               }
      .           }
      .           
      .           encodable_via_deref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               ty::Region<'tcx>,
      .               &'tcx mir::Body<'tcx>,
-- line 159 ----------------------------------------
-- line 176 ----------------------------------------
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>;
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R;
      .           
      .               fn positioned_at_shorthand(&self) -> bool {
 25,054 ( 0.01%)          (self.peek_byte() & (SHORTHAND_OFFSET as u8)) != 0
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> AllocId;
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx T
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
  5,554 ( 0.00%)      decoder.tcx().arena.alloc(Decodable::decode(decoder))
      .           }
      .           
      .           #[inline]
      .           fn decode_arena_allocable_slice<'tcx, D, T: ArenaAllocatable<'tcx> + Decodable<D>>(
      .               decoder: &mut D,
      .           ) -> &'tcx [T]
      .           where
      .               D: TyDecoder<'tcx>,
      .           {
      .               decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable<D>>::decode(decoder))
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {
      .               #[allow(rustc::usage_of_ty_tykind)]
 99,984 ( 0.03%)      fn decode(decoder: &mut D) -> Ty<'tcx> {
      .                   // Handle shorthands first, if we have a usize > 0x80.
 24,996 ( 0.01%)          if decoder.positioned_at_shorthand() {
      .                       let pos = decoder.read_usize();
 31,218 ( 0.01%)              assert!(pos >= SHORTHAND_OFFSET);
 46,827 ( 0.01%)              let shorthand = pos - SHORTHAND_OFFSET;
      .           
 46,827 ( 0.01%)              decoder.cached_ty_for_shorthand(shorthand, |decoder| {
      .                           decoder.with_position(shorthand, Ty::decode)
      .                       })
      .                   } else {
  9,387 ( 0.00%)              let tcx = decoder.tcx();
 18,774 ( 0.00%)              tcx.mk_ty(ty::TyKind::decode(decoder))
      .                   }
 99,984 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
    348 ( 0.00%)      fn decode(decoder: &mut D) -> ty::Binder<'tcx, ty::PredicateKind<'tcx>> {
      .                   let bound_vars = Decodable::decode(decoder);
      .                   // Handle shorthands first, if we have a usize > 0x80.
      .                   ty::Binder::bind_with_vars(
     58 ( 0.00%)              if decoder.positioned_at_shorthand() {
      .                           let pos = decoder.read_usize();
     84 ( 0.00%)                  assert!(pos >= SHORTHAND_OFFSET);
     42 ( 0.00%)                  let shorthand = pos - SHORTHAND_OFFSET;
      .           
      .                           decoder.with_position(shorthand, ty::PredicateKind::decode)
      .                       } else {
     48 ( 0.00%)                  ty::PredicateKind::decode(decoder)
      .                       },
      .                       bound_vars,
      .                   )
    348 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Predicate<'tcx> {
      .               fn decode(decoder: &mut D) -> ty::Predicate<'tcx> {
    174 ( 0.00%)          let predicate_kind = Decodable::decode(decoder);
     58 ( 0.00%)          decoder.tcx().mk_predicate(predicate_kind)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
  9,783 ( 0.00%)          let tcx = decoder.tcx();
      .                   tcx.mk_substs(
 22,610 ( 0.01%)              (0..len).map::<ty::subst::GenericArg<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for mir::Place<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let local: mir::Local = Decodable::decode(decoder);
      .                   let len = decoder.read_usize();
  4,278 ( 0.00%)          let projection = decoder.tcx().mk_place_elems(
  3,146 ( 0.00%)              (0..len).map::<mir::PlaceElem<'tcx>, _>(|_| Decodable::decode(decoder)),
      .                   );
      .                   mir::Place { local, projection }
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Region<'tcx> {
 13,300 ( 0.00%)      fn decode(decoder: &mut D) -> Self {
  5,700 ( 0.00%)          decoder.tcx().mk_region(Decodable::decode(decoder))
 15,200 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for CanonicalVarInfos<'tcx> {
      .               fn decode(decoder: &mut D) -> Self {
      .                   let len = decoder.read_usize();
      .                   let interned: Vec<CanonicalVarInfo<'tcx>> =
      .                       (0..len).map(|_| Decodable::decode(decoder)).collect();
      .                   decoder.tcx().intern_canonical_var_infos(interned.as_slice())
-- line 287 ----------------------------------------
-- line 308 ----------------------------------------
      .                       }
      .                   })*
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    874 ( 0.00%)          decoder.tcx().mk_type_list((0..len).map::<Ty<'tcx>, _>(|_| Decodable::decode(decoder)))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>
      .               for ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>
      .           {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
     15 ( 0.00%)          decoder.tcx().mk_poly_existential_predicates(
     94 ( 0.00%)              (0..len).map::<ty::Binder<'tcx, _>, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::Const<'tcx> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
 20,054 ( 0.01%)          decoder.tcx().mk_const(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [ty::ValTree<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
-- line 341 ----------------------------------------
-- line 344 ----------------------------------------
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for Allocation {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().intern_const_alloc(Decodable::decode(decoder))
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [(ty::Predicate<'tcx>, Span)] {
  1,337 ( 0.00%)      fn decode(decoder: &mut D) -> &'tcx Self {
    382 ( 0.00%)          decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
  1,910 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for [thir::abstract_const::Node<'tcx>] {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   decoder.tcx().arena.alloc_from_iter(
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
-- line 364 ----------------------------------------
-- line 370 ----------------------------------------
      .                       (0..decoder.read_usize()).map(|_| Decodable::decode(decoder)).collect::<Vec<_>>(),
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<ty::BoundVariableKind> {
      .               fn decode(decoder: &mut D) -> &'tcx Self {
      .                   let len = decoder.read_usize();
    205 ( 0.00%)          decoder.tcx().mk_bound_variable_kinds(
    150 ( 0.00%)              (0..len).map::<ty::BoundVariableKind, _>(|_| Decodable::decode(decoder)),
      .                   )
      .               }
      .           }
      .           
      .           impl_decodable_via_ref! {
      .               &'tcx ty::TypeckResults<'tcx>,
      .               &'tcx ty::List<Ty<'tcx>>,
      .               &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,
-- line 387 ----------------------------------------
-- line 394 ----------------------------------------
      .               &'tcx ty::AdtDef
      .           }
      .           
      .           #[macro_export]
      .           macro_rules! __impl_decoder_methods {
      .               ($($name:ident -> $ty:ty;)*) => {
      .                   $(
      .                       #[inline]
209,983 ( 0.05%)              fn $name(&mut self) -> $ty {
492,909 ( 0.12%)                  self.opaque.$name()
340,658 ( 0.09%)              }
      .                   )*
      .               }
      .           }
      .           
      .           macro_rules! impl_arena_allocatable_decoder {
      .               ([]$args:tt) => {};
      .               ([decode $(, $attrs:ident)*]
      .                [$name:ident: $ty:ty]) => {
-- line 412 ----------------------------------------
-- line 483 ----------------------------------------
      .               }
      .           }
      .           
      .           macro_rules! impl_binder_encode_decode {
      .               ($($t:ty),+ $(,)?) => {
      .                   $(
      .                       impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for ty::Binder<'tcx, $t> {
      .                           fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     36 ( 0.00%)                      self.bound_vars().encode(e)?;
      .                               self.as_ref().skip_binder().encode(e)
      .                           }
      .                       }
      .                       impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, $t> {
    630 ( 0.00%)                  fn decode(decoder: &mut D) -> Self {
      .                               let bound_vars = Decodable::decode(decoder);
      .                               ty::Binder::bind_with_vars(Decodable::decode(decoder), bound_vars)
    630 ( 0.00%)                  }
      .                       }
      .                   )*
      .               }
      .           }
      .           
      .           impl_binder_encode_decode! {
      .               &'tcx ty::List<Ty<'tcx>>,
      .               ty::FnSig<'tcx>,
-- line 507 ----------------------------------------

 11,920 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/codec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  306,182 ( 0.08%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   26,935 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
2,953,341 ( 0.74%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   36,202 ( 0.01%)          self.stride += Group::WIDTH;
   36,202 ( 0.01%)          self.pos += self.stride;
   29,767 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   11,490 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   22,990 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    6,882 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   29,445 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    9,192 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   23,994 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   31,685 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
       26 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
       24 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       10 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,464 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
      732 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
      732 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    1,464 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      240 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    1,224 ( 0.00%)          self.erase_no_drop(&item);
       20 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   88,630 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      142 ( 0.00%)          match self.find(hash, eq) {
      300 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    5,988 ( 0.00%)              None => None,
        .                   }
  144,082 ( 0.04%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    1,320 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   58,237 ( 0.01%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   18,783 ( 0.00%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   44,935 ( 0.01%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   29,992 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  495,218 ( 0.12%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      503 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  308,001 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        4 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  364,511 ( 0.09%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  132,872 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       12 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   99,654 ( 0.02%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       50 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   81,494 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      392 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  162,806 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  132,070 ( 0.03%)          self.table.items += 1;
        .                   bucket
       74 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    1,005 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      803 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    1,418 ( 0.00%)              eq(self.bucket(index).as_ref())
      369 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       97 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    1,112 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      728 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
      133 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      538 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   81,881 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    7,642 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    1,428 ( 0.00%)          let allocation = self.into_allocation();
    1,071 ( 0.00%)          RawIntoIter {
    1,785 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      507 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      154 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   50,034 ( 0.01%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   37,527 ( 0.01%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   10,098 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   22,104 ( 0.01%)          Ok(Self {
        .                       ctrl,
    9,431 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   27,474 ( 0.01%)      }
        .           
        .               #[inline]
    5,808 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,494 ( 0.00%)          if capacity == 0 {
      694 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   17,397 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    3,582 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    5,808 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   26,907 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   26,907 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   53,814 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  204,922 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  595,901 ( 0.15%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  275,622 ( 0.07%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    3,304 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  415,255 ( 0.10%)              for bit in group.match_byte(h2_hash) {
  729,214 ( 0.18%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  648,463 ( 0.16%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  162,324 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  724,000 ( 0.18%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,847,977 ( 0.71%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  385,001 ( 0.10%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  307,996 ( 0.08%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  583,384 ( 0.15%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  194,434 ( 0.05%)          *self.ctrl(index) = ctrl;
  194,437 ( 0.05%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   25,205 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   19,935 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
   97,833 ( 0.02%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,101 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   11,957 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    5,515 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   11,032 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   11,030 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   23,064 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    5,515 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,737 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  107,559 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    5,515 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,549 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      448 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      688 ( 0.00%)          self.items = 0;
      448 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   26,673 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  106,692 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  133,280 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  106,692 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       80 ( 0.00%)      fn clone(&self) -> Self {
       10 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
       90 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   60,255 ( 0.02%)      fn drop(&mut self) {
   42,047 ( 0.01%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   64,288 ( 0.02%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,428 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,785 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   15,448 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    1,796 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    2,995 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   14,530 ( 0.00%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      397 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      148 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      836 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      462 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,317 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    5,300 ( 0.00%)          if let Some(b) = self.iter.next() {
   16,372 ( 0.00%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    4,634 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      946 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    2,353 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      236 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      111 ( 0.00%)      fn next(&mut self) -> Option<T> {
       39 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      249 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        1 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,535,280 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,976 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   53,191 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      525 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      378 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   44,086 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      623 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       32 ( 0.00%)          self.position += bytes;
       32 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    4,572 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,286 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   32,595 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  173,202 ( 0.04%)          read_leb128!(self, read_u32_leb128)
   65,190 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  569,737 ( 0.14%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   81,391 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  162,804 ( 0.04%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,052,110 ( 0.51%)          let value = self.data[self.position];
  400,603 ( 0.10%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  258,249 ( 0.06%)      fn read_usize(&mut self) -> usize {
  258,249 ( 0.06%)          read_leb128!(self, read_usize_leb128)
  516,498 ( 0.13%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    8,160 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   31,795 ( 0.01%)          let len = self.read_usize();
  148,584 ( 0.04%)          let sentinel = self.data[self.position + len];
   37,146 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   92,865 ( 0.02%)          self.position += len + 1;
   39,654 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      132 ( 0.00%)          let start = self.position;
      633 ( 0.00%)          self.position += s.len();
      132 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  558,660 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
357,966 ( 0.09%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
268,473 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 25,748 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 38,622 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 95,917 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 22,496 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 44,992 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    3,661 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   37,745 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       64 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   28,749 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    9,572 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    3,205 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
4,013,805 ( 1.01%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   37,908 ( 0.01%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      503 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      231 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       87 ( 0.00%)                  while let Some(x) = self.next() {
    4,268 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   13,577 ( 0.00%)                  while let Some(x) = self.next() {
   76,228 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        8 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      790 ( 0.00%)                  while let Some(x) = self.next() {
   14,041 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    5,072 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    2,123 ( 0.00%)                  while let Some(x) = self.next() {
    7,010 ( 0.00%)                      if let Some(y) = f(x) {
      329 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      460 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   11,136 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    4,707 ( 0.00%)                  while let Some(x) = self.next_back() {
   67,332 ( 0.02%)                      i -= 1;
   57,354 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    2,266 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
       64 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       96 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   63,443 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  344,002 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   29,192 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,186 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,009 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,400 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        2 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,317 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,182 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
        8 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        8 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       12 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       12 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,154 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        5 ( 0.00%)      pub lo: BytePos,
        5 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       15 ( 0.00%)      pub ctxt: SyntaxContext,
        5 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   10,172 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       42 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    4,928 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    3,696 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    4,928 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    1,206 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
      804 ( 0.00%)      }
        .               #[inline]
    1,624 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,624 ( 0.00%)      }
        .               #[inline]
    4,113 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    2,742 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      420 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      252 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 618 ----------------------------------------
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      126 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       84 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
       40 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
       20 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
       44 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
      750 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      500 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      201 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       40 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       62 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       30 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        6 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       24 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      308 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      264 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      220 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
-- line 736 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   17,127 ( 0.00%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    3,065 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       49 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       39 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   10,556 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   14,013 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      198 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      126 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      144 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      165 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       30 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      105 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      135 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       70 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       10 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        8 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      528 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      308 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,611 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    1,074 ( 0.00%)          let mut span = self.data();
      857 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    1,611 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,752 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      135 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      118 ( 0.00%)          let mut span = self.data();
      131 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      247 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      150 ( 0.00%)      }
        .           
        .               #[inline]
    2,136 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,869 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      315 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        5 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       42 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      315 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      315 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        5 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
        4 ( 0.00%)          MultiSpan::from_spans(spans)
        5 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       77 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      310 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      155 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      465 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,202 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,404 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       15 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       15 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,409 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      601 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  933,946 ( 0.23%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,202 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,611 ( 0.00%)              SourceFile {
    4,808 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,404 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,404 ( 0.00%)                  lines,
    2,404 ( 0.00%)                  multibyte_chars,
    2,404 ( 0.00%)                  non_narrow_chars,
    2,404 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,409 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       55 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       15 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       10 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       10 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       15 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       60 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       10 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       85 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       55 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       20 ( 0.00%)              lines,
       20 ( 0.00%)              multibyte_chars,
       20 ( 0.00%)              non_narrow_chars,
       20 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      280 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       40 ( 0.00%)          if matches!(
       80 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       40 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      360 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      577 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    1,982 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      379 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    1,028 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      738 ( 0.00%)          assert!(line_index < self.lines.len());
    1,008 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       12 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      662 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       50 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       45 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    2,497 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      373 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    5,363 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,652,093 ( 0.41%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  880,740 ( 0.22%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  101,478 ( 0.03%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   21,168 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    4,276 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   16,892 ( 0.00%)          let span = self.data_untracked();
    5,316 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    9,072 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    6,120 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    5,904 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   11,808 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    5,904 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    2,952 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    2,952 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   24,192 ( 0.01%)      }
        .           }

1,276,685 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      118 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       59 ( 0.00%)              from_str_radix(src, radix)
      177 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   17,400 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  107,383 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  203,084 ( 0.05%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,001,014 ( 0.25%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  213,440 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    2,393 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
       48 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   10,129 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   41,465 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  428,689 ( 0.11%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  305,305 ( 0.08%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
  874,760 ( 0.22%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  331,414 ( 0.08%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   33,787 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  235,397 ( 0.06%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      222 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      520 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,438 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    7,227 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    2,413 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    4,300 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

    8,843 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::iter;
      .           use std::num::NonZeroUsize;
      .           use std::ops::Bound;
      .           
      .           use rand::{seq::SliceRandom, SeedableRng};
      .           use rand_xoshiro::Xoshiro128StarStar;
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      6 ( 0.00%)      *providers =
      .                   ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };
      .           }
      .           
      .           pub trait IntegerExt {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;
      .               fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;
      .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer;
      .               fn from_uint_ty<C: HasDataLayout>(cx: &C, uty: ty::UintTy) -> Integer;
-- line 39 ----------------------------------------
-- line 59 ----------------------------------------
      .                       (I16, true) => tcx.types.i16,
      .                       (I32, true) => tcx.types.i32,
      .                       (I64, true) => tcx.types.i64,
      .                       (I128, true) => tcx.types.i128,
      .                   }
      .               }
      .           
      .               /// Gets the Integer type from an attr::IntType.
     20 ( 0.00%)      fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer {
      .                   let dl = cx.data_layout();
      .           
     50 ( 0.00%)          match ity {
      .                       attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) => I8,
      .                       attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) => I16,
      .                       attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) => I32,
      .                       attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) => I64,
      .                       attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => I128,
      .                       attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => {
     10 ( 0.00%)                  dl.ptr_sized_integer()
      .                       }
      .                   }
     20 ( 0.00%)      }
      .           
      .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer {
      .                   match ity {
      .                       ty::IntTy::I8 => I8,
      .                       ty::IntTy::I16 => I16,
      .                       ty::IntTy::I32 => I32,
      .                       ty::IntTy::I64 => I64,
      .                       ty::IntTy::I128 => I128,
     20 ( 0.00%)              ty::IntTy::Isize => cx.data_layout().ptr_sized_integer(),
      .                   }
      .               }
      .               fn from_uint_ty<C: HasDataLayout>(cx: &C, ity: ty::UintTy) -> Integer {
      .                   match ity {
      .                       ty::UintTy::U8 => I8,
      .                       ty::UintTy::U16 => I16,
      .                       ty::UintTy::U32 => I32,
      .                       ty::UintTy::U64 => I64,
      .                       ty::UintTy::U128 => I128,
      2 ( 0.00%)              ty::UintTy::Usize => cx.data_layout().ptr_sized_integer(),
      .                   }
      .               }
      .           
      .               /// Finds the appropriate Integer type and signedness for the given
      .               /// signed discriminant range and `#[repr]` attribute.
      .               /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but
      .               /// that shouldn't affect anything, other than maybe debuginfo.
     15 ( 0.00%)      fn repr_discr<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   repr: &ReprOptions,
      .                   min: i128,
      .                   max: i128,
      .               ) -> (Integer, bool) {
      .                   // Theoretically, negative values could be larger in unsigned representation
      .                   // than the unsigned representation of the signed minimum. However, if there
      .                   // are any negative values, the only valid unsigned representation is u128
      .                   // which can fit all i128 values, so the result remains unaffected.
      .                   let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));
      .                   let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));
      .           
     15 ( 0.00%)          if let Some(ity) = repr.int {
      .                       let discr = Integer::from_attr(&tcx, ity);
      .                       let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };
      .                       if discr < fit {
      .                           bug!(
      .                               "Integer::repr_discr: `#[repr]` hint too small for \
      .                                 discriminant range of enum `{}",
      .                               ty
      .                           )
      .                       }
      .                       return (discr, ity.is_signed());
      .                   }
      .           
     10 ( 0.00%)          let at_least = if repr.c() {
      .                       // This is usually I32, however it can be different on some platforms,
      .                       // notably hexagon and arm-none/thumb-none
      .                       tcx.data_layout().c_enum_min_size
      .                   } else {
      .                       // repr(Rust) enums try to be as small as possible
      .                       I8
      .                   };
      .           
      .                   // If there are no negative values, we can use the unsigned fit.
     45 ( 0.00%)          if min >= 0 {
      .                       (cmp::max(unsigned_fit, at_least), false)
      .                   } else {
      .                       (cmp::max(signed_fit, at_least), true)
      .                   }
     30 ( 0.00%)      }
      .           }
      .           
      .           pub trait PrimitiveExt {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
      .               fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
      .           }
      .           
      .           impl PrimitiveExt for Primitive {
-- line 157 ----------------------------------------
-- line 191 ----------------------------------------
      .           
      .           /// The maximum supported number of lanes in a SIMD vector.
      .           ///
      .           /// This value is selected based on backend support:
      .           /// * LLVM does not appear to have a vector width limit.
      .           /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.
      .           pub const MAX_SIMD_LANES: u64 = 1 << 0xF;
      .           
     13 ( 0.00%)  #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub enum LayoutError<'tcx> {
      .               Unknown(Ty<'tcx>),
      .               SizeOverflow(Ty<'tcx>),
      .               NormalizationFailure(Ty<'tcx>, NormalizationError<'tcx>),
      .           }
      .           
      .           impl<'tcx> fmt::Display for LayoutError<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 207 ----------------------------------------
-- line 215 ----------------------------------------
      .                           "unable to determine layout for `{}` because `{}` cannot be normalized",
      .                           t,
      .                           e.get_type_for_failure()
      .                       ),
      .                   }
      .               }
      .           }
      .           
  2,096 ( 0.00%)  #[instrument(skip(tcx, query), level = "debug")]
      .           fn layout_of<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,
      .           ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {
      .               ty::tls::with_related_context(tcx, move |icx| {
    131 ( 0.00%)          let (param_env, ty) = query.into_parts();
      .                   debug!(?ty);
      .           
    524 ( 0.00%)          if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {
      .                       tcx.sess.fatal(&format!("overflow representing the type `{}`", ty));
      .                   }
      .           
      .                   // Update the ImplicitCtxt to increase the layout_depth
  1,179 ( 0.00%)          let icx = ty::tls::ImplicitCtxt { layout_depth: icx.layout_depth + 1, ..icx.clone() };
      .           
      .                   ty::tls::enter_context(&icx, |_| {
    393 ( 0.00%)              let param_env = param_env.with_reveal_all_normalized(tcx);
      .                       let unnormalized_ty = ty;
      .           
      .                       // FIXME: We might want to have two different versions of `layout_of`:
      .                       // One that can be called after typecheck has completed and can use
      .                       // `normalize_erasing_regions` here and another one that can be called
      .                       // before typecheck has completed and uses `try_normalize_erasing_regions`.
      .                       let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {
      .                           Ok(t) => t,
      .                           Err(normalization_error) => {
      .                               return Err(LayoutError::NormalizationFailure(ty, normalization_error));
      .                           }
      .                       };
      .           
    131 ( 0.00%)              if ty != unnormalized_ty {
      .                           // Ensure this layout is also cached for the normalized type.
      .                           return tcx.layout_of(param_env.and(ty));
      .                       }
      .           
    504 ( 0.00%)              let cx = LayoutCx { tcx, param_env };
      .           
    378 ( 0.00%)              let layout = cx.layout_of_uncached(ty)?;
      .                       let layout = TyAndLayout { ty, layout };
      .           
      .                       cx.record_layout_for_printing(layout);
      .           
      .                       // Type-level uninhabitedness should always imply ABI uninhabitedness.
    125 ( 0.00%)              if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
      2 ( 0.00%)                  assert!(layout.abi.is_uninhabited());
      .                       }
      .           
    375 ( 0.00%)              Ok(layout)
      .                   })
      .               })
      .           }
      .           
      .           pub struct LayoutCx<'tcx, C> {
      .               pub tcx: C,
      .               pub param_env: ty::ParamEnv<'tcx>,
      .           }
-- line 279 ----------------------------------------
-- line 291 ----------------------------------------
      .           // Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`.
      .           // This is used to go between `memory_index` (source field order to memory order)
      .           // and `inverse_memory_index` (memory order to source field order).
      .           // See also `FieldsShape::Arbitrary::memory_index` for more details.
      .           // FIXME(eddyb) build a better abstraction for permutations, if possible.
      .           fn invert_mapping(map: &[u32]) -> Vec<u32> {
      .               let mut inverse = vec![0; map.len()];
      .               for i in 0..map.len() {
    172 ( 0.00%)          inverse[map[i] as usize] = i as u32;
      .               }
      .               inverse
      .           }
      .           
      .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
     63 ( 0.00%)      fn scalar_pair(&self, a: Scalar, b: Scalar) -> Layout {
      .                   let dl = self.data_layout();
     49 ( 0.00%)          let b_align = b.value.align(dl);
     56 ( 0.00%)          let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);
      .                   let b_offset = a.value.size(dl).align_to(b_align.abi);
      .                   let size = (b_offset + b.value.size(dl)).align_to(align.abi);
      .           
      .                   // HACK(nox): We iter on `b` and then `a` because `max_by_key`
      .                   // returns the last maximum.
     84 ( 0.00%)          let largest_niche = Niche::from_scalar(dl, b_offset, b)
      .                       .into_iter()
     70 ( 0.00%)              .chain(Niche::from_scalar(dl, Size::ZERO, a))
      .                       .max_by_key(|niche| niche.available(dl));
      .           
    133 ( 0.00%)          Layout {
      .                       variants: Variants::Single { index: VariantIdx::new(0) },
      .                       fields: FieldsShape::Arbitrary {
     14 ( 0.00%)                  offsets: vec![Size::ZERO, b_offset],
     14 ( 0.00%)                  memory_index: vec![0, 1],
      .                       },
     91 ( 0.00%)              abi: Abi::ScalarPair(a, b),
     70 ( 0.00%)              largest_niche,
      .                       align,
      .                       size,
      .                   }
     56 ( 0.00%)      }
      .           
    948 ( 0.00%)      fn univariant_uninterned(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   fields: &[TyAndLayout<'_>],
      .                   repr: &ReprOptions,
      .                   kind: StructKind,
      .               ) -> Result<Layout, LayoutError<'tcx>> {
      .                   let dl = self.data_layout();
    316 ( 0.00%)          let pack = repr.pack;
     79 ( 0.00%)          if pack.is_some() && repr.align.is_some() {
      .                       self.tcx.sess.delay_span_bug(DUMMY_SP, "struct cannot be packed and aligned");
      .                       return Err(LayoutError::Unknown(ty));
      .                   }
      .           
    316 ( 0.00%)          let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };
      .           
      .                   let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();
      .           
      .                   let optimize = !repr.inhibit_struct_field_reordering_opt();
     63 ( 0.00%)          if optimize {
      .                       let end =
    441 ( 0.00%)                  if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };
      .                       let optimizing = &mut inverse_memory_index[..end];
     63 ( 0.00%)              let field_align = |f: &TyAndLayout<'_>| {
    192 ( 0.00%)                  if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }
      .                       };
      .           
      .                       // If `-Z randomize-layout` was enabled for the type definition we can shuffle
      .                       // the field ordering to try and catch some code making assumptions about layouts
      .                       // we don't guarantee
      .                       if repr.can_randomize_type_layout() {
      .                           // `ReprOptions.layout_seed` is a deterministic seed that we can use to
      .                           // randomize field ordering with
      .                           let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);
      .           
      .                           // Shuffle the ordering of the fields
      .                           optimizing.shuffle(&mut rng);
      .           
      .                       // Otherwise we just leave things alone and actually optimize the type's fields
      .                       } else {
    126 ( 0.00%)                  match kind {
      .                               StructKind::AlwaysSized | StructKind::MaybeUnsized => {
    275 ( 0.00%)                          optimizing.sort_by_key(|&x| {
      .                                       // Place ZSTs first to avoid "interesting offsets",
      .                                       // especially with only one or two non-ZST fields.
    168 ( 0.00%)                              let f = &fields[x as usize];
     24 ( 0.00%)                              (!f.is_zst(), cmp::Reverse(field_align(f)))
      .                                   });
      .                               }
      .           
      .                               StructKind::Prefixed(..) => {
      .                                   // Sort in ascending alignment so that the layout stays optimal
      .                                   // regardless of the prefix
     40 ( 0.00%)                          optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));
      .                               }
      .                           }
      .           
      .                           // FIXME(Kixiron): We can always shuffle fields within a given alignment class
      .                           //                 regardless of the status of `-Z randomize-layout`
      .                       }
      .                   }
      .           
-- line 393 ----------------------------------------
-- line 399 ----------------------------------------
      .                   // produce `memory_index` (see `invert_mapping`).
      .           
      .                   let mut sized = true;
      .                   let mut offsets = vec![Size::ZERO; fields.len()];
      .                   let mut offset = Size::ZERO;
      .                   let mut largest_niche = None;
      .                   let mut largest_niche_available = 0;
      .           
    237 ( 0.00%)          if let StructKind::Prefixed(prefix_size, prefix_align) = kind {
      .                       let prefix_align =
    161 ( 0.00%)                  if let Some(pack) = pack { prefix_align.min(pack) } else { prefix_align };
      .                       align = align.max(AbiAndPrefAlign::new(prefix_align));
      .                       offset = prefix_size.align_to(prefix_align);
      .                   }
      .           
     46 ( 0.00%)          for &i in &inverse_memory_index {
    584 ( 0.00%)              let field = fields[i as usize];
     92 ( 0.00%)              if !sized {
      .                           self.tcx.sess.delay_span_bug(
      .                               DUMMY_SP,
      .                               &format!(
      .                                   "univariant: field #{} of `{}` comes after unsized field",
      .                                   offsets.len(),
      .                                   ty
      .                               ),
      .                           );
      .                       }
      .           
    230 ( 0.00%)              if field.is_unsized() {
      .                           sized = false;
      .                       }
      .           
      .                       // Invariant: offset < dl.obj_size_bound() <= 1<<61
     92 ( 0.00%)              let field_align = if let Some(pack) = pack {
      .                           field.align.min(AbiAndPrefAlign::new(pack))
      .                       } else {
    138 ( 0.00%)                  field.align
      .                       };
      .                       offset = offset.align_to(field_align.abi);
      .                       align = align.max(field_align);
      .           
      .                       debug!("univariant offset: {:?} field: {:#?}", offset, field);
     92 ( 0.00%)              offsets[i as usize] = offset;
      .           
     46 ( 0.00%)              if !repr.hide_niche() {
    255 ( 0.00%)                  if let Some(mut niche) = field.largest_niche {
      .                               let available = niche.available(dl);
     36 ( 0.00%)                      if available > largest_niche_available {
      .                                   largest_niche_available = available;
      .                                   niche.offset += offset;
     64 ( 0.00%)                          largest_niche = Some(niche);
      .                               }
      .                           }
      .                       }
      .           
     46 ( 0.00%)              offset = offset.checked_add(field.size, dl).ok_or(LayoutError::SizeOverflow(ty))?;
      .                   }
      .           
    186 ( 0.00%)          if let Some(repr_align) = repr.align {
      .                       align = align.max(AbiAndPrefAlign::new(repr_align));
      .                   }
      .           
      .                   debug!("univariant min_size: {:?}", offset);
      .                   let min_size = offset;
      .           
      .                   // As stated above, inverse_memory_index holds field indices by increasing offset.
      .                   // This makes it an already-sorted view of the offsets vec.
      .                   // To invert it, consider:
      .                   // If field 5 has offset 0, offsets[0] is 5, and memory_index[5] should be 0.
      .                   // Field 5 would be the first element, so memory_index is i:
      .                   // Note: if we didn't optimize, it's already right.
      .           
      .                   let memory_index =
    270 ( 0.00%)              if optimize { invert_mapping(&inverse_memory_index) } else { inverse_memory_index };
      .           
      .                   let size = min_size.align_to(align.abi);
    158 ( 0.00%)          let mut abi = Abi::Aggregate { sized };
      .           
      .                   // Unpack newtype ABIs and find scalar pairs.
    316 ( 0.00%)          if sized && size.bytes() > 0 {
      .                       // All other fields must be ZSTs.
      .                       let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.is_zst());
      .           
      6 ( 0.00%)              match (non_zst_fields.next(), non_zst_fields.next(), non_zst_fields.next()) {
      .                           // We have exactly one non-ZST field.
      .                           (Some((i, field)), None, None) => {
      .                               // Field fills the struct and it has a scalar or scalar pair ABI.
    112 ( 0.00%)                      if offsets[i].bytes() == 0 && align.abi == field.align.abi && size == field.size
      .                               {
    108 ( 0.00%)                          match field.abi {
      .                                       // For plain scalars, or vectors of them, we can't unpack
      .                                       // newtypes for `#[repr(C)]`, as that affects C ABIs.
      2 ( 0.00%)                              Abi::Scalar(_) | Abi::Vector { .. } if optimize => {
      .                                           abi = field.abi;
      .                                       }
      .                                       // But scalar pairs are Rust-specific and get
      .                                       // treated as aggregates by C ABIs anyway.
      .                                       Abi::ScalarPair(..) => {
      .                                           abi = field.abi;
      .                                       }
      .                                       _ => {}
-- line 499 ----------------------------------------
-- line 503 ----------------------------------------
      .           
      .                           // Two non-ZST fields, and they're both scalars.
      .                           (
      .                               Some((i, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(a), .. }, .. })),
      .                               Some((j, &TyAndLayout { layout: &Layout { abi: Abi::Scalar(b), .. }, .. })),
      .                               None,
      .                           ) => {
      .                               // Order by the memory placement, not source order.
      9 ( 0.00%)                      let ((i, a), (j, b)) =
      7 ( 0.00%)                          if offsets[i] < offsets[j] { ((i, a), (j, b)) } else { ((j, b), (i, a)) };
     11 ( 0.00%)                      let pair = self.scalar_pair(a, b);
      2 ( 0.00%)                      let pair_offsets = match pair.fields {
      2 ( 0.00%)                          FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
      1 ( 0.00%)                              assert_eq!(memory_index, &[0, 1]);
      .                                       offsets
      .                                   }
      .                                   _ => bug!(),
      .                               };
      9 ( 0.00%)                      if offsets[i] == pair_offsets[0]
      1 ( 0.00%)                          && offsets[j] == pair_offsets[1]
      .                                   && align == pair.align
      .                                   && size == pair.size
      .                               {
      .                                   // We can use `ScalarPair` only when it matches our
      .                                   // already computed layout (including `#[repr(C)]`).
     14 ( 0.00%)                          abi = pair.abi;
      .                               }
      1 ( 0.00%)                  }
      .           
      .                           _ => {}
      .                       }
      .                   }
      .           
     46 ( 0.00%)          if fields.iter().any(|f| f.abi.is_uninhabited()) {
      .                       abi = Abi::Uninhabited;
      .                   }
      .           
  2,528 ( 0.00%)          Ok(Layout {
      .                       variants: Variants::Single { index: VariantIdx::new(0) },
    790 ( 0.00%)              fields: FieldsShape::Arbitrary { offsets, memory_index },
      .                       abi,
    869 ( 0.00%)              largest_niche,
      .                       align,
      .                       size,
      .                   })
    790 ( 0.00%)      }
      .           
  1,260 ( 0.00%)      fn layout_of_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx Layout, LayoutError<'tcx>> {
    252 ( 0.00%)          let tcx = self.tcx;
    126 ( 0.00%)          let param_env = self.param_env;
      .                   let dl = self.data_layout();
    138 ( 0.00%)          let scalar_unit = |value: Primitive| {
      3 ( 0.00%)              let size = value.size(dl);
    106 ( 0.00%)              assert!(size.bits() <= 128);
     59 ( 0.00%)              Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_int_max() } }
     12 ( 0.00%)          };
      .                   let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));
      .           
      .                   let univariant = |fields: &[TyAndLayout<'_>], repr: &ReprOptions, kind| {
    609 ( 0.00%)              Ok(tcx.intern_layout(self.univariant_uninterned(ty, fields, repr, kind)?))
      .                   };
      .                   debug_assert!(!ty.has_infer_types_or_consts());
      .           
    892 ( 0.00%)          Ok(match *ty.kind() {
      .                       // Basic scalars.
      .                       ty::Bool => tcx.intern_layout(Layout::scalar(
      .                           self,
     12 ( 0.00%)                  Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },
      .                       )),
      .                       ty::Char => tcx.intern_layout(Layout::scalar(
      .                           self,
      6 ( 0.00%)                  Scalar {
      .                               value: Int(I32, false),
      .                               valid_range: WrappingRange { start: 0, end: 0x10FFFF },
      .                           },
      .                       )),
     15 ( 0.00%)              ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),
     35 ( 0.00%)              ty::Uint(ity) => scalar(Int(Integer::from_uint_ty(dl, ity), false)),
      .                       ty::Float(fty) => scalar(match fty {
      .                           ty::FloatTy::F32 => F32,
      .                           ty::FloatTy::F64 => F64,
      .                       }),
      .                       ty::FnPtr(_) => {
      .                           let mut ptr = scalar_unit(Pointer);
      .                           ptr.valid_range = ptr.valid_range.with_start(1);
      6 ( 0.00%)                  tcx.intern_layout(Layout::scalar(self, ptr))
      .                       }
      .           
      .                       // The never type.
      3 ( 0.00%)              ty::Never => tcx.intern_layout(Layout {
      .                           variants: Variants::Single { index: VariantIdx::new(0) },
      .                           fields: FieldsShape::Primitive,
      .                           abi: Abi::Uninhabited,
      .                           largest_niche: None,
      1 ( 0.00%)                  align: dl.i8_align,
      .                           size: Size::ZERO,
      .                       }),
      .           
      .                       // Potentially-wide pointers.
     42 ( 0.00%)              ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
      .                           let mut data_ptr = scalar_unit(Pointer);
      .                           if !ty.is_unsafe_ptr() {
      .                               data_ptr.valid_range = data_ptr.valid_range.with_start(1);
      .                           }
      .           
      .                           let pointee = tcx.normalize_erasing_regions(param_env, pointee);
    288 ( 0.00%)                  if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {
    527 ( 0.00%)                      return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
      .                           }
      .           
     20 ( 0.00%)                  let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);
     20 ( 0.00%)                  let metadata = match unsized_part.kind() {
      .                               ty::Foreign(..) => {
      .                                   return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
      .                               }
     16 ( 0.00%)                      ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),
      .                               ty::Dynamic(..) => {
      6 ( 0.00%)                          let mut vtable = scalar_unit(Pointer);
      6 ( 0.00%)                          vtable.valid_range = vtable.valid_range.with_start(1);
     24 ( 0.00%)                          vtable
      .                               }
      .                               _ => return Err(LayoutError::Unknown(unsized_part)),
      .                           };
      .           
      .                           // Effectively a (ptr, meta) tuple.
    105 ( 0.00%)                  tcx.intern_layout(self.scalar_pair(data_ptr, metadata))
      .                       }
      .           
      .                       // Arrays and slices.
     33 ( 0.00%)              ty::Array(element, mut count) => {
     11 ( 0.00%)                  if count.has_projections() {
      .                               count = tcx.normalize_erasing_regions(param_env, count);
      .                               if count.has_projections() {
      .                                   return Err(LayoutError::Unknown(ty));
      .                               }
      .                           }
      .           
     44 ( 0.00%)                  let count = count.try_eval_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;
     55 ( 0.00%)                  let element = self.layout_of(element)?;
      .                           let size =
     55 ( 0.00%)                      element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;
      .           
      .                           let abi =
     88 ( 0.00%)                      if count != 0 && tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
      .                                   Abi::Uninhabited
      .                               } else {
      .                                   Abi::Aggregate { sized: true }
      .                               };
      .           
    121 ( 0.00%)                  let largest_niche = if count != 0 { element.largest_niche } else { None };
      .           
    242 ( 0.00%)                  tcx.intern_layout(Layout {
      .                               variants: Variants::Single { index: VariantIdx::new(0) },
     11 ( 0.00%)                      fields: FieldsShape::Array { stride: element.size, count },
      .                               abi,
      .                               largest_niche,
     11 ( 0.00%)                      align: element.align,
      .                               size,
      .                           })
      .                       }
      .                       ty::Slice(element) => {
      .                           let element = self.layout_of(element)?;
      .                           tcx.intern_layout(Layout {
      .                               variants: Variants::Single { index: VariantIdx::new(0) },
      .                               fields: FieldsShape::Array { stride: element.size, count: 0 },
      .                               abi: Abi::Aggregate { sized: false },
      .                               largest_niche: None,
      .                               align: element.align,
      .                               size: Size::ZERO,
      .                           })
      .                       }
      6 ( 0.00%)              ty::Str => tcx.intern_layout(Layout {
      .                           variants: Variants::Single { index: VariantIdx::new(0) },
      .                           fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },
      .                           abi: Abi::Aggregate { sized: false },
      .                           largest_niche: None,
      1 ( 0.00%)                  align: dl.i8_align,
      .                           size: Size::ZERO,
      .                       }),
      .           
      .                       // Odd unit types.
     52 ( 0.00%)              ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,
      .                       ty::Dynamic(..) | ty::Foreign(..) => {
     26 ( 0.00%)                  let mut unit = self.univariant_uninterned(
      .                               ty,
      .                               &[],
      4 ( 0.00%)                      &ReprOptions::default(),
      .                               StructKind::AlwaysSized,
      .                           )?;
      4 ( 0.00%)                  match unit.abi {
      2 ( 0.00%)                      Abi::Aggregate { ref mut sized } => *sized = false,
      .                               _ => bug!(),
      .                           }
     14 ( 0.00%)                  tcx.intern_layout(unit)
      .                       }
      .           
      .                       ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, substs)?,
      .           
      .                       ty::Closure(_, ref substs) => {
      .                           let tys = substs.as_closure().upvar_tys();
      .                           univariant(
      .                               &tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,
      .                               &ReprOptions::default(),
      .                               StructKind::AlwaysSized,
      .                           )?
      .                       }
      .           
      3 ( 0.00%)              ty::Tuple(tys) => {
      .                           let kind =
      9 ( 0.00%)                      if tys.len() == 0 { StructKind::AlwaysSized } else { StructKind::MaybeUnsized };
      .           
      3 ( 0.00%)                  univariant(
      6 ( 0.00%)                      &tys.iter()
      .                                   .map(|k| self.layout_of(k.expect_ty()))
      .                                   .collect::<Result<Vec<_>, _>>()?,
      6 ( 0.00%)                      &ReprOptions::default(),
      .                               kind,
      .                           )?
      .                       }
      .           
      .                       // SIMD vector types.
     62 ( 0.00%)              ty::Adt(def, substs) if def.repr.simd() => {
      .                           if !def.is_struct() {
      .                               // Should have yielded E0517 by now.
      .                               tcx.sess.delay_span_bug(
      .                                   DUMMY_SP,
      .                                   "#[repr(simd)] was applied to an ADT that is not a struct",
      .                               );
      .                               return Err(LayoutError::Unknown(ty));
      .                           }
-- line 732 ----------------------------------------
-- line 833 ----------------------------------------
      .                               abi: Abi::Vector { element: e_abi, count: e_len },
      .                               largest_niche: e_ly.largest_niche,
      .                               size,
      .                               align,
      .                           })
      .                       }
      .           
      .                       // ADTs.
     62 ( 0.00%)              ty::Adt(def, substs) => {
      .                           // Cache the field layouts.
     62 ( 0.00%)                  let variants = def
      .                               .variants
      .                               .iter()
      .                               .map(|v| {
      .                                   v.fields
      .                                       .iter()
    335 ( 0.00%)                              .map(|field| self.layout_of(field.ty(tcx, substs)))
      .                                       .collect::<Result<Vec<_>, _>>()
      .                               })
      .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
      .           
     31 ( 0.00%)                  if def.is_union() {
      .                               if def.repr.pack.is_some() && def.repr.align.is_some() {
      .                                   self.tcx.sess.delay_span_bug(
      .                                       tcx.def_span(def.did),
      .                                       "union cannot be packed and aligned",
      .                                   );
      .                                   return Err(LayoutError::Unknown(ty));
      .                               }
      .           
-- line 862 ----------------------------------------
-- line 921 ----------------------------------------
      .                           }
      .           
      .                           // A variant is absent if it's uninhabited and only has ZST fields.
      .                           // Present uninhabited variants only require space for their fields,
      .                           // but *not* an encoding of the discriminant (e.g., a tag value).
      .                           // See issue #49298 for more details on the need to leave space
      .                           // for non-ZST uninhabited data (mostly partial initialization).
      .                           let absent = |fields: &[TyAndLayout<'_>]| {
     47 ( 0.00%)                      let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());
      .                               let is_zst = fields.iter().all(|f| f.is_zst());
      8 ( 0.00%)                      uninhabited && is_zst
      8 ( 0.00%)                  };
      .                           let (present_first, present_second) = {
      .                               let mut present_variants = variants
      .                                   .iter_enumerated()
    140 ( 0.00%)                          .filter_map(|(i, v)| if absent(v) { None } else { Some(i) });
      .                               (present_variants.next(), present_variants.next())
      .                           };
     62 ( 0.00%)                  let present_first = match present_first {
      .                               Some(present_first) => present_first,
      .                               // Uninhabited because it has no variants, or only absent ones.
      1 ( 0.00%)                      None if def.is_enum() => {
      6 ( 0.00%)                          return Ok(tcx.layout_of(param_env.and(tcx.types.never))?.layout);
      .                               }
      .                               // If it's a struct, still compute a layout so that we can still compute the
      .                               // field offsets.
      .                               None => VariantIdx::new(0),
      .                           };
      .           
     30 ( 0.00%)                  let is_struct = !def.is_enum() ||
      .                               // Only one variant is present.
      5 ( 0.00%)                      (present_second.is_none() &&
      .                               // Representation optimizations are allowed.
      .                               !def.repr.inhibit_enum_layout_opt());
      .                           if is_struct {
      .                               // Struct, or univariant enum equivalent to a struct.
      .                               // (Typechecking will reject discriminant-sizing attrs.)
      .           
      .                               let v = present_first;
     25 ( 0.00%)                      let kind = if def.is_enum() || variants[v].is_empty() {
      .                                   StructKind::AlwaysSized
      .                               } else {
     72 ( 0.00%)                          let param_env = tcx.param_env(def.did);
     24 ( 0.00%)                          let last_field = def.variants[v].fields.last().unwrap();
      .                                   let always_sized =
    144 ( 0.00%)                              tcx.type_of(last_field.did).is_sized(tcx.at(DUMMY_SP), param_env);
     48 ( 0.00%)                          if !always_sized {
      .                                       StructKind::MaybeUnsized
      .                                   } else {
      .                                       StructKind::AlwaysSized
      .                                   }
      .                               };
      .           
    325 ( 0.00%)                      let mut st = self.univariant_uninterned(ty, &variants[v], &def.repr, kind)?;
    125 ( 0.00%)                      st.variants = Variants::Single { index: v };
    175 ( 0.00%)                      let (start, end) = self.tcx.layout_scalar_valid_range(def.did);
    100 ( 0.00%)                      match st.abi {
      .                                   Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {
      .                                       // the asserts ensure that we are not using the
      .                                       // `#[rustc_layout_scalar_valid_range(n)]`
      .                                       // attribute to widen the range of anything as that would probably
      .                                       // result in UB somewhere
      .                                       // FIXME(eddyb) the asserts are probably not needed,
      .                                       // as larger validity ranges would result in missed
      .                                       // optimizations, *not* wrongly assuming the inner
      .                                       // value is valid. e.g. unions enlarge validity ranges,
      .                                       // because the values may be uninitialized.
      3 ( 0.00%)                              if let Bound::Included(start) = start {
      .                                           // FIXME(eddyb) this might be incorrect - it doesn't
      .                                           // account for wrap-around (end < start) ranges.
      .                                           assert!(scalar.valid_range.start <= start);
      .                                           scalar.valid_range.start = start;
      .                                       }
      2 ( 0.00%)                              if let Bound::Included(end) = end {
      .                                           // FIXME(eddyb) this might be incorrect - it doesn't
      .                                           // account for wrap-around (end < start) ranges.
      .                                           assert!(scalar.valid_range.end >= end);
      .                                           scalar.valid_range.end = end;
      .                                       }
      .           
      .                                       // Update `largest_niche` if we have introduced a larger niche.
      3 ( 0.00%)                              let niche = if def.repr.hide_niche() {
      .                                           None
      .                                       } else {
     10 ( 0.00%)                                  Niche::from_scalar(dl, Size::ZERO, *scalar)
      .                                       };
      1 ( 0.00%)                              if let Some(niche) = niche {
      .                                           match st.largest_niche {
      .                                               Some(largest_niche) => {
      .                                                   // Replace the existing niche even if they're equal,
      .                                                   // because this one is at a lower offset.
      .                                                   if largest_niche.available(dl) <= niche.available(dl) {
      .                                                       st.largest_niche = Some(niche);
      .                                                   }
      .                                               }
      .                                               None => st.largest_niche = Some(niche),
      .                                           }
      .                                       }
      .                                   }
      .                                   _ => assert!(
     72 ( 0.00%)                              start == Bound::Unbounded && end == Bound::Unbounded,
      .                                       "nonscalar layout for layout_scalar_valid_range type {:?}: {:#?}",
      .                                       def,
      .                                       st,
      .                                   ),
      .                               }
      .           
    225 ( 0.00%)                      return Ok(tcx.intern_layout(st));
      .                           }
      .           
      .                           // At this point, we have handled all unions and
      .                           // structs. (We have also handled univariant enums
      .                           // that allow representation optimization.)
      .                           assert!(def.is_enum());
      .           
      .                           // The current code for niche-filling relies on variant indices
      .                           // instead of actual discriminants, so dataful enums with
      .                           // explicit discriminants (RFC #2363) would misbehave.
      .                           let no_explicit_discriminants = def
      .                               .variants
      .                               .iter_enumerated()
      .                               .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));
      .           
     10 ( 0.00%)                  let mut niche_filling_layout = None;
      .           
      .                           // Niche-filling enum optimization.
     10 ( 0.00%)                  if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {
      .                               let mut dataful_variant = None;
      .                               let mut niche_variants = VariantIdx::MAX..=VariantIdx::new(0);
      .           
      .                               // Find one non-ZST variant.
     79 ( 0.00%)                      'variants: for (v, fields) in variants.iter_enumerated() {
     24 ( 0.00%)                          if absent(fields) {
      .                                       continue 'variants;
      .                                   }
     16 ( 0.00%)                          for f in fields {
      4 ( 0.00%)                              if !f.is_zst() {
      .                                           if dataful_variant.is_none() {
      .                                               dataful_variant = Some(v);
      .                                               continue 'variants;
      .                                           } else {
      .                                               dataful_variant = None;
      .                                               break 'variants;
      .                                           }
      .                                       }
      .                                   }
     28 ( 0.00%)                          niche_variants = *niche_variants.start().min(&v)..=v;
      .                               }
      .           
      9 ( 0.00%)                      if niche_variants.start() > niche_variants.end() {
      .                                   dataful_variant = None;
      .                               }
      .           
      .                               if let Some(i) = dataful_variant {
      5 ( 0.00%)                          let count = (niche_variants.end().as_u32()
      .                                       - niche_variants.start().as_u32()
      .                                       + 1) as u128;
      .           
      .                                   // Find the field with the largest niche
      1 ( 0.00%)                          let niche_candidate = variants[i]
      .                                       .iter()
      .                                       .enumerate()
      2 ( 0.00%)                              .filter_map(|(j, field)| Some((j, field.largest_niche?)))
      .                                       .max_by_key(|(_, niche)| niche.available(dl));
      .           
      2 ( 0.00%)                          if let Some((field_index, niche, (niche_start, niche_scalar))) =
     13 ( 0.00%)                              niche_candidate.and_then(|(field_index, niche)| {
      .                                           Some((field_index, niche, niche.reserve(self, count)?))
      .                                       })
      .                                   {
      .                                       let mut align = dl.aggregate_align;
      .                                       let st = variants
      .                                           .iter_enumerated()
      .                                           .map(|(j, v)| {
      .                                               let mut st = self.univariant_uninterned(
-- line 1095 ----------------------------------------
-- line 1151 ----------------------------------------
      .                                           largest_niche,
      .                                           size,
      .                                           align,
      .                                       });
      .                                   }
      .                               }
      .                           }
      .           
     25 ( 0.00%)                  let (mut min, mut max) = (i128::MAX, i128::MIN);
     23 ( 0.00%)                  let discr_type = def.repr.discr_type();
     15 ( 0.00%)                  let bits = Integer::from_attr(self, discr_type).size().bits();
     78 ( 0.00%)                  for (i, discr) in def.discriminants(tcx) {
      3 ( 0.00%)                      if variants[i].iter().any(|f| f.abi.is_uninhabited()) {
      .                                   continue;
      .                               }
      .                               let mut x = discr.val as i128;
     23 ( 0.00%)                      if discr_type.is_signed() {
      .                                   // sign extend the raw representation to be an i128
    437 ( 0.00%)                          x = (x << (128 - bits)) >> (128 - bits);
      .                               }
     92 ( 0.00%)                      if x < min {
     20 ( 0.00%)                          min = x;
      .                               }
     92 ( 0.00%)                      if x > max {
     69 ( 0.00%)                          max = x;
      .                               }
      .                           }
      .                           // We might have no inhabited variants, so pretend there's at least one.
      5 ( 0.00%)                  if (min, max) == (i128::MAX, i128::MIN) {
      .                               min = 0;
      .                               max = 0;
      .                           }
     25 ( 0.00%)                  assert!(min <= max, "discriminant range is {}...{}", min, max);
     45 ( 0.00%)                  let (min_ity, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);
      .           
     10 ( 0.00%)                  let mut align = dl.aggregate_align;
      5 ( 0.00%)                  let mut size = Size::ZERO;
      .           
      .                           // We're interested in the smallest alignment, so start large.
     10 ( 0.00%)                  let mut start_align = Align::from_bytes(256).unwrap();
     25 ( 0.00%)                  assert_eq!(Integer::for_align(dl, start_align), None);
      .           
      .                           // repr(C) on an enum tells us to make a (tag, union) layout,
      .                           // so we need to grow the prefix alignment to be at least
      .                           // the alignment of the union. (This value is used both for
      .                           // determining the alignment of the overall enum, and the
      .                           // determining the alignment of the payload after the tag.)
     65 ( 0.00%)                  let mut prefix_align = min_ity.align(dl).abi;
      9 ( 0.00%)                  if def.repr.c() {
      .                               for fields in &variants {
      .                                   for field in fields {
      .                                       prefix_align = prefix_align.max(field.align.abi);
      .                                   }
      .                               }
      .                           }
      .           
      .                           // Create the set of structs that represent each variant.
     10 ( 0.00%)                  let mut layout_variants = variants
      .                               .iter_enumerated()
      .                               .map(|(i, field_layouts)| {
    437 ( 0.00%)                          let mut st = self.univariant_uninterned(
     23 ( 0.00%)                              ty,
      .                                       &field_layouts,
     46 ( 0.00%)                              &def.repr,
     92 ( 0.00%)                              StructKind::Prefixed(min_ity.size(), prefix_align),
      .                                   )?;
     69 ( 0.00%)                          st.variants = Variants::Single { index: i };
      .                                   // Find the first field we can't move later
      .                                   // to make room for a larger discriminant.
      .                                   for field in
    305 ( 0.00%)                              st.fields.index_by_increasing_offset().map(|j| field_layouts[j])
      .                                   {
      8 ( 0.00%)                              if !field.is_zst() || field.align.abi.bytes() != 1 {
      2 ( 0.00%)                                  start_align = start_align.min(field.align.abi);
      .                                           break;
      .                                       }
      .                                   }
     92 ( 0.00%)                          size = cmp::max(size, st.size);
     69 ( 0.00%)                          align = align.max(st.align);
    138 ( 0.00%)                          Ok(st)
      .                               })
      .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
      .           
      .                           // Align the maximum variant size to the largest alignment.
     25 ( 0.00%)                  size = size.align_to(align.abi);
      .           
     20 ( 0.00%)                  if size.bytes() >= dl.obj_size_bound() {
      .                               return Err(LayoutError::SizeOverflow(ty));
      .                           }
      .           
     20 ( 0.00%)                  let typeck_ity = Integer::from_attr(dl, def.repr.discr_type());
     15 ( 0.00%)                  if typeck_ity < min_ity {
      .                               // It is a bug if Layout decided on a greater discriminant size than typeck for
      .                               // some reason at this point (based on values discriminant can take on). Mostly
      .                               // because this discriminant will be loaded, and then stored into variable of
      .                               // type calculated by typeck. Consider such case (a bug): typeck decided on
      .                               // byte-sized discriminant, but layout thinks we need a 16-bit to store all
      .                               // discriminant values. That would be a bug, because then, in codegen, in order
      .                               // to store this 16-bit discriminant into 8-bit sized temporary some of the
      .                               // space necessary to represent would have to be discarded (or layout is wrong
-- line 1250 ----------------------------------------
-- line 1263 ----------------------------------------
      .                           // as the alignment of the first field of each variant.
      .                           // We increase the size of the discriminant to avoid LLVM copying
      .                           // padding when it doesn't need to. This normally causes unaligned
      .                           // load/stores and excessive memcpy/memset operations. By using a
      .                           // bigger integer size, LLVM can be sure about its contents and
      .                           // won't be so conservative.
      .           
      .                           // Use the initial field alignment
     13 ( 0.00%)                  let mut ity = if def.repr.c() || def.repr.int.is_some() {
      .                               min_ity
      .                           } else {
      9 ( 0.00%)                      Integer::for_align(dl, start_align).unwrap_or(min_ity)
      .                           };
      .           
      .                           // If the alignment is not larger than the chosen discriminant size,
      .                           // don't use the alignment as the final size.
      3 ( 0.00%)                  if ity <= min_ity {
      .                               ity = min_ity;
      .                           } else {
      .                               // Patch up the variants' first few fields.
      2 ( 0.00%)                      let old_ity_size = min_ity.size();
      .                               let new_ity_size = ity.size();
      .                               for variant in &mut layout_variants {
      4 ( 0.00%)                          match variant.fields {
      .                                       FieldsShape::Arbitrary { ref mut offsets, .. } => {
      .                                           for i in offsets {
      3 ( 0.00%)                                      if *i <= old_ity_size {
      .                                                   assert_eq!(*i, old_ity_size);
      .                                                   *i = new_ity_size;
      .                                               }
      .                                           }
      .                                           // We might be making the struct larger.
      2 ( 0.00%)                                  if variant.size <= old_ity_size {
      2 ( 0.00%)                                      variant.size = new_ity_size;
      .                                           }
      .                                       }
      .                                       _ => bug!(),
      .                                   }
      .                               }
      .                           }
      .           
      5 ( 0.00%)                  let tag_mask = ity.size().unsigned_int_max();
      .                           let tag = Scalar {
      .                               value: Int(ity, signed),
      .                               valid_range: WrappingRange {
     25 ( 0.00%)                          start: (min as u128 & tag_mask),
     20 ( 0.00%)                          end: (max as u128 & tag_mask),
      .                               },
      .                           };
      .                           let mut abi = Abi::Aggregate { sized: true };
     30 ( 0.00%)                  if tag.value.size(dl) == size {
      .                               abi = Abi::Scalar(tag);
      .                           } else {
      .                               // Try to use a ScalarPair for all tagged enums.
      .                               let mut common_prim = None;
      .                               for (field_layouts, layout_variant) in iter::zip(&variants, &layout_variants) {
      4 ( 0.00%)                          let offsets = match layout_variant.fields {
      .                                       FieldsShape::Arbitrary { ref offsets, .. } => offsets,
      .                                       _ => bug!(),
      .                                   };
      .                                   let mut fields =
      .                                       iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());
     20 ( 0.00%)                          let (field, offset) = match (fields.next(), fields.next()) {
      .                                       (None, None) => continue,
      .                                       (Some(pair), None) => pair,
      .                                       _ => {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   };
      3 ( 0.00%)                          let prim = match field.abi {
      2 ( 0.00%)                              Abi::Scalar(scalar) => scalar.value,
      .                                       _ => {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   };
      2 ( 0.00%)                          if let Some(pair) = common_prim {
      .                                       // This is pretty conservative. We could go fancier
      .                                       // by conflating things like i32 and u32, or even
      .                                       // realising that (u8, u8) could just cohabit with
      .                                       // u16 or even u32.
      .                                       if pair != (prim, offset) {
      .                                           common_prim = None;
      .                                           break;
      .                                       }
      .                                   } else {
      .                                       common_prim = Some((prim, offset));
      .                                   }
      .                               }
      2 ( 0.00%)                      if let Some((prim, offset)) = common_prim {
     17 ( 0.00%)                          let pair = self.scalar_pair(tag, scalar_unit(prim));
      2 ( 0.00%)                          let pair_offsets = match pair.fields {
      2 ( 0.00%)                              FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
      1 ( 0.00%)                                  assert_eq!(memory_index, &[0, 1]);
      .                                           offsets
      .                                       }
      .                                       _ => bug!(),
      .                                   };
      6 ( 0.00%)                          if pair_offsets[0] == Size::ZERO
      2 ( 0.00%)                              && pair_offsets[1] == *offset
      1 ( 0.00%)                              && align == pair.align
      1 ( 0.00%)                              && size == pair.size
      .                                   {
      .                                       // We can use `ScalarPair` only when it matches our
      .                                       // already computed layout (including `#[repr(C)]`).
     27 ( 0.00%)                              abi = pair.abi;
      .                                   }
      1 ( 0.00%)                      }
      .                           }
      .           
      .                           if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {
      .                               abi = Abi::Uninhabited;
      .                           }
      .           
     80 ( 0.00%)                  let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag);
      .           
      .                           let tagged_layout = Layout {
      .                               variants: Variants::Multiple {
      .                                   tag,
      .                                   tag_encoding: TagEncoding::Direct,
      .                                   tag_field: 0,
      .                                   variants: layout_variants,
      .                               },
      .                               fields: FieldsShape::Arbitrary {
     25 ( 0.00%)                          offsets: vec![Size::ZERO],
     20 ( 0.00%)                          memory_index: vec![0],
      .                               },
      .                               largest_niche,
      .                               abi,
     10 ( 0.00%)                      align,
      5 ( 0.00%)                      size,
      .                           };
      .           
     15 ( 0.00%)                  let best_layout = match (tagged_layout, niche_filling_layout) {
      .                               (tagged_layout, Some(niche_filling_layout)) => {
      .                                   // Pick the smaller layout; otherwise,
      .                                   // pick the layout with the larger niche; otherwise,
      .                                   // pick tagged as it has simpler codegen.
      .                                   cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {
      .                                       let niche_size = layout.largest_niche.map_or(0, |n| n.available(dl));
      .                                       (layout.size, cmp::Reverse(niche_size))
      .                                   })
      .                               }
    305 ( 0.00%)                      (tagged_layout, None) => tagged_layout,
      .                           };
      .           
     45 ( 0.00%)                  tcx.intern_layout(best_layout)
     62 ( 0.00%)              }
      .           
      .                       // Types with no meaningful known layout.
      .                       ty::Projection(_) | ty::Opaque(..) => {
      .                           // NOTE(eddyb) `layout_of` query should've normalized these away,
      .                           // if that was possible, so there's no reason to try again here.
      .                           return Err(LayoutError::Unknown(ty));
      .                       }
      .           
-- line 1419 ----------------------------------------
-- line 1420 ----------------------------------------
      .                       ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {
      .                           bug!("Layout::compute: unexpected type `{}`", ty)
      .                       }
      .           
      .                       ty::Bound(..) | ty::Param(_) | ty::Error(_) => {
      .                           return Err(LayoutError::Unknown(ty));
      .                       }
      .                   })
  1,008 ( 0.00%)      }
      .           }
      .           
      .           /// Overlap eligibility and variant assignment for each GeneratorSavedLocal.
      .           #[derive(Clone, Debug, PartialEq)]
      .           enum SavedLocalEligibility {
      .               Unassigned,
      .               Assigned(VariantIdx),
      .               // FIXME: Use newtype_index so we aren't wasting bytes
-- line 1436 ----------------------------------------
-- line 1755 ----------------------------------------
      .               }
      .           
      .               /// This is invoked by the `layout_of` query to record the final
      .               /// layout of each type.
      .               #[inline(always)]
      .               fn record_layout_for_printing(&self, layout: TyAndLayout<'tcx>) {
      .                   // If we are running with `-Zprint-type-sizes`, maybe record layouts
      .                   // for dumping later.
    625 ( 0.00%)          if self.tcx.sess.opts.debugging_opts.print_type_sizes {
      .                       self.record_layout_for_printing_outlined(layout)
      .                   }
      .               }
      .           
      .               fn record_layout_for_printing_outlined(&self, layout: TyAndLayout<'tcx>) {
      .                   // Ignore layouts that are done with non-empty environments or
      .                   // non-monomorphic layouts, as the user only wants to see the stuff
      .                   // resulting from the final codegen session.
-- line 1771 ----------------------------------------
-- line 2041 ----------------------------------------
      .           
      .           pub trait HasParamEnv<'tcx> {
      .               fn param_env(&self) -> ty::ParamEnv<'tcx>;
      .           }
      .           
      .           impl<'tcx> HasDataLayout for TyCtxt<'tcx> {
      .               #[inline]
      .               fn data_layout(&self) -> &TargetDataLayout {
 33,802 ( 0.01%)          &self.data_layout
      .               }
      .           }
      .           
      .           impl<'tcx> HasTargetSpec for TyCtxt<'tcx> {
      .               fn target_spec(&self) -> &Target {
      4 ( 0.00%)          &self.sess.target
      .               }
      .           }
      .           
      .           impl<'tcx> HasTyCtxt<'tcx> for TyCtxt<'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   *self
      .               }
-- line 2063 ----------------------------------------
-- line 2080 ----------------------------------------
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   **self
      .               }
      .           }
      .           
      .           impl<'tcx, C> HasParamEnv<'tcx> for LayoutCx<'tcx, C> {
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    150 ( 0.00%)          self.param_env
      .               }
      .           }
      .           
      .           impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {
      .               fn data_layout(&self) -> &TargetDataLayout {
      .                   self.tcx.data_layout()
      .               }
      .           }
-- line 2096 ----------------------------------------
-- line 2098 ----------------------------------------
      .           impl<'tcx, T: HasTargetSpec> HasTargetSpec for LayoutCx<'tcx, T> {
      .               fn target_spec(&self) -> &Target {
      .                   self.tcx.target_spec()
      .               }
      .           }
      .           
      .           impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    196 ( 0.00%)          self.tcx.tcx()
      .               }
      .           }
      .           
      .           pub trait MaybeResult<T> {
      .               type Error;
      .           
      .               fn from(x: Result<T, Self::Error>) -> Self;
      .               fn to_result(self) -> Result<T, Self::Error>;
-- line 2114 ----------------------------------------
-- line 2124 ----------------------------------------
      .                   Ok(self)
      .               }
      .           }
      .           
      .           impl<T, E> MaybeResult<T> for Result<T, E> {
      .               type Error = E;
      .           
      .               fn from(x: Result<T, Self::Error>) -> Self {
 29,011 ( 0.01%)          x
      .               }
      .               fn to_result(self) -> Result<T, Self::Error> {
      .                   self
      .               }
      .           }
      .           
      .           pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;
      .           
-- line 2140 ----------------------------------------
-- line 2167 ----------------------------------------
      .               ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;
      .           }
      .           
      .           /// Blanket extension trait for contexts that can compute layouts of types.
      .           pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {
      .               /// Computes the layout of a type. Note that this implicitly
      .               /// executes in "reveal all" mode, and will normalize the input type.
      .               #[inline]
 75,780 ( 0.02%)      fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {
    584 ( 0.00%)          self.spanned_layout_of(ty, DUMMY_SP)
 75,728 ( 0.02%)      }
      .           
      .               /// Computes the layout of a type, at `span`. Note that this implicitly
      .               /// executes in "reveal all" mode, and will normalize the input type.
      .               // FIXME(eddyb) avoid passing information like this, and instead add more
      .               // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.
      .               #[inline]
  3,822 ( 0.00%)      fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {
    294 ( 0.00%)          let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };
    359 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(
      .                       tcx.layout_of(self.param_env().and(ty))
      .                           .map_err(|err| self.handle_layout_err(err, span, ty)),
      .                   )
  2,352 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}
      .           
      .           impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {
      .               type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;
      .           
      .               #[inline]
-- line 2200 ----------------------------------------
-- line 2268 ----------------------------------------
      .                       Variants::Multiple { ref variants, .. } => &variants[variant_index],
      .                   };
      .           
      .                   assert_eq!(layout.variants, Variants::Single { index: variant_index });
      .           
      .                   TyAndLayout { ty: this.ty, layout }
      .               }
      .           
371,910 ( 0.09%)      fn ty_and_layout_field(this: TyAndLayout<'tcx>, cx: &C, i: usize) -> TyAndLayout<'tcx> {
      .                   enum TyMaybeWithLayout<'tcx> {
      .                       Ty(Ty<'tcx>),
      .                       TyAndLayout(TyAndLayout<'tcx>),
      .                   }
      .           
298,387 ( 0.07%)          fn field_ty_or_layout<'tcx>(
      .                       this: TyAndLayout<'tcx>,
      .                       cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
      .                       i: usize,
      .                   ) -> TyMaybeWithLayout<'tcx> {
      .                       let tcx = cx.tcx();
      .                       let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {
      .                           let layout = Layout::scalar(cx, tag);
      .                           TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }
      .                       };
      .           
 74,433 ( 0.02%)              match *this.ty.kind() {
      .                           ty::Bool
      .                           | ty::Char
      .                           | ty::Int(_)
      .                           | ty::Uint(_)
      .                           | ty::Float(_)
      .                           | ty::FnPtr(_)
      .                           | ty::Never
      .                           | ty::FnDef(..)
      .                           | ty::GeneratorWitness(..)
      .                           | ty::Foreign(..)
      .                           | ty::Dynamic(..) => bug!("TyAndLayout::field({:?}): not applicable", this),
      .           
      .                           // Potentially-fat pointers.
      .                           ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
     32 ( 0.00%)                      assert!(i < this.fields.count());
      .           
      .                               // Reuse the fat `*T` type as its own thin pointer data field.
      .                               // This provides information about, e.g., DST struct pointees
      .                               // (which may have no non-DST form), and will work as long
      .                               // as the `Abi` or `FieldsShape` is checked by users.
     32 ( 0.00%)                      if i == 0 {
      .                                   let nil = tcx.mk_unit();
      8 ( 0.00%)                          let unit_ptr_ty = if this.ty.is_unsafe_ptr() {
      .                                       tcx.mk_mut_ptr(nil)
      .                                   } else {
      8 ( 0.00%)                              tcx.mk_mut_ref(tcx.lifetimes.re_static, nil)
      .                                   };
      .           
      .                                   // NOTE(eddyb) using an empty `ParamEnv`, and `unwrap`-ing
      .                                   // the `Result` should always work because the type is
      .                                   // always either `*mut ()` or `&'static mut ()`.
     25 ( 0.00%)                          return TyMaybeWithLayout::TyAndLayout(TyAndLayout {
      .                                       ty: this.ty,
      .                                       ..tcx.layout_of(ty::ParamEnv::reveal_all().and(unit_ptr_ty)).unwrap()
      .                                   });
      .                               }
      .           
     68 ( 0.00%)                      match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {
      4 ( 0.00%)                          ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),
      .                                   ty::Dynamic(_, _) => {
      .                                       TyMaybeWithLayout::Ty(tcx.mk_imm_ref(
      6 ( 0.00%)                                  tcx.lifetimes.re_static,
     19 ( 0.00%)                                  tcx.mk_array(tcx.types.usize, 3),
      .                                       ))
      .                                       /* FIXME: use actual fn pointers
      .                                       Warning: naively computing the number of entries in the
      .                                       vtable by counting the methods on the trait + methods on
      .                                       all parent traits does not work, because some methods can
      .                                       be not object safe and thus excluded from the vtable.
      .                                       Increase this counter if you tried to implement this but
      .                                       failed to do it without duplicating a lot of code from
-- line 2344 ----------------------------------------
-- line 2350 ----------------------------------------
      .                                       */
      .                                   }
      .                                   _ => bug!("TyAndLayout::field({:?}): not applicable", this),
      .                               }
      .                           }
      .           
      .                           // Arrays and slices.
      .                           ty::Array(element, _) | ty::Slice(element) => TyMaybeWithLayout::Ty(element),
      2 ( 0.00%)                  ty::Str => TyMaybeWithLayout::Ty(tcx.types.u8),
      .           
      .                           // Tuples, generators and closures.
      .                           ty::Closure(_, ref substs) => field_ty_or_layout(
      .                               TyAndLayout { ty: substs.as_closure().tupled_upvars_ty(), ..this },
      .                               cx,
      .                               i,
      .                           ),
      .           
-- line 2366 ----------------------------------------
-- line 2377 ----------------------------------------
      .                               Variants::Multiple { tag, tag_field, .. } => {
      .                                   if i == tag_field {
      .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
      .                                   }
      .                                   TyMaybeWithLayout::Ty(substs.as_generator().prefix_tys().nth(i).unwrap())
      .                               }
      .                           },
      .           
     36 ( 0.00%)                  ty::Tuple(tys) => TyMaybeWithLayout::Ty(tys[i].expect_ty()),
      .           
      .                           // ADTs.
 14,196 ( 0.00%)                  ty::Adt(def, substs) => {
 28,392 ( 0.01%)                      match this.variants {
 14,196 ( 0.00%)                          Variants::Single { index } => {
 56,784 ( 0.01%)                              TyMaybeWithLayout::Ty(def.variants[index].fields[i].ty(tcx, substs))
      .                                   }
      .           
      .                                   // Discriminant field for enums (where applicable).
      .                                   Variants::Multiple { tag, .. } => {
      .                                       assert_eq!(i, 0);
      .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
      .                                   }
      .                               }
-- line 2399 ----------------------------------------
-- line 2402 ----------------------------------------
      .                           ty::Projection(_)
      .                           | ty::Bound(..)
      .                           | ty::Placeholder(..)
      .                           | ty::Opaque(..)
      .                           | ty::Param(_)
      .                           | ty::Infer(_)
      .                           | ty::Error(_) => bug!("TyAndLayout::field: unexpected type `{}`", this.ty),
      .                       }
223,299 ( 0.06%)          }
      .           
 99,244 ( 0.02%)          match field_ty_or_layout(this, cx, i) {
 49,606 ( 0.01%)              TyMaybeWithLayout::Ty(field_ty) => {
     88 ( 0.00%)                  cx.tcx().layout_of(cx.param_env().and(field_ty)).unwrap_or_else(|e| {
      .                               bug!(
      .                                   "failed to get layout for `{}`: {},\n\
      .                                    despite it being a field (#{}) of an existing layout: {:#?}",
      .                                   field_ty,
      .                                   e,
      .                                   i,
      .                                   this
      .                               )
      .                           })
      .                       }
     24 ( 0.00%)              TyMaybeWithLayout::TyAndLayout(field_layout) => field_layout,
      .                   }
198,352 ( 0.05%)      }
      .           
    494 ( 0.00%)      fn ty_and_layout_pointee_info_at(
      .                   this: TyAndLayout<'tcx>,
      .                   cx: &C,
      .                   offset: Size,
      .               ) -> Option<PointeeInfo> {
      4 ( 0.00%)          let tcx = cx.tcx();
      .                   let param_env = cx.param_env();
      .           
      .                   let addr_space_of_ty = |ty: Ty<'tcx>| {
     46 ( 0.00%)              if ty.is_fn() { cx.data_layout().instruction_address_space } else { AddressSpace::DATA }
      .                   };
      .           
    235 ( 0.00%)          let pointee_info = match *this.ty.kind() {
     21 ( 0.00%)              ty::RawPtr(mt) if offset.bytes() == 0 => {
      .                           tcx.layout_of(param_env.and(mt.ty)).ok().map(|layout| PointeeInfo {
      7 ( 0.00%)                      size: layout.size,
      7 ( 0.00%)                      align: layout.align.abi,
      .                               safe: None,
      7 ( 0.00%)                      address_space: addr_space_of_ty(mt.ty),
     35 ( 0.00%)                  })
      .                       }
      4 ( 0.00%)              ty::FnPtr(fn_sig) if offset.bytes() == 0 => {
      .                           tcx.layout_of(param_env.and(tcx.mk_fn_ptr(fn_sig))).ok().map(|layout| PointeeInfo {
      .                               size: layout.size,
      .                               align: layout.align.abi,
      .                               safe: None,
      .                               address_space: cx.data_layout().instruction_address_space,
      .                           })
      .                       }
    119 ( 0.00%)              ty::Ref(_, ty, mt) if offset.bytes() == 0 => {
     39 ( 0.00%)                  let address_space = addr_space_of_ty(ty);
     78 ( 0.00%)                  let kind = if tcx.sess.opts.optimize == OptLevel::No {
      .                               // Use conservative pointer kind if not optimizing. This saves us the
      .                               // Freeze/Unpin queries, and can save time in the codegen backend (noalias
      .                               // attributes in LLVM have compile-time cost even in unoptimized builds).
      .                               PointerKind::Shared
      .                           } else {
     78 ( 0.00%)                      match mt {
      .                                   hir::Mutability::Not => {
    138 ( 0.00%)                              if ty.is_freeze(tcx.at(DUMMY_SP), cx.param_env()) {
      .                                           PointerKind::Frozen
      .                                       } else {
      .                                           PointerKind::Shared
      .                                       }
      .                                   }
      .                                   hir::Mutability::Mut => {
      .                                       // References to self-referential structures should not be considered
      .                                       // noalias, as another pointer to the structure can be obtained, that
      .                                       // is not based-on the original reference. We consider all !Unpin
      .                                       // types to be potentially self-referential here.
    112 ( 0.00%)                              if ty.is_unpin(tcx.at(DUMMY_SP), cx.param_env()) {
      .                                           PointerKind::UniqueBorrowed
      .                                       } else {
      .                                           PointerKind::Shared
      .                                       }
      .                                   }
      .                               }
      .                           };
      .           
      .                           tcx.layout_of(param_env.and(ty)).ok().map(|layout| PointeeInfo {
     39 ( 0.00%)                      size: layout.size,
      .                               align: layout.align.abi,
      .                               safe: Some(kind),
      .                               address_space,
    273 ( 0.00%)                  })
      .                       }
      .           
      .                       _ => {
      6 ( 0.00%)                  let mut data_variant = match this.variants {
      .                               // Within the discriminant field, only the niche itself is
      .                               // always initialized, so we only check for a pointer at its
      .                               // offset.
      .                               //
      .                               // If the niche is a pointer, it's either valid (according
      .                               // to its type), or null (which the niche field's scalar
      .                               // validity range encodes).  This allows using
      .                               // `dereferenceable_or_null` for e.g., `Option<&T>`, and
-- line 2505 ----------------------------------------
-- line 2513 ----------------------------------------
      .                               } if this.fields.offset(tag_field) == offset => {
      .                                   Some(this.for_variant(cx, dataful_variant))
      .                               }
      .                               _ => Some(this),
      .                           };
      .           
      .                           if let Some(variant) = data_variant {
      .                               // We're not interested in any unions.
      9 ( 0.00%)                      if let FieldsShape::Union(_) = variant.fields {
      .                                   data_variant = None;
      .                               }
      .                           }
      .           
      .                           let mut result = None;
      .           
      .                           if let Some(variant) = data_variant {
      .                               let ptr_end = offset + Pointer.size(cx);
      .                               for i in 0..variant.fields.count() {
      .                                   let field_start = variant.fields.offset(i);
     25 ( 0.00%)                          if field_start <= offset {
      .                                       let field = variant.field(cx, i);
      .                                       result = field.to_result().ok().and_then(|field| {
      8 ( 0.00%)                                  if ptr_end <= field_start + field.size {
      .                                               // We found the right field, look inside it.
      .                                               let field_info =
     12 ( 0.00%)                                          field.pointee_info_at(cx, offset - field_start);
      .                                               field_info
      .                                           } else {
      .                                               None
      .                                           }
      .                                       });
      3 ( 0.00%)                              if result.is_some() {
      .                                           break;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .           
      .                           // FIXME(eddyb) This should be for `ptr::Unique<T>`, not `Box<T>`.
      .                           if let Some(ref mut pointee) = result {
      6 ( 0.00%)                      if let ty::Adt(def, _) = this.ty.kind() {
      .                                   if def.is_box() && offset.bytes() == 0 {
      .                                       pointee.safe = Some(PointerKind::UniqueOwned);
      .                                   }
      .                               }
      .                           }
      .           
      .                           result
      .                       }
-- line 2561 ----------------------------------------
-- line 2564 ----------------------------------------
      .                   debug!(
      .                       "pointee_info_at (offset={:?}, type kind: {:?}) => {:?}",
      .                       offset,
      .                       this.ty.kind(),
      .                       pointee_info
      .                   );
      .           
      .                   pointee_info
    784 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ty::Instance<'tcx> {
      .               // NOTE(eddyb) this is private to avoid using it from outside of
      .               // `fn_abi_of_instance` - any other uses are either too high-level
      .               // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),
      .               // or should go through `FnAbi` instead, to avoid losing any
      .               // adjustments `fn_abi_of_instance` might be performing.
    440 ( 0.00%)      fn fn_sig_for_fn_abi(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> ty::PolyFnSig<'tcx> {
    240 ( 0.00%)          let ty = self.ty(tcx, param_env);
    120 ( 0.00%)          match *ty.kind() {
      .                       ty::FnDef(..) => {
      .                           // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering
      .                           // parameters unused if they show up in the signature, but not in the `mir::Body`
      .                           // (i.e. due to being inside a projection that got normalized, see
      .                           // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping
      .                           // track of a polymorphization `ParamEnv` to allow normalizing later.
     80 ( 0.00%)                  let mut sig = match *ty.kind() {
    280 ( 0.00%)                      ty::FnDef(def_id, substs) => tcx
      .                                   .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))
      .                                   .subst(tcx, substs),
      .                               _ => unreachable!(),
      .                           };
      .           
     80 ( 0.00%)                  if let ty::InstanceDef::VtableShim(..) = self.def {
      .                               // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.
      .                               sig = sig.map_bound(|mut sig| {
      .                                   let mut inputs_and_output = sig.inputs_and_output.to_vec();
      .                                   inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);
      .                                   sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);
      .                                   sig
      .                               });
      .                           }
    320 ( 0.00%)                  sig
      .                       }
      .                       ty::Closure(def_id, substs) => {
      .                           let sig = substs.as_closure().sig();
      .           
      .                           let bound_vars = tcx.mk_bound_variable_kinds(
      .                               sig.bound_vars()
      .                                   .iter()
      .                                   .chain(iter::once(ty::BoundVariableKind::Region(ty::BrEnv))),
-- line 2618 ----------------------------------------
-- line 2669 ----------------------------------------
      .                                   hir::Unsafety::Normal,
      .                                   rustc_target::spec::abi::Abi::Rust,
      .                               ),
      .                               bound_vars,
      .                           )
      .                       }
      .                       _ => bug!("unexpected type {:?} in Instance::fn_sig", ty),
      .                   }
    360 ( 0.00%)      }
      .           }
      .           
      .           /// Calculates whether a function's ABI can unwind or not.
      .           ///
      .           /// This takes two primary parameters:
      .           ///
      .           /// * `codegen_fn_attr_flags` - these are flags calculated as part of the
      .           ///   codegen attrs for a defined function. For function pointers this set of
-- line 2685 ----------------------------------------
-- line 2725 ----------------------------------------
      .           /// might (from a foreign exception or similar).
      .           #[inline]
      .           pub fn fn_can_unwind<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               codegen_fn_attr_flags: CodegenFnAttrFlags,
      .               abi: SpecAbi,
      .           ) -> bool {
      .               // Special attribute for functions which can't unwind.
    113 ( 0.00%)      if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {
      .                   return false;
      .               }
      .           
      .               // Otherwise if this isn't special then unwinding is generally determined by
      .               // the ABI of the itself. ABIs like `C` have variants which also
      .               // specifically allow unwinding (`C-unwind`), but not all platform-specific
      .               // ABIs have such an option. Otherwise the only other thing here is Rust
      .               // itself, and those ABIs are determined by the panic strategy configured
-- line 2741 ----------------------------------------
-- line 2767 ----------------------------------------
      .               // to `panic=abort`).
      .               //
      .               // Eventually the check against `c_unwind` here will ideally get removed and
      .               // this'll be a little cleaner as it'll be a straightforward check of the
      .               // ABI.
      .               //
      .               // [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md
      .               use SpecAbi::*;
    288 ( 0.00%)      match abi {
      .                   C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {
      4 ( 0.00%)              unwind
      8 ( 0.00%)                  || (!tcx.features().c_unwind && tcx.sess.panic_strategy() == PanicStrategy::Unwind)
      .                   }
      .                   Cdecl
      .                   | Fastcall
      .                   | Vectorcall
      .                   | Aapcs
      .                   | Win64
      .                   | SysV64
      .                   | PtxKernel
-- line 2786 ----------------------------------------
-- line 2797 ----------------------------------------
      .                   | Unadjusted => false,
      .                   Rust | RustCall => tcx.sess.panic_strategy() == PanicStrategy::Unwind,
      .               }
      .           }
      .           
      .           #[inline]
      .           pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {
      .               use rustc_target::spec::abi::Abi::*;
    410 ( 0.00%)      match tcx.sess.target.adjust_abi(abi) {
      .                   RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,
      .           
      .                   // It's the ABI's job to select this, not ours.
      .                   System { .. } => bug!("system abi should be selected elsewhere"),
      .                   EfiApi => bug!("eficall abi should be selected elsewhere"),
      .           
      .                   Stdcall { .. } => Conv::X86Stdcall,
      .                   Fastcall => Conv::X86Fastcall,
-- line 2813 ----------------------------------------
-- line 2901 ----------------------------------------
      .               /// instead, where the instance is an `InstanceDef::Virtual`.
      .               #[inline]
      .               fn fn_abi_of_fn_ptr(
      .                   &self,
      .                   sig: ty::PolyFnSig<'tcx>,
      .                   extra_args: &'tcx ty::List<Ty<'tcx>>,
      .               ) -> Self::FnAbiOfResult {
      .                   // FIXME(eddyb) get a better `span` here.
      2 ( 0.00%)          let span = self.layout_tcx_at_span();
      2 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(tcx.fn_abi_of_fn_ptr(self.param_env().and((sig, extra_args))).map_err(
      .                       |err| self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args }),
      .                   ))
      .               }
      .           
      .               /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for
      .               /// direct calls to an `fn`.
      .               ///
      .               /// NB: that includes virtual calls, which are represented by "direct calls"
      .               /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).
      .               #[inline]
    248 ( 0.00%)      fn fn_abi_of_instance(
      .                   &self,
      .                   instance: ty::Instance<'tcx>,
      .                   extra_args: &'tcx ty::List<Ty<'tcx>>,
      .               ) -> Self::FnAbiOfResult {
      .                   // FIXME(eddyb) get a better `span` here.
    130 ( 0.00%)          let span = self.layout_tcx_at_span();
    266 ( 0.00%)          let tcx = self.tcx().at(span);
      .           
      .                   MaybeResult::from(
    586 ( 0.00%)              tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).map_err(|err| {
      .                           // HACK(eddyb) at least for definitions of/calls to `Instance`s,
      .                           // we can get some kind of span even if one wasn't provided.
      .                           // However, we don't do this early in order to avoid calling
      .                           // `def_span` unconditionally (which may have a perf penalty).
      .                           let span = if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };
      .                           self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })
      .                       }),
      .                   )
    248 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}
      .           
      3 ( 0.00%)  fn fn_abi_of_fn_ptr<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
      .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
      2 ( 0.00%)      let (param_env, (sig, extra_args)) = query.into_parts();
      .           
      7 ( 0.00%)      LayoutCx { tcx, param_env }.fn_abi_new_uncached(
      4 ( 0.00%)          sig,
      .                   extra_args,
      .                   None,
      .                   CodegenFnAttrFlags::empty(),
      .                   false,
      .               )
      4 ( 0.00%)  }
      .           
    360 ( 0.00%)  fn fn_abi_of_instance<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               query: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
      .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
    320 ( 0.00%)      let (param_env, (instance, extra_args)) = query.into_parts();
      .           
    160 ( 0.00%)      let sig = instance.fn_sig_for_fn_abi(tcx, param_env);
      .           
    200 ( 0.00%)      let caller_location = if instance.def.requires_caller_location(tcx) {
      .                   Some(tcx.caller_location_ty())
      .               } else {
      .                   None
      .               };
      .           
     40 ( 0.00%)      let attrs = tcx.codegen_fn_attrs(instance.def_id()).flags;
      .           
    320 ( 0.00%)      LayoutCx { tcx, param_env }.fn_abi_new_uncached(
    160 ( 0.00%)          sig,
      .                   extra_args,
      .                   caller_location,
      .                   attrs,
    200 ( 0.00%)          matches!(instance.def, ty::InstanceDef::Virtual(..)),
      .               )
    360 ( 0.00%)  }
      .           
      .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
      .               // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)
      .               // arguments of this method, into a separate `struct`.
    533 ( 0.00%)      fn fn_abi_new_uncached(
      .                   &self,
      .                   sig: ty::PolyFnSig<'tcx>,
      .                   extra_args: &[Ty<'tcx>],
      .                   caller_location: Option<Ty<'tcx>>,
      .                   codegen_fn_attr_flags: CodegenFnAttrFlags,
      .                   // FIXME(eddyb) replace this with something typed, like an `enum`.
      .                   force_thin_self_ptr: bool,
      .               ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
      .                   debug!("fn_abi_new_uncached({:?}, {:?})", sig, extra_args);
      .           
    615 ( 0.00%)          let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);
      .           
      .                   let conv = conv_from_spec_abi(self.tcx(), sig.abi);
      .           
      .                   let mut inputs = sig.inputs();
      .                   let extra_args = if sig.abi == RustCall {
      .                       assert!(!sig.c_variadic && extra_args.is_empty());
      .           
      .                       if let Some(input) = sig.inputs().last() {
-- line 3009 ----------------------------------------
-- line 3018 ----------------------------------------
      .                           }
      .                       } else {
      .                           bug!(
      .                               "argument to function with \"rust-call\" ABI \
      .                                   is not a tuple"
      .                           );
      .                       }
      .                   } else {
    164 ( 0.00%)              assert!(sig.c_variadic || extra_args.is_empty());
      .                       extra_args.to_vec()
      .                   };
      .           
     41 ( 0.00%)          let target = &self.tcx.sess.target;
    123 ( 0.00%)          let target_env_gnu_like = matches!(&target.env[..], "gnu" | "musl" | "uclibc");
    123 ( 0.00%)          let win_x64_gnu = target.os == "windows" && target.arch == "x86_64" && target.env == "gnu";
      .                   let linux_s390x_gnu_like =
    164 ( 0.00%)              target.os == "linux" && target.arch == "s390x" && target_env_gnu_like;
      .                   let linux_sparc64_gnu_like =
    164 ( 0.00%)              target.os == "linux" && target.arch == "sparc64" && target_env_gnu_like;
      .                   let linux_powerpc_gnu_like =
    246 ( 0.00%)              target.os == "linux" && target.arch == "powerpc" && target_env_gnu_like;
      .                   use SpecAbi::*;
    164 ( 0.00%)          let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);
      .           
      .                   // Handle safe Rust thin and fat pointers.
     41 ( 0.00%)          let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,
      .                                                 scalar: Scalar,
      .                                                 layout: TyAndLayout<'tcx>,
      .                                                 offset: Size,
      .                                                 is_return: bool| {
      .                       // Booleans are always an i1 that needs to be zero-extended.
      6 ( 0.00%)              if scalar.is_bool() {
     18 ( 0.00%)                  attrs.ext(ArgExtension::Zext);
      .                           return;
      .                       }
      .           
      .                       // Only pointer types handled below.
     44 ( 0.00%)              if scalar.value != Pointer {
      .                           return;
      .                       }
      .           
     44 ( 0.00%)              if !scalar.valid_range.contains(0) {
     78 ( 0.00%)                  attrs.set(ArgAttribute::NonNull);
      .                       }
      .           
    386 ( 0.00%)              if let Some(pointee) = layout.pointee_info_at(self, offset) {
      .                           if let Some(kind) = pointee.safe {
    117 ( 0.00%)                      attrs.pointee_align = Some(pointee.align);
      .           
      .                               // `Box` (`UniqueBorrowed`) are not necessarily dereferenceable
      .                               // for the entire duration of the function as they can be deallocated
      .                               // at any time. Set their valid size to 0.
    195 ( 0.00%)                      attrs.pointee_size = match kind {
      .                                   PointerKind::UniqueOwned => Size::ZERO,
      .                                   _ => pointee.size,
      .                               };
      .           
      .                               // `Box` pointer parameters never alias because ownership is transferred
      .                               // `&mut` pointer parameters never alias other parameters,
      .                               // or mutable global data
      .                               //
-- line 3078 ----------------------------------------
-- line 3080 ----------------------------------------
      .                               // and can be marked as both `readonly` and `noalias`, as
      .                               // LLVM's definition of `noalias` is based solely on memory
      .                               // dependencies rather than pointer equality
      .                               //
      .                               // Due to past miscompiles in LLVM, we apply a separate NoAliasMutRef attribute
      .                               // for UniqueBorrowed arguments, so that the codegen backend can decide whether
      .                               // or not to actually emit the attribute. It can also be controlled with the
      .                               // `-Zmutable-noalias` debugging option.
    195 ( 0.00%)                      let no_alias = match kind {
      .                                   PointerKind::Shared | PointerKind::UniqueBorrowed => false,
      .                                   PointerKind::UniqueOwned => true,
      .                                   PointerKind::Frozen => !is_return,
      .                               };
     22 ( 0.00%)                      if no_alias {
     44 ( 0.00%)                          attrs.set(ArgAttribute::NoAlias);
      .                               }
      .           
    117 ( 0.00%)                      if kind == PointerKind::Frozen && !is_return {
     44 ( 0.00%)                          attrs.set(ArgAttribute::ReadOnly);
      .                               }
      .           
     51 ( 0.00%)                      if kind == PointerKind::UniqueBorrowed && !is_return {
     15 ( 0.00%)                          attrs.set(ArgAttribute::NoAliasMutRef);
      .                               }
      .                           }
      .                       }
      .                   };
      .           
    615 ( 0.00%)          let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {
    155 ( 0.00%)              let is_return = arg_idx.is_none();
      .           
    221 ( 0.00%)              let layout = self.layout_of(ty)?;
    171 ( 0.00%)              let layout = if force_thin_self_ptr && arg_idx == Some(0) {
      .                           // Don't pass the vtable, it's not an argument of the virtual fn.
      .                           // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`
      .                           // or `&/&mut dyn Trait` because this is special-cased elsewhere in codegen
      .                           make_thin_self_ptr(self, layout)
      .                       } else {
      .                           layout
      .                       };
      .           
  1,300 ( 0.00%)              let mut arg = ArgAbi::new(self, layout, |layout, scalar, offset| {
    174 ( 0.00%)                  let mut attrs = ArgAttributes::new();
    312 ( 0.00%)                  adjust_for_rust_scalar(&mut attrs, scalar, *layout, offset, is_return);
      .                           attrs
    580 ( 0.00%)              });
      .           
     42 ( 0.00%)              if arg.layout.is_zst() {
      .                           // For some forsaken reason, x86_64-pc-windows-gnu
      .                           // doesn't ignore zero-sized struct arguments.
      .                           // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.
     24 ( 0.00%)                  if is_return
      .                               || rust_abi
      .                               || (!win_x64_gnu
      .                                   && !linux_s390x_gnu_like
      .                                   && !linux_sparc64_gnu_like
      .                                   && !linux_powerpc_gnu_like)
      .                           {
     12 ( 0.00%)                      arg.mode = PassMode::Ignore;
      .                           }
      .                       }
      .           
  1,891 ( 0.00%)              Ok(arg)
      .                   };
      .           
  1,681 ( 0.00%)          let mut fn_abi = FnAbi {
      .                       ret: arg_of(sig.output(), None)?,
     82 ( 0.00%)              args: inputs
      .                           .iter()
      .                           .cloned()
      .                           .chain(extra_args)
      .                           .chain(caller_location)
      .                           .enumerate()
     57 ( 0.00%)                  .map(|(i, ty)| arg_of(ty, Some(i)))
      .                           .collect::<Result<_, _>>()?,
      .                       c_variadic: sig.c_variadic,
      .                       fixed_count: inputs.len(),
      .                       conv,
      .                       can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),
      .                   };
      .                   self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;
      .                   debug!("fn_abi_new_uncached = {:?}", fn_abi);
    164 ( 0.00%)          Ok(self.tcx.arena.alloc(fn_abi))
    328 ( 0.00%)      }
      .           
      .               fn fn_abi_adjust_for_abi(
      .                   &self,
      .                   fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,
      .                   abi: SpecAbi,
      .               ) -> Result<(), FnAbiError<'tcx>> {
      .                   if abi == SpecAbi::Unadjusted {
      .                       return Ok(());
      .                   }
      .           
      .                   if abi == SpecAbi::Rust
      .                       || abi == SpecAbi::RustCall
      .                       || abi == SpecAbi::RustIntrinsic
      .                       || abi == SpecAbi::PlatformIntrinsic
      .                   {
    512 ( 0.00%)              let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {
     89 ( 0.00%)                  if arg.is_ignore() {
      .                               return;
      .                           }
      .           
    468 ( 0.00%)                  match arg.layout.abi {
      .                               Abi::Aggregate { .. } => {}
      .           
      .                               // This is a fun case! The gist of what this is doing is
      .                               // that we want callers and callees to always agree on the
      .                               // ABI of how they pass SIMD arguments. If we were to *not*
      .                               // make these arguments indirect then they'd be immediates
      .                               // in LLVM, which means that they'd used whatever the
      .                               // appropriate ABI is for the callee and the caller. That
-- line 3192 ----------------------------------------
-- line 3211 ----------------------------------------
      .                                   return;
      .                               }
      .           
      .                               _ => return,
      .                           }
      .           
      .                           // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.
      .                           // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.
     30 ( 0.00%)                  let max_by_val_size = Pointer.size(self) * 2;
      .                           let size = arg.layout.size;
      .           
    120 ( 0.00%)                  if arg.layout.is_unsized() || size > max_by_val_size {
      .                               arg.make_indirect();
      .                           } else {
      .                               // We want to pass small aggregates as immediates, but using
      .                               // a LLVM aggregate type for this leads to bad optimizations,
      .                               // so we pick an appropriately sized integer type instead.
      .                               arg.cast_to(Reg { kind: RegKind::Integer, size });
      .                           }
    295 ( 0.00%)              };
     39 ( 0.00%)              fixup(&mut fn_abi.ret);
      .                       for arg in &mut fn_abi.args {
    264 ( 0.00%)                  fixup(arg);
      .                       }
      .                   } else {
     12 ( 0.00%)              fn_abi.adjust_for_foreign_abi(self, abi)?;
      .                   }
      .           
      .                   Ok(())
      .               }
      .           }
      .           
      .           fn make_thin_self_ptr<'tcx>(
      .               cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
-- line 3244 ----------------------------------------

 19,588 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
     12 ( 0.00%)      pub ty: Ty<'tcx>,
     60 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
    658 ( 0.00%)      pub scope: DefId,
  1,818 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
  9,313 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
     23 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
    535 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
     18 ( 0.00%)      BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
     72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
  1,544 ( 0.00%)      pub var: BoundVar,
  1,302 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
604,413 ( 0.15%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
  3,495 ( 0.00%)  #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
      .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 18,253 ( 0.00%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
  3,070 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 31,084 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .               ///
      .               /// ```rust
      .               /// fn foo() -> i32 { 1 }
      .               /// let bar: fn() -> i32 = foo;
      .               /// ```
      .               FnPtr(PolyFnSig<'tcx>),
      .           
      .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    416 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
      .           
      .               /// The anonymous type of a closure. Used to represent the type of
      .               /// `|a| a`.
      .               Closure(DefId, SubstsRef<'tcx>),
      .           
      .               /// The anonymous type of a generator. Used to represent the type of
      .               /// `|a| yield a`.
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
     12 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 760 ----------------------------------------
      .               }
      .           
      .               /// Returns the type of this inline const.
      .               pub fn ty(self) -> Ty<'tcx> {
      .                   self.split().ty.expect_ty()
      .               }
      .           }
      .           
    722 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    341 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum ExistentialPredicate<'tcx> {
      .               /// E.g., `Iterator`.
      .               Trait(ExistentialTraitRef<'tcx>),
      .               /// E.g., `Iterator::Item = T`.
      .               Projection(ExistentialProjection<'tcx>),
      .               /// E.g., `Send`.
     18 ( 0.00%)      AutoTrait(DefId),
      .           }
      .           
      .           impl<'tcx> ExistentialPredicate<'tcx> {
      .               /// Compares via an ordering that will not change if modules are reordered or other changes are
      .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
      .                   use self::ExistentialPredicate::*;
     80 ( 0.00%)          match (*self, *other) {
      .                       (Trait(_), Trait(_)) => Ordering::Equal,
      .                       (Projection(ref a), Projection(ref b)) => {
      .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
      .                       }
      .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
      .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
      .                       }
      .                       (Trait(_), _) => Ordering::Less,
      .                       (Projection(_), Trait(_)) => Ordering::Greater,
      .                       (Projection(_), _) => Ordering::Less,
      .                       (AutoTrait(_), _) => Ordering::Greater,
      .                   }
     84 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     36 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
      .                   use crate::ty::ToPredicate;
     20 ( 0.00%)          match self.skip_binder() {
      .                       ExistentialPredicate::Trait(tr) => {
      .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::Projection(p) => {
      .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
      .                       }
      .                       ExistentialPredicate::AutoTrait(did) => {
      .                           let trait_ref = self.rebind(ty::TraitRef {
      .                               def_id: did,
      .                               substs: tcx.mk_substs_trait(self_ty, &[]),
      .                           });
      .                           trait_ref.without_const().to_predicate(tcx)
      .                       }
      .                   }
     32 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .               /// Returns the "principal `DefId`" of this set of existential predicates.
      .               ///
      .               /// A Rust trait object type consists (in addition to a lifetime bound)
      .               /// of a set of trait bounds, which are separated into any number
      .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
      .               /// are the set `{Sync}`.
      .               ///
      .               /// It is also possible to have a "trivial" trait object that
      .               /// consists only of auto traits, with no principal - for example,
      .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
      .               /// is `{Send, Sync}`, while there is no principal. These trait objects
      .               /// have a "trivial" vtable consisting of just the size, alignment,
      .               /// and destructor.
      3 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     32 ( 0.00%)          self[0]
     23 ( 0.00%)              .map_bound(|this| match this {
      .                           ExistentialPredicate::Trait(tr) => Some(tr),
      .                           _ => None,
     12 ( 0.00%)              })
      .                       .transpose()
      9 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
      .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      8 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn projection_bounds<'a>(
      .                   &'a self,
      .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
      .                   self.iter().filter_map(|predicate| {
      .                       predicate
      .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
 20,599 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 13,366 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
     93 ( 0.00%)      pub def_id: DefId,
 10,078 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
     81 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
    324 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    243 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
    108 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
    162 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    216 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
    224 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
     28 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    308 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
     39 ( 0.00%)          self.skip_binder().def_id
     13 ( 0.00%)      }
      .           
     51 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    102 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     51 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
      .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     60 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    170 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ExistentialTraitRef<'tcx> {
     42 ( 0.00%)      pub def_id: DefId,
    234 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> ExistentialTraitRef<'tcx> {
     12 ( 0.00%)      pub fn erase_self_ty(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .               ) -> ty::ExistentialTraitRef<'tcx> {
      .                   // Assert there is a Self.
      .                   trait_ref.substs.type_at(0);
      .           
      .                   ty::ExistentialTraitRef {
      .                       def_id: trait_ref.def_id,
      .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
      .                   }
     12 ( 0.00%)      }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
      .                   // otherwise the escaping vars would be captured by the binder
      .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
      .               pub fn def_id(&self) -> DefId {
      .                   self.skip_binder().def_id
      .               }
      .           
      .               /// Object types don't have a self type specified. Therefore, when
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      6 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     10 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      8 ( 0.00%)      }
      .           }
      .           
  2,911 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     60 ( 0.00%)  #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    620 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  7,772 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
    700 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  2,448 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  6,314 ( 0.00%)          Binder(value, ty::List::empty())
    698 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
  1,253 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 25,710 ( 0.01%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     12 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    114 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
  1,949 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  7,299 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    110 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
    121 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  3,369 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     24 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    430 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    242 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    210 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    168 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     48 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    192 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      .               pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
-- line 1202 ----------------------------------------
-- line 1210 ----------------------------------------
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    216 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     24 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     24 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    264 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    144 ( 0.00%)          self.substs.type_at(0)
     96 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  2,631 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    837 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
     27 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    676 ( 0.00%)      pub c_variadic: bool,
     85 ( 0.00%)      pub unsafety: hir::Unsafety,
  1,190 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
    730 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  4,357 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  1,460 ( 0.00%)      }
      .           
    492 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  4,089 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    984 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    180 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    198 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     31 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    207 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     62 ( 0.00%)          self.skip_binder().c_variadic
     31 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
     72 ( 0.00%)          self.skip_binder().unsafety
     36 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    912 ( 0.00%)          self.skip_binder().abi
    228 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      8 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     10 ( 0.00%)  #[derive(HashStable)]
      .           pub struct ParamTy {
     12 ( 0.00%)      pub index: u32,
      .               pub name: Symbol,
      .           }
      .           
      .           impl<'tcx> ParamTy {
      6 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
      .                   ParamTy { index, name }
      3 ( 0.00%)      }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
      .                   ParamTy::new(def.index, def.name)
      .               }
      .           
      .               #[inline]
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
    100 ( 0.00%)      pub index: u32,
    100 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
131,171 ( 0.03%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     36 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
  2,604 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
 11,108 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    626 ( 0.00%)      pub def_id: DefId,
  5,283 ( 0.00%)      pub index: u32,
  3,424 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
    108 ( 0.00%)      pub index: u32,
     80 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
      .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
     12 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
    222 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     27 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  1,674 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 10,539 ( 0.00%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
    172 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    154 ( 0.00%)          match self.kind() {
     53 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
    960 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  1,526 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    816 ( 0.00%)          match self.kind() {
     84 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
      .               }
-- line 1763 ----------------------------------------
-- line 1775 ----------------------------------------
      .               /// Returns `true` if this type is a `str`.
      .               #[inline]
      .               pub fn is_str(&self) -> bool {
      .                   *self.kind() == Str
      .               }
      .           
      .               #[inline]
      .               pub fn is_param(&self, index: u32) -> bool {
      1 ( 0.00%)          match self.kind() {
      .                       ty::Param(ref data) => data.index == index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_slice(&self) -> bool {
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
      8 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
      2 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      4 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
      2 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    175 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
    884 ( 0.00%)          match self.kind() {
    141 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
     16 ( 0.00%)          matches!(
     34 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this type is a floating point type.
      .               #[inline]
      .               pub fn is_floating_point(&self) -> bool {
     25 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_trait(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind(), Dynamic(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
      .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
    163 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
     48 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
    134 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
    118 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    213 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
      .               pub fn is_numeric(&self) -> bool {
      .                   self.is_integral() || self.is_floating_point()
      .               }
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      3 ( 0.00%)          matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
      .                   matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
-- line 1978 ----------------------------------------
-- line 1979 ----------------------------------------
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
  7,706 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
 53,660 ( 0.01%)          match self.kind() {
  8,472 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
    998 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     10 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
 15,412 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
    108 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      9 ( 0.00%)      }
      .           
  2,448 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,224 ( 0.00%)          match self.kind() {
    918 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  2,754 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
    171 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      .                   matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
 16,242 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      2 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     52 ( 0.00%)          match self.kind() {
     30 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      4 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  3,438 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  2,292 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
     26 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    357 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  3,438 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
    616 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    924 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
    308 ( 0.00%)      }
      .           }

642,039 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 32,832 ( 0.01%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 29,297 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  3,644 ( 0.00%)          self.stride += Group::WIDTH;
  3,644 ( 0.00%)          self.pos += self.stride;
  1,822 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  1,144 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  1,785 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,290 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  4,365 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    948 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  2,532 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  3,104 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
     13 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  2,890 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  4,740 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,144 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  1,144 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  2,288 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    572 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  5,148 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  4,431 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 18,403 ( 0.00%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 18,403 ( 0.00%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    572 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     54 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 52,046 ( 0.01%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 13,022 ( 0.00%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 21,108 ( 0.01%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
107,134 ( 0.03%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 16,953 ( 0.00%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 28,144 ( 0.01%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    768 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  1,146 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     92 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    572 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  2,421 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  1,319 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  1,144 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    605 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  3,744 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      6 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  2,247 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  3,000 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 32,873 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 95,982 ( 0.02%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 45,016 ( 0.01%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
155,642 ( 0.04%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 65,110 ( 0.02%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 52,088 ( 0.01%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
 94,275 ( 0.02%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 31,425 ( 0.01%)          *self.ctrl(index) = ctrl;
 31,425 ( 0.01%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  1,144 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  3,748 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
    363 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  1,875 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  1,144 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    264 ( 0.00%)          Ok(guard(new_table, move |self_| {
    572 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    264 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    237 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  1,324 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  1,997 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  3,364 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 36,806 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 18,467 ( 0.00%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
    948 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
    474 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
    948 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 19,536 ( 0.00%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 14,095 ( 0.00%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  2,829 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

152,107 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  ./string/../sysdeps/x86_64/strcmp.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
61,375,428 (15.39%)  events annotated

