--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name fast_math src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=e9e0fb5cf94e787a -C extra-filename=-e9e0fb5cf94e787a --out-dir /usr/home/liquid/tmp/.tmpSFFnRI/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpSFFnRI/target/release/deps --extern ieee754=/usr/home/liquid/tmp/.tmpSFFnRI/target/release/deps/libieee754-6980cb943a1bfac7.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-fast-math-0.1.1-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
178,894,510 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,308,916 ( 5.76%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 4,991,670 ( 2.79%)  ./malloc/malloc.c:_int_malloc
 4,845,200 ( 2.71%)  ./elf/dl-lookup.c:do_lookup_x
 4,670,795 ( 2.61%)  ./malloc/malloc.c:_int_free
 4,141,271 ( 2.31%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 2,946,453 ( 1.65%)  ./malloc/malloc.c:malloc
 2,613,276 ( 1.46%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 2,139,033 ( 1.20%)  ./elf/do-rel.h:_dl_relocate_object
 2,022,438 ( 1.13%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 1,999,541 ( 1.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,680,334 ( 0.94%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,628,189 ( 0.91%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,530,602 ( 0.86%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,372,342 ( 0.77%)  ./malloc/malloc.c:free
   993,715 ( 0.56%)  ./stdlib/msort.c:msort_with_tmp.part.0
   866,296 ( 0.48%)  ./elf/dl-lookup.c:check_match
   734,729 ( 0.41%)  ./malloc/malloc.c:malloc_consolidate
   727,083 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   726,357 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   724,670 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   723,053 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   641,989 ( 0.36%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
   581,298 ( 0.32%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   573,023 ( 0.32%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   572,457 ( 0.32%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
   570,629 ( 0.32%)  ???:llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*)
   553,956 ( 0.31%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
   553,000 ( 0.31%)  ???:llvm::InstCombinerImpl::run()
   531,375 ( 0.30%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   530,419 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   523,697 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   506,511 ( 0.28%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   487,999 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   482,317 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   477,630 ( 0.27%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
   462,035 ( 0.26%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   446,106 ( 0.25%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
   425,875 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
   405,125 ( 0.23%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   386,700 ( 0.22%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
   381,667 ( 0.21%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   381,620 ( 0.21%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
   375,979 ( 0.21%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
   373,079 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
   342,634 ( 0.19%)  ./malloc/malloc.c:realloc
   331,631 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
   331,083 ( 0.19%)  ???:int llvm::array_pod_sort_comparator<llvm::X86MemoryFoldTableEntry>(void const*, void const*)
   322,925 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   322,203 ( 0.18%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
   310,634 ( 0.17%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
   307,746 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   305,849 ( 0.17%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
   296,549 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   293,391 ( 0.16%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
   291,089 ( 0.16%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
   285,879 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   281,329 ( 0.16%)  ???:llvm::KnownBits::computeForAddSub(bool, bool, llvm::KnownBits const&, llvm::KnownBits)
   279,354 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   278,431 ( 0.16%)  ???:collectBitParts(llvm::Value*, bool, bool, std::map<llvm::Value*, llvm::Optional<(anonymous namespace)::BitPart>, std::less<llvm::Value*>, std::allocator<std::pair<llvm::Value* const, llvm::Optional<(anonymous namespace)::BitPart> > > >&, int, bool&)
   275,760 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   274,091 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   273,603 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   271,956 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   271,228 ( 0.15%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
   266,270 ( 0.15%)  ./malloc/malloc.c:calloc
   266,046 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   255,735 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   254,300 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   254,019 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   253,581 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   250,836 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   248,844 ( 0.14%)  ???:llvm::ValueHandleBase::AddToUseList()
   247,524 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   241,738 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   240,081 ( 0.13%)  ./malloc/malloc.c:_int_realloc
   239,776 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   239,776 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   239,776 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   234,872 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   231,470 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   231,214 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   230,950 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
   226,005 ( 0.13%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
   221,269 ( 0.12%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   217,459 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
   217,437 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   217,328 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   214,637 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   211,968 ( 0.12%)  ???:llvm::RegisterClassInfo::computePSetLimit(unsigned int) const
   211,554 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   211,360 ( 0.12%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
   208,791 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   206,222 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   206,211 ( 0.12%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
   205,858 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   200,695 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   196,947 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   195,174 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   194,579 ( 0.11%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   184,884 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::sty::TraitRef>
   184,670 ( 0.10%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   182,698 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   182,490 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   179,777 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   179,709 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 27,420 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    359 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      8 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    173 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 16,382 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 14,384 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 40,165 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      5 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    494 ( 0.00%)          let _ = &self[a];
    738 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    147 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     54 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    838 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    238 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
    782 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
    408 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
 83,486 ( 0.05%)          while left < right {
112,547 ( 0.06%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 41,086 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 34,263 ( 0.02%)              if cmp == Less {
 39,293 ( 0.02%)                  left = mid + 1;
 18,564 ( 0.01%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
 99,660 ( 0.06%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  5,058 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  1,380 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  1,380 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  1,380 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

 80,033 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 208 ----------------------------------------
     .               /// There is no built-in impl. There may be some other
     .               /// candidate (a where-clause or user-defined impl).
     .               None,
     .               /// It is unknown whether there is an impl.
     .               Ambiguous,
     .           }
     .           
     .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 5,328 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
70,925 ( 0.04%)          SelectionContext {
     .                       infcx,
 9,749 ( 0.01%)              freshener: infcx.freshener_keep_static(),
     .                       intercrate: false,
     .                       intercrate_ambiguity_causes: None,
     .                       allow_negative_impls: false,
     .                       query_mode: TraitQueryMode::Standard,
     .                   }
 4,440 ( 0.00%)      }
     .           
     .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
     .                   SelectionContext {
     .                       infcx,
     .                       freshener: infcx.freshener_keep_static(),
     .                       intercrate: true,
     .                       intercrate_ambiguity_causes: None,
     .                       allow_negative_impls: false,
-- line 233 ----------------------------------------
-- line 245 ----------------------------------------
     .                       freshener: infcx.freshener_keep_static(),
     .                       intercrate: false,
     .                       intercrate_ambiguity_causes: None,
     .                       allow_negative_impls,
     .                       query_mode: TraitQueryMode::Standard,
     .                   }
     .               }
     .           
   640 ( 0.00%)      pub fn with_query_mode(
     .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
     .                   query_mode: TraitQueryMode,
     .               ) -> SelectionContext<'cx, 'tcx> {
     .                   debug!(?query_mode, "with_query_mode");
 1,280 ( 0.00%)          SelectionContext {
     .                       infcx,
    80 ( 0.00%)              freshener: infcx.freshener_keep_static(),
     .                       intercrate: false,
     .                       intercrate_ambiguity_causes: None,
     .                       allow_negative_impls: false,
     .                       query_mode,
     .                   }
   480 ( 0.00%)      }
     .           
     .               /// Enables tracking of intercrate ambiguity causes. These are
     .               /// used in coherence to give improved diagnostics. We don't do
     .               /// this until we detect a coherence error because it can lead to
     .               /// false overflow results (#47139) and because it costs
     .               /// computation time.
     .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
     .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
     .               /// was enabled and disables tracking at the same time. If
     .               /// tracking is not enabled, just returns an empty vector.
     .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
     .                   assert!(self.intercrate);
     .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
     .               }
     .           
     .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
25,140 ( 0.01%)          self.infcx
   723 ( 0.00%)      }
     .           
     .               pub fn tcx(&self) -> TyCtxt<'tcx> {
49,166 ( 0.03%)          self.infcx.tcx
     .               }
     .           
     .               pub fn is_intercrate(&self) -> bool {
   802 ( 0.00%)          self.intercrate
     .               }
     .           
     .               ///////////////////////////////////////////////////////////////////////////
     .               // Selection
     .               //
     .               // The selection phase tries to identify *how* an obligation will
     .               // be resolved. For example, it will identify which impl or
     .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
     .               // 1. If no applicable impl or parameter bound can be found.
     .               // 2. If the output type parameters in the obligation do not match
     .               //    those specified by the impl/bound. For example, if the obligation
     .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
     .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
     .           
     .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
     .               /// type environment by performing unification.
 2,632 ( 0.00%)      #[instrument(level = "debug", skip(self))]
 3,384 ( 0.00%)      pub fn select(
     .                   &mut self,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
 3,144 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
     .                       Err(SelectionError::Overflow) => {
     .                           // In standard mode, overflow must have been caught and reported
     .                           // earlier.
     .                           assert!(self.query_mode == TraitQueryMode::Canonical);
     .                           return Err(SelectionError::Overflow);
     .                       }
     .                       Err(SelectionError::Ambiguous(_)) => {
     .                           return Ok(None);
     .                       }
     .                       Err(e) => {
 2,240 ( 0.00%)                  return Err(e);
     .                       }
     .                       Ok(None) => {
   192 ( 0.00%)                  return Ok(None);
     .                       }
   336 ( 0.00%)              Ok(Some(candidate)) => candidate,
     .                   };
     .           
   560 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
     .                       Err(SelectionError::Overflow) => {
     .                           assert!(self.query_mode == TraitQueryMode::Canonical);
     .                           Err(SelectionError::Overflow)
     .                       }
     .                       Err(e) => Err(e),
     .                       Ok(candidate) => {
     .                           debug!(?candidate, "confirmed");
   672 ( 0.00%)                  Ok(Some(candidate))
     .                       }
     .                   }
     .               }
     .           
 3,760 ( 0.00%)      crate fn select_from_obligation(
     .                   &mut self,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
     .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
     .           
     .                   let pec = &ProvisionalEvaluationCache::default();
     .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
     .           
   752 ( 0.00%)          self.candidate_from_obligation(&stack)
 3,384 ( 0.00%)      }
     .           
     .               ///////////////////////////////////////////////////////////////////////////
     .               // EVALUATION
     .               //
     .               // Tests whether an obligation can be selected or whether an impl
     .               // can be applied to particular types. It skips the "confirmation"
     .               // step and hence completely ignores output type parameters.
     .               //
-- line 372 ----------------------------------------
-- line 384 ----------------------------------------
     .                   self.evaluate_root_obligation(obligation)
     .                       .expect("Overflow should be caught earlier in standard query mode")
     .                       .may_apply()
     .               }
     .           
     .               /// Evaluates whether the obligation `obligation` can be satisfied
     .               /// and returns an `EvaluationResult`. This is meant for the
     .               /// *initial* call.
   160 ( 0.00%)      pub fn evaluate_root_obligation(
     .                   &mut self,
     .                   obligation: &PredicateObligation<'tcx>,
     .               ) -> Result<EvaluationResult, OverflowError> {
     .                   self.evaluation_probe(|this| {
   240 ( 0.00%)              this.evaluate_predicate_recursively(
     .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
     .                           obligation.clone(),
     .                       )
     .                   })
   160 ( 0.00%)      }
     .           
     .               fn evaluation_probe(
     .                   &mut self,
     .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
     .               ) -> Result<EvaluationResult, OverflowError> {
 4,792 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
   160 ( 0.00%)              let result = op(self)?;
     .           
 4,032 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
     .                           Ok(()) => {}
     .                           Err(_) => return Ok(EvaluatedToErr),
     .                       }
     .           
 2,880 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
     .                           None => Ok(result),
     .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
     .                       }
     .                   })
     .               }
     .           
     .               /// Evaluates the predicates in `predicates` recursively. Note that
     .               /// this applies projections in the predicates, and therefore
     .               /// is run within an inference probe.
10,160 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
     .               fn evaluate_predicates_recursively<'o, I>(
     .                   &mut self,
     .                   stack: TraitObligationStackList<'o, 'tcx>,
     .                   predicates: I,
     .               ) -> Result<EvaluationResult, OverflowError>
     .               where
     .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
     .               {
     .                   let mut result = EvaluatedToOk;
 2,062 ( 0.00%)          for obligation in predicates {
    12 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
     6 ( 0.00%)              if let EvaluatedToErr = eval {
     .                           // fast-path - EvaluatedToErr is the top of the lattice,
     .                           // so we don't need to look on the other predicates.
     .                           return Ok(EvaluatedToErr);
     .                       } else {
     .                           result = cmp::max(result, eval);
     .                       }
     .                   }
     .                   Ok(result)
     .               }
     .           
   830 ( 0.00%)      #[instrument(
     .                   level = "debug",
     .                   skip(self, previous_stack),
     .                   fields(previous_stack = ?previous_stack.head())
   747 ( 0.00%)      )]
     .               fn evaluate_predicate_recursively<'o>(
     .                   &mut self,
     .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
     .                   obligation: PredicateObligation<'tcx>,
     .               ) -> Result<EvaluationResult, OverflowError> {
     .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
     .                   // a `PredicateObligation`. These are distinct types, so we can't
     .                   // use any `Option` combinator method that would force them to be
     .                   // the same.
   166 ( 0.00%)          match previous_stack.head() {
     6 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
    80 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
     .                   }
     .           
   498 ( 0.00%)          let result = ensure_sufficient_stack(|| {
    83 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
   830 ( 0.00%)              match bound_predicate.skip_binder() {
     .                           ty::PredicateKind::Trait(t) => {
     .                               let t = bound_predicate.rebind(t);
     .                               debug_assert!(!t.has_escaping_bound_vars());
     .                               let obligation = obligation.with(t);
 1,065 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
     .                           }
     .           
     .                           ty::PredicateKind::Subtype(p) => {
     .                               let p = bound_predicate.rebind(p);
     .                               // Does this code ever run?
     .                               match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
     .                                   Some(Ok(InferOk { mut obligations, .. })) => {
     .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
-- line 483 ----------------------------------------
-- line 545 ----------------------------------------
     .                               } else {
     .                                   Ok(EvaluatedToErr)
     .                               }
     .                           }
     .           
     .                           ty::PredicateKind::Projection(data) => {
     .                               let data = bound_predicate.rebind(data);
     .                               let project_obligation = obligation.with(data);
    72 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
    60 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
     .                                       'compute_res: {
     .                                           // If we've previously marked this projection as 'complete', thne
     .                                           // use the final cached result (either `EvaluatedToOk` or
     .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
     .                                           // sub-obligations.
    48 ( 0.00%)                                  if let Some(key) =
   108 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
     .                                           {
    96 ( 0.00%)                                      if let Some(cached_res) = self
     .                                                   .infcx
     .                                                   .inner
     .                                                   .borrow_mut()
     .                                                   .projection_cache()
     .                                                   .is_complete(key)
     .                                               {
     .                                                   break 'compute_res Ok(cached_res);
     .                                               }
     .                                           }
     .           
    24 ( 0.00%)                                  self.add_depth(
     .                                               subobligations.iter_mut(),
    24 ( 0.00%)                                      obligation.recursion_depth,
     .                                           );
    24 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
    36 ( 0.00%)                                      previous_stack,
    60 ( 0.00%)                                      subobligations,
     .                                           );
    48 ( 0.00%)                                  if let Ok(res) = res {
    24 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
    48 ( 0.00%)                                          if let Some(key) =
    12 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
    84 ( 0.00%)                                                  self, data,
     .                                                       )
     .                                                   {
     .                                                       // If the result is something that we can cache, then mark this
     .                                                       // entry as 'complete'. This will allow us to skip evaluating the
     .                                                       // suboligations at all the next time we evaluate the projection
     .                                                       // predicate.
    84 ( 0.00%)                                              self.infcx
     .                                                           .inner
     .                                                           .borrow_mut()
     .                                                           .projection_cache()
     .                                                           .complete(key, res);
     .                                                   }
     .                                               }
     .                                           }
     .                                           res
-- line 601 ----------------------------------------
-- line 693 ----------------------------------------
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
     .                               bug!("TypeWellFormedFromEnv is only used for chalk")
     .                           }
     .                       }
    83 ( 0.00%)          });
     .           
     .                   debug!("finished: {:?} from {:?}", result, obligation);
     .           
     .                   result
     .               }
     .           
 1,491 ( 0.00%)      #[instrument(skip(self, previous_stack), level = "debug")]
     .               fn evaluate_trait_predicate_recursively<'o>(
     .                   &mut self,
     .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
     .                   mut obligation: TraitObligation<'tcx>,
     .               ) -> Result<EvaluationResult, OverflowError> {
   142 ( 0.00%)          if !self.intercrate
     .                       && obligation.is_global()
     .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
     .                   {
     .                       // If a param env has no global bounds, global obligations do not
     .                       // depend on its particular value in order to work, so we can clear
     .                       // out the param env and get better caching.
     .                       debug!("in global");
    84 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
     .                   }
     .           
     .                   let stack = self.push_stack(previous_stack, &obligation);
     .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
   142 ( 0.00%)          let mut param_env = obligation.param_env;
     .           
     .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
    71 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
   852 ( 0.00%)              pred
     .                   });
     .           
     .                   debug!(?fresh_trait_pred);
     .           
   142 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
     .                       debug!(?result, "CACHE HIT");
     .                       return Ok(result);
     .                   }
     .           
     .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
     .                       debug!(?result, "PROVISIONAL CACHE HIT");
     .                       stack.update_reached_depth(result.reached_depth);
     .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
     .                   // stack. If so, we don't want to insert the result into the
     .                   // main cache (it is cycle dependent) nor the provisional
     .                   // cache (which is meant for things that have completed but
     .                   // for a "backedge" -- this result *is* the backedge).
     .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
     .                       return Ok(cycle_result);
     .                   }
     .           
   639 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
    71 ( 0.00%)          let result = result?;
     .           
   355 ( 0.00%)          if !result.must_apply_modulo_regions() {
     .                       stack.cache().on_failure(stack.dfn);
     .                   }
     .           
    71 ( 0.00%)          let reached_depth = stack.reached_depth.get();
   142 ( 0.00%)          if reached_depth >= stack.depth {
     .                       debug!(?result, "CACHE MISS");
 1,349 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
     .           
     .                       stack.cache().on_completion(
   142 ( 0.00%)                  stack.dfn,
     .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
     .                               // Create a new `DepNode` that has dependencies on:
     .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
     .                               // entry being crated
     .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
     .                               // provisional caches entries and inserting them into the evaluation cache
     .                               //
     .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 839 ----------------------------------------
     .               fn check_evaluation_cycle(
     .                   &mut self,
     .                   stack: &TraitObligationStack<'_, 'tcx>,
     .               ) -> Option<EvaluationResult> {
     .                   if let Some(cycle_depth) = stack
     .                       .iter()
     .                       .skip(1) // Skip top-most frame.
     .                       .find(|prev| {
     6 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
     .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
     .                       })
     .                       .map(|stack| stack.depth)
     .                   {
     .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
     .           
     .                       // If we have a stack like `A B C D E A`, where the top of
     .                       // the stack is the final `A`, then this will iterate over
-- line 855 ----------------------------------------
-- line 874 ----------------------------------------
     .                           debug!("evaluate_stack --> recursive, inductive");
     .                           Some(EvaluatedToRecur)
     .                       }
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
   639 ( 0.00%)      fn evaluate_stack<'o>(
     .                   &mut self,
     .                   stack: &TraitObligationStack<'o, 'tcx>,
     .               ) -> Result<EvaluationResult, OverflowError> {
     .                   // In intercrate mode, whenever any of the generics are unbound,
     .                   // there can always be an impl. Even if there are no impls in
     .                   // this crate, perhaps the type would be unified with
     .                   // something from another crate that does provide an impl.
     .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
     .                   // imagine, this is just where we started. To avoid that, we
     .                   // check for unbound variables and return an ambiguous (hence possible)
     .                   // match if we've seen this trait before.
     .                   //
     .                   // This suffices to allow chains like `FnMut` implemented in
     .                   // terms of `Fn` etc, but we could probably make this more
     .                   // precise still.
     .                   let unbound_input_types =
    71 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
     .           
   213 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
     .                       // This check was an imperfect workaround for a bug in the old
     .                       // intercrate mode; it should be removed when that goes away.
   355 ( 0.00%)              if unbound_input_types && self.intercrate {
     .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
     .                           // Heuristics: show the diagnostics when there are no candidates in crate.
     .                           if self.intercrate_ambiguity_causes.is_some() {
     .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
     .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
     .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
     .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
     .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
     .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
     .                                   }
     .                               }
     .                           }
     .                           return Ok(EvaluatedToAmbig);
     .                       }
     .                   }
     .           
   142 ( 0.00%)          if unbound_input_types
     .                       && stack.iter().skip(1).any(|prev| {
     6 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
     .                               && self.match_fresh_trait_refs(
     8 ( 0.00%)                          stack.fresh_trait_pred,
     8 ( 0.00%)                          prev.fresh_trait_pred,
     .                                   prev.obligation.param_env,
     .                               )
     .                       })
     .                   {
     .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
     .                       return Ok(EvaluatedToUnknown);
     .                   }
     .           
   768 ( 0.00%)          match self.candidate_from_obligation(stack) {
   264 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
     .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
     .                       Ok(None) => Ok(EvaluatedToAmbig),
     .                       Err(Overflow) => Err(OverflowError::Canonical),
     .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
     .                       Err(..) => Ok(EvaluatedToErr),
     .                   }
   710 ( 0.00%)      }
     .           
     .               /// For defaulted traits, we use a co-inductive strategy to solve, so
     .               /// that recursion is ok. This routine returns `true` if the top of the
     .               /// stack (`cycle[0]`):
     .               ///
     .               /// - is a defaulted trait,
     .               /// - it also appears in the backtrace at some position `X`,
     .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 998 ----------------------------------------
     .                   skip(self, stack),
     .                   fields(depth = stack.obligation.recursion_depth)
     .               )]
     .               fn evaluate_candidate<'o>(
     .                   &mut self,
     .                   stack: &TraitObligationStack<'o, 'tcx>,
     .                   candidate: &SelectionCandidate<'tcx>,
     .               ) -> Result<EvaluationResult, OverflowError> {
   992 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
     .                       let candidate = (*candidate).clone();
 7,936 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
     .                           Ok(selection) => {
     .                               debug!(?selection);
 1,984 ( 0.00%)                      this.evaluate_predicates_recursively(
     .                                   stack.list(),
 6,448 ( 0.00%)                          selection.nested_obligations().into_iter(),
     .                               )
     .                           }
     .                           Err(..) => Ok(EvaluatedToErr),
     .                       }
     .                   })?;
     .           
     .                   // If we erased any lifetimes, then we want to use
     .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
     .                   &self,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
     .               ) -> Option<EvaluationResult> {
     .                   // Neither the global nor local cache is aware of intercrate
     .                   // mode, so don't do any caching. In particular, we might
     .                   // re-use the same `InferCtxt` with both an intercrate
     .                   // and non-intercrate `SelectionContext`
   142 ( 0.00%)          if self.intercrate {
     .                       return None;
     .                   }
     .           
     .                   let tcx = self.tcx();
     .                   if self.can_use_global_caches(param_env) {
   497 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
     .                           return Some(res);
     .                       }
     .                   }
   284 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
     .               }
     .           
   852 ( 0.00%)      fn insert_evaluation_cache(
     .                   &mut self,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
     .                   dep_node: DepNodeIndex,
     .                   result: EvaluationResult,
     .               ) {
     .                   // Avoid caching results that depend on more than just the trait-ref
     .                   // - the stack can create recursion.
   284 ( 0.00%)          if result.is_stack_dependent() {
     .                       return;
     .                   }
     .           
     .                   // Neither the global nor local cache is aware of intercrate
     .                   // mode, so don't do any caching. In particular, we might
     .                   // re-use the same `InferCtxt` with both an intercrate
     .                   // and non-intercrate `SelectionContext`
   142 ( 0.00%)          if self.intercrate {
     .                       return;
     .                   }
     .           
     .                   if self.can_use_global_caches(param_env) {
     .                       if !trait_pred.needs_infer() {
     .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
     .                           // This may overwrite the cache with the same value
     .                           // FIXME: Due to #50507 this overwrites the different values
     .                           // This should be changed to use HashMapExt::insert_same
     .                           // when that is fixed
    71 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
     .                           return;
     .                       }
     .                   }
     .           
     .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
     .                   self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
   568 ( 0.00%)      }
     .           
     .               /// For various reasons, it's possible for a subobligation
     .               /// to have a *lower* recursion_depth than the obligation used to create it.
     .               /// Projection sub-obligations may be returned from the projection cache,
     .               /// which results in obligations with an 'old' `recursion_depth`.
     .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
     .               /// subobligations without taking in a 'parent' depth, causing the
     .               /// generated subobligations to have a `recursion_depth` of `0`.
     .               ///
     .               /// To ensure that obligation_depth never decreases, we force all subobligations
     .               /// to have at least the depth of the original obligation.
    12 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
     .                   &self,
     .                   it: I,
     .                   min_depth: usize,
     .               ) {
     .                   it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
    24 ( 0.00%)      }
     .           
     .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
     .                   &self,
     .                   depth: usize,
     .                   error_obligation: &Obligation<'tcx, T>,
     .               ) -> Result<(), OverflowError> {
 2,120 ( 0.00%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
     .                       match self.query_mode {
     .                           TraitQueryMode::Standard => {
     .                               if self.infcx.is_tainted_by_errors() {
     .                                   return Err(OverflowError::ErrorReporting);
     .                               }
     .                               self.infcx.report_overflow_error(error_obligation, true);
     .                           }
     .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
     .               ) -> Result<(), OverflowError> {
     .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
     .               }
     .           
     .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
     .               where
     .                   OP: FnOnce(&mut Self) -> R,
     .               {
 1,287 ( 0.00%)          let (result, dep_node) =
 1,162 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
     .                   self.tcx().dep_graph.read_index(dep_node);
 1,188 ( 0.00%)          (result, dep_node)
     .               }
     .           
     .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
     .               /// for a negative goal and a negative impl for a positive goal
     .               #[instrument(level = "debug", skip(self))]
     .               fn filter_impls(
     .                   &mut self,
     .                   candidates: Vec<SelectionCandidate<'tcx>>,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> Vec<SelectionCandidate<'tcx>> {
     .                   let tcx = self.tcx();
     .                   let mut result = Vec::with_capacity(candidates.len());
     .           
 6,040 ( 0.00%)          for candidate in candidates {
     .                       // Respect const trait obligations
 1,515 ( 0.00%)              if obligation.is_const() {
     .                           match candidate {
     .                               // const impl
     .                               ImplCandidate(def_id)
     .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
     .                               // const param
     .                               ParamCandidate(trait_pred)
     .                                   if trait_pred.skip_binder().constness
     .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
     .                               ConstDropCandidate(_) => {}
     .                               _ => {
     .                                   // reject all other types of candidates
     .                                   continue;
     .                               }
     .                           }
     .                       }
     .           
 1,010 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
   988 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
   494 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
     .                               || self.allow_negative_impls
     .                           {
     .                               result.push(candidate);
     .                           }
     .                       } else {
     .                           result.push(candidate);
     .                       }
     .                   }
     .           
   388 ( 0.00%)          result
     .               }
     .           
     .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
   901 ( 0.00%)      #[instrument(level = "debug", skip(self))]
     .               fn filter_reservation_impls(
     .                   &mut self,
     .                   candidate: SelectionCandidate<'tcx>,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
     .                   let tcx = self.tcx();
     .                   // Treat reservation impls as ambiguity.
   190 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
    84 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
     .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
     .                               let attrs = tcx.get_attrs(def_id);
     .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
     .                               let value = attr.and_then(|a| a.value_str());
     .                               if let Some(value) = value {
     .                                   debug!(
     .                                       "filter_reservation_impls: \
     .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
     .                                           message: value.to_string(),
     .                                       },
     .                                   );
     .                               }
     .                           }
     .                           return Ok(None);
     .                       }
     .                   }
   318 ( 0.00%)          Ok(Some(candidate))
     .               }
     .           
     .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
     .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
     .           
   297 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
     .                       return None;
     .                   }
     .           
     .                   let obligation = &stack.obligation;
     .                   let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
     .           
     .                   // Okay to skip binder because of the nature of the
     .                   // trait-ref-is-knowable check, which does not care about
-- line 1254 ----------------------------------------
-- line 1286 ----------------------------------------
     .                   &mut self,
     .                   mut param_env: ty::ParamEnv<'tcx>,
     .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
     .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
     .                   // Neither the global nor local cache is aware of intercrate
     .                   // mode, so don't do any caching. In particular, we might
     .                   // re-use the same `InferCtxt` with both an intercrate
     .                   // and non-intercrate `SelectionContext`
   894 ( 0.00%)          if self.intercrate {
     .                       return None;
     .                   }
     .                   let tcx = self.tcx();
     .                   let mut pred = cache_fresh_trait_pred.skip_binder();
   894 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
     .           
   447 ( 0.00%)          if self.can_use_global_caches(param_env) {
 4,470 ( 0.00%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
 4,524 ( 0.00%)                  return Some(res);
     .                       }
     .                   }
 1,089 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
     .               }
     .           
     .               /// Determines whether can we safely cache the result
     .               /// of selecting an obligation. This is almost always `true`,
     .               /// except when dealing with certain `ParamCandidate`s.
     .               ///
     .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
     .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
     .               fn can_cache_candidate(
     .                   &self,
     .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
     .               ) -> bool {
     .                   // Neither the global nor local cache is aware of intercrate
     .                   // mode, so don't do any caching. In particular, we might
     .                   // re-use the same `InferCtxt` with both an intercrate
     .                   // and non-intercrate `SelectionContext`
   198 ( 0.00%)          if self.intercrate {
     .                       return false;
     .                   }
   297 ( 0.00%)          match result {
     .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
     .                       _ => true,
     .                   }
     .               }
     .           
     .               fn insert_candidate_cache(
     .                   &mut self,
     .                   mut param_env: ty::ParamEnv<'tcx>,
     .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
     .                   dep_node: DepNodeIndex,
     .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
     .               ) {
     .                   let tcx = self.tcx();
     .                   let mut pred = cache_fresh_trait_pred.skip_binder();
     .           
   198 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
     .           
     .                   if !self.can_cache_candidate(&candidate) {
     .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
     .                       return;
     .                   }
     .           
    99 ( 0.00%)          if self.can_use_global_caches(param_env) {
   286 ( 0.00%)              if let Err(Overflow) = candidate {
     .                           // Don't cache overflow globally; we only produce this in certain modes.
     .                       } else if !pred.needs_infer() {
   396 ( 0.00%)                  if !candidate.needs_infer() {
     .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
     .                               // This may overwrite the cache with the same value.
 2,673 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
     .                               return;
     .                           }
     .                       }
     .                   }
     .           
     .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
     .                   self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
     .               }
-- line 1374 ----------------------------------------
-- line 1550 ----------------------------------------
     .               /// See the comment for "SelectionCandidate" for more details.
     .               fn candidate_should_be_dropped_in_favor_of(
     .                   &mut self,
     .                   sized_predicate: bool,
     .                   victim: &EvaluatedCandidate<'tcx>,
     .                   other: &EvaluatedCandidate<'tcx>,
     .                   needs_infer: bool,
     .               ) -> bool {
   856 ( 0.00%)          if victim.candidate == other.candidate {
     .                       return true;
     .                   }
     .           
     .                   // Check if a bound would previously have been removed when normalizing
     .                   // the param_env so that it can be given the lowest priority. See
     .                   // #50825 for the motivation for this.
     .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
     .                       cand.is_global() && !cand.has_late_bound_regions()
     .                   };
     .           
     .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
     .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
     .                   //
     .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
     .                   // lifetime of a variable.
15,408 ( 0.01%)          match (&other.candidate, &victim.candidate) {
     .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
     .                           bug!(
     .                               "default implementations shouldn't be recorded \
     .                               when there are other valid candidates"
     .                           );
     .                       }
     .           
     .                       // (*)
-- line 1582 ----------------------------------------
-- line 1674 ----------------------------------------
     .                       }
     .                       (ObjectCandidate(_), ProjectionCandidate(_))
     .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
     .                           bug!("Have both object and projection candidate")
     .                       }
     .           
     .                       // Arbitrarily give projection and object candidates priority.
     .                       (
 1,712 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
     .                           ImplCandidate(..)
     .                           | ClosureCandidate
     .                           | GeneratorCandidate
     .                           | FnPointerCandidate { .. }
     .                           | BuiltinObjectCandidate
     .                           | BuiltinUnsizeCandidate
     .                           | TraitUpcastingUnsizeCandidate(_)
     .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
     .                           | ClosureCandidate
     .                           | GeneratorCandidate
     .                           | FnPointerCandidate { .. }
     .                           | BuiltinObjectCandidate
     .                           | BuiltinUnsizeCandidate
     .                           | TraitUpcastingUnsizeCandidate(_)
     .                           | BuiltinCandidate { .. }
     .                           | TraitAliasCandidate(..),
 3,424 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
     .                       ) => false,
     .           
 8,560 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
     .                           // See if we can toss out `victim` based on specialization.
     .                           // This requires us to know *for sure* that the `other` impl applies
     .                           // i.e., `EvaluatedToOk`.
     .                           //
     .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
     .                           // to me but is required for `std` to compile, so I didn't change it
     .                           // for now.
     .                           let tcx = self.tcx();
 3,424 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
 6,840 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
     .                                   return true;
     .                               }
     .                           }
     .           
 4,280 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
 3,420 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
     .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
     .                                       // Subtle: If the predicate we are evaluating has inference
     .                                       // variables, do *not* allow discarding candidates due to
     .                                       // marker trait impls.
     .                                       //
     .                                       // Without this restriction, we could end up accidentally
     .                                       // constrainting inference variables based on an arbitrarily
     .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
     .                           | BuiltinUnsizeCandidate
     .                           | TraitUpcastingUnsizeCandidate(_)
     .                           | BuiltinCandidate { has_nested: true }
     .                           | TraitAliasCandidate(..),
     .                       ) => false,
     .                   }
     .               }
     .           
   120 ( 0.00%)      fn sized_conditions(
     .                   &mut self,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> BuiltinImplConditions<'tcx> {
     .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
     .           
     .                   // NOTE: binder moved to (*)
    36 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
     .           
    64 ( 0.00%)          match self_ty.kind() {
     .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
     .                       | ty::Uint(_)
     .                       | ty::Int(_)
     .                       | ty::Bool
     .                       | ty::Float(_)
     .                       | ty::FnDef(..)
     .                       | ty::FnPtr(_)
     .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
     .                       | ty::Ref(..)
     .                       | ty::Generator(..)
     .                       | ty::GeneratorWitness(..)
     .                       | ty::Array(..)
     .                       | ty::Closure(..)
     .                       | ty::Never
     .                       | ty::Error(_) => {
     .                           // safe for everything
    10 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
     .                       }
     .           
     .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
     .           
     .                       ty::Tuple(tys) => Where(
     .                           obligation
     .                               .predicate
     .                               .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
     .                       ),
     .           
     .                       ty::Adt(def, substs) => {
     2 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
     .                           // (*) binder moved here
     5 ( 0.00%)                  Where(
     .                               obligation.predicate.rebind({
     1 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
     .                               }),
     .                           )
     .                       }
     .           
     .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
     .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
     .           
     .                       ty::Placeholder(..)
     .                       | ty::Bound(..)
     .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
     .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
     .                       }
     .                   }
    96 ( 0.00%)      }
     .           
    56 ( 0.00%)      fn copy_clone_conditions(
     .                   &mut self,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> BuiltinImplConditions<'tcx> {
     .                   // NOTE: binder moved to (*)
    14 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
     .           
     .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
     .           
    35 ( 0.00%)          match *self_ty.kind() {
     .                       ty::Infer(ty::IntVar(_))
     .                       | ty::Infer(ty::FloatVar(_))
     .                       | ty::FnDef(..)
     .                       | ty::FnPtr(_)
     .                       | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
     .           
     .                       ty::Uint(_)
     .                       | ty::Int(_)
-- line 1874 ----------------------------------------
-- line 1920 ----------------------------------------
     .                       }
     .           
     .                       ty::Placeholder(..)
     .                       | ty::Bound(..)
     .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
     .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
     .                       }
     .                   }
    42 ( 0.00%)      }
     .           
     .               /// For default impls, we need to break apart a type into its
     .               /// "constituent types" -- meaning, the types that it contains.
     .               ///
     .               /// Here are some (simple) examples:
     .               ///
     .               /// ```
     .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 2075 ----------------------------------------
     .               // run inside of a `probe()` so that their side-effects are
     .               // contained.
     .           
     .               fn rematch_impl(
     .                   &mut self,
     .                   impl_def_id: DefId,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
 2,705 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
 2,164 ( 0.00%)              Ok(substs) => substs,
     .                       Err(()) => {
     .                           bug!(
     .                               "Impl {:?} was matchable against {:?} but now is not",
     .                               impl_def_id,
     .                               obligation
     .                           );
     .                       }
     .                   }
     .               }
     .           
66,120 ( 0.04%)      #[tracing::instrument(level = "debug", skip(self))]
     .               fn match_impl(
     .                   &mut self,
     .                   impl_def_id: DefId,
     .                   obligation: &TraitObligation<'tcx>,
     .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
     .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
     .           
     .                   // Before we create the substitutions and everything, first
     .                   // consider a "quick reject". This avoids creating more types
     .                   // and so forth that we need to.
     .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
 1,392 ( 0.00%)              return Err(());
     .                   }
     .           
     .                   let placeholder_obligation =
19,488 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
 8,352 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
     .           
13,920 ( 0.01%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
     .           
 5,568 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
     .           
     .                   debug!(?impl_trait_ref);
     .           
16,704 ( 0.01%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
19,488 ( 0.01%)              ensure_sufficient_stack(|| {
     .                           project::normalize_with_depth(
     .                               self,
 2,784 ( 0.00%)                      obligation.param_env,
     .                               obligation.cause.clone(),
 8,352 ( 0.00%)                      obligation.recursion_depth + 1,
 5,568 ( 0.00%)                      impl_trait_ref,
     .                           )
     .                       });
     .           
     .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
     .           
     .                   let cause = ObligationCause::new(
 2,784 ( 0.00%)              obligation.cause.span,
 5,568 ( 0.00%)              obligation.cause.body_id,
25,056 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
     .                   );
     .           
 5,568 ( 0.00%)          let InferOk { obligations, .. } = self
     .                       .infcx
 2,784 ( 0.00%)              .at(&cause, obligation.param_env)
     .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
     .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
     .                   nested_obligations.extend(obligations);
     .           
 3,105 ( 0.00%)          if !self.intercrate
     .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
     .                   {
     .                       debug!("match_impl: reservation impls only apply in intercrate mode");
     .                       return Err(());
     .                   }
     .           
     .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
 6,210 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
     .               }
     .           
     .               fn fast_reject_trait_refs(
     .                   &mut self,
     .                   obligation: &TraitObligation<'_>,
     .                   impl_trait_ref: &ty::TraitRef<'_>,
     .               ) -> bool {
     .                   // We can avoid creating type variables and doing the full
     .                   // substitution if we find that any of the input types, when
     .                   // simplified, do not match.
     .           
10,440 ( 0.01%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
     .                       |(obligation_arg, impl_arg)| {
41,052 ( 0.02%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
     .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
     .                                   // Note, we simplify parameters for the obligation but not the
     .                                   // impl so that we do not reject a blanket impl but do reject
     .                                   // more concrete impls if we're searching for `T: Trait`.
54,736 ( 0.03%)                          let simplified_obligation_ty = fast_reject::simplify_type(
     .                                       self.tcx(),
     .                                       obligation_ty,
     .                                       SimplifyParams::Yes,
     .                                       StripReferences::No,
     .                                   );
41,052 ( 0.02%)                          let simplified_impl_ty = fast_reject::simplify_type(
     .                                       self.tcx(),
     .                                       impl_ty,
     .                                       SimplifyParams::No,
     .                                       StripReferences::No,
     .                                   );
     .           
20,526 ( 0.01%)                          simplified_obligation_ty.is_some()
     .                                       && simplified_impl_ty.is_some()
     .                                       && simplified_obligation_ty != simplified_impl_ty
     .                               }
     .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
     .                                   // Lifetimes can never cause a rejection.
     .                                   false
     .                               }
     .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2233 ----------------------------------------
     .               // Miscellany
     .           
     .               fn match_fresh_trait_refs(
     .                   &self,
     .                   previous: ty::PolyTraitPredicate<'tcx>,
     .                   current: ty::PolyTraitPredicate<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .               ) -> bool {
     6 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
     .                   matcher.relate(previous, current).is_ok()
     .               }
     .           
     .               fn push_stack<'o>(
     .                   &mut self,
     .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
     .                   obligation: &'o TraitObligation<'tcx>,
     .               ) -> TraitObligationStack<'o, 'tcx> {
 2,824 ( 0.00%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
     .           
     .                   let dfn = previous_stack.cache.next_dfn();
   142 ( 0.00%)          let depth = previous_stack.depth() + 1;
 3,810 ( 0.00%)          TraitObligationStack {
     .                       obligation,
 2,306 ( 0.00%)              fresh_trait_pred,
     .                       reached_depth: Cell::new(depth),
     .                       previous: previous_stack,
     .                       dfn,
     .                       depth,
     .                   }
     .               }
     .           
     .               #[instrument(skip(self), level = "debug")]
-- line 2264 ----------------------------------------
-- line 2307 ----------------------------------------
     .                   )
     .                   .map_bound(|(trait_ref, ..)| trait_ref)
     .               }
     .           
     .               /// Returns the obligations that are implied by instantiating an
     .               /// impl or trait. The obligations are substituted and fully
     .               /// normalized. This is used when confirming an impl or default
     .               /// impl.
12,443 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
     .               fn impl_or_trait_obligations(
     .                   &mut self,
     .                   cause: ObligationCause<'tcx>,
     .                   recursion_depth: usize,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   def_id: DefId,           // of impl or trait
     .                   substs: SubstsRef<'tcx>, // for impl or trait
     .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
     .                   //    V: Iterator, V: Sized,
     .                   //    <U as Iterator>::Item: Copy
     .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
     .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
     .                   // `$1: Copy`, so we must ensure the obligations are emitted in
     .                   // that order.
     .                   let predicates = tcx.predicates_of(def_id);
     .                   debug!(?predicates);
   541 ( 0.00%)          assert_eq!(predicates.parent, None);
 1,623 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
     .                   for (predicate, _) in predicates.predicates {
     .                       debug!(?predicate);
    45 ( 0.00%)              let predicate = normalize_with_depth_to(
     .                           self,
     .                           param_env,
     .                           cause.clone(),
     .                           recursion_depth,
     9 ( 0.00%)                  predicate.subst(tcx, substs),
     .                           &mut obligations,
     .                       );
    90 ( 0.00%)              obligations.push(Obligation {
     .                           cause: cause.clone(),
     .                           recursion_depth,
     .                           param_env,
     .                           predicate,
     .                       });
     .                   }
     .           
     .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
     .                   // (#38528) from happening, but the real cause of the duplication is
     .                   // unknown. What we know is that the deduplication avoids exponential
     .                   // amount of predicates being propagated when processing deeply nested
     .                   // types.
     .                   //
     .                   // This code is hot enough that it's worth avoiding the allocation
     .                   // required for the FxHashSet when possible. Special-casing lengths 0,
     .                   // 1 and 2 covers roughly 75-80% of the cases.
    12 ( 0.00%)          if obligations.len() <= 1 {
     .                       // No possibility of duplicates.
     4 ( 0.00%)          } else if obligations.len() == 2 {
     .                       // Only two elements. Drop the second if they are equal.
     .                       if obligations[0] == obligations[1] {
     .                           obligations.truncate(1);
     .                       }
     .                   } else {
     .                       // Three or more elements. Use a general deduplication process.
     .                       let mut seen = FxHashSet::default();
     1 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
     .                   }
     .           
 2,164 ( 0.00%)          obligations
     .               }
     .           }
     .           
     .           trait TraitObligationExt<'tcx> {
     .               fn derived_cause(
     .                   &self,
     .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
     .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
     .                    */
     .           
     .                   let obligation = self;
     .           
     .                   // NOTE(flaper87): As of now, it keeps track of the whole error
     .                   // chain. Ideally, we should have a way to configure this either
     .                   // by using -Z verbose or just a CLI argument.
     .                   let derived_cause = DerivedObligationCause {
 2,164 ( 0.00%)              parent_trait_pred: obligation.predicate,
 1,082 ( 0.00%)              parent_code: obligation.cause.clone_code(),
     .                   };
     .                   let derived_code = variant(derived_cause);
 6,492 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
     .               }
     .           }
     .           
     .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
     .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
     .                   TraitObligationStackList::with(self)
     .               }
     .           
     .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
   665 ( 0.00%)          self.previous.cache
     .               }
     .           
     .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
     .                   self.list()
     .               }
     .           
     .               /// Indicates that attempting to evaluate this stack entry
     .               /// required accessing something from the stack at depth `reached_depth`.
-- line 2438 ----------------------------------------
-- line 2540 ----------------------------------------
     .               /// evaluation. When we create an entry in the evaluation cache using this provisional
     .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
     .               /// the cache will have all of the necessary incr comp dependencies tracked.
     .               dep_node: DepNodeIndex,
     .           }
     .           
     .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
     .               fn default() -> Self {
   696 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
     .               }
     .           }
     .           
     .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
     .               /// Get the next DFN in sequence (basically a counter).
     .               fn next_dfn(&self) -> usize {
    71 ( 0.00%)          let result = self.dfn.get();
   284 ( 0.00%)          self.dfn.set(result + 1);
     .                   result
     .               }
     .           
     .               /// Check the provisional cache for any result for
     .               /// `fresh_trait_ref`. If there is a hit, then you must consider
     .               /// it an access to the stack slots at depth
     .               /// `reached_depth` (from the returned value).
     .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
     .               fn on_completion(
     .                   &self,
     .                   dfn: usize,
     .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
     .               ) {
     .                   debug!(?dfn, "on_completion");
     .           
     .                   for (fresh_trait_pred, eval) in
   497 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
     .                   {
     .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
     .           
     .                       op(fresh_trait_pred, eval.result, eval.dep_node);
     .                   }
     .               }
     .           }
     .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
     .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
     .               }
     .           
     .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
     .                   self.head
     .               }
     .           
     .               fn depth(&self) -> usize {
   145 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
     .               }
     .           }
     .           
     .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
     .               type Item = &'o TraitObligationStack<'o, 'tcx>;
     .           
     .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
   277 ( 0.00%)          let o = self.head?;
    32 ( 0.00%)          *self = o.previous;
     .                   Some(o)
     .               }
     .           }
     .           
     .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   write!(f, "TraitObligationStack({:?})", self.obligation)
     .               }
-- line 2717 ----------------------------------------

47,044 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 108 ----------------------------------------
     .                   suppress_errors: bool,
     .               },
     .           }
     .           
     .           impl RegionckMode {
     .               /// Indicates that the MIR borrowck will repeat these region
     .               /// checks, so we should ignore errors if NLL is (unconditionally)
     .               /// enabled.
    29 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
     .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
     .                   // this always `true` and then proceed to eliminate the dead code.
    29 ( 0.00%)          match tcx.borrowck_mode() {
     .                       // If we're on Migrate mode, report AST region errors
     .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
     .           
     .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
     .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
     .                   }
    58 ( 0.00%)      }
     .           }
     .           
     .           /// This type contains all the things within `InferCtxt` that sit within a
     .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
     .           /// operations are hot enough that we want only one call to `borrow_mut` per
     .           /// call to `start_snapshot` and `rollback_to`.
     .           pub struct InferCtxtInner<'tcx> {
     .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
     .               /// type instantiations (`ty::Infer`) to the actual opaque
     .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
     .               /// opaque type inference variables to their corresponding
     .               /// opaque type.
     .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
     .           }
     .           
     .           impl<'tcx> InferCtxtInner<'tcx> {
10,490 ( 0.01%)      fn new() -> InferCtxtInner<'tcx> {
71,332 ( 0.04%)          InferCtxtInner {
     .                       projection_cache: Default::default(),
     .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
     .                       undo_log: InferCtxtUndoLogs::default(),
     .                       const_unification_storage: ut::UnificationTableStorage::new(),
     .                       int_unification_storage: ut::UnificationTableStorage::new(),
     .                       float_unification_storage: ut::UnificationTableStorage::new(),
 6,294 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
     .                       region_obligations: vec![],
     .                       opaque_types: Default::default(),
     .                       opaque_types_vars: Default::default(),
     .                   }
12,588 ( 0.01%)      }
     .           
     .               #[inline]
     .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
     .                   &self.region_obligations
     .               }
     .           
     .               #[inline]
     .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   288 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
22,317 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn int_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::IntVid,
     .                       &mut ut::UnificationStorage<ty::IntVid>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
 2,109 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn float_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::FloatVid,
     .                       &mut ut::UnificationStorage<ty::FloatVid>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
   724 ( 0.00%)          self.float_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               fn const_unification_table(
     .                   &mut self,
     .               ) -> ut::UnificationTable<
     .                   ut::InPlace<
     .                       ty::ConstVid<'tcx>,
     .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
     .                       &mut InferCtxtUndoLogs<'tcx>,
     .                   >,
     .               > {
   693 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
     .               }
     .           
     .               #[inline]
     .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 3,623 ( 0.00%)          self.region_constraint_storage
     .                       .as_mut()
     .                       .expect("region constraints already solved")
 3,588 ( 0.00%)              .with_log(&mut self.undo_log)
     .               }
     .           }
     .           
     .           pub struct InferCtxt<'a, 'tcx> {
     .               pub tcx: TyCtxt<'tcx>,
     .           
     .               /// The `DefId` of the item in whose context we are performing inference or typeck.
     .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
     .               /// item we are type-checking, and just consider those names as
     .               /// part of the root universe. So this would only get incremented
     .               /// when we enter into a higher-ranked (`for<..>`) type or trait
     .               /// bound.
     .               universe: Cell<ty::UniverseIndex>,
     .           }
     .           
     .           /// See the `error_reporting` module for more details.
   408 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
     .           pub enum ValuePairs<'tcx> {
     .               Types(ExpectedFound<Ty<'tcx>>),
     .               Regions(ExpectedFound<ty::Region<'tcx>>),
     .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
     .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
     .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
     .           }
     .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
     .           pub struct TypeTrace<'tcx> {
     .               cause: ObligationCause<'tcx>,
     .               values: ValuePairs<'tcx>,
     .           }
     .           
     .           /// The origin of a `r1 <= r2` constraint.
     .           ///
     .           /// See `error_reporting` module for more details
   645 ( 0.00%)  #[derive(Clone, Debug)]
     .           pub enum SubregionOrigin<'tcx> {
     .               /// Arose from a subtyping relation
    43 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
     .           
     .               /// When casting `&'a T` to an `&'b Trait` object,
     .               /// relating `'a` to `'b`
     .               RelateObjectBound(Span),
     .           
     .               /// Some type parameter was instantiated with the given type,
     .               /// and that type must outlive some region.
     .               RelateParamBound(Span, Ty<'tcx>, Option<Span>),
-- line 402 ----------------------------------------
-- line 554 ----------------------------------------
     .               defining_use_anchor: Option<LocalDefId>,
     .           }
     .           
     .           pub trait TyCtxtInferExt<'tcx> {
     .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
     .           }
     .           
     .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
 2,098 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 6,294 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
 2,098 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> InferCtxtBuilder<'tcx> {
     .               /// Used only by `rustc_typeck` during body type-checking/inference,
     .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
     .               /// Will also change the scope for opaque type defining use checks to the given owner.
   558 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   682 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
   310 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   434 ( 0.00%)      }
     .           
     .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
     .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
     .               ///
     .               /// It is only meant to be called in two places, for typeck
     .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
     .               /// in mir borrowck.
    58 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    29 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
   182 ( 0.00%)          self
    87 ( 0.00%)      }
     .           
     .               /// Given a canonical value `C` as a starting point, create an
     .               /// inference context that contains each of the bound values
     .               /// within instantiated as a fresh variable. The `f` closure is
     .               /// invoked with the new infcx, along with the instantiated value
     .               /// `V` and a substitution `S`. This substitution `S` maps from
     .               /// the bound values in `C` to their instantiated values in `V`
     .               /// (in other words, `S(C) = V`).
   759 ( 0.00%)      pub fn enter_with_canonical<T, R>(
     .                   &mut self,
     .                   span: Span,
     .                   canonical: &Canonical<'tcx, T>,
     .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
     .               ) -> R
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   self.enter(|infcx| {
   954 ( 0.00%)              let (value, subst) =
    28 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 1,373 ( 0.00%)              f(infcx, value, subst)
     .                   })
   836 ( 0.00%)      }
     .           
15,941 ( 0.01%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 5,358 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
     .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
96,723 ( 0.05%)          f(InferCtxt {
     .                       tcx,
     .                       defining_use_anchor,
     .                       in_progress_typeck_results,
 2,098 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
     .                       lexical_region_resolutions: RefCell::new(None),
     .                       selection_cache: Default::default(),
     .                       evaluation_cache: Default::default(),
     .                       reported_trait_errors: Default::default(),
     .                       reported_closure_mismatch: Default::default(),
     .                       tainted_by_errors_flag: Cell::new(false),
 2,098 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
     .                       in_snapshot: Cell::new(false),
     .                       skip_leak_check: Cell::new(false),
     .                       universe: Cell::new(ty::UniverseIndex::ROOT),
     .                   })
17,690 ( 0.01%)      }
     .           }
     .           
     .           impl<'tcx, T> InferOk<'tcx, T> {
     .               pub fn unit(self) -> InferOk<'tcx, ()> {
     .                   InferOk { value: (), obligations: self.obligations }
     .               }
     .           
     .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
     .               pub fn into_value_registering_obligations(
     .                   self,
     .                   infcx: &InferCtxt<'_, 'tcx>,
     .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
     .               ) -> T {
    34 ( 0.00%)          let InferOk { value, obligations } = self;
   136 ( 0.00%)          for obligation in obligations {
     .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
     .                   }
     .                   value
     .               }
     .           }
     .           
     .           impl<'tcx> InferOk<'tcx, ()> {
   126 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   504 ( 0.00%)          self.obligations
   126 ( 0.00%)      }
     .           }
     .           
     .           #[must_use = "once you start a snapshot, you should always consume it"]
     .           pub struct CombinedSnapshot<'a, 'tcx> {
     .               undo_snapshot: Snapshot<'tcx>,
     .               region_constraints_snapshot: RegionSnapshot,
     .               universe: ty::UniverseIndex,
     .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
     .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
     .                   debug!("canonical consts: {:?}", &canonical.value);
     .           
     .                   self.tcx.try_unify_abstract_consts(canonical.value)
     .               }
     .           
     .               pub fn is_in_snapshot(&self) -> bool {
     .                   self.in_snapshot.get()
   660 ( 0.00%)      }
     .           
 3,576 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 4,023 ( 0.00%)          t.fold_with(&mut self.freshener())
 4,023 ( 0.00%)      }
     .           
     .               /// Returns the origin of the type variable identified by `vid`, or `None`
     .               /// if this is not a type variable.
     .               ///
     .               /// No attempt is made to resolve `ty`.
     4 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     8 ( 0.00%)          match *ty.kind() {
     .                       ty::Infer(ty::TyVar(vid)) => {
     .                           Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
     .                       }
     2 ( 0.00%)              _ => None,
     .                   }
     8 ( 0.00%)      }
     .           
   447 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, false)
   447 ( 0.00%)      }
     .           
     .               /// Like `freshener`, but does not replace `'static` regions.
 6,215 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
     .                   freshen::TypeFreshener::new(self, true)
 6,215 ( 0.00%)      }
     .           
   124 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    62 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    62 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
     .                       .type_variables()
     .                       .unsolved_variables()
     .                       .into_iter()
     .                       .map(|t| self.tcx.mk_ty_var(t))
     .                       .collect();
     .                   vars.extend(
     .                       (0..inner.int_unification_table().len())
     .                           .map(|i| ty::IntVid { index: i as u32 })
    28 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     2 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
     .                   );
     .                   vars.extend(
     .                       (0..inner.float_unification_table().len())
     .                           .map(|i| ty::FloatVid { index: i as u32 })
    30 ( 0.00%)                  .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
     .                           .map(|v| self.tcx.mk_float_var(v)),
     .                   );
     .                   vars
   217 ( 0.00%)      }
     .           
 4,436 ( 0.00%)      fn combine_fields(
     .                   &'a self,
     .                   trace: TypeTrace<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .               ) -> CombineFields<'a, 'tcx> {
17,756 ( 0.01%)          CombineFields {
     .                       infcx: self,
44,390 ( 0.02%)              trace,
     .                       cause: None,
     .                       param_env,
     .                       obligations: PredicateObligations::new(),
     .                   }
 4,436 ( 0.00%)      }
     .           
     .               /// Clear the "currently in a snapshot" flag, invoke the closure,
     .               /// then restore the flag to its original value. This flag is a
     .               /// debugging measure designed to detect cases where we start a
     .               /// snapshot, create type variables, and register obligations
     .               /// which may involve those type variables in the fulfillment cx,
     .               /// potentially leaving "dangling type variables" behind.
     .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
     .               /// before we return, this is not a problem, as there won't be any
     .               /// escaping obligations in the main cx. In those cases, you can
     .               /// use this function.
     .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
     .               where
     .                   F: FnOnce(&Self) -> R,
     .               {
     .                   let flag = self.in_snapshot.replace(false);
   222 ( 0.00%)          let result = func(self);
     .                   self.in_snapshot.set(flag);
     .                   result
     .               }
     .           
19,950 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
     .                   debug!("start_snapshot()");
     .           
     .                   let in_snapshot = self.in_snapshot.replace(true);
     .           
     .                   let mut inner = self.inner.borrow_mut();
     .           
59,850 ( 0.03%)          CombinedSnapshot {
     .                       undo_snapshot: inner.undo_log.start_snapshot(),
     .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
     .                       universe: self.universe(),
     .                       was_in_snapshot: in_snapshot,
     .                       // Borrow typeck results "in progress" (i.e., during typeck)
     .                       // to ban writes from within a snapshot to them.
 9,975 ( 0.01%)              _in_progress_typeck_results: self
     .                           .in_progress_typeck_results
     .                           .map(|typeck_results| typeck_results.borrow()),
     .                   }
39,900 ( 0.02%)      }
     .           
72,776 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 6,616 ( 0.00%)              undo_snapshot,
 6,616 ( 0.00%)              region_constraints_snapshot,
 6,616 ( 0.00%)              universe,
 6,616 ( 0.00%)              was_in_snapshot,
13,232 ( 0.01%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .                   self.universe.set(universe);
     .           
     .                   let mut inner = self.inner.borrow_mut();
 6,616 ( 0.00%)          inner.rollback_to(undo_snapshot);
     .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
     .               }
     .           
50,385 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
     .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
     .                   let CombinedSnapshot {
 3,359 ( 0.00%)              undo_snapshot,
     .                       region_constraints_snapshot: _,
     .                       universe: _,
 3,359 ( 0.00%)              was_in_snapshot,
 6,718 ( 0.00%)              _in_progress_typeck_results,
     .                   } = snapshot;
     .           
     .                   self.in_snapshot.set(was_in_snapshot);
     .           
     .                   self.inner.borrow_mut().commit(undo_snapshot);
     .               }
     .           
     .               /// Executes `f` and commit the bindings.
 4,869 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 5,951 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
   541 ( 0.00%)          let snapshot = self.start_snapshot();
 1,623 ( 0.00%)          let r = f(&snapshot);
 3,787 ( 0.00%)          self.commit_from(snapshot);
 3,246 ( 0.00%)          r
     .               }
     .           
     .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
42,955 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
52,716 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
     .               {
 6,108 ( 0.00%)          let snapshot = self.start_snapshot();
24,061 ( 0.01%)          let r = f(&snapshot);
     .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 6,565 ( 0.00%)          match r {
     .                       Ok(_) => {
19,801 ( 0.01%)                  self.commit_from(snapshot);
     .                       }
     .                       Err(_) => {
29,172 ( 0.02%)                  self.rollback_to("commit_if_ok -- error", snapshot);
     .                       }
     .                   }
36,435 ( 0.02%)          r
     .               }
     .           
     .               /// Execute `f` then unroll any bindings it creates.
23,580 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
29,789 ( 0.02%)      pub fn probe<R, F>(&self, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
 7,356 ( 0.00%)          let snapshot = self.start_snapshot();
13,974 ( 0.01%)          let r = f(&snapshot);
33,273 ( 0.02%)          self.rollback_to("probe", snapshot);
   712 ( 0.00%)          r
     .               }
     .           
     .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     .               #[instrument(skip(self, f), level = "debug")]
     .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
     .               where
     .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
     .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
     .                   r
     .               }
     .           
     .               /// Scan the constraints produced since `snapshot` began and returns:
     .               ///
     .               /// - `None` -- if none of them involve "region outlives" constraints
     .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
     .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
 1,152 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
     .                   &self,
     .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
     .               ) -> Option<bool> {
 2,304 ( 0.00%)          self.inner
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
     .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 1,728 ( 0.00%)      }
     .           
     .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
     .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
     .               }
     .           
     .               pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
-- line 908 ----------------------------------------
-- line 911 ----------------------------------------
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
     .               }
     .           
    60 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
     .               where
     .                   T: at::ToTrace<'tcx>,
     .               {
     .                   let origin = &ObligationCause::dummy();
     .                   self.probe(|_| {
     .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
     .                           // Ignore obligations, since we are unrolling
     .                           // everything anyway.
     .                       })
     .                   })
    45 ( 0.00%)      }
     .           
     .               #[instrument(skip(self), level = "debug")]
     .               pub fn sub_regions(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   b: ty::Region<'tcx>,
     .               ) {
-- line 938 ----------------------------------------
-- line 969 ----------------------------------------
     .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
     .               /// actually requiring `a <: b`. This is of course a valid coercion,
     .               /// but it's not as flexible as `FnCtxt::coerce` would be.
     .               ///
     .               /// (We may refactor this in the future, but there are a number of
     .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
     .               /// records adjustments that are required on the HIR in order to perform
     .               /// the coercion, and we don't currently have a way to manage that.)
     9 ( 0.00%)      pub fn coerce_predicate(
     .                   &self,
     .                   cause: &ObligationCause<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   predicate: ty::PolyCoercePredicate<'tcx>,
     .               ) -> Option<InferResult<'tcx, ()>> {
     6 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
     .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
     .                       a: p.a,
     .                       b: p.b,
     .                   });
    15 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
    12 ( 0.00%)      }
     .           
    36 ( 0.00%)      pub fn subtype_predicate(
     .                   &self,
     .                   cause: &ObligationCause<'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   predicate: ty::PolySubtypePredicate<'tcx>,
     .               ) -> Option<InferResult<'tcx, ()>> {
     .                   // Check for two unresolved inference variables, in which case we can
     .                   // make no progress. This is partly a micro-optimization, but it's
     .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
     .                   // earlier that they are sub-unified).
     .                   //
     .                   // Note that we can just skip the binders here because
     .                   // type variables can't (at present, at
     .                   // least) capture any of the things bound by this binder.
     .                   //
     .                   // Note that this sub here is not just for diagnostics - it has semantic
     .                   // effects as well.
     3 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     3 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    12 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     .                       (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
     .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     .                           return None;
     .                       }
     .                       _ => {}
     .                   }
     .           
     .                   Some(self.commit_if_ok(|_snapshot| {
     3 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
     .                           self.replace_bound_vars_with_placeholders(predicate);
     .           
     6 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
     .           
     .                       Ok(ok.unit())
     .                   }))
    27 ( 0.00%)      }
     .           
     .               pub fn region_outlives_predicate(
     .                   &self,
     .                   cause: &traits::ObligationCause<'tcx>,
     .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
     .               ) -> UnitResult<'tcx> {
     .                   self.commit_if_ok(|_snapshot| {
     .                       let ty::OutlivesPredicate(r_a, r_b) =
-- line 1036 ----------------------------------------
-- line 1039 ----------------------------------------
     .                           RelateRegionParamBound(cause.span)
     .                       });
     .                       self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
     .                       Ok(())
     .                   })
     .               }
     .           
     .               /// Number of type variables created so far.
     2 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
     .                   self.inner.borrow_mut().type_variables().num_vars()
     4 ( 0.00%)      }
     .           
   854 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 4,270 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
 1,281 ( 0.00%)      }
     .           
   760 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 2,942 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
 1,140 ( 0.00%)      }
     .           
    48 ( 0.00%)      pub fn next_ty_var_in_universe(
     .                   &self,
     .                   origin: TypeVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> Ty<'tcx> {
   264 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    24 ( 0.00%)          self.tcx.mk_ty_var(vid)
    72 ( 0.00%)      }
     .           
     .               pub fn next_const_var(
     .                   &self,
     .                   ty: Ty<'tcx>,
     .                   origin: ConstVariableOrigin,
     .               ) -> &'tcx ty::Const<'tcx> {
     .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
     .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
     .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
     .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
     .                       origin,
     .                       val: ConstVariableValue::Unknown { universe: self.universe() },
     .                   })
     .               }
     .           
     .               fn next_int_var_id(&self) -> IntVid {
    55 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
     .               }
     .           
    33 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
     .                   self.tcx.mk_int_var(self.next_int_var_id())
    44 ( 0.00%)      }
     .           
     .               fn next_float_var_id(&self) -> FloatVid {
    65 ( 0.00%)          self.inner.borrow_mut().float_unification_table().new_key(None)
     .               }
     .           
    39 ( 0.00%)      pub fn next_float_var(&self) -> Ty<'tcx> {
     .                   self.tcx.mk_float_var(self.next_float_var_id())
    52 ( 0.00%)      }
     .           
     .               /// Creates a fresh region variable with the next available index.
     .               /// The variable will be created in the maximum universe created
     .               /// thus far, allowing it to name any region created thus far.
    34 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
11,815 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
    68 ( 0.00%)      }
     .           
     .               /// Creates a fresh region variable with the next available index
     .               /// in the given universe; typically, you can use
     .               /// `next_region_var` and just use the maximal universe.
 4,672 ( 0.00%)      pub fn next_region_var_in_universe(
     .                   &self,
     .                   origin: RegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
     .                   let region_var =
30,368 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
11,680 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 7,008 ( 0.00%)      }
     .           
     .               /// Return the universe that the region `r` was created in.  For
     .               /// most regions (e.g., `'static`, named regions from the user,
     .               /// etc) this is the root universe U0. For inference variables or
     .               /// placeholders, however, it will return the universe which which
     .               /// they are associated.
   790 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
     .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
 1,185 ( 0.00%)      }
     .           
     .               /// Number of region variables created so far.
   232 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
     .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
   348 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    92 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
     .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   184 ( 0.00%)      }
     .           
     .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     .               pub fn next_nll_region_var_in_universe(
     .                   &self,
     .                   origin: NllRegionVariableOrigin,
     .                   universe: ty::UniverseIndex,
     .               ) -> ty::Region<'tcx> {
     .                   self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     .               }
     .           
29,432 ( 0.02%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
13,985 ( 0.01%)          match param.kind {
     .                       GenericParamDefKind::Lifetime => {
     .                           // Create a region inference variable for the given
     .                           // region parameter definition.
 2,205 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
     .                       }
     .                       GenericParamDefKind::Type { .. } => {
     .                           // Create a type inference variable for the given
     .                           // type parameter definition. The substitutions are
     .                           // for actual parameters that may be referred to by
     .                           // the default of this type parameter, if it exists.
     .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
     .                           // used in a path such as `Foo::<T, U>::new()` will
     .                           // use an inference variable for `C` with `[T, U]`
     .                           // as the substitutions for the default, `(T, U)`.
 5,496 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
     .                               self.universe(),
 6,870 ( 0.00%)                      TypeVariableOrigin {
     .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
 1,374 ( 0.00%)                              param.name,
 1,374 ( 0.00%)                              Some(param.def_id),
     .                                   ),
     .                                   span,
     .                               },
     .                           );
     .           
 1,374 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
     .                       }
     .                       GenericParamDefKind::Const { .. } => {
     .                           let origin = ConstVariableOrigin {
     .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
     .                                   param.name,
     .                                   param.def_id,
     .                               ),
     .                               span,
     .                           };
     .                           let const_var_id =
 1,100 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
     .                                   origin,
     .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
     .                               });
   100 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
     .                       }
     .                   }
   800 ( 0.00%)      }
     .           
     .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
     .               /// type/region parameter to a fresh inference variable.
10,854 ( 0.01%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
40,103 ( 0.02%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 7,236 ( 0.00%)      }
     .           
     .               /// Returns `true` if errors have been reported since this infcx was
     .               /// created. This is sometimes used as a heuristic to skip
     .               /// reporting errors that often occur as a result of earlier
     .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
     .               /// inference variables, regionck errors).
    62 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
     .                   debug!(
     .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
     .                        tainted_by_errors_flag={})",
     .                       self.tcx.sess.err_count(),
     .                       self.err_count_on_creation,
     .                       self.tainted_by_errors_flag.get()
     .                   );
     .           
 6,379 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
     .                       return true; // errors reported since this infcx was made
     .                   }
     .                   self.tainted_by_errors_flag.get()
    93 ( 0.00%)      }
     .           
     .               /// Set the "tainted by errors" flag to true. We call this when we
     .               /// observe an error from a prior pass.
     .               pub fn set_tainted_by_errors(&self) {
     .                   debug!("set_tainted_by_errors()");
     .                   self.tainted_by_errors_flag.set(true)
     .               }
     .           
     .               /// Process the region constraints and return any any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 7,189 ( 0.00%)      pub fn resolve_regions(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) -> Vec<RegionResolutionError<'tcx>> {
19,513 ( 0.01%)          let (var_infos, data) = {
     .                       let mut inner = self.inner.borrow_mut();
     .                       let inner = &mut *inner;
 1,027 ( 0.00%)              assert!(
 3,081 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
     .                           "region_obligations not empty: {:#?}",
     .                           inner.region_obligations
     .                       );
     .                       inner
     .                           .region_constraint_storage
     .                           .take()
     .                           .expect("regions already resolved")
     .                           .with_log(&mut inner.undo_log)
     .                           .into_infos_and_data()
 1,027 ( 0.00%)          };
     .           
     .                   let region_rels =
 1,027 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
     .           
 9,243 ( 0.01%)          let (lexical_region_resolutions, errors) =
24,648 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
     .           
 4,108 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
 1,027 ( 0.00%)          assert!(old_value.is_none());
     .           
     .                   errors
 9,243 ( 0.01%)      }
     .           
     .               /// Process the region constraints and report any errors that
     .               /// result. After this, no more unification operations should be
     .               /// done -- or the compiler will panic -- but it is legal to use
     .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
10,270 ( 0.01%)      pub fn resolve_regions_and_report_errors(
     .                   &self,
     .                   region_context: DefId,
     .                   outlives_env: &OutlivesEnvironment<'tcx>,
     .                   mode: RegionckMode,
     .               ) {
 2,054 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
     .           
 3,081 ( 0.00%)          if !self.is_tainted_by_errors() {
     .                       // As a heuristic, just skip reporting region errors
     .                       // altogether if other errors have been reported while
     .                       // this infcx was in use.  This is totally hokey but
     .                       // otherwise we have a hard time separating legit region
     .                       // errors from silly ones.
 2,054 ( 0.00%)              self.report_region_errors(&errors);
     .                   }
 5,135 ( 0.00%)      }
     .           
     .               /// Obtains (and clears) the current set of region
     .               /// constraints. The inference context is still usable: further
     .               /// unifications will simply add new constraints.
     .               ///
     .               /// This method is not meant to be used with normal lexical region
     .               /// resolution. Rather, it is used in the NLL mode as a kind of
     .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
     .               }
     .           
     .               /// Gives temporary access to the region constraint data.
     .               pub fn with_region_constraints<R>(
     .                   &self,
     .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
     .               ) -> R {
     .                   let mut inner = self.inner.borrow_mut();
   188 ( 0.00%)          op(inner.unwrap_region_constraints().data())
     .               }
     .           
     .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
     .                   let mut inner = self.inner.borrow_mut();
     .                   let inner = &mut *inner;
     .                   inner
     .                       .region_constraint_storage
     .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       .var_origin(vid)
     .               }
     .           
     .               /// Takes ownership of the list of variable regions. This implies
     .               /// that all the region constraints have already been taken, and
     .               /// hence that `resolve_regions_and_report_errors` can never be
     .               /// called. This is used only during NLL processing to "hand off" ownership
     .               /// of the set of region variables into the NLL region context.
   145 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
     .                   let mut inner = self.inner.borrow_mut();
   551 ( 0.00%)          let (var_infos, data) = inner
     .                       .region_constraint_storage
     .                       .take()
     .                       .expect("regions already resolved")
     .                       .with_log(&mut inner.undo_log)
    29 ( 0.00%)              .into_infos_and_data();
    29 ( 0.00%)          assert!(data.is_empty());
     .                   var_infos
   232 ( 0.00%)      }
     .           
     .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
     .                   self.resolve_vars_if_possible(t).to_string()
     .               }
     .           
     .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
     .               /// universe index of `TyVar(vid)`.
   146 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
     .                   use self::type_variable::TypeVariableValue;
     .           
   438 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
     .                       TypeVariableValue::Known { value } => Ok(value),
     .                       TypeVariableValue::Unknown { universe } => Err(universe),
     .                   }
   511 ( 0.00%)      }
     .           
     .               /// Resolve any type variables found in `value` -- but only one
     .               /// level.  So, if the variable `?X` is bound to some type
     .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
     .               /// itself be bound to a type).
     .               ///
     .               /// Useful when you only need to inspect the outermost level of
     .               /// the type and don't care about nested types (or perhaps you
     .               /// will be resolving them as well, e.g. in a loop).
     .               pub fn shallow_resolve<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 5,664 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
     .               }
     .           
   170 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
     .                   self.inner.borrow_mut().type_variables().root_var(var)
   255 ( 0.00%)      }
     .           
     .               /// Where possible, replaces type/const variables in
     .               /// `value` with their final value. Note that region variables
     .               /// are unaffected. If a type/const variable has not been unified, it
     .               /// is left as is. This is an idempotent operation that does
     .               /// not affect inference state in any way and so you can do it
     .               /// at will.
 3,236 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
 3,928 ( 0.00%)          if !value.needs_infer() {
11,378 ( 0.01%)              return value; // Avoid duplicated subst-folding.
     .                   }
 7,630 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 3,877 ( 0.00%)          value.fold_with(&mut r)
 4,045 ( 0.00%)      }
     .           
     .               /// Returns the first unresolved variable contained in `T`. In the
     .               /// process of visiting `T`, this will resolve (where possible)
     .               /// type variables in `T`, but it never constructs the final,
     .               /// resolved type, so it's more efficient than
     .               /// `resolve_vars_if_possible()`.
     .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
     .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
     .                   expected: &'tcx ty::Const<'tcx>,
     .                   actual: &'tcx ty::Const<'tcx>,
     .                   err: TypeError<'tcx>,
     .               ) -> DiagnosticBuilder<'tcx> {
     .                   let trace = TypeTrace::consts(cause, true, expected, actual);
     .                   self.report_and_explain_type_error(trace, &err)
     .               }
     .           
   846 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
     .                   &self,
     .                   span: Span,
     .                   lbrct: LateBoundRegionConversionTime,
     .                   value: ty::Binder<'tcx, T>,
     .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
     .               where
     .                   T: TypeFoldable<'tcx>,
     .               {
     .                   let fld_r =
   527 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
     .                   let fld_t = |_| {
     .                       self.next_ty_var(TypeVariableOrigin {
     .                           kind: TypeVariableOriginKind::MiscVariable,
     .                           span,
     .                       })
     .                   };
     .                   let fld_c = |_, ty| {
     .                       self.next_const_var(
     .                           ty,
     .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
     .                       )
     .                   };
 2,119 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   564 ( 0.00%)      }
     .           
     .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
     .               pub fn verify_generic_bound(
     .                   &self,
     .                   origin: SubregionOrigin<'tcx>,
     .                   kind: GenericKind<'tcx>,
     .                   a: ty::Region<'tcx>,
     .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1551 ----------------------------------------
     .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
     .               pub fn clear_caches(&self) {
     .                   self.selection_cache.clear();
     .                   self.evaluation_cache.clear();
     .                   self.inner.borrow_mut().projection_cache().clear();
     .               }
     .           
     .               pub fn universe(&self) -> ty::UniverseIndex {
22,483 ( 0.01%)          self.universe.get()
 5,365 ( 0.00%)      }
     .           
     .               /// Creates and return a fresh universe that extends all previous
     .               /// universes. Updates `self.universe` to that new universe.
     .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
     .                   let u = self.universe.get().next_universe();
     .                   self.universe.set(u);
     .                   u
     .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   // variables, thus we don't need to substitute back the original values.
     .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
     .               }
     .           
     .               /// If `typ` is a type variable of some kind, resolve it one level
     .               /// (but do not resolve types found in the result). If `typ` is
     .               /// not a type variable, just return it unmodified.
     .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
70,424 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
41,163 ( 0.02%)          match *typ.kind() {
     .                       ty::Infer(ty::TyVar(v)) => {
     .                           // Not entirely obvious: if `typ` is a type variable,
     .                           // it can be resolved to an int/float variable, which
     .                           // can then be recursively resolved, hence the
     .                           // recursion. Note though that we prevent type
     .                           // variables from unifying to other type variables
     .                           // directly (though they may be embedded
     .                           // structurally), and we prevent cycles in any case,
     .                           // so this recursion should always be of very limited
     .                           // depth.
     .                           //
     .                           // Note: if these two lines are combined into one we get
     .                           // dynamic borrow errors on `self.inner`.
23,424 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
     .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
     .                       }
     .           
   748 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
     .                           .inner
     .                           .borrow_mut()
     .                           .int_unification_table()
     .                           .probe_value(v)
   177 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
     .                           .unwrap_or(typ),
     .           
 1,184 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => self
     .                           .inner
     .                           .borrow_mut()
     .                           .float_unification_table()
     .                           .probe_value(v)
   356 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
     .                           .unwrap_or(typ),
     .           
     .                       _ => typ,
     .                   }
79,227 ( 0.04%)      }
     .           
     .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
     .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
     .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
     .               ///
     .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
     .               /// inlined, despite being large, because it has only two call sites that
     .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
     .               #[inline(always)]
     .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
     .                   match infer_var {
     .                       TyOrConstInferVar::Ty(v) => {
     .                           use self::type_variable::TypeVariableValue;
     .           
     .                           // If `inlined_probe` returns a `Known` value, it never equals
     .                           // `ty::Infer(ty::TyVar(v))`.
 7,715 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
     .                               TypeVariableValue::Unknown { .. } => false,
     .                               TypeVariableValue::Known { .. } => true,
     .                           }
     .                       }
     .           
     .                       TyOrConstInferVar::TyInt(v) => {
     .                           // If `inlined_probe_value` returns a value it's always a
     .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
     .                           // `ty::Infer(_)`.
   300 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
     .                       }
     .           
     .                       TyOrConstInferVar::TyFloat(v) => {
     .                           // If `probe_value` returns a value it's always a
     .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
     .                           //
     .                           // Not `inlined_probe_value(v)` because this call site is colder.
   252 ( 0.00%)                  self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
     .                       }
     .           
     .                       TyOrConstInferVar::Const(v) => {
     .                           // If `probe_value` returns a `Known` value, it never equals
     .                           // `ty::ConstKind::Infer(ty::InferConst::Var(v))`.
     .                           //
     .                           // Not `inlined_probe_value(v)` because this call site is colder.
     .                           match self.inner.borrow_mut().const_unification_table().probe_value(v).val {
-- line 1696 ----------------------------------------
-- line 1716 ----------------------------------------
     .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
     .               Const(ConstVid<'tcx>),
     .           }
     .           
     .           impl<'tcx> TyOrConstInferVar<'tcx> {
     .               /// Tries to extract an inference variable from a type or a constant, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
   267 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
     .                   match arg.unpack() {
     .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
     .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
     .                       GenericArgKind::Lifetime(_) => None,
     .                   }
   267 ( 0.00%)      }
     .           
     .               /// Tries to extract an inference variable from a type, returns `None`
     .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     .               pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 2,319 ( 0.00%)          match *ty.kind() {
   482 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
    20 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
    32 ( 0.00%)              ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
     .                       _ => None,
     .                   }
     .               }
     .           
     .               /// Tries to extract an inference variable from a constant, returns `None`
     .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
     .                   match ct.val {
-- line 1746 ----------------------------------------
-- line 1755 ----------------------------------------
     .           }
     .           
     .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
     .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     .                   self.infcx.tcx
     .               }
     .           
     .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
13,884 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
     .               }
     .           
   740 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   740 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
   925 ( 0.00%)              self.infcx
     .                           .inner
     .                           .borrow_mut()
     .                           .const_unification_table()
   555 ( 0.00%)                  .probe_value(*vid)
     .                           .val
     .                           .known()
     .                           .unwrap_or(ct)
     .                   } else {
     .                       ct
     .                   }
   925 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> TypeTrace<'tcx> {
     .               pub fn span(&self) -> Span {
     .                   self.cause.span
     .               }
     .           
     .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
     .                       CompareImplTypeObligation { span, .. } => span,
     .                   }
     .               }
     .           
     .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
     .               where
     .                   F: FnOnce() -> Self,
     .               {
   105 ( 0.00%)          match *cause.code() {
    35 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   175 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
     .                       }
     .           
     .                       traits::ObligationCauseCode::CompareImplMethodObligation {
     .                           impl_item_def_id,
     .                           trait_item_def_id,
     .                       } => SubregionOrigin::CompareImplMethodObligation {
     .                           span: cause.span,
     .                           impl_item_def_id,
-- line 1836 ----------------------------------------

82,728 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 36 ----------------------------------------
     .           use rustc_session::parse::ParseSess;
     .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
     .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
     .           use tracing::debug;
     .           
     .           use std::ops::Range;
     .           use std::{cmp, mem, slice};
     .           
 1,423 ( 0.00%)  bitflags::bitflags! {
     .               struct Restrictions: u8 {
     .                   const STMT_EXPR         = 1 << 0;
     .                   const NO_STRUCT_LITERAL = 1 << 1;
     .                   const CONST_EXPR        = 1 << 2;
     .               }
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
     .                               $self.bump();
     .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
     .                           }
     .                       }
     .                   }
     .               };
     .           }
     .           
 3,157 ( 0.00%)  #[derive(Clone)]
     .           pub struct Parser<'a> {
    61 ( 0.00%)      pub sess: &'a ParseSess,
     .               /// The current token.
    24 ( 0.00%)      pub token: Token,
     .               /// The spacing for the current token
    46 ( 0.00%)      pub token_spacing: Spacing,
     .               /// The previous token.
    36 ( 0.00%)      pub prev_token: Token,
    80 ( 0.00%)      pub capture_cfg: bool,
   194 ( 0.00%)      restrictions: Restrictions,
    92 ( 0.00%)      expected_tokens: Vec<TokenType>,
     .               // Important: This must only be advanced from `next_tok`
     .               // to ensure that `token_cursor.num_next_calls` is updated properly
     .               token_cursor: TokenCursor,
    92 ( 0.00%)      desugar_doc_comments: bool,
     .               /// This field is used to keep track of how many left angle brackets we have seen. This is
     .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
     .               /// appropriately.
     .               ///
     .               /// See the comments in the `parse_path_segment` function for more details.
    92 ( 0.00%)      unmatched_angle_bracket_count: u32,
   138 ( 0.00%)      max_angle_bracket_count: u32,
     .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
     .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
     .               /// error.
    46 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
     .               last_unexpected_token_span: Option<Span>,
     .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
     .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
     .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
     .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
     .               subparser_name: Option<&'static str>,
     .               capture_state: CaptureState,
     .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
     .           /// the first macro inner attribute to invoke a proc-macro).
     .           /// When create a `TokenStream`, the inner attributes get inserted
     .           /// into the proper place in the token stream.
     .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
     .           
     .           /// Controls how we capture tokens. Capturing can be expensive,
     .           /// so we try to avoid performing capturing in cases where
     .           /// we will never need an `AttrAnnotatedTokenStream`
    46 ( 0.00%)  #[derive(Copy, Clone)]
     .           pub enum Capturing {
     .               /// We aren't performing any capturing - this is the default mode.
     .               No,
     .               /// We are capturing tokens
     .               Yes,
     .           }
     .           
   187 ( 0.00%)  #[derive(Clone)]
     .           struct CaptureState {
   184 ( 0.00%)      capturing: Capturing,
    46 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
     .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
     .           }
     .           
     .           impl<'a> Drop for Parser<'a> {
     .               fn drop(&mut self) {
   302 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
     .               }
     .           }
     .           
 6,548 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursor {
     .               frame: TokenCursorFrame,
 1,567 ( 0.00%)      stack: Vec<TokenCursorFrame>,
     .               desugar_doc_comments: bool,
     .               // Counts the number of calls to `next` or `next_desugared`,
     .               // depending on whether `desugar_doc_comments` is set.
   476 ( 0.00%)      num_next_calls: usize,
     .               // During parsing, we may sometimes need to 'unglue' a
     .               // glued token into two component tokens
     .               // (e.g. '>>' into '>' and '>), so that the parser
     .               // can consume them one at a time. This process
     .               // bypasses the normal capturing mechanism
     .               // (e.g. `num_next_calls` will not be incremented),
     .               // since the 'unglued' tokens due not exist in
     .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
     .               // in `Option<Vec<u8>>` requires us to unglue
     .               // the trailing `>>` token. The `break_last_token`
     .               // field is used to track this token - it gets
     .               // appended to the captured stream when
     .               // we evaluate a `LazyTokenStream`
     .               break_last_token: bool,
     .           }
     .           
 3,005 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursorFrame {
 1,193 ( 0.00%)      delim: token::DelimToken,
     .               span: DelimSpan,
     .               open_delim: bool,
 2,386 ( 0.00%)      tree_cursor: tokenstream::Cursor,
     .               close_delim: bool,
     .           }
     .           
     .           impl TokenCursorFrame {
     .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   190 ( 0.00%)          TokenCursorFrame {
     .                       delim,
     .                       span,
     .                       open_delim: false,
   565 ( 0.00%)              tree_cursor: tts.into_trees(),
     .                       close_delim: false,
     .                   }
     .               }
     .           }
     .           
     .           impl TokenCursor {
44,208 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
     .                   loop {
21,801 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   489 ( 0.00%)                  self.frame.open_delim = true;
 2,445 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
42,908 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
     .                           tree
 1,976 ( 0.00%)              } else if !self.frame.close_delim {
   468 ( 0.00%)                  self.frame.close_delim = true;
 2,340 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   936 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 6,084 ( 0.00%)                  self.frame = frame;
     .                           continue;
     .                       } else {
   936 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
     .                       };
     .           
 8,346 ( 0.00%)              match tree {
     .                           TokenTree::Token(token) => {
29,472 ( 0.02%)                      return (token, spacing);
     .                           }
     .                           TokenTree::Delimited(sp, delim, tts) => {
     .                               let frame = TokenCursorFrame::new(sp, delim, tts);
     .                               self.stack.push(mem::replace(&mut self.frame, frame));
     .                           }
     .                       }
     .                   }
29,472 ( 0.02%)      }
     .           
 1,660 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
   498 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
     .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
     .                           (data, attr_style, span)
     .                       }
   830 ( 0.00%)              tok => return tok,
     .                   };
     .           
     .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
     .                   // required to wrap the text.
     .                   let mut num_of_hashes = 0;
     .                   let mut count = 0;
     .                   for ch in data.as_str().chars() {
     .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
     .                                   .iter()
     .                                   .cloned()
     .                                   .collect::<TokenStream>()
     .                           },
     .                       ),
     .                   ));
     .           
     .                   self.next()
 1,494 ( 0.00%)      }
     .           }
     .           
 1,135 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
     .           enum TokenType {
   929 ( 0.00%)      Token(TokenKind),
     .               Keyword(Symbol),
     .               Operator,
     .               Lifetime,
     .               Ident,
     .               Path,
     .               Type,
     .               Const,
     .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
     .           }
     .           
     .           pub enum FollowedByType {
     .               Yes,
     .               No,
     .           }
     .           
     .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    34 ( 0.00%)      Some(match token.kind {
    68 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    68 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    68 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
     .                   token::DocComment(..) => "doc comment",
     .                   _ => return None,
     .               })
     .           }
     .           
   119 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    34 ( 0.00%)      let token_str = pprust::token_to_string(token);
     .               match token_descr_opt(token) {
     .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
   119 ( 0.00%)          _ => format!("`{}`", token_str),
     .               }
    85 ( 0.00%)  }
     .           
     .           impl<'a> Parser<'a> {
   532 ( 0.00%)      pub fn new(
     .                   sess: &'a ParseSess,
     .                   tokens: TokenStream,
     .                   desugar_doc_comments: bool,
     .                   subparser_name: Option<&'static str>,
     .               ) -> Self {
    38 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    76 ( 0.00%)          start_frame.open_delim = true;
     .                   start_frame.close_delim = true;
     .           
 1,178 ( 0.00%)          let mut parser = Parser {
     .                       sess,
    38 ( 0.00%)              token: Token::dummy(),
     .                       token_spacing: Spacing::Alone,
    38 ( 0.00%)              prev_token: Token::dummy(),
     .                       capture_cfg: false,
     .                       restrictions: Restrictions::empty(),
     .                       expected_tokens: Vec::new(),
     .                       token_cursor: TokenCursor {
   228 ( 0.00%)                  frame: start_frame,
     .                           stack: Vec::new(),
     .                           num_next_calls: 0,
     .                           desugar_doc_comments,
     .                           break_last_token: false,
     .                       },
     .                       desugar_doc_comments,
     .                       unmatched_angle_bracket_count: 0,
     .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
     .                           capturing: Capturing::No,
     .                           replace_ranges: Vec::new(),
     .                           inner_attr_ranges: Default::default(),
     .                       },
     .                       current_closure: None,
     .                   };
     .           
     .                   // Make parser point to the first token.
    76 ( 0.00%)          parser.bump();
     .           
     .                   parser
   342 ( 0.00%)      }
     .           
     .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
     .                   loop {
21,486 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
   664 ( 0.00%)                  self.token_cursor.next_desugared()
     .                       } else {
10,245 ( 0.01%)                  self.token_cursor.next()
     .                       };
14,324 ( 0.01%)              self.token_cursor.num_next_calls += 1;
     .                       // We've retrieved an token from the underlying
     .                       // cursor, so we no longer need to worry about
     .                       // an unglued token. See `break_and_eat` for more details
 3,581 ( 0.00%)              self.token_cursor.break_last_token = false;
14,324 ( 0.01%)              if next.span.is_dummy() {
     .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   184 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
     .                       }
12,147 ( 0.01%)              if matches!(
 7,162 ( 0.00%)                  next.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
14,324 ( 0.01%)              return (next, spacing);
     .                   }
     .               }
     .           
     .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
     .                   match self.expect_one_of(&[], &[]) {
     .                       Err(e) => Err(e),
     .                       // We can get `Ok(true)` from `recover_closing_delimiter`
     .                       // which is called in `expected_one_of_not_found`.
     .                       Ok(_) => FatalError.raise(),
     .                   }
     .               }
     .           
     .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 2,952 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   328 ( 0.00%)          if self.expected_tokens.is_empty() {
   120 ( 0.00%)              if self.token == *t {
   100 ( 0.00%)                  self.bump();
     .                           Ok(false)
     .                       } else {
     .                           self.unexpected_try_recover(t)
     .                       }
     .                   } else {
 3,696 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
     .                   }
 4,920 ( 0.00%)      }
     .           
     .               /// Expect next token to be edible or inedible token.  If edible,
     .               /// then consume it; if inedible, then return without consuming
     .               /// anything.  Signal a fatal error if next token is unexpected.
 4,332 ( 0.00%)      pub fn expect_one_of(
     .                   &mut self,
     .                   edible: &[TokenKind],
     .                   inedible: &[TokenKind],
     .               ) -> PResult<'a, bool /* recovered */> {
   722 ( 0.00%)          if edible.contains(&self.token.kind) {
   930 ( 0.00%)              self.bump();
     .                       Ok(false)
     .                   } else if inedible.contains(&self.token.kind) {
     .                       // leave it in the input
     .                       Ok(false)
     .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
     .                       FatalError.raise();
     .                   } else {
     .                       self.expected_one_of_not_found(edible, inedible)
     .                   }
 5,415 ( 0.00%)      }
     .           
     .               // Public for rustfmt usage.
     .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 3,265 ( 0.00%)          self.parse_ident_common(true)
     .               }
     .           
     .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 2,412 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
     .                       TokenKind::DocComment(..) => {
     .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
     .                       }
     .                       _ => self.expected_ident_found(),
     .                   })
     .               }
     .           
 5,614 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   802 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 4,812 ( 0.00%)          if !is_raw && ident.is_reserved() {
     .                       let mut err = self.expected_ident_found();
     .                       if recover {
     .                           err.emit();
     .                       } else {
     .                           return Err(err);
     .                       }
     .                   }
 3,208 ( 0.00%)          self.bump();
     .                   Ok(ident)
 8,020 ( 0.00%)      }
     .           
     .               /// Checks if the next token is `tok`, and returns `true` if so.
     .               ///
     .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
     .               /// encountered.
72,457 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
31,374 ( 0.02%)          let is_present = self.token == *tok;
21,156 ( 0.01%)          if !is_present {
45,271 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
     .                   }
     .                   is_present
72,457 ( 0.04%)      }
     .           
     .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    36 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
14,984 ( 0.01%)          let is_present = self.check(tok);
 9,692 ( 0.01%)          if is_present {
 2,059 ( 0.00%)              self.bump()
     .                   }
     .                   is_present
    45 ( 0.00%)      }
     .           
     .               /// If the next token is the given keyword, returns `true` without eating it.
     .               /// An expectation is also added for diagnostics purposes.
 2,690 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   649 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
17,616 ( 0.01%)          self.token.is_keyword(kw)
     .               }
     .           
     .               /// If the next token is the given keyword, eats it and returns `true`.
     .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
     .               // Public for rustfmt usage.
 5,015 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 3,968 ( 0.00%)          if self.check_keyword(kw) {
   562 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
 5,015 ( 0.00%)      }
     .           
     .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   408 ( 0.00%)          if self.token.is_keyword(kw) {
   102 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
     .               /// If the given word is not a keyword, signals an error.
     .               /// If the next token is not the given word, signals an error.
     .               /// Otherwise, eats it.
    45 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
     .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    36 ( 0.00%)      }
     .           
     .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 4,600 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 2,300 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 5,175 ( 0.00%)      }
     .           
 3,366 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
 1,412 ( 0.00%)          if ok {
     .                       true
     .                   } else {
   512 ( 0.00%)              self.expected_tokens.push(typ);
     .                       false
     .                   }
 3,366 ( 0.00%)      }
     .           
     .               fn check_ident(&mut self) -> bool {
   900 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
     .               }
     .           
 1,552 ( 0.00%)      fn check_path(&mut self) -> bool {
 3,269 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
 1,940 ( 0.00%)      }
     .           
     .               fn check_type(&mut self) -> bool {
     .                   self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
     .               }
     .           
     .               fn check_const_arg(&mut self) -> bool {
     .                   self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
     .               }
     .           
   999 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   555 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
     .                       && self.look_ahead(dist + 1, |t| match t.kind {
     .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
     .                           token::OpenDelim(DelimToken::Brace) => true,
     .                           _ => false,
     .                       })
   999 ( 0.00%)      }
     .           
     .               /// Checks to see if the next token is either `+` or `+=`.
     .               /// Otherwise returns `false`.
     .               fn check_plus(&mut self) -> bool {
   284 ( 0.00%)          self.check_or_expected(
   142 ( 0.00%)              self.token.is_like_plus(),
   142 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
     .                   )
     .               }
     .           
     .               /// Eats the expected token if it's present possibly breaking
     .               /// compound tokens like multi-character operators in process.
     .               /// Returns `true` if the token was eaten.
 4,524 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 2,639 ( 0.00%)          if self.token.kind == expected {
    14 ( 0.00%)              self.bump();
     .                       return true;
     .                   }
 1,850 ( 0.00%)          match self.token.kind.break_two_token_op() {
     .                       Some((first, second)) if first == expected => {
     .                           let first_span = self.sess.source_map().start_point(self.token.span);
     .                           let second_span = self.token.span.with_lo(first_span.hi());
     .                           self.token = Token::new(first, first_span);
     .                           // Keep track of this token - if we end token capturing now,
     .                           // we'll want to append this token to the captured stream.
     .                           //
     .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
     .                           // and `next_tok` will set this field to `None`
     .                           self.token_cursor.break_last_token = true;
     .                           // Use the spacing of the glued token as the spacing
     .                           // of the unglued second token.
     .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
     .                           true
     .                       }
     .                       _ => {
 1,110 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
     .                           false
     .                       }
     .                   }
 4,873 ( 0.00%)      }
     .           
     .               /// Eats `+` possibly breaking tokens like `+=` in process.
     .               fn eat_plus(&mut self) -> bool {
     .                   self.break_and_eat(token::BinOp(token::Plus))
     .               }
     .           
     .               /// Eats `&` possibly breaking tokens like `&&` in process.
     .               /// Signals an error if `&` is not eaten.
     .               fn expect_and(&mut self) -> PResult<'a, ()> {
    42 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `|` possibly breaking tokens like `||` in process.
     .               /// Signals an error if `|` was not eaten.
     .               fn expect_or(&mut self) -> PResult<'a, ()> {
     .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
   198 ( 0.00%)      fn eat_lt(&mut self) -> bool {
 1,147 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   740 ( 0.00%)          if ate {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
     .                       self.unmatched_angle_bracket_count += 1;
     .                       self.max_angle_bracket_count += 1;
     .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
     .                   }
     .                   ate
   198 ( 0.00%)      }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
     .               /// Signals an error if `<` was not eaten.
     .               fn expect_lt(&mut self) -> PResult<'a, ()> {
     .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `>` possibly breaking tokens like `>>` in process.
-- line 733 ----------------------------------------
-- line 742 ----------------------------------------
     .                       Ok(())
     .                   } else {
     .                       self.unexpected()
     .                   }
     .               }
     .           
     .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
     .                   kets.iter().any(|k| match expect {
 1,089 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     .                       TokenExpectType::NoExpect => self.token == **k,
     .                   })
     .               }
     .           
     .               fn parse_seq_to_before_tokens<T>(
     .                   &mut self,
     .                   kets: &[&TokenKind],
     .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
     .                   let mut first = true;
     .                   let mut recovered = false;
     .                   let mut trailing = false;
     .                   let mut v = vec![];
     .                   let unclosed_delims = !self.unclosed_delims.is_empty();
     .           
     .                   while !self.expect_any_with_type(kets, expect) {
 1,037 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
     .                           break;
     .                       }
   770 ( 0.00%)              if let Some(ref t) = sep.sep {
   933 ( 0.00%)                  if first {
     .                               first = false;
     .                           } else {
   420 ( 0.00%)                      match self.expect(t) {
     .                                   Ok(false) => {
     .                                       self.current_closure.take();
     .                                   }
     .                                   Ok(true) => {
     .                                       self.current_closure.take();
     .                                       recovered = true;
     .                                       break;
     .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
     .                                               e.cancel();
     .                                               break;
     .                                           }
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                       }
   362 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
     .                           trailing = true;
     .                           break;
     .                       }
     .           
   283 ( 0.00%)              let t = f(self)?;
   229 ( 0.00%)              v.push(t);
     .                   }
     .           
   728 ( 0.00%)          Ok((v, trailing, recovered))
     .               }
     .           
     .               fn recover_missing_braces_around_closure_body(
     .                   &mut self,
     .                   closure_spans: ClosureSpans,
     .                   mut expect_err: DiagnosticBuilder<'_>,
     .               ) -> PResult<'a, ()> {
     .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_seq_to_before_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   811 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
     .               }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
 1,010 ( 0.00%)      fn parse_seq_to_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   471 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   257 ( 0.00%)          if !recovered {
     .                       self.eat(ket);
     .                   }
 1,170 ( 0.00%)          Ok((val, trailing))
   808 ( 0.00%)      }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_unspanned_seq<T>(
     .                   &mut self,
     .                   bra: &TokenKind,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
   366 ( 0.00%)          self.expect(bra)?;
   808 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
     .               }
     .           
     .               fn parse_delim_comma_seq<T>(
     .                   &mut self,
     .                   delim: DelimToken,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_unspanned_seq(
   153 ( 0.00%)              &token::OpenDelim(delim),
   206 ( 0.00%)              &token::CloseDelim(delim),
     .                       SeqSep::trailing_allowed(token::Comma),
     .                       f,
     .                   )
     .               }
     .           
     .               fn parse_paren_comma_seq<T>(
     .                   &mut self,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_delim_comma_seq(token::Paren, f)
     .               }
     .           
     .               /// Advance the parser by one token using provided token as the next one.
46,553 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
     .                   // Bumping after EOF is a bad sign, usually an infinite loop.
21,486 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
     .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
     .                       self.span_bug(self.token.span, msg);
     .                   }
     .           
     .                   // Update the current and previous tokens.
14,324 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 3,581 ( 0.00%)          self.token_spacing = next_spacing;
     .           
     .                   // Diagnostics.
 3,581 ( 0.00%)          self.expected_tokens.clear();
     .               }
     .           
     .               /// Advance the parser by one token.
28,648 ( 0.02%)      pub fn bump(&mut self) {
14,324 ( 0.01%)          let next_token = self.next_tok(self.token.span);
21,486 ( 0.01%)          self.bump_with(next_token);
28,648 ( 0.02%)      }
     .           
     .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
     .               /// When `dist == 0` then the current token is looked at.
     .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   324 ( 0.00%)          if dist == 0 {
   148 ( 0.00%)              return looker(&self.token);
     .                   }
     .           
 1,260 ( 0.00%)          let frame = &self.token_cursor.frame;
 1,352 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
     .                       let all_normal = (0..dist).all(|i| {
 3,819 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 5,033 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
     .                       });
     .                       if all_normal {
 6,219 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 2,213 ( 0.00%)                      Some(tree) => match tree {
 1,028 ( 0.00%)                          TokenTree::Token(token) => looker(token),
     .                                   TokenTree::Delimited(dspan, delim, _) => {
   582 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
     .                                   }
     .                               },
 1,104 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
     .                           };
     .                       }
     .                   }
     .           
     .                   let mut cursor = self.token_cursor.clone();
     .                   let mut i = 0;
   109 ( 0.00%)          let mut token = Token::dummy();
     .                   while i < dist {
   721 ( 0.00%)              token = cursor.next().0;
   351 ( 0.00%)              if matches!(
   206 ( 0.00%)                  token.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
     .                       i += 1;
     .                   }
     3 ( 0.00%)          return looker(&token);
     .               }
     .           
     .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
 1,323 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   393 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
 1,323 ( 0.00%)      }
     .           
     .               /// Parses asyncness: `async` or nothing.
     .               fn parse_asyncness(&mut self) -> Async {
     .                   if self.eat_keyword(kw::Async) {
     .                       let span = self.prev_token.uninterpolated_span();
     .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
     .                   } else {
     .                       Async::No
     .                   }
     .               }
     .           
     .               /// Parses unsafety: `unsafe` or nothing.
   100 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
     .                   if self.eat_keyword(kw::Unsafe) {
     .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Unsafe::No
     .                   }
   400 ( 0.00%)      }
     .           
     .               /// Parses constness: `const` or nothing.
   992 ( 0.00%)      fn parse_constness(&mut self) -> Const {
     .                   // Avoid const blocks to be parsed as const items
   282 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
     .                       && self.eat_keyword(kw::Const)
     .                   {
    80 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Const::No
     .                   }
 1,736 ( 0.00%)      }
     .           
     .               /// Parses inline const expressions.
     .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
     .                   if pat {
     .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
     .                   } else {
     .                       self.sess.gated_spans.gate(sym::inline_const, span);
     .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
     .                   };
     .                   let blk_span = anon_const.value.span;
     .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
     .               }
     .           
     .               /// Parses mutability (`mut` or nothing).
     .               fn parse_mutability(&mut self) -> Mutability {
     .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     6 ( 0.00%)      }
     .           
     .               /// Possibly parses mutability (`const` or `mut`).
     .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
     .                   if self.eat_keyword(kw::Mut) {
     .                       Some(Mutability::Mut)
     .                   } else if self.eat_keyword(kw::Const) {
     .                       Some(Mutability::Not)
     .                   } else {
-- line 1126 ----------------------------------------
-- line 1135 ----------------------------------------
     .                       self.bump();
     .                       Ok(Ident::new(symbol, self.prev_token.span))
     .                   } else {
     .                       self.parse_ident_common(true)
     .                   }
     .               }
     .           
     .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    99 ( 0.00%)          self.parse_mac_args_common(true).map(P)
     .               }
     .           
     .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
   123 ( 0.00%)          self.parse_mac_args_common(false)
     .               }
     .           
   801 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   712 ( 0.00%)          Ok(
   553 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
     .                       {
   248 ( 0.00%)                  match self.parse_token_tree() {
   310 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
     .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
     .                               {
   124 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
     .                               }
     .                               _ => unreachable!(),
     .                           }
    54 ( 0.00%)              } else if !delimited_only {
     .                           if self.eat(&token::Eq) {
     .                               let eq_span = self.prev_token.span;
     .           
     .                               // Collect tokens because they are used during lowering to HIR.
     .                               let expr = self.parse_expr_force_collect()?;
     .                               let span = expr.span;
     .           
     .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
     .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
     .                           } else {
     .                               MacArgs::Empty
     .                           }
     .                       } else {
     .                           return self.unexpected();
     .                       },
     .                   )
   623 ( 0.00%)      }
     .           
     .               fn parse_or_use_outer_attributes(
     .                   &mut self,
     .                   already_parsed_attrs: Option<AttrWrapper>,
     .               ) -> PResult<'a, AttrWrapper> {
 1,449 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
     .                       Ok(attrs)
     .                   } else {
   778 ( 0.00%)              self.parse_outer_attributes()
     .                   }
     .               }
     .           
     .               /// Parses a single token tree from the input.
   864 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   432 ( 0.00%)          match self.token.kind {
     .                       token::OpenDelim(..) => {
     .                           let depth = self.token_cursor.stack.len();
     .           
     .                           // We keep advancing the token cursor until we hit
     .                           // the matching `CloseDelim` token.
 2,400 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
     .                               && matches!(self.token.kind, token::CloseDelim(_)))
     .                           {
     .                               // Advance one token at a time, so `TokenCursor::next()`
     .                               // can capture these tokens if necessary.
 1,406 ( 0.00%)                      self.bump();
     .                           }
     .                           // We are still inside the frame corresponding
     .                           // to the delimited stream we captured, so grab
     .                           // the tokens from this frame.
     .                           let frame = &self.token_cursor.frame;
   162 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   162 ( 0.00%)                  let span = frame.span;
    81 ( 0.00%)                  let delim = frame.delim;
     .                           // Consume close delimiter
   162 ( 0.00%)                  self.bump();
   405 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
     .                       }
     .                       token::CloseDelim(_) | token::Eof => unreachable!(),
     .                       _ => {
    54 ( 0.00%)                  self.bump();
   135 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
     .                       }
     .                   }
   756 ( 0.00%)      }
     .           
     .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
     .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
     .                   let mut tts = Vec::new();
     .                   while self.token != token::Eof {
     .                       tts.push(self.parse_token_tree());
     .                   }
     .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
     .                   }
     .                   TokenStream::new(result)
     .               }
     .           
     .               /// Evaluates the closure with restrictions in place.
     .               ///
     .               /// Afters the closure is evaluated, restrictions are reset.
     .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   482 ( 0.00%)          let old = self.restrictions;
   685 ( 0.00%)          self.restrictions = res;
     .                   let res = f(self);
   623 ( 0.00%)          self.restrictions = old;
     .                   res
     .               }
     .           
 1,864 ( 0.00%)      fn is_crate_vis(&self) -> bool {
 1,165 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 2,097 ( 0.00%)      }
     .           
     .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
     .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
     .               /// If the following element can't be a tuple (i.e., it's a function definition), then
     .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
     .               /// so emit a proper diagnostic.
     .               // Public for rustfmt usage.
 1,490 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   298 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
     .           
   149 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   596 ( 0.00%)          if self.is_crate_vis() {
     .                       self.bump(); // `crate`
     .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
     .                       return Ok(Visibility {
     .                           span: self.prev_token.span,
     .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
     .                           tokens: None,
     .                       });
     .                   }
     .           
     .                   if !self.eat_keyword(kw::Pub) {
     .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
     .                       // keyword to grab a span from for inherited visibility; an empty span at the
     .                       // beginning of the current token would seem to be the "Schelling span".
   132 ( 0.00%)              return Ok(Visibility {
   396 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
     .                           kind: VisibilityKind::Inherited,
     .                           tokens: None,
     .                       });
     .                   }
    17 ( 0.00%)          let lo = self.prev_token.span;
     .           
    85 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
     .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
     .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
     .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
     .                       // by the following tokens.
     .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
     .                       // account for `pub(crate::foo)`
     .                       {
     .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       } else if let FollowedByType::No = fbt {
     .                           // Provide this diagnostic if a type cannot follow;
     .                           // in particular, if this is not a tuple struct.
     .                           self.recover_incorrect_vis_restriction()?;
     .                           // Emit diagnostic, but continue with public visibility.
     .                       }
     .                   }
     .           
    51 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
 1,341 ( 0.00%)      }
     .           
     .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
     .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
     .                   self.bump(); // `(`
     .                   let path = self.parse_path(PathStyle::Mod)?;
     .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
     .           
     .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
     .                       )
     .                       .emit();
     .           
     .                   Ok(())
     .               }
     .           
     .               /// Parses `extern string_literal?`.
     .               fn parse_extern(&mut self) -> Extern {
    41 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
     .               }
     .           
     .               /// Parses a string literal as an ABI spec.
     .               fn parse_abi(&mut self) -> Option<StrLit> {
     .                   match self.parse_str_lit() {
     .                       Ok(str_lit) => Some(str_lit),
     .                       Err(Some(lit)) => match lit.kind {
     .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
     .                   self.collect_tokens_trailing_token(
     .                       AttrWrapper::empty(),
     .                       ForceCollect::Yes,
     .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
     .                   )
     .               }
     .           
     .               /// `::{` or `::*`
 5,040 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 2,520 ( 0.00%)          self.check(&token::ModSep)
     .                       && self.look_ahead(1, |t| {
 1,094 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
     .                       })
 5,139 ( 0.00%)      }
     .           
     .               pub fn clear_expected_tokens(&mut self) {
     .                   self.expected_tokens.clear();
     .               }
     .           }
     .           
     .           crate fn make_unclosed_delims_error(
     .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
     .                   err.span_label(sp, "closing delimiter possibly meant for this");
     .               }
     .               if let Some(sp) = unmatched.unclosed_span {
     .                   err.span_label(sp, "unclosed delimiter");
     .               }
     .               Some(err)
     .           }
     .           
   672 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   336 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
     .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   336 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
     .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
     .                       e.emit();
     .                   }
     .               }
   672 ( 0.00%)  }
     .           
     .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
     .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
     .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
     .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
     .           /// `AttrAnnotatedTokenTree::Delimited` tokens
     .           #[derive(Debug, Clone)]
     .           pub enum FlatToken {
-- line 1474 ----------------------------------------

22,157 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,206 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   45,250 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      700 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
       56 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   50,294 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      660 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        4 ( 0.00%)          self.position += bytes;
        4 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      346 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      396 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   18,250 ( 0.01%)      fn read_u32(&mut self) -> u32 {
   69,310 ( 0.04%)          read_leb128!(self, read_u32_leb128)
   36,500 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.31%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.04%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.09%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,085,536 ( 0.61%)          let value = self.data[self.position];
  211,767 ( 0.12%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   89,505 ( 0.05%)      fn read_usize(&mut self) -> usize {
   89,535 ( 0.05%)          read_leb128!(self, read_usize_leb128)
  179,010 ( 0.10%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   18,406 ( 0.01%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   11,438 ( 0.01%)          let len = self.read_usize();
   76,398 ( 0.04%)          let sentinel = self.data[self.position + len];
   19,122 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   47,805 ( 0.03%)          self.position += len + 1;
    5,697 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       55 ( 0.00%)          let start = self.position;
    1,873 ( 0.00%)          self.position += s.len();
       55 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  274,307 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     16 ( 0.00%)      fn clone(&self) -> Self {
    237 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     47 ( 0.00%)              table: self.table.clone(),
      .                   }
     18 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  5,700 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 14,677 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 12,978 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
     12 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 10,603 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     13 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
      .               /// map.insert("c", 3);
      .               ///
      .               /// for key in map.keys() {
      .               ///     println!("{}", key);
      .               /// }
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn keys(&self) -> Keys<'_, K, V> {
      6 ( 0.00%)          Keys { inner: self.iter() }
      .               }
      .           
      .               /// An iterator visiting all values in arbitrary order.
      .               /// The iterator element type is `&'a V`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    784 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  3,954 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 26,857 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 45,908 ( 0.03%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 10,310 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 15,280 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     45 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
    135 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     90 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     45 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
263,067 ( 0.15%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     23 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
169,772 ( 0.09%)              self.table
133,511 ( 0.07%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 14,737 ( 0.01%)              None
      .                   }
246,964 ( 0.14%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,784 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 92,311 ( 0.05%)          match self.remove_entry(k) {
    903 ( 0.00%)              Some((_, v)) => Some(v),
  2,149 ( 0.00%)              None => None,
      .                   }
  6,691 ( 0.00%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 21,409 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 82,166 ( 0.05%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
204,451 ( 0.11%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
223,391 ( 0.12%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 21,758 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
104,055 ( 0.06%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 30,668 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 68,878 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 90,725 ( 0.05%)          self.from_hash(hash, equivalent(k))
126,075 ( 0.07%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
104,885 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 48,649 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     68 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  2,093 ( 0.00%)          IntoIter {
  1,396 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    204 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  6,812 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
     17 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      2 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    163 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      3 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
      6 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,375 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  1,279 ( 0.00%)          let iter = iter.into_iter();
    824 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
    115 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 13,341 ( 0.01%)              self.insert(k, v);
      .                   });
    677 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

 98,462 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
    70 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
    45 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 4,661 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
23,877 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
 6,822 ( 0.00%)          let start_src_index = self.src_index(self.pos);
10,233 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 3,411 ( 0.00%)          if is_beginning_of_file {
    20 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
 6,709 ( 0.00%)              let start_src_index = self.src_index(self.pos);
15,180 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
 5,060 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
    25 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
15,165 ( 0.01%)              let token = rustc_lexer::first_token(text);
     .           
10,110 ( 0.01%)              let start = self.pos;
 5,055 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
40,892 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
27,248 ( 0.02%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
20,436 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
30,699 ( 0.02%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
   140 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
   160 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
25,275 ( 0.01%)          Some(match token {
   133 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
   605 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
   565 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
     .                           if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 4,980 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 6,225 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
 2,490 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
 3,735 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
 6,225 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
 4,980 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 2,490 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
 8,715 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
 2,512 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   471 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
     .                                       .note(
     .                                           "see issue #42326 \
     .                                            <https://github.com/rust-lang/rust/issues/42326> \
     .                                            for more information",
     .                                       )
     .                                       .emit();
     .                                   None
     .                               } else {
    25 ( 0.00%)                          Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
 1,256 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
     .                       rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
     .                           if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
-- line 280 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
 1,356 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
   113 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
   339 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 1,695 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
     9 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
     9 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
   116 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
    58 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
   174 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
    90 ( 0.00%)              rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
    90 ( 0.00%)                  if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
   630 ( 0.00%)                  match base {
     .                               Base::Hexadecimal => self.err_span_(
     .                                   start,
     .                                   suffix_start,
     .                                   "hexadecimal float literal is not supported",
     .                               ),
     .                               Base::Octal => {
     .                                   self.err_span_(start, suffix_start, "octal float literal is not supported")
     .                               }
     .                               Base::Binary => {
     .                                   self.err_span_(start, suffix_start, "binary float literal is not supported")
     .                               }
     .                               _ => (),
     .                           }
     .           
   270 ( 0.00%)                  let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
    27 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
 8,526 ( 0.00%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
 1,324 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 1,549 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
 6,196 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
    54 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 2,006 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
   452 ( 0.00%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
 2,034 ( 0.00%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
   232 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
11,205 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 2,490 ( 0.00%)      match is_nfc_quick(string.chars()) {
12,450 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

15,299 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,393,095 ( 0.78%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       17 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   20,631 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  226,357 ( 0.13%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
1,913,180 ( 1.07%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      690 ( 0.00%)          return wrapping_sub(
    1,806 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   39,263 ( 0.02%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  162,058 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  272,626 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
       18 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   68,588 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    2,994 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   17,189 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   17,966 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      688 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    1,486 ( 0.00%)          if self.capacity() > self.len {
    1,009 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      397 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   18,167 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   12,913 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   11,952 ( 0.01%)              self.len = len;
      206 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   21,798 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  193,835 ( 0.11%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  403,482 ( 0.23%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   33,650 ( 0.02%)          self.len = new_len;
      552 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      490 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       72 ( 0.00%)          let len = self.len();
      144 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      196 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      288 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      196 ( 0.00%)              self.set_len(len + 1);
        .                   }
      420 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       31 ( 0.00%)          let len = self.len();
      117 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      112 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
       80 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       31 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   16,447 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      464 ( 0.00%)          self.retain_mut(|elem| f(elem));
   16,128 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,017 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    1,504 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      428 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   24,229 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    4,904 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      116 ( 0.00%)                      g.processed_len += 1;
       48 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      552 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      501 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       44 ( 0.00%)          let len = self.len();
      226 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      293 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       12 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      171 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1720 ----------------------------------------
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
  952,537 ( 0.53%)          if self.len == self.buf.capacity() {
   24,617 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   10,061 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,039,776 ( 0.58%)              self.len += 1;
        .                   }
        .               }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
-- line 1742 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   65,704 ( 0.04%)          if self.len == 0 {
        4 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   63,830 ( 0.04%)                  self.len -= 1;
    6,480 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       35 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
      827 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   16,443 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
      375 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       18 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      105 ( 0.00%)              Drain {
        .                           tail_start: end,
       18 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   32,352 ( 0.02%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   21,242 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
       63 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
       57 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
      865 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      115 ( 0.00%)          let len = self.len();
      230 ( 0.00%)          if new_len > len {
    1,061 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      750 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       32 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    1,560 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      156 ( 0.00%)          let len = self.len();
        .           
      468 ( 0.00%)          if new_len > len {
      378 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      156 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   12,067 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      361 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   15,504 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
    9,585 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    1,797 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   18,602 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    1,773 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  250,502 ( 0.14%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   66,883 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   11,093 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   13,918 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    7,461 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   80,431 ( 0.04%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   41,097 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   18,369 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      634 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       80 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   34,510 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       80 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    6,032 ( 0.00%)          while let Some(element) = iterator.next() {
      331 ( 0.00%)              let len = self.len();
   11,453 ( 0.01%)              if len == self.capacity() {
       78 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
    8,933 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
      185 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      517 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      280 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   80,405 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   31,132 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   94,760 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

   75,476 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
195,965 ( 0.11%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    193 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
  6,668 ( 0.00%)              RustcEntry::Occupied(RustcOccupiedEntry {
  1,078 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 69,679 ( 0.04%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
  8,038 ( 0.00%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
158,192 ( 0.09%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
    625 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    191 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
  3,210 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    110 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
    266 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 42,064 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs
--------------------------------------------------------------------------------
Ir              

-- line 71 ----------------------------------------
     .               None,
     .               Single(ProjectionTyCandidate<'tcx>),
     .               Ambiguous,
     .               Error(SelectionError<'tcx>),
     .           }
     .           
     .           impl<'tcx> ProjectionTyCandidateSet<'tcx> {
     .               fn mark_ambiguous(&mut self) {
    47 ( 0.00%)          *self = ProjectionTyCandidateSet::Ambiguous;
     .               }
     .           
     .               fn mark_error(&mut self, err: SelectionError<'tcx>) {
     .                   *self = ProjectionTyCandidateSet::Error(err);
     .               }
     .           
     .               // Returns true if the push was successful, or false if the candidate
     .               // was discarded -- this could be because of ambiguity, or because
     .               // a higher-priority candidate is already there.
   210 ( 0.00%)      fn push_candidate(&mut self, candidate: ProjectionTyCandidate<'tcx>) -> bool {
     .                   use self::ProjectionTyCandidate::*;
     .                   use self::ProjectionTyCandidateSet::*;
     .           
     .                   // This wacky variable is just used to try and
     .                   // make code readable and avoid confusing paths.
     .                   // It is assigned a "value" of `()` only on those
     .                   // paths in which we wish to convert `*self` to
     .                   // ambiguous (and return false, because the candidate
     .                   // was not used). On other paths, it is not assigned,
     .                   // and hence if those paths *could* reach the code that
     .                   // comes after the match, this fn would not compile.
     .                   let convert_to_ambiguous;
     .           
   210 ( 0.00%)          match self {
     .                       None => {
   455 ( 0.00%)                  *self = Single(candidate);
     .                           return true;
     .                       }
     .           
     .                       Single(current) => {
     .                           // Duplicates can happen inside ParamEnv. In the case, we
     .                           // perform a lazy deduplication.
     .                           if current == &candidate {
     .                               return false;
-- line 113 ----------------------------------------
-- line 133 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   // We only ever get here when we moved from a single candidate
     .                   // to ambiguous.
     .                   let () = convert_to_ambiguous;
     .                   *self = Ambiguous;
     .                   false
   245 ( 0.00%)      }
     .           }
     .           
     .           /// Evaluates constraints of the form:
     .           ///
     .           ///     for<...> <T as Trait>::U == V
     .           ///
     .           /// If successful, this may result in additional obligations. Also returns
     .           /// the projection cache key used to track these additional obligations.
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
     .           pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &PolyProjectionObligation<'tcx>,
     .           ) -> Result<
     .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
     .               MismatchedProjectionTypes<'tcx>,
     .           > {
     .               let infcx = selcx.infcx();
   408 ( 0.00%)      infcx.commit_if_ok(|_snapshot| {
     .                   let placeholder_predicate =
   396 ( 0.00%)              infcx.replace_bound_vars_with_placeholders(obligation.predicate);
     .           
     .                   let placeholder_obligation = obligation.with(placeholder_predicate);
   132 ( 0.00%)          let result = project_and_unify_type(selcx, &placeholder_obligation)?;
    66 ( 0.00%)          Ok(result)
     .               })
     .           }
     .           
     .           /// Evaluates constraints of the form:
     .           ///
     .           ///     <T as Trait>::U == V
     .           ///
     .           /// If successful, this may result in additional obligations.
     .           ///
     .           /// See [poly_project_and_unify_type] for an explanation of the return value.
   660 ( 0.00%)  fn project_and_unify_type<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionObligation<'tcx>,
     .           ) -> Result<
     .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
     .               MismatchedProjectionTypes<'tcx>,
     .           > {
     .               debug!(?obligation, "project_and_unify_type");
     .           
     .               let mut obligations = vec![];
   528 ( 0.00%)      let normalized_ty = match opt_normalize_projection_type(
     .                   selcx,
    66 ( 0.00%)          obligation.param_env,
   132 ( 0.00%)          obligation.predicate.projection_ty,
     .                   obligation.cause.clone(),
   132 ( 0.00%)          obligation.recursion_depth,
     .                   &mut obligations,
     .               ) {
     .                   Ok(Some(n)) => n,
   188 ( 0.00%)          Ok(None) => return Ok(Ok(None)),
     .                   Err(InProgress) => return Ok(Err(InProgress)),
     .               };
     .           
     .               debug!(?normalized_ty, ?obligations, "project_and_unify_type result");
     .           
     .               let infcx = selcx.infcx();
     .               // FIXME(associated_const_equality): Handle consts here as well as types.
    38 ( 0.00%)      let obligation_pred_ty = obligation.predicate.term.ty().unwrap();
    57 ( 0.00%)      match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {
     .                   Ok(InferOk { obligations: inferred_obligations, value: () }) => {
     .                       obligations.extend(inferred_obligations);
   133 ( 0.00%)              Ok(Ok(Some(obligations)))
     .                   }
     .                   Err(err) => {
     .                       debug!("project_and_unify_type: equating types encountered error {:?}", err);
     .                       Err(MismatchedProjectionTypes { err })
     .                   }
     .               }
   594 ( 0.00%)  }
     .           
     .           /// Normalizes any associated type projections in `value`, replacing
     .           /// them with a fully resolved type where possible. The return value
     .           /// combines the normalized result and any additional obligations that
     .           /// were incurred as result.
25,140 ( 0.01%)  pub fn normalize<'a, 'b, 'tcx, T>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               value: T,
     .           ) -> Normalized<'tcx, T>
     .           where
     .               T: TypeFoldable<'tcx>,
     .           {
     .               let mut obligations = Vec::new();
     .               let value = normalize_to(selcx, param_env, cause, value, &mut obligations);
26,358 ( 0.01%)      Normalized { value, obligations }
22,626 ( 0.01%)  }
     .           
     .           pub fn normalize_to<'a, 'b, 'tcx, T>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               value: T,
     .               obligations: &mut Vec<PredicateObligation<'tcx>>,
     .           ) -> T
     .           where
     .               T: TypeFoldable<'tcx>,
     .           {
42,625 ( 0.02%)      normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)
     .           }
     .           
     .           /// As `normalize`, but with a custom depth.
     .           pub fn normalize_with_depth<'a, 'b, 'tcx, T>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               depth: usize,
     .               value: T,
     .           ) -> Normalized<'tcx, T>
     .           where
     .               T: TypeFoldable<'tcx>,
     .           {
     .               let mut obligations = Vec::new();
30,624 ( 0.02%)      let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);
16,704 ( 0.01%)      Normalized { value, obligations }
     .           }
     .           
45,361 ( 0.03%)  #[instrument(level = "info", skip(selcx, param_env, cause, obligations))]
59,163 ( 0.03%)  pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               depth: usize,
     .               value: T,
     .               obligations: &mut Vec<PredicateObligation<'tcx>>,
     .           ) -> T
     .           where
     .               T: TypeFoldable<'tcx>,
     .           {
     .               debug!(obligations.len = obligations.len());
42,332 ( 0.02%)      let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);
53,116 ( 0.03%)      let result = ensure_sufficient_stack(|| normalizer.fold(value));
     .               debug!(?result, obligations.len = normalizer.obligations.len());
     .               debug!(?normalizer.obligations,);
 9,966 ( 0.01%)      result
14,130 ( 0.01%)  }
     .           
     .           pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {
     .               match reveal {
     .                   Reveal::UserFacing => value
     .                       .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),
     .                   Reveal::All => value.has_type_flags(
     .                       ty::TypeFlags::HAS_TY_PROJECTION
     .                           | ty::TypeFlags::HAS_TY_OPAQUE
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
     .               param_env: ty::ParamEnv<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               obligations: &'a mut Vec<PredicateObligation<'tcx>>,
     .               depth: usize,
     .               universes: Vec<Option<ty::UniverseIndex>>,
     .           }
     .           
     .           impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {
   723 ( 0.00%)      fn new(
     .                   selcx: &'a mut SelectionContext<'b, 'tcx>,
     .                   param_env: ty::ParamEnv<'tcx>,
     .                   cause: ObligationCause<'tcx>,
     .                   depth: usize,
     .                   obligations: &'a mut Vec<PredicateObligation<'tcx>>,
     .               ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {
42,608 ( 0.02%)          AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }
   723 ( 0.00%)      }
     .           
59,697 ( 0.03%)      fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {
33,784 ( 0.02%)          let value = self.selcx.infcx().resolve_vars_if_possible(value);
     .                   debug!(?value);
     .           
   658 ( 0.00%)          assert!(
     .                       !value.has_escaping_bound_vars(),
     .                       "Normalizing {:?} without wrapping in a `Binder`",
     .                       value
     .                   );
     .           
 7,671 ( 0.00%)          if !needs_normalization(&value, self.param_env.reveal()) {
 8,135 ( 0.00%)              value
     .                   } else {
    65 ( 0.00%)              value.fold_with(self)
     .                   }
55,092 ( 0.03%)      }
     .           }
     .           
     .           impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {
     .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
    90 ( 0.00%)          self.selcx.tcx()
    82 ( 0.00%)      }
     .           
     .               fn fold_binder<T: TypeFoldable<'tcx>>(
     .                   &mut self,
     .                   t: ty::Binder<'tcx, T>,
     .               ) -> ty::Binder<'tcx, T> {
     .                   self.universes.push(None);
    20 ( 0.00%)          let t = t.super_fold_with(self);
     .                   self.universes.pop();
     .                   t
     .               }
     .           
 2,712 ( 0.00%)      fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
   678 ( 0.00%)          if !needs_normalization(&ty, self.param_env.reveal()) {
     .                       return ty;
     .                   }
     .           
     .                   // We try to be a little clever here as a performance optimization in
     .                   // cases where there are nested projections under binders.
     .                   // For example:
     .                   // ```
     .                   // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
     .                   //
     .                   // This is possible because the inner `'a` will already be a placeholder
     .                   // when we need to normalize the inner projection
     .                   //
     .                   // On the other hand, this does add a bit of complexity, since we only
     .                   // replace bound vars if the current type is a `Projection` and we need
     .                   // to make sure we don't forget to fold the substs regardless.
     .           
   245 ( 0.00%)          match *ty.kind() {
     .                       // This is really important. While we *can* handle this, this has
     .                       // severe performance implications for large opaque types with
     .                       // late-bound regions. See `issue-88862` benchmark.
     .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
     .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
     .                           match self.param_env.reveal() {
     .                               Reveal::UserFacing => ty.super_fold_with(self),
     .           
-- line 397 ----------------------------------------
-- line 421 ----------------------------------------
     .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
     .                           // This branch is *mostly* just an optimization: when we don't
     .                           // have escaping bound vars, we don't need to replace them with
     .                           // placeholders (see branch below). *Also*, we know that we can
     .                           // register an obligation to *later* project, since we know
     .                           // there won't be bound vars there.
     .           
     .                           let data = data.super_fold_with(self);
   450 ( 0.00%)                  let normalized_ty = normalize_projection_type(
    75 ( 0.00%)                      self.selcx,
    75 ( 0.00%)                      self.param_env,
     .                               data,
     .                               self.cause.clone(),
    75 ( 0.00%)                      self.depth,
    75 ( 0.00%)                      &mut self.obligations,
     .                           );
     .                           debug!(
     .                               ?self.depth,
     .                               ?ty,
     .                               ?normalized_ty,
     .                               obligations.len = ?self.obligations.len(),
     .                               "AssocTypeNormalizer: normalized type"
     .                           );
-- line 443 ----------------------------------------
-- line 490 ----------------------------------------
     .                               obligations.len = ?self.obligations.len(),
     .                               "AssocTypeNormalizer: normalized type"
     .                           );
     .                           normalized_ty
     .                       }
     .           
     .                       _ => ty.super_fold_with(self),
     .                   }
 3,051 ( 0.00%)      }
     .           
     .               fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     .                   if self.selcx.tcx().lazy_normalization() {
     .                       constant
     .                   } else {
     .                       let constant = constant.super_fold_with(self);
     .                       constant.eval(self.selcx.tcx(), self.param_env)
     .                   }
-- line 506 ----------------------------------------
-- line 781 ----------------------------------------
     .           }
     .           
     .           /// The guts of `normalize`: normalize a specific projection like `<T
     .           /// as Trait>::Item`. The result is always a type (and possibly
     .           /// additional obligations). If ambiguity arises, which implies that
     .           /// there are unresolved type variables in the projection, we will
     .           /// substitute a fresh type variable `$X` and generate a new
     .           /// obligation `<T as Trait>::Item == $X` for later.
   780 ( 0.00%)  pub fn normalize_projection_type<'a, 'b, 'tcx>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               projection_ty: ty::ProjectionTy<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               depth: usize,
     .               obligations: &mut Vec<PredicateObligation<'tcx>>,
     .           ) -> Ty<'tcx> {
   624 ( 0.00%)      opt_normalize_projection_type(
     .                   selcx,
     .                   param_env,
     .                   projection_ty,
     .                   cause.clone(),
     .                   depth,
     .                   obligations,
     .               )
     .               .ok()
     .               .flatten()
     .               .unwrap_or_else(move || {
     .                   // if we bottom out in ambiguity, create a type variable
     .                   // and a deferred predicate to resolve this when more type
     .                   // information is available.
     .           
   630 ( 0.00%)          selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)
     .               })
   702 ( 0.00%)  }
     .           
     .           /// The guts of `normalize`: normalize a specific projection like `<T
     .           /// as Trait>::Item`. The result is always a type (and possibly
     .           /// additional obligations). Returns `None` in the case of ambiguity,
     .           /// which indicates that there are unbound type variables.
     .           ///
     .           /// This function used to return `Option<NormalizedTy<'tcx>>`, which contains a
     .           /// `Ty<'tcx>` and an obligations vector. But that obligation vector was very
     .           /// often immediately appended to another obligations vector. So now this
     .           /// function takes an obligations vector and appends to it directly, which is
     .           /// slightly uglier but avoids the need for an extra short-lived allocation.
 3,804 ( 0.00%)  #[instrument(level = "debug", skip(selcx, param_env, cause, obligations))]
     .           fn opt_normalize_projection_type<'a, 'b, 'tcx>(
     .               selcx: &'a mut SelectionContext<'b, 'tcx>,
     .               param_env: ty::ParamEnv<'tcx>,
     .               projection_ty: ty::ProjectionTy<'tcx>,
     .               cause: ObligationCause<'tcx>,
     .               depth: usize,
     .               obligations: &mut Vec<PredicateObligation<'tcx>>,
     .           ) -> Result<Option<Ty<'tcx>>, InProgress> {
     .               let infcx = selcx.infcx();
     .               // Don't use the projection cache in intercrate mode -
     .               // the `infcx` may be re-used between intercrate in non-intercrate
     .               // mode, which could lead to using incorrect cache results.
     .               let use_cache = !selcx.is_intercrate();
     .           
     .               let projection_ty = infcx.resolve_vars_if_possible(projection_ty);
   432 ( 0.00%)      let cache_key = ProjectionCacheKey::new(projection_ty);
     .           
     .               // FIXME(#20304) For now, I am caching here, which is good, but it
     .               // means we don't capture the type variables that are created in
     .               // the case of ambiguity. Which means we may create a large stream
     .               // of such variables. OTOH, if we move the caching up a level, we
     .               // would not benefit from caching when proving `T: Trait<U=Foo>`
     .               // bounds. It might be the case that we want two distinct caches,
     .               // or else another kind of cache entry.
     .           
   144 ( 0.00%)      let cache_result = if use_cache {
   864 ( 0.00%)          infcx.inner.borrow_mut().projection_cache().try_start(cache_key)
     .               } else {
     .                   Ok(())
     .               };
   864 ( 0.00%)      match cache_result {
     .                   Ok(()) => debug!("no cache"),
     .                   Err(ProjectionCacheEntry::Ambiguous) => {
     .                       // If we found ambiguity the last time, that means we will continue
     .                       // to do so until some type in the key changes (and we know it
     .                       // hasn't, because we just fully resolved it).
     .                       debug!("found cache entry: ambiguous");
     .                       return Ok(None);
     .                   }
-- line 865 ----------------------------------------
-- line 882 ----------------------------------------
     .                           infcx.inner.borrow_mut().projection_cache().recur(cache_key);
     .                       }
     .                       return Err(InProgress);
     .                   }
     .                   Err(ProjectionCacheEntry::Recur) => {
     .                       debug!("recur cache");
     .                       return Err(InProgress);
     .                   }
    34 ( 0.00%)          Err(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {
     .                       // This is the hottest path in this function.
     .                       //
     .                       // If we find the value in the cache, then return it along
     .                       // with the obligations that went along with it. Note
     .                       // that, when using a fulfillment context, these
     .                       // obligations could in principle be ignored: they have
     .                       // already been registered when the cache entry was
     .                       // created (and hence the new ones will quickly be
-- line 898 ----------------------------------------
-- line 908 ----------------------------------------
     .                       let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
     .                       obligations.extend(result.obligations);
     .                       return Ok(Some(result.value));
     .                   }
     .               }
     .           
     .               let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);
     .           
   738 ( 0.00%)      match project_type(selcx, &obligation) {
     .                   Ok(ProjectedTy::Progress(Progress {
     .                       ty: projected_ty,
   140 ( 0.00%)              obligations: mut projected_obligations,
     .                   })) => {
     .                       // if projection succeeded, then what we get out of this
     .                       // is also non-normalized (consider: it was derived from
     .                       // an impl, where-clause etc) and hence we must
     .                       // re-normalize it
     .           
     .                       let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);
     .                       debug!(?projected_ty, ?depth, ?projected_obligations);
     .           
    35 ( 0.00%)              let mut result = if projected_ty.has_projections() {
     .                           let mut normalizer = AssocTypeNormalizer::new(
     .                               selcx,
     .                               param_env,
     .                               cause,
     .                               depth + 1,
     .                               &mut projected_obligations,
     .                           );
     .                           let normalized_ty = normalizer.fold(projected_ty);
     .           
     .                           debug!(?normalized_ty, ?depth);
     .           
     .                           Normalized { value: normalized_ty, obligations: projected_obligations }
     .                       } else {
   210 ( 0.00%)                  Normalized { value: projected_ty, obligations: projected_obligations }
     .                       };
     .           
     .                       let mut deduped: SsoHashSet<_> = Default::default();
    35 ( 0.00%)              result.obligations.drain_filter(|projected_obligation| {
     .                           if !deduped.insert(projected_obligation.clone()) {
     .                               return true;
     .                           }
     .                           false
     .                       });
     .           
    35 ( 0.00%)              if use_cache {
   105 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
     .                       }
     .                       obligations.extend(result.obligations);
    35 ( 0.00%)              Ok(Some(result.value))
     .                   }
     .                   Ok(ProjectedTy::NoProgress(projected_ty)) => {
     .                       debug!(?projected_ty, "opt_normalize_projection_type: no progress");
     .                       let result = Normalized { value: projected_ty, obligations: vec![] };
     .                       if use_cache {
     .                           infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
     .                       }
     .                       // No need to extend `obligations`.
     .                       Ok(Some(result.value))
     .                   }
     .                   Err(ProjectionTyError::TooManyCandidates) => {
     .                       debug!("opt_normalize_projection_type: too many candidates");
    47 ( 0.00%)              if use_cache {
   282 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);
     .                       }
     .                       Ok(None)
     .                   }
     .                   Err(ProjectionTyError::TraitSelectionError(_)) => {
     .                       debug!("opt_normalize_projection_type: ERROR");
     .                       // if we got an error processing the `T as Trait` part,
     .                       // just return `ty::err` but add the obligation `T :
     .                       // Trait`, which when processed will cause the error to be
-- line 980 ----------------------------------------
-- line 1060 ----------------------------------------
     .                   self
     .               }
     .           }
     .           
     .           /// Computes the result of a projection type (if we can).
     .           ///
     .           /// IMPORTANT:
     .           /// - `obligation` must be fully normalized
 1,476 ( 0.00%)  #[tracing::instrument(level = "info", skip(selcx))]
     .           fn project_type<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .           ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {
   246 ( 0.00%)      if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {
     .                   debug!("project: overflow!");
     .                   // This should really be an immediate error, but some existing code
     .                   // relies on being able to recover from this.
     .                   return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));
     .               }
     .           
     .               if obligation.predicate.references_error() {
     .                   return Ok(ProjectedTy::Progress(Progress::error(selcx.tcx())));
     .               }
     .           
    82 ( 0.00%)      let mut candidates = ProjectionTyCandidateSet::None;
     .           
     .               // Make sure that the following procedures are kept in order. ParamEnv
     .               // needs to be first because it has highest priority, and Select checks
     .               // the return value of push_candidate which assumes it's ran at last.
   164 ( 0.00%)      assemble_candidates_from_param_env(selcx, obligation, &mut candidates);
     .           
     .               assemble_candidates_from_trait_def(selcx, obligation, &mut candidates);
     .           
   164 ( 0.00%)      assemble_candidates_from_object_ty(selcx, obligation, &mut candidates);
     .           
   164 ( 0.00%)      if let ProjectionTyCandidateSet::Single(ProjectionTyCandidate::Object(_)) = candidates {
     .                   // Avoid normalization cycle from selection (see
     .                   // `assemble_candidates_from_object_ty`).
     .                   // FIXME(lazy_normalization): Lazy normalization should save us from
     .                   // having to special case this.
     .               } else {
   164 ( 0.00%)          assemble_candidates_from_impls(selcx, obligation, &mut candidates);
     .               };
     .           
   410 ( 0.00%)      match candidates {
     .                   ProjectionTyCandidateSet::Single(candidate) => {
   770 ( 0.00%)              Ok(ProjectedTy::Progress(confirm_candidate(selcx, obligation, candidate)))
     .                   }
     .                   ProjectionTyCandidateSet::None => Ok(ProjectedTy::NoProgress(
     .                       selcx
     .                           .tcx()
     .                           .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs),
     .                   )),
     .                   // Error occurred while trying to processing impls.
     .                   ProjectionTyCandidateSet::Error(e) => Err(ProjectionTyError::TraitSelectionError(e)),
     .                   // Inherent ambiguity that prevents us from even enumerating the
     .                   // candidates.
   188 ( 0.00%)          ProjectionTyCandidateSet::Ambiguous => Err(ProjectionTyError::TooManyCandidates),
     .               }
   211 ( 0.00%)  }
     .           
     .           /// The first thing we have to do is scan through the parameter
     .           /// environment to see whether there are any projection predicates
     .           /// there that can answer this question.
     .           fn assemble_candidates_from_param_env<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
     .           ) {
     .               debug!("assemble_candidates_from_param_env(..)");
     .               assemble_candidates_from_predicates(
     .                   selcx,
     .                   obligation,
     .                   candidate_set,
     .                   ProjectionTyCandidate::ParamEnv,
    82 ( 0.00%)          obligation.param_env.caller_bounds().iter(),
     .                   false,
     .               );
     .           }
     .           
     .           /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find
     .           /// that the definition of `Foo` has some clues:
     .           ///
     .           /// ```
-- line 1143 ----------------------------------------
-- line 1152 ----------------------------------------
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
     .           ) {
     .               debug!("assemble_candidates_from_trait_def(..)");
     .           
     .               let tcx = selcx.tcx();
     .               // Check whether the self-type is itself a projection.
     .               // If so, extract what we know from the trait and try to come up with a good answer.
   962 ( 0.00%)      let bounds = match *obligation.predicate.self_ty().kind() {
     .                   ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),
     .                   ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),
     .                   ty::Infer(ty::TyVar(_)) => {
     .                       // If the self-type is an inference variable, then it MAY wind up
     .                       // being a projected type, so induce an ambiguity.
     .                       candidate_set.mark_ambiguous();
     .                       return;
     .                   }
-- line 1168 ----------------------------------------
-- line 1192 ----------------------------------------
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
     .           ) {
     .               debug!("assemble_candidates_from_object_ty(..)");
     .           
     .               let tcx = selcx.tcx();
     .           
   164 ( 0.00%)      let self_ty = obligation.predicate.self_ty();
     .               let object_ty = selcx.infcx().shallow_resolve(self_ty);
   410 ( 0.00%)      let data = match object_ty.kind() {
     .                   ty::Dynamic(data, ..) => data,
     .                   ty::Infer(ty::TyVar(_)) => {
     .                       // If the self-type is an inference variable, then it MAY wind up
     .                       // being an object type, so induce an ambiguity.
     .                       candidate_set.mark_ambiguous();
     .                       return;
     .                   }
     .                   _ => return,
-- line 1210 ----------------------------------------
-- line 1274 ----------------------------------------
     .           #[tracing::instrument(level = "debug", skip(selcx, obligation, candidate_set))]
     .           fn assemble_candidates_from_impls<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
     .           ) {
     .               // If we are resolving `<T as TraitRef<...>>::Item == Type`,
     .               // start out by selecting the predicate `T as TraitRef<...>`:
   246 ( 0.00%)      let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));
   164 ( 0.00%)      let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());
   738 ( 0.00%)      let _ = selcx.infcx().commit_if_ok(|_| {
   492 ( 0.00%)          let impl_source = match selcx.select(&trait_obligation) {
   350 ( 0.00%)              Ok(Some(impl_source)) => impl_source,
     .                       Ok(None) => {
     .                           candidate_set.mark_ambiguous();
     .                           return Err(());
     .                       }
     .                       Err(e) => {
     .                           debug!(error = ?e, "selection error");
     .                           candidate_set.mark_error(e);
     .                           return Err(());
     .                       }
     .                   };
     .           
   175 ( 0.00%)          let eligible = match &impl_source {
     .                       super::ImplSource::Closure(_)
     .                       | super::ImplSource::Generator(_)
     .                       | super::ImplSource::FnPointer(_)
     .                       | super::ImplSource::TraitAlias(_) => {
     .                           debug!(?impl_source);
     .                           true
     .                       }
     .                       super::ImplSource::UserDefined(impl_data) => {
-- line 1306 ----------------------------------------
-- line 1322 ----------------------------------------
     .                           //
     .                           // In either case, we handle this by not adding a
     .                           // candidate for an impl if it contains a `default`
     .                           // type.
     .                           //
     .                           // NOTE: This should be kept in sync with the similar code in
     .                           // `rustc_ty_utils::instance::resolve_associated_item()`.
     .                           let node_item =
   315 ( 0.00%)                      assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)
     .                                   .map_err(|ErrorReported| ())?;
     .           
   105 ( 0.00%)                  if node_item.is_final() {
     .                               // Non-specializable items are always projectable.
     .                               true
     .                           } else {
     .                               // Only reveal a specializable default if we're past type-checking
     .                               // and the obligation is monomorphic, otherwise passes such as
     .                               // transmute checking and polymorphic MIR optimizations could
     .                               // get a result which isn't correct for all monomorphizations.
     .                               if obligation.param_env.reveal() == Reveal::All {
-- line 1341 ----------------------------------------
-- line 1495 ----------------------------------------
     .                               obligation.cause.span,
     .                               &format!("Cannot project an associated type from `{:?}`", impl_source),
     .                           );
     .                           return Err(());
     .                       }
     .                   };
     .           
     .                   if eligible {
   490 ( 0.00%)              if candidate_set.push_candidate(ProjectionTyCandidate::Select(impl_source)) {
     .                           Ok(())
     .                       } else {
     .                           Err(())
     .                       }
     .                   } else {
     .                       Err(())
     .                   }
     .               });
-- line 1511 ----------------------------------------
-- line 1512 ----------------------------------------
     .           }
     .           
     .           fn confirm_candidate<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               candidate: ProjectionTyCandidate<'tcx>,
     .           ) -> Progress<'tcx> {
     .               debug!(?obligation, ?candidate, "confirm_candidate");
   175 ( 0.00%)      let mut progress = match candidate {
     .                   ProjectionTyCandidate::ParamEnv(poly_projection)
     .                   | ProjectionTyCandidate::Object(poly_projection) => {
     .                       confirm_param_env_candidate(selcx, obligation, poly_projection, false)
     .                   }
     .           
     .                   ProjectionTyCandidate::TraitDef(poly_projection) => {
     .                       confirm_param_env_candidate(selcx, obligation, poly_projection, true)
     .                   }
     .           
     .                   ProjectionTyCandidate::Select(impl_source) => {
   350 ( 0.00%)              confirm_select_candidate(selcx, obligation, impl_source)
     .                   }
     .               };
     .               // When checking for cycle during evaluation, we compare predicates with
     .               // "syntactic" equality. Since normalization generally introduces a type
     .               // with new region variables, we need to resolve them to existing variables
     .               // when possible for this to work. See `auto-trait-projection-recursion.rs`
     .               // for a case where this matters.
    35 ( 0.00%)      if progress.ty.has_infer_regions() {
     .                   progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);
     .               }
     .               progress
     .           }
     .           
     .           fn confirm_select_candidate<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               impl_source: Selection<'tcx>,
     .           ) -> Progress<'tcx> {
   175 ( 0.00%)      match impl_source {
   175 ( 0.00%)          super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),
     .                   super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),
     .                   super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),
     .                   super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),
     .                   super::ImplSource::DiscriminantKind(data) => {
     .                       confirm_discriminant_kind_candidate(selcx, obligation, data)
     .                   }
     .                   super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),
     .                   super::ImplSource::Object(_)
-- line 1559 ----------------------------------------
-- line 1820 ----------------------------------------
     .           
     .           fn confirm_impl_candidate<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,
     .           ) -> Progress<'tcx> {
     .               let tcx = selcx.tcx();
     .           
   140 ( 0.00%)      let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;
   105 ( 0.00%)      let assoc_item_id = obligation.predicate.item_def_id;
   140 ( 0.00%)      let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();
     .           
   140 ( 0.00%)      let param_env = obligation.param_env;
   245 ( 0.00%)      let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {
   350 ( 0.00%)          Ok(assoc_ty) => assoc_ty,
     .                   Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },
     .               };
     .           
   140 ( 0.00%)      if !assoc_ty.item.defaultness.has_value() {
     .                   // This means that the impl is missing a definition for the
     .                   // associated type. This error will be reported by the type
     .                   // checker method `check_impl_items_against_trait`, so here we
     .                   // just return Error.
     .                   debug!(
     .                       "confirm_impl_candidate: no associated type {:?} for {:?}",
     .                       assoc_ty.item.name, obligation.predicate
     .                   );
-- line 1846 ----------------------------------------
-- line 1847 ----------------------------------------
     .                   return Progress { ty: tcx.ty_error(), obligations: nested };
     .               }
     .               // If we're trying to normalize `<Vec<u32> as X>::A<S>` using
     .               //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:
     .               //
     .               // * `obligation.predicate.substs` is `[Vec<u32>, S]`
     .               // * `substs` is `[u32]`
     .               // * `substs` ends up as `[u32, S]`
   210 ( 0.00%)      let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);
     .               let substs =
   385 ( 0.00%)          translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);
    35 ( 0.00%)      let ty = tcx.type_of(assoc_ty.item.def_id);
   105 ( 0.00%)      if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {
     .                   let err = tcx.ty_error_with_message(
     .                       obligation.cause.span,
     .                       "impl item and trait item have different parameter counts",
     .                   );
     .                   Progress { ty: err, obligations: nested }
     .               } else {
    70 ( 0.00%)          assoc_ty_own_obligations(selcx, obligation, &mut nested);
     .                   Progress { ty: ty.subst(tcx, substs), obligations: nested }
     .               }
     .           }
     .           
     .           // Get obligations corresponding to the predicates from the where-clause of the
     .           // associated type itself.
     .           // Note: `feature(generic_associated_types)` is required to write such
     .           // predicates, even for non-generic associcated types.
   315 ( 0.00%)  fn assoc_ty_own_obligations<'cx, 'tcx>(
     .               selcx: &mut SelectionContext<'cx, 'tcx>,
     .               obligation: &ProjectionTyObligation<'tcx>,
     .               nested: &mut Vec<PredicateObligation<'tcx>>,
     .           ) {
     .               let tcx = selcx.tcx();
   315 ( 0.00%)      for predicate in tcx
    70 ( 0.00%)          .predicates_of(obligation.predicate.item_def_id)
   105 ( 0.00%)          .instantiate_own(tcx, obligation.predicate.substs)
     .                   .predicates
     .               {
     .                   let normalized = normalize_with_depth_to(
     .                       selcx,
     .                       obligation.param_env,
     .                       obligation.cause.clone(),
     .                       obligation.recursion_depth + 1,
     .                       predicate,
-- line 1891 ----------------------------------------
-- line 1893 ----------------------------------------
     .                   );
     .                   nested.push(Obligation::with_depth(
     .                       obligation.cause.clone(),
     .                       obligation.recursion_depth + 1,
     .                       obligation.param_env,
     .                       normalized,
     .                   ));
     .               }
   280 ( 0.00%)  }
     .           
     .           /// Locate the definition of an associated type in the specialization hierarchy,
     .           /// starting from the given impl.
     .           ///
     .           /// Based on the "projection mode", this lookup may in fact only examine the
     .           /// topmost impl. See the comments for `Reveal` for more details.
   630 ( 0.00%)  fn assoc_ty_def(
     .               selcx: &SelectionContext<'_, '_>,
     .               impl_def_id: DefId,
     .               assoc_ty_def_id: DefId,
     .           ) -> Result<specialization_graph::LeafDef, ErrorReported> {
     .               let tcx = selcx.tcx();
   140 ( 0.00%)      let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;
     .               let trait_def = tcx.trait_def(trait_def_id);
     .           
     .               // This function may be called while we are still building the
     .               // specialization graph that is queried below (via TraitDef::ancestors()),
     .               // so, in order to avoid unnecessary infinite recursion, we manually look
     .               // for the associated item at the given impl.
     .               // If there is no such item in that impl, this function will fail with a
     .               // cycle error if the specialization graph is currently being built.
   140 ( 0.00%)      if let Some(&impl_item_id) = tcx.impl_item_implementor_ids(impl_def_id).get(&assoc_ty_def_id) {
     .                   let item = tcx.associated_item(impl_item_id);
     .                   let impl_node = specialization_graph::Node::Impl(impl_def_id);
   840 ( 0.00%)          return Ok(specialization_graph::LeafDef {
   420 ( 0.00%)              item: *item,
     .                       defining_node: impl_node,
   350 ( 0.00%)              finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },
     .                   });
     .               }
     .           
     .               let ancestors = trait_def.ancestors(tcx, impl_def_id)?;
     .               if let Some(assoc_item) = ancestors.leaf_def(tcx, assoc_ty_def_id) {
     .                   Ok(assoc_item)
     .               } else {
     .                   // This is saying that neither the trait nor
-- line 1937 ----------------------------------------
-- line 1941 ----------------------------------------
     .                   // if the user wrote a bad item name, it
     .                   // should have failed in astconv.
     .                   bug!(
     .                       "No associated type `{}` for {}",
     .                       tcx.item_name(assoc_ty_def_id),
     .                       tcx.def_path_str(impl_def_id)
     .                   )
     .               }
   630 ( 0.00%)  }
     .           
     .           crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {
     .               fn from_poly_projection_predicate(
     .                   selcx: &mut SelectionContext<'cx, 'tcx>,
     .                   predicate: ty::PolyProjectionPredicate<'tcx>,
     .               ) -> Option<Self>;
     .           }
     .           
     .           impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {
   434 ( 0.00%)      fn from_poly_projection_predicate(
     .                   selcx: &mut SelectionContext<'cx, 'tcx>,
     .                   predicate: ty::PolyProjectionPredicate<'tcx>,
     .               ) -> Option<Self> {
     .                   let infcx = selcx.infcx();
     .                   // We don't do cross-snapshot caching of obligations with escaping regions,
     .                   // so there's no cache key to use
   372 ( 0.00%)          predicate.no_bound_vars().map(|predicate| {
   124 ( 0.00%)              ProjectionCacheKey::new(
     .                           // We don't attempt to match up with a specific type-variable state
     .                           // from a specific call to `opt_normalize_projection_type` - if
     .                           // there's no precise match, the original cache entry is "stranded"
     .                           // anyway.
     .                           infcx.resolve_vars_if_possible(predicate.projection_ty),
     .                       )
     .                   })
   496 ( 0.00%)      }
     .           }

21,645 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 57 ----------------------------------------
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
    104 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     52 ( 0.00%)              from_str_radix(src, radix)
    156 ( 0.00%)          }
      .           
      .                   /// Returns the number of ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
 10,095 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
 60,358 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 48,212 ( 0.03%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
494,931 ( 0.28%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
 83,931 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
  2,385 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
      .                                 without modifying the original"]
      .                   #[inline]
      .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
      .                       if unlikely!(rhs == 0) {
      .                           None
      .                       } else {
      .                           // SAFETY: div by zero has been checked above and unsigned types have no other
      .                           // failure modes for division
     16 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
      .                       }
      .                   }
      .           
      .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
      .                   /// if `rhs == 0`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  9,452 ( 0.01%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    419 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1104 ----------------------------------------
      .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX).saturating_mul(10), ", stringify!($SelfT),"::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   pub const fn saturating_mul(self, rhs: Self) -> Self {
     24 ( 0.00%)              match self.checked_mul(rhs) {
      .                           Some(x) => x,
      .                           None => Self::MAX,
      .                       }
      .                   }
      .           
      .                   /// Saturating integer division. Computes `self / rhs`, saturating at the
      .                   /// numeric bounds instead of overflowing.
      .                   ///
-- line 1120 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
251,261 ( 0.14%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
161,243 ( 0.09%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
458,269 ( 0.26%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 64,379 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 16,555 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 92,294 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
     54 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    408 ( 0.00%)              if self <= 1 { return 0; }
      .           
  1,451 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  4,321 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
  1,483 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
  2,494 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

  5,354 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,394 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
469,730 ( 0.26%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 10,855 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 14,507 ( 0.01%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
    482 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    983 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
     19 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    692 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

 70,919 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  2,040 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    680 ( 0.00%)          let tcx = self.tcx();
140,868 ( 0.08%)          DecodeContext {
 14,626 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    680 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  6,446 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 12,773 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  2,040 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 16,640 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 12,435 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 39,508 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 14,013 ( 0.01%)          T::decode(&mut dcx)
 21,073 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     14 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      4 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  5,747 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 53,644 ( 0.03%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
  9,309 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
  8,539 ( 0.00%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  1,738 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  3,476 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
  1,995 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  4,806 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
  9,309 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 43,420 ( 0.02%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 29,379 ( 0.02%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  4,197 ( 0.00%)          let tcx = self.tcx();
      .           
  4,197 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 11,544 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  1,311 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 37,773 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  6,680 ( 0.00%)          self.opaque = old_opaque;
  1,336 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 21,905 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     13 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 44,001 ( 0.02%)          DefIndex::from_u32(d.read_u32())
     26 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 25,256 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  6,314 ( 0.00%)          let cdata = decoder.cdata();
  6,314 ( 0.00%)          let sess = decoder.sess.unwrap();
 12,628 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
  2,184 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 31,570 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  8,883 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
  1,269 ( 0.00%)          let local_cdata = decoder.cdata();
  1,269 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    551 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
  2,755 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  2,755 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  5,510 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
 10,152 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 37,408 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  4,676 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
  9,352 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 13,998 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 11,566 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      .                       if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
-- line 508 ----------------------------------------
-- line 527 ----------------------------------------
      .           
      .                       let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 13,998 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 18,402 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  4,466 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  2,234 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,234 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  4,468 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 18,664 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 42,084 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  2,730 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  4,769 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  2,028 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
     36 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     12 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
     60 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
     24 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
     48 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
     36 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
     60 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
      8 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      4 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      8 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      8 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
  6,853 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  5,234 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  4,109 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     36 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
  8,822 ( 0.00%)      }
      .           
     13 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  1,495 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
     26 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  3,036 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 12,144 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  9,108 ( 0.01%)      }
      .           
  3,626 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  4,522 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  2,072 ( 0.00%)      }
      .           
    117 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  3,467 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
     65 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    260 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     80 ( 0.00%)          match self.kind(item_id) {
     20 ( 0.00%)              EntryKind::Trait(data) => {
    120 ( 0.00%)                  let data = data.decode((self, sess));
    320 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     40 ( 0.00%)                      data.unsafety,
     40 ( 0.00%)                      data.paren_sugar,
     40 ( 0.00%)                      data.has_auto_impl,
     40 ( 0.00%)                      data.is_marker,
     20 ( 0.00%)                      data.skip_array_during_method_dispatch,
     20 ( 0.00%)                      data.specialization_kind,
     80 ( 0.00%)                      self.def_path_hash(item_id),
     20 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    180 ( 0.00%)      }
      .           
      .               fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
-- line 840 ----------------------------------------
-- line 908 ----------------------------------------
      .                   tcx.alloc_adt_def(did, adt_kind, variants, repr)
      .               }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  2,390 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  2,390 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     30 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
 10,718 ( 0.01%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    730 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    100 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    120 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
      .               fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  1,924 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      .               }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
  5,316 ( 0.00%)          match self.kind(id) {
  4,430 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  1,428 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    409 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      1 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  1,470 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 30,526 ( 0.02%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
    860 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(
      8 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    508 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      4 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     18 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    140 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    280 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    560 ( 0.00%)              for child_index in children.decode((self, sess)) {
  2,184 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
    897 ( 0.00%)                      let kind = self.def_kind(child_index);
    598 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,184 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
      4 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    365 ( 0.00%)          match self.kind(id) {
     20 ( 0.00%)              EntryKind::Mod(exports) => {
    400 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     40 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
     20 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,099 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     25 ( 0.00%)          self.root
      .                       .tables
      .                       .mir
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     50 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    615 ( 0.00%)          match self.kind(id) {
    492 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    252 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    108 ( 0.00%)              tcx.arena.alloc_from_iter(
     36 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  2,880 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  1,680 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  1,818 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     68 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    188 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  1,316 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     70 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  4,320 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  2,160 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
      .                   self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
     92 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
     40 ( 0.00%)                  let vdata = data.decode(self);
     28 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
     40 ( 0.00%)      }
      .           
    144 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    156 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    108 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
     40 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    130 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      .                       .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
-- line 1355 ----------------------------------------
-- line 1360 ----------------------------------------
      .               ) -> &'tcx [DefId] {
      .                   tcx.arena.alloc_from_iter(
      .                       self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    241 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
    720 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
     80 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    116 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
     88 ( 0.00%)              tcx.arena.alloc_from_iter(
     44 ( 0.00%)                  impls
      .                               .decode(self)
  3,735 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
    640 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     96 ( 0.00%)          let def_key = self.def_key(id);
    120 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    216 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
      8 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
     20 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
      .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
      .               }
      .           
      .               fn exported_symbols(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
     12 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
      .               }
      .           
      .               fn get_rendered_const(self, id: DefIndex) -> String {
      .                   match self.kind(id) {
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     36 ( 0.00%)          match self.kind(id) {
      6 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
      .                   let constness = match self.kind(id) {
-- line 1496 ----------------------------------------
-- line 1508 ----------------------------------------
      .                       EntryKind::Fn(data) => data.decode(self).asyncness,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
      .                       _ => bug!("asyncness: expected function kind"),
      .                   }
      .               }
      .           
      .               fn is_foreign_item(self, id: DefIndex) -> bool {
     55 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
    110 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    165 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
  8,393 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
  2,398 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  3,180 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
  9,592 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    450 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    275 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  1,575 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  1,800 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  9,332 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
  9,332 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  1,585 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
  9,332 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     12 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
  6,657 ( 0.00%)                          mut name,
  1,902 ( 0.00%)                          src_hash,
    317 ( 0.00%)                          start_pos,
    634 ( 0.00%)                          end_pos,
  1,585 ( 0.00%)                          mut lines,
  1,585 ( 0.00%)                          mut multibyte_chars,
  1,902 ( 0.00%)                          mut non_narrow_chars,
  1,585 ( 0.00%)                          mut normalized_pos,
  1,902 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
    634 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
479,552 ( 0.27%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,180 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    804 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  5,706 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  4,121 ( 0.00%)                          name,
  2,219 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
    634 ( 0.00%)                          self.cnum,
  1,585 ( 0.00%)                          lines,
  1,902 ( 0.00%)                          multibyte_chars,
  1,585 ( 0.00%)                          non_narrow_chars,
  1,268 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
    951 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
     48 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     12 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     12 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
      4 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
     92 ( 0.00%)          CrateMetadata {
      4 ( 0.00%)              blob,
     12 ( 0.00%)              root,
     16 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     16 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
     28 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     16 ( 0.00%)              cnum_map,
     20 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
     48 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
     36 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
     20 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
      .                   &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
      5 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      4 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      4 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  6,456 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    177 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

144,469 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
     16 ( 0.00%)      pub ty: Ty<'tcx>,
     80 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
     15 ( 0.00%)      pub scope: DefId,
     54 ( 0.00%)      pub bound_region: BoundRegionKind,
      .           }
      .           
    384 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
     44 ( 0.00%)      BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
      .               /// the event of shadowing.
      .               BrNamed(DefId, Symbol),
      .           
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
      6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
     47 ( 0.00%)      pub var: BoundVar,
     17 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
378,621 ( 0.21%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
    516 ( 0.00%)  #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
      .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
  6,937 ( 0.00%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
    133 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 28,987 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 180 ----------------------------------------
      .               /// The substitutions are for the generics of the function in question.
      .               /// After typeck, the concrete type can be found in the `types` map.
      .               Opaque(DefId, SubstsRef<'tcx>),
      .           
      .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
      .               Param(ParamTy),
      .           
      .               /// Bound type variable, used only when preparing a trait query.
     67 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
      .           
      .               /// A placeholder type - universally quantified higher-ranked type.
      .               Placeholder(ty::PlaceholderType),
      .           
      .               /// A type variable used during type checking.
      .               Infer(InferTy),
      .           
      .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
  7,635 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 20,587 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
      .               pub def_id: DefId,
  9,512 ( 0.01%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
     89 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
    356 ( 0.00%)      }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
    135 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     60 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
     90 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
    120 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
     64 ( 0.00%)      pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::TraitRef<'tcx> {
      .                   let defs = tcx.generics_of(trait_id);
      .           
      8 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     88 ( 0.00%)      }
      .           }
      .           
      .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
      .           
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound_ref(|tr| tr.self_ty())
      .               }
      .           
      .               pub fn def_id(&self) -> DefId {
      .                   self.skip_binder().def_id
      .               }
      .           
     84 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    168 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness: ty::BoundConstness::NotConst,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
     84 ( 0.00%)      }
      .           }
      .           
      .           /// An existential reference to a trait, where `Self` is erased.
      .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
      .           ///
      .           ///     exists T. T: Trait<'a, 'b, X, Y>
      .           ///
      .           /// The substitutions don't include the erased `Self`, only trait
-- line 956 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// we convert the principal trait-ref into a normal trait-ref,
      .               /// you must give *some* self type. A common choice is `mk_err()`
      .               /// or some placeholder type.
      .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      .               }
      .           }
      .           
    323 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundVariableKind {
      .               Ty(BoundTyKind),
      .               Region(BoundRegionKind),
      .               Const,
      .           }
      .           
      .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    116 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  7,478 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
    625 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  2,940 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  7,245 ( 0.00%)          Binder(value, ty::List::empty())
    625 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
    800 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
 21,379 ( 0.01%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    107 ( 0.00%)          self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     17 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
    514 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  5,967 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
    105 ( 0.00%)          Ok(Binder(value, self.1))
      .               }
      .           
      .               /// Wraps a `value` in a binder, using the same bound variables as the
      .               /// current `Binder`. This should not be used if the new value *changes*
      .               /// the bound variables. Note: the (old or new) value itself does not
      .               /// necessarily need to *name* all the bound variables.
      .               ///
      .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
    322 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  2,957 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
      .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
     63 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  1,318 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
    987 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    837 ( 0.00%)      pub item_def_id: DefId,
      .           }
      .           
      .           impl<'tcx> ProjectionTy<'tcx> {
    574 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    164 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    656 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference and own substs from this projection.
      .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
      .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    105 ( 0.00%)      pub fn trait_ref_and_own_substs(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     45 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
      .                   let trait_generics = tcx.generics_of(def_id);
     75 ( 0.00%)          (
      .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
      .                       &self.substs[trait_generics.count()..],
      .                   )
    135 ( 0.00%)      }
      .           
      .               /// Extracts the underlying trait reference from this projection.
      .               /// For example, if this is a projection of `<T as Iterator>::Item`,
      .               /// then this function would return a `T: Iterator` trait reference.
      .               ///
      .               /// WARNING: This will drop the substs for generic associated types
      .               /// consider calling [Self::trait_ref_and_own_substs] to get those
      .               /// as well.
    738 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     82 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     82 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    902 ( 0.00%)      }
      .           
    164 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    492 ( 0.00%)          self.substs.type_at(0)
    328 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, TypeFoldable)]
      .           pub struct GenSig<'tcx> {
      .               pub resume_ty: Ty<'tcx>,
      .               pub yield_ty: Ty<'tcx>,
      .               pub return_ty: Ty<'tcx>,
      .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
  2,136 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  1,358 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
    733 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
  4,162 ( 0.00%)      pub c_variadic: bool,
  1,019 ( 0.00%)      pub unsafety: hir::Unsafety,
  2,774 ( 0.00%)      pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
    655 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
  4,480 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
  1,310 ( 0.00%)      }
      .           
    472 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
  4,285 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    944 ( 0.00%)      }
      .           
      .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
      .               // method.
      .               fn fake() -> FnSig<'tcx> {
      .                   FnSig {
      .                       inputs_and_output: List::empty(),
      .                       c_variadic: false,
      .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
      .               }
      .           }
      .           
      .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
      .           
      .           impl<'tcx> PolyFnSig<'tcx> {
      .               #[inline]
      .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     84 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
      .               }
      .               #[inline]
      .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    294 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
      .               }
      .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
      .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     17 ( 0.00%)      }
      .               #[inline]
      .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    159 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
      .               }
      .               pub fn c_variadic(&self) -> bool {
     34 ( 0.00%)          self.skip_binder().c_variadic
     17 ( 0.00%)      }
      .               pub fn unsafety(&self) -> hir::Unsafety {
    100 ( 0.00%)          self.skip_binder().unsafety
     50 ( 0.00%)      }
      .               pub fn abi(&self) -> abi::Abi {
    868 ( 0.00%)          self.skip_binder().abi
    217 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
      .               pub index: u32,
-- line 1307 ----------------------------------------
-- line 1321 ----------------------------------------
      .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      .                   tcx.mk_ty_param(self.index, self.name)
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
      .           #[derive(HashStable)]
      .           pub struct ParamConst {
     48 ( 0.00%)      pub index: u32,
     48 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           impl ParamConst {
      .               pub fn new(index: u32, name: Symbol) -> ParamConst {
      .                   ParamConst { index, name }
      .               }
      .           
      .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
111,095 ( 0.06%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      2 ( 0.00%)  pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
     34 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
  9,780 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
    264 ( 0.00%)      pub def_id: DefId,
  6,786 ( 0.00%)      pub index: u32,
    185 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
    272 ( 0.00%)      pub index: u32,
    233 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
      .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
      .           rustc_index::newtype_index! {
      .               pub struct BoundVar { .. }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct BoundTy {
      .               pub var: BoundVar,
     67 ( 0.00%)      pub kind: BoundTyKind,
      .           }
      .           
  1,163 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum BoundTyKind {
      .               Anon,
      .               Param(Symbol),
      .           }
      .           
      .           impl From<BoundVar> for BoundTy {
      .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1626 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
     67 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
  8,900 ( 0.00%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
      2 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
      .           
      .               #[inline(always)]
      .               pub fn flags(&self) -> TypeFlags {
      .                   self.flags
      .               }
      .           
      .               #[inline]
      .               pub fn is_unit(&self) -> bool {
    126 ( 0.00%)          match self.kind() {
     21 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  1,666 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  1,873 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
  1,070 ( 0.00%)          match self.kind() {
    175 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
      .               }
-- line 1763 ----------------------------------------
-- line 1764 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_phantom_data(&self) -> bool {
      .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
      .               }
      .           
      .               #[inline]
      .               pub fn is_bool(&self) -> bool {
     15 ( 0.00%)          *self.kind() == Bool
      .               }
      .           
      .               /// Returns `true` if this type is a `str`.
      .               #[inline]
      .               pub fn is_str(&self) -> bool {
      .                   *self.kind() == Str
      .               }
      .           
-- line 1780 ----------------------------------------
-- line 1791 ----------------------------------------
      .                   match self.kind() {
      .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_array(&self) -> bool {
     15 ( 0.00%)          matches!(self.kind(), Array(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
-- line 1807 ----------------------------------------
-- line 1838 ----------------------------------------
      .                           }
      .                       }
      .                       _ => bug!("`simd_size_and_type` called on invalid type"),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_region_ptr(&self) -> bool {
      9 ( 0.00%)          matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_mutable_ptr(&self) -> bool {
      .                   matches!(
      .                       self.kind(),
      .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
      .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
      7 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      4 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
    900 ( 0.00%)          match self.kind() {
     16 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
      .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
      .               /// contents are abstract to rustc.)
      .               #[inline]
      .               pub fn is_scalar(&self) -> bool {
    170 ( 0.00%)          matches!(
    365 ( 0.00%)              self.kind(),
      .                       Bool | Char
      .                           | Int(_)
      .                           | Float(_)
      .                           | Uint(_)
      .                           | FnDef(..)
      .                           | FnPtr(_)
      .                           | RawPtr(_)
      .                           | Infer(IntVar(_) | FloatVar(_))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this type is a floating point type.
      .               #[inline]
      .               pub fn is_floating_point(&self) -> bool {
    309 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_trait(&self) -> bool {
      .                   matches!(self.kind(), Dynamic(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_enum(&self) -> bool {
     10 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
      .               }
      .           
      .               #[inline]
      .               pub fn is_union(&self) -> bool {
     42 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
      .               }
      .           
      .               #[inline]
      .               pub fn is_closure(&self) -> bool {
      4 ( 0.00%)          matches!(self.kind(), Closure(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_generator(&self) -> bool {
     40 ( 0.00%)          matches!(self.kind(), Generator(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_integral(&self) -> bool {
  1,010 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
    108 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
      .               pub fn is_numeric(&self) -> bool {
      .                   self.is_integral() || self.is_floating_point()
      .               }
      .           
      .               #[inline]
      .               pub fn is_signed(&self) -> bool {
      7 ( 0.00%)          matches!(self.kind(), Int(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ptr_sized_integral(&self) -> bool {
     84 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
      .               }
      .           
      .               #[inline]
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     10 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
     57 ( 0.00%)          match self.kind() {
      2 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
     24 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      .                       RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
     20 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
  2,240 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
  1,120 ( 0.00%)          match self.kind() {
    840 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
  2,520 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
      .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
      6 ( 0.00%)          matches!(self.kind(), FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     48 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      3 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     26 ( 0.00%)          match self.kind() {
     23 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Get the `i`-th element of a tuple.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
      .                       _ => bug!("tuple_fields called on non-tuple"),
      .                   }
-- line 2059 ----------------------------------------
-- line 2073 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If the type contains variants, returns the variant for `variant_index`.
      .               /// Panics if `variant_index` is out of range.
      .               //
      .               // FIXME: This requires the optimized MIR in the case of generators.
      .               #[inline]
    130 ( 0.00%)      pub fn discriminant_for_variant(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Option<Discr<'tcx>> {
     75 ( 0.00%)          match self.kind() {
     12 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
      .                           // This can actually happen during CTFE, see
      .                           // https://github.com/rust-lang/rust/issues/89765.
      .                           None
      .                       }
      6 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
      .                           Some(adt.discriminant_for_variant(tcx, variant_index))
      .                       }
      .                       TyKind::Generator(def_id, substs, _) => {
      .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
      .                       }
      .                       _ => None,
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Returns the type of the discriminant of this type.
     30 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     15 ( 0.00%)          match self.kind() {
     24 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
      .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
      .           
      .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
      .                           let assoc_items = tcx.associated_item_def_ids(
      .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
      .                           );
      .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
      .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
      .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(_)
      .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Returns the type of metadata for (potentially fat) pointers to this type.
      .               pub fn ptr_metadata_ty(
      .                   &'tcx self,
      .                   tcx: TyCtxt<'tcx>,
      .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
  4,158 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  2,772 ( 0.00%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
     53 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
     66 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
  4,158 ( 0.00%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
     16 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
     24 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
      8 ( 0.00%)      }
      .           }

382,359 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir              

-- line 15 ----------------------------------------
     .           use std::str;
     .           
     .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
     .           
     .           #[cfg(test)]
     .           mod tests;
     .           
     .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
     8 ( 0.00%)  symbols! {
     .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
     .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
     .               Keywords {
     .                   // Special reserved identifiers used internally for elided lifetimes,
     .                   // unnamed method parameters, crate root module, error recovery etc.
     .                   Empty:              "",
     .                   PathRoot:           "{{root}}",
     .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
     .                   write_str,
     .                   writeln_macro,
     .                   x87_reg,
     .                   xer,
     .                   xmm_reg,
     .                   ymm_reg,
     .                   zmm_reg,
     .               }
    10 ( 0.00%)  }
     .           
 3,454 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
     .           pub struct Ident {
     .               pub name: Symbol,
     .               pub span: Span,
     .           }
     .           
     .           impl Ident {
     .               #[inline]
     .               /// Constructs a new identifier from a symbol and a span.
     .               pub const fn new(name: Symbol, span: Span) -> Ident {
     .                   Ident { name, span }
17,564 ( 0.01%)      }
     .           
     .               /// Constructs a new identifier with a dummy span.
     .               #[inline]
     .               pub const fn with_dummy_span(name: Symbol) -> Ident {
     .                   Ident::new(name, DUMMY_SP)
     .               }
     .           
     .               #[inline]
     .               pub fn empty() -> Ident {
     .                   Ident::with_dummy_span(kw::Empty)
     .               }
     .           
     .               /// Maps a string to an identifier with a dummy span.
     3 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
     3 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
    12 ( 0.00%)      }
     .           
     .               /// Maps a string and a span to an identifier.
     .               pub fn from_str_and_span(string: &str, span: Span) -> Ident {
     .                   Ident::new(Symbol::intern(string), span)
     .               }
     .           
     .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
   224 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
     .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
   140 ( 0.00%)      }
     .           
     .               pub fn without_first_quote(self) -> Ident {
     .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
     .               }
     .           
     .               /// "Normalize" ident for use in comparisons using "item hygiene".
     .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
     .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
     .               /// different macro 2.0 macros.
     .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
11,952 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 9,296 ( 0.01%)      }
     .           
     .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
     .               /// Identifiers with same string value become same if they came from the same non-transparent
     .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
     .               /// non-transparent macros.
     .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
 1,017 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
     .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
   791 ( 0.00%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. See
     .               /// `Symbol::as_str()` for details.
     .               pub fn as_str(&self) -> &str {
    18 ( 0.00%)          self.name.as_str()
     .               }
     .           }
     .           
     .           impl PartialEq for Ident {
 2,367 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 5,784 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 3,156 ( 0.00%)      }
     .           }
     .           
     .           impl Hash for Ident {
     .               fn hash<H: Hasher>(&self, state: &mut H) {
     .                   self.name.hash(state);
   618 ( 0.00%)          self.span.ctxt().hash(state);
     .               }
     .           }
     .           
     .           impl fmt::Debug for Ident {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Display::fmt(self, f)?;
     .                   fmt::Debug::fmt(&self.span.ctxt(), f)
     .               }
     .           }
     .           
     .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
     .           /// to printing the original identifier token written in source code (`token_to_string`),
     .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
     .           impl fmt::Display for Ident {
     4 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     5 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
     4 ( 0.00%)      }
     .           }
     .           
     .           /// This is the most general way to print identifiers.
     .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
     .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
     .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
     .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
     .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
     .               is_raw: bool,
     .               /// Span used for retrieving the crate name to which `$crate` refers to,
     .               /// if this field is `None` then the `$crate` conversion doesn't happen.
     .               convert_dollar_crate: Option<Span>,
     .           }
     .           
     .           impl IdentPrinter {
     .               /// The most general `IdentPrinter` constructor. Do not use this.
    17 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
   165 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    17 ( 0.00%)      }
     .           
     .               /// This implementation is supposed to be used when printing identifiers
     .               /// as a part of pretty-printing for larger AST pieces.
     .               /// Do not use this either.
    46 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
    46 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
    23 ( 0.00%)      }
     .           }
     .           
     .           impl fmt::Display for IdentPrinter {
   205 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    82 ( 0.00%)          if self.is_raw {
     .                       f.write_str("r#")?;
    41 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
     .                       if let Some(span) = self.convert_dollar_crate {
     .                           let converted = span.ctxt().dollar_crate_name();
     .                           if !converted.is_path_segment_keyword() {
     .                               f.write_str("::")?;
     .                           }
     .                           return fmt::Display::fmt(&converted, f);
     .                       }
     .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
     .               }
     .           }
     .           
     .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
     .           /// construction.
     .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
     .           // `ModernIdent` struct and use that as well.
     .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
   242 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
     .           
     .           impl MacroRulesNormalizedIdent {
     .               pub fn new(ident: Ident) -> Self {
    71 ( 0.00%)          Self(ident.normalize_to_macro_rules())
     .               }
     .           }
     .           
     .           impl fmt::Debug for MacroRulesNormalizedIdent {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.0, f)
     .               }
     .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
     .           /// Internally, a `Symbol` is implemented as an index, and all operations
     .           /// (including hashing, equality, and ordering) operate on that index. The use
     .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
     .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
     .           ///
     .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
     .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
     .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 9,168 ( 0.01%)  pub struct Symbol(SymbolIndex);
     .           
     .           rustc_index::newtype_index! {
     .               struct SymbolIndex { .. }
     .           }
     .           
     .           impl Symbol {
     .               const fn new(n: u32) -> Self {
     .                   Symbol(SymbolIndex::from_u32(n))
     6 ( 0.00%)      }
     .           
     .               /// Maps a string to its interned representation.
97,146 ( 0.05%)      pub fn intern(string: &str) -> Self {
     .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
97,146 ( 0.05%)      }
     .           
     .               /// Access the underlying string. This is a slowish operation because it
     .               /// requires locking the symbol interner.
     .               ///
     .               /// Note that the lifetime of the return value is a lie. It's not the same
     .               /// as `&self`, but actually tied to the lifetime of the underlying
     .               /// interner. Interners are long-lived, and there are very few of them, and
     .               /// this function is typically used for short-lived things, so in practice
     .               /// it works out ok.
 5,712 ( 0.00%)      pub fn as_str(&self) -> &str {
 1,904 ( 0.00%)          with_session_globals(|session_globals| unsafe {
     .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
     .                   })
 7,616 ( 0.00%)      }
     .           
     .               pub fn as_u32(self) -> u32 {
     .                   self.0.as_u32()
     .               }
     .           
     .               pub fn is_empty(self) -> bool {
     .                   self == kw::Empty
     .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
     .           
     .           impl fmt::Debug for Symbol {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl fmt::Display for Symbol {
    94 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   651 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
     .               }
     .           }
     .           
     .           impl<S: Encoder> Encodable<S> for Symbol {
     .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
 2,348 ( 0.00%)          s.emit_str(self.as_str())
     .               }
     .           }
     .           
     .           impl<D: Decoder> Decodable<D> for Symbol {
     .               #[inline]
 8,458 ( 0.00%)      fn decode(d: &mut D) -> Symbol {
20,518 ( 0.01%)          Symbol::intern(&d.read_str())
     .               }
     .           }
     .           
     .           impl<CTX> HashStable<CTX> for Symbol {
     .               #[inline]
   156 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
 1,136 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
   132 ( 0.00%)      }
     .           }
     .           
     .           impl<CTX> ToStableHashKey<CTX> for Symbol {
     .               type KeyType = String;
     .               #[inline]
     .               fn to_stable_hash_key(&self, _: &CTX) -> String {
     .                   self.as_str().to_string()
     .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
     .           //
     .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
     .           // found that to regress performance up to 2% in some cases. This might be
     .           // revisited after further improvements to `indexmap`.
     .           //
     .           // This type is private to prevent accidentally constructing more than one
     .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
     .           // between `Interner`s.
     2 ( 0.00%)  #[derive(Default)]
     .           struct InternerInner {
     .               arena: DroplessArena,
     .               names: FxHashMap<&'static str, Symbol>,
     .               strings: Vec<&'static str>,
     .           }
     .           
     .           impl Interner {
     .               fn prefill(init: &[&'static str]) -> Self {
    30 ( 0.00%)          Interner(Lock::new(InternerInner {
     .                       strings: init.into(),
     .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
     .                       ..Default::default()
     .                   }))
     .               }
     .           
     .               #[inline]
     .               fn intern(&self, string: &str) -> Symbol {
     .                   let mut inner = self.0.lock();
18,694 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
     .                       return name;
     .                   }
     .           
 1,447 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
     .           
     .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
     .                   // and immediately convert the clone back to `&[u8], all because there
     .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
     .                   let string: &str =
     .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
     .           
     .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
     .                   // #91445 for details.
     .                   inner.names.insert(string, name);
     .                   name
     .               }
     .           
     .               // Get the symbol as a string. `Symbol::as_str()` should be used in
     .               // preference to this function.
     .               fn get(&self, symbol: Symbol) -> &str {
 5,712 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
     .               }
     .           }
     .           
     .           // This module has a very short name because it's used a lot.
     .           /// This module contains all the defined keyword `Symbol`s.
     .           ///
     .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
     .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
     .           
     .               // Used from a macro in `librustc_feature/accepted.rs`
     .               pub use super::kw::MacroRules as macro_rules;
     .           
     .               /// Get the symbol for an integer.
     .               ///
     .               /// The first few non-negative integers each have a static symbol and therefore
     .               /// are fast.
    20 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
    20 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
     .                       if idx < 10 {
    12 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
     .                       }
     .                   }
     2 ( 0.00%)          Symbol::intern(&n.to_string())
     8 ( 0.00%)      }
     .           }
     .           
     .           impl Symbol {
     .               fn is_special(self) -> bool {
     .                   self <= kw::Underscore
     .               }
     .           
     .               fn is_used_keyword_always(self) -> bool {
    51 ( 0.00%)          self >= kw::As && self <= kw::While
     .               }
     .           
     .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
 3,786 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
     .               }
     .           
     .               fn is_unused_keyword_always(self) -> bool {
    51 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
     .               }
     .           
     .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    17 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
     .               }
     .           
     .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 6,745 ( 0.00%)          self.is_special()
     .                       || self.is_used_keyword_always()
     .                       || self.is_unused_keyword_always()
     .                       || self.is_used_keyword_conditional(edition)
     .                       || self.is_unused_keyword_conditional(edition)
     .               }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
13,202 ( 0.01%)          self == kw::Super
     .                       || self == kw::SelfLower
     .                       || self == kw::SelfUpper
     .                       || self == kw::Crate
     .                       || self == kw::PathRoot
     .                       || self == kw::DollarCrate
     .               }
     .           
     .               /// Returns `true` if the symbol is `true` or `false`.
     .               pub fn is_bool_lit(self) -> bool {
   176 ( 0.00%)          self == kw::True || self == kw::False
   176 ( 0.00%)      }
     .           
     .               /// Returns `true` if this symbol can be a raw identifier.
     .               pub fn can_be_raw(self) -> bool {
    56 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
     .               }
     .           }
     .           
     .           impl Ident {
     .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
     .               // unnamed method parameters, crate root module, error recovery etc.
     .               pub fn is_special(self) -> bool {
     .                   self.name.is_special()
    17 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword used in the language.
    17 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    17 ( 0.00%)          self.name.is_used_keyword_always()
     .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    34 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is a keyword reserved for possible future use.
    17 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    17 ( 0.00%)          self.name.is_unused_keyword_always()
     .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    34 ( 0.00%)      }
     .           
     .               /// Returns `true` if the token is either a special identifier or a keyword.
 1,321 ( 0.00%)      pub fn is_reserved(self) -> bool {
     .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     .                   self.name.is_reserved(|| self.span.edition())
 2,642 ( 0.00%)      }
     .           
     .               /// A keyword or reserved identifier that can be used as a path segment.
     .               pub fn is_path_segment_keyword(self) -> bool {
     .                   self.name.is_path_segment_keyword()
 1,886 ( 0.00%)      }
     .           
     .               /// We see this identifier in a normal identifier position, like variable name or a type.
     .               /// How was it written originally? Did it use the raw form? Let's try to guess.
    27 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
     .                   self.name.can_be_raw() && self.is_reserved()
    54 ( 0.00%)      }
     .           }

 7,309 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
 29,553 ( 0.02%)                  if value < 0x80 {
      .                               unsafe {
 15,242 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 21,617 ( 0.01%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
 10,080 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
  6,179 ( 0.00%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
638,348 ( 0.36%)              let byte = slice[*position];
319,174 ( 0.18%)              *position += 1;
319,174 ( 0.18%)              if (byte & 0x80) == 0 {
     40 ( 0.00%)                  return byte as $int_ty;
      .                       }
    652 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
225,453 ( 0.13%)                  let byte = slice[*position];
146,989 ( 0.08%)                  *position += 1;
150,302 ( 0.08%)                  if (byte & 0x80) == 0 {
111,776 ( 0.06%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

240,682 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   43,588 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       21 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      628 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    1,671 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       10 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       40 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    1,320 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        5 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        5 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    3,427 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    3,848 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       35 ( 0.00%)      fn from(p: PathBuf) -> Self {
       10 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       30 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       35 ( 0.00%)      }
        .           }
        .           
        4 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       20 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       30 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       30 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       25 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
      644 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        5 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       10 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   11,472 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       30 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    8,664 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    6,498 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    8,664 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    2,421 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    1,614 ( 0.00%)      }
        .               #[inline]
      160 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      160 ( 0.00%)      }
        .               #[inline]
      405 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      270 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      320 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      192 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
        3 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
        2 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       18 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       12 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       90 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       60 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    1,245 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      830 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      256 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      176 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       83 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       25 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        5 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       20 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      350 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      300 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      250 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       75 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       90 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   32,384 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    5,880 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        8 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        8 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   20,552 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   26,496 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       11 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
        7 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
        8 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      363 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       66 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      231 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      297 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
       22 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        8 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      180 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      105 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
      459 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    2,565 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    1,710 ( 0.00%)          let mut span = self.data();
    1,423 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    2,565 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    2,848 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    2,128 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,862 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      195 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       17 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      195 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      195 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      466 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      402 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       15 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       18 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      634 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       30 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,268 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       15 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       15 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      290 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        5 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        5 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        5 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       20 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       10 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       10 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       15 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       55 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    2,853 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      317 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  639,314 ( 0.36%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      634 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    3,487 ( 0.00%)              SourceFile {
    2,536 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,268 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,268 ( 0.00%)                  lines,
    1,268 ( 0.00%)                  multibyte_chars,
    1,268 ( 0.00%)                  non_narrow_chars,
    1,268 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    2,853 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       55 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       15 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       10 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       10 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       15 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       60 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       10 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       85 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       55 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       20 ( 0.00%)              lines,
       20 ( 0.00%)              multibyte_chars,
       20 ( 0.00%)              non_narrow_chars,
       20 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
       21 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
        3 ( 0.00%)          if matches!(
        6 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
        3 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      322 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    1,915 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      925 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    1,010 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      701 ( 0.00%)          assert!(line_index < self.lines.len());
      972 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       17 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      636 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       50 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       45 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    4,494 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      452 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   10,602 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,002,718 ( 0.56%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  552,939 ( 0.31%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   31,078 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   15,526 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    2,964 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   12,562 ( 0.01%)          let span = self.data_untracked();
    4,416 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    6,654 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    4,498 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    4,312 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
    8,624 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    4,312 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    2,156 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    2,156 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   17,744 ( 0.01%)      }
        .           }

  788,585 ( 0.44%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
      .           
      .           /// See `simplify_type`
      .           ///
      .           /// Note that we keep this type generic over the type of identifier it uses
      .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
      .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
      .           /// the non-stable but fast to construct DefId-version is the better choice.
100,116 ( 0.06%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           pub enum SimplifiedTypeGen<D>
      .           where
      .               D: Copy + Debug + Eq,
      .           {
      .               BoolSimplifiedType,
      .               CharSimplifiedType,
      .               IntSimplifiedType(ty::IntTy),
      .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
      .           ///
      .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
      .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
      .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
      .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
      .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
      .           ///   this way so I am not going to change this until we actually find an issue as I am really
      .           ///   interesting in getting an actual test for this.
 57,012 ( 0.03%)  pub fn simplify_type(
      .               tcx: TyCtxt<'_>,
      .               ty: Ty<'_>,
      .               can_simplify_params: SimplifyParams,
      .               strip_references: StripReferences,
      .           ) -> Option<SimplifiedType> {
 85,518 ( 0.05%)      match *ty.kind() {
      .                   ty::Bool => Some(BoolSimplifiedType),
      .                   ty::Char => Some(CharSimplifiedType),
  4,928 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
 10,112 ( 0.01%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
  1,168 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
 15,980 ( 0.01%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
      .                   ty::Str => Some(StrSimplifiedType),
      .                   ty::Array(..) => Some(ArraySimplifiedType),
      .                   ty::Slice(..) => Some(SliceSimplifiedType),
     52 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
      .                   ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
      .                       Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
      .                           Some(TraitSimplifiedType(principal_def_id))
      .                       }
      .                       _ => Some(MarkerTraitObjectSimplifiedType),
      .                   },
 10,112 ( 0.01%)          ty::Ref(_, ty, mutbl) => {
  5,056 ( 0.00%)              if strip_references == StripReferences::Yes {
      .                           // For diagnostics, when recommending similar impls we want to
      .                           // recommend impls even when there is a reference mismatch,
      .                           // so we treat &T and T equivalently in that case.
      .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
      .                       } else {
      .                           Some(RefSimplifiedType(mutbl))
      .                       }
      .                   }
      .                   ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
      .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
      .                   ty::GeneratorWitness(ref tys) => {
      .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
      .                   }
      .                   ty::Never => Some(NeverSimplifiedType),
    312 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
  1,824 ( 0.00%)          ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
      .                   ty::Projection(_) | ty::Param(_) => {
      .                       if can_simplify_params == SimplifyParams::Yes {
      .                           // In normalized types, projections don't unify with
      .                           // anything. when lazy normalization happens, this
      .                           // will change. It would still be nice to have a way
      .                           // to deal with known-not-to-unify-with-anything
      .                           // projections (e.g., the likes of <__S as Encoder>::Error).
      .                           Some(ParameterSimplifiedType)
-- line 134 ----------------------------------------
-- line 135 ----------------------------------------
      .                       } else {
      .                           None
      .                       }
      .                   }
      .                   ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
      .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
      .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
      .               }
128,277 ( 0.07%)  }
      .           
      .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
      .               pub fn def(self) -> Option<D> {
      .                   match self {
      .                       AdtSimplifiedType(d)
      .                       | ForeignSimplifiedType(d)
      .                       | TraitSimplifiedType(d)
      .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

123,354 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
 57,715 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
 77,967 ( 0.04%)      if enough_space {
  3,705 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
 51,978 ( 0.03%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
 51,978 ( 0.03%)      get_stack_limit().map(|limit| current_ptr - limit)
103,956 ( 0.06%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
 51,978 ( 0.03%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 31,438 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    6,116 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   23,831 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       96 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    1,898 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
    9,977 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    5,392 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
2,734,192 ( 1.53%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   54,379 ( 0.03%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      309 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
       87 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      116 ( 0.00%)                  while let Some(x) = self.next() {
    1,281 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   15,175 ( 0.01%)                  while let Some(x) = self.next() {
   14,726 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    1,093 ( 0.00%)                  while let Some(x) = self.next() {
    2,738 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
       56 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    3,087 ( 0.00%)                  while let Some(x) = self.next() {
    7,265 ( 0.00%)                      if let Some(y) = f(x) {
        9 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      350 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    5,638 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,460 ( 0.00%)                  while let Some(x) = self.next_back() {
   33,474 ( 0.02%)                      i -= 1;
   28,306 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    9,611 ( 0.01%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        8 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       13 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   37,683 ( 0.02%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  289,369 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    982 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    998 ( 0.00%)      Spanned { node: t, span: sp }
     65 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      1 ( 0.00%)      respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
      .           
      .           /// An abstraction over the fs operations used by the Parser.
      .           pub trait FileLoader {
-- line 99 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// Read the contents of a UTF-8 file into memory.
      .               fn read_file(&self, path: &Path) -> io::Result<String>;
      .           }
      .           
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
     32 ( 0.00%)      fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
     32 ( 0.00%)      }
      .           
     10 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
     15 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     30 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
    634 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  1,610 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    322 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  1,932 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      9 ( 0.00%)          &self.path_mapping
      9 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
     40 ( 0.00%)          self.file_loader.file_exists(path)
      .               }
      .           
     55 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
     20 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     90 ( 0.00%)          Ok(self.new_source_file(filename, src))
     45 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     41 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
    123 ( 0.00%)      }
      .           
     20 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     25 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    322 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    322 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
    966 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
     40 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     60 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
     45 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     65 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
     10 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     30 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     30 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
     45 ( 0.00%)                      filename,
     15 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  2,536 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
239,776 ( 0.13%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    590 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    536 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
    951 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  2,536 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  2,853 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    990 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    360 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    360 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
    180 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
    180 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    810 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
     21 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
     21 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
      6 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
      3 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
     12 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
      9 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
     36 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
     27 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
     33 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
     12 ( 0.00%)          match self.span_to_snippet(sp) {
     12 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
      6 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
     15 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
     27 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
      6 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  2,568 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
    856 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  2,140 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
     11 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
      1 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
      4 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
      2 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
      2 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
      9 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  2,580 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    215 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  1,498 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  1,926 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    428 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
    856 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    214 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
    856 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
    642 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
     18 ( 0.00%)          } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  1,176 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
    784 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
    784 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  1,935 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  2,170 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    434 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
    868 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  2,170 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  2,433 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,602 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  3,244 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
     21 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
     16 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      8 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      4 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
    144 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     80 ( 0.00%)          (path, false)
    144 ( 0.00%)      }
      .           
     40 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
     10 ( 0.00%)          match file {
     10 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     70 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      5 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     50 ( 0.00%)                  (FileName::Real(realfile), mapped)
     20 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

  4,081 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
 85,432 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
 53,395 ( 0.03%)              .intern(kind, |kind| {
  5,532 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 11,064 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
 96,111 ( 0.05%)      }
      .           
      .               #[inline(never)]
 17,064 ( 0.01%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 14,931 ( 0.01%)              .intern(kind, |kind| {
  3,468 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 19,197 ( 0.01%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  9,388 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
  7,163 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  1,444 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  1,444 ( 0.00%)          self.data.get(&id.local_id)
  5,736 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    102 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
     68 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
    546 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  6,461 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
    546 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  1,773 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  1,182 ( 0.00%)          match *qpath {
  3,432 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
    114 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  2,955 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    105 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      4 ( 0.00%)      }
      .           
     94 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    188 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    188 ( 0.00%)      }
      .           
    300 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    300 ( 0.00%)      }
      .           
    749 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    749 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    749 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      .                   LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      .               }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      .               }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    250 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    125 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      .               }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  1,510 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    755 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  2,480 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  1,240 ( 0.00%)      }
      .           
 10,248 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  1,708 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
  8,540 ( 0.00%)      }
      .           
  2,163 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  2,163 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  4,326 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    346 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    173 ( 0.00%)      }
      .           
    800 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    800 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  1,600 ( 0.00%)      }
      .           
    548 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    548 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  1,096 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    168 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  1,967 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  1,736 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    970 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    485 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,258 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    629 ( 0.00%)      }
      .           
    849 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  1,698 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  1,698 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
      5 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      1 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      .               }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    101 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    202 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    202 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    202 ( 0.00%)      }
      .           
    378 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
    504 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    314 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
     94 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    168 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     84 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    324 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    162 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    100 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     50 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    116 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    145 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     58 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     29 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    126 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     63 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     68 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     34 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     58 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     29 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     27 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      9 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     18 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     29 ( 0.00%)          &self.coercion_casts
     29 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 890 ----------------------------------------
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  1,400 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    560 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  1,120 ( 0.00%)      }
      .           
     87 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     29 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    116 ( 0.00%)      }
      .           
    580 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    116 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    812 ( 0.00%)      }
      .           
    116 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     29 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    145 ( 0.00%)      }
      .           
      9 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
     16 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      4 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
     32 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
     16 ( 0.00%)          let attrs = self.get_attrs(def_id);
     68 ( 0.00%)          let get = |name| {
     16 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
     80 ( 0.00%)          };
     24 ( 0.00%)          (
     24 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
     12 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
     32 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
    217 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     31 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    227 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    248 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 18,410 ( 0.01%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 23,670 ( 0.01%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      .               }
      .           
      .               /// Obtain the diagnostic item's name
    630 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    720 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,155 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,320 ( 0.00%)      }
      .           
    308 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    396 ( 0.00%)      }
      .           
 15,176 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 17,344 ( 0.01%)      }
      .           
     58 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    844 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    372 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
      2 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
      .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      3 ( 0.00%)          if let Some(id) = id.as_local() {
      3 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      3 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    188 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
     52 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 16,542 ( 0.01%)          &*self.untracked_resolutions.cstore
  8,271 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     22 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    100 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
     58 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
     87 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     29 ( 0.00%)          self.sess.opts.borrowck_mode
    116 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1540 ----------------------------------------
      .                       // FIXME(#42706) -- in some cases, we could do better here.
      .                       return true;
      .                   }
      .                   false
      .               }
      .           
      .               /// Determines whether identifiers in the assembly have strict naming rules.
      .               /// Currently, only NVPTX* targets need it.
     16 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
     16 ( 0.00%)          self.sess.target.arch.contains("nvptx")
     32 ( 0.00%)      }
      .           
      .               /// Returns `&'static core::panic::Location<'static>`.
      .               pub fn caller_location_ty(self) -> Ty<'tcx> {
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    363 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    264 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    594 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    297 ( 0.00%)      }
      .           
     56 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
     64 ( 0.00%)      }
      .           
  5,425 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
  6,200 ( 0.00%)      }
      .           
  1,029 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
  1,176 ( 0.00%)      }
      .           
    308 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    352 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 15,837 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 56,463 ( 0.03%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 27,623 ( 0.02%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 27,576 ( 0.02%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  8,170 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 10,740 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  1,619 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    892 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
  8,722 ( 0.00%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,816 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  2,849 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  5,793 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 36,102 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 18,729 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  1,794 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 40,473 ( 0.02%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
118,941 ( 0.07%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
106,965 ( 0.06%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
      8 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 79,764 ( 0.04%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 23,241 ( 0.01%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 13,544 ( 0.01%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
    895 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 13,544 ( 0.01%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
    369 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
    369 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    379 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
    379 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
    122 ( 0.00%)          match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
    122 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
      6 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2340 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     12 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     18 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    120 ( 0.00%)          iter.intern_with(|ts| {
     38 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    135 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    108 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
      9 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      2 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    600 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2432 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_infer(self, it: InferTy) -> Ty<'tcx> {
      .                   self.mk_ty(Infer(it))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_infer(self, ic: InferConst<'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {
     14 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(ic), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    175 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    125 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
     50 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    175 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      2 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      2 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      4 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      4 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      4 ( 0.00%)          self.mk_place_elem(
      .                       place,
      8 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
      8 ( 0.00%)      }
      .           
      .               pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
     54 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     60 ( 0.00%)      }
      .           
      .               pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      .                   assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
-- line 2518 ----------------------------------------
-- line 2521 ----------------------------------------
      .                   );
      .                   self._intern_poly_existential_predicates(eps)
      .               }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,928 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
     28 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  3,800 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  1,564 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     28 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 23,082 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  3,612 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    245 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    394 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
    155 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     42 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    354 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    648 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    133 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     21 ( 0.00%)              c_variadic,
     34 ( 0.00%)              unsafety,
     16 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
-- line 2590 ----------------------------------------
-- line 2598 ----------------------------------------
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    477 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 35,176 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  1,734 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
    654 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  1,308 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  2,613 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
  6,328 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  6,328 ( 0.00%)          let hir = self.hir();
      .                   loop {
 11,961 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 15,415 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  9,249 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  9,040 ( 0.01%)      }
      .           
    600 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  3,075 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    225 ( 0.00%)              let next = self.hir().get_parent_node(id);
    675 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    600 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
-- line 2680 ----------------------------------------
-- line 2687 ----------------------------------------
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    203 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     58 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
     58 ( 0.00%)          Some(&*candidates)
    232 ( 0.00%)      }
      .           
     21 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
     27 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    504 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
    648 ( 0.00%)      }
      .           
    171 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    171 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
      .               pub fn is_const_fn(self, def_id: DefId) -> bool {
-- line 2732 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 24,672 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 98,246 ( 0.05%)          E::intern_with(self, f)
 25,308 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
  6,804 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 21,406 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      .                           assert!(iter.next().is_none());
  1,257 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     13 ( 0.00%)                  assert!(iter.next().is_none());
  4,904 ( 0.00%)                  f(&[t0, t1])
      .                       }
     32 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
  5,459 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
     95 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
     76 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 29,302 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 23,748 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
     75 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      2 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      2 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      3 ( 0.00%)                  assert!(iter.next().is_none());
  1,954 ( 0.00%)                  f(&[t0, t1])
      .                       }
     84 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 32,993 ( 0.02%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 27,623 ( 0.02%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    336 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

 74,168 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           use rustc_data_structures::sync::Lrc;
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::symbol::{kw, sym};
      .           use rustc_span::symbol::{Ident, Symbol};
      .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
      .           use std::borrow::Cow;
      .           use std::{fmt, mem};
      .           
  2,016 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum CommentKind {
      .               Line,
      .               Block,
      .           }
      .           
     45 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum BinOpToken {
      .               Plus,
      .               Minus,
      .               Star,
      .               Slash,
      .               Percent,
      .               Caret,
      .               And,
      .               Or,
      .               Shl,
      .               Shr,
      .           }
      .           
      .           /// A delimiter token.
  2,301 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DelimToken {
      .               /// A round parenthesis (i.e., `(` or `)`).
      .               Paren,
      .               /// A square bracket (i.e., `[` or `]`).
      .               Bracket,
      .               /// A curly brace (i.e., `{` or `}`).
      .               Brace,
      .               /// An empty delimiter.
      .               NoDelim,
      .           }
      .           
    150 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum LitKind {
      .               Bool, // AST only, must never appear in a `Token`
      .               Byte,
      .               Char,
      .               Integer,
      .               Float,
      .               Str,
      .               StrRaw(u16), // raw string delimited by `n` hash symbols
      .               ByteStr,
      .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
      .               Err,
      .           }
      .           
      .           /// A literal token.
  1,309 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Lit {
      .               pub kind: LitKind,
      .               pub symbol: Symbol,
      .               pub suffix: Option<Symbol>,
      .           }
      .           
      .           impl fmt::Display for Lit {
     70 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    126 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
      .                   match kind {
      .                       Byte => write!(f, "b'{}'", symbol)?,
      .                       Char => write!(f, "'{}'", symbol)?,
      .                       Str => write!(f, "\"{}\"", symbol)?,
      .                       StrRaw(n) => write!(
      .                           f,
      .                           "r{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
-- line 87 ----------------------------------------
-- line 89 ----------------------------------------
      .                       )?,
      .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
      .                       ByteStrRaw(n) => write!(
      .                           f,
      .                           "br{delim}\"{string}\"{delim}",
      .                           delim = "#".repeat(n as usize),
      .                           string = symbol
      .                       )?,
     42 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
      .                   }
      .           
     30 ( 0.00%)          if let Some(suffix) = suffix {
      7 ( 0.00%)              write!(f, "{}", suffix)?;
      .                   }
      .           
      .                   Ok(())
     70 ( 0.00%)      }
      .           }
      .           
      .           impl LitKind {
      .               /// An English article for the literal token kind.
      .               pub fn article(self) -> &'static str {
      .                   match self {
      .                       Integer | Err => "an",
      .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
      .                       Float => "float",
      .                       Str | StrRaw(..) => "string",
      .                       ByteStr | ByteStrRaw(..) => "byte string",
      .                       Err => "error",
      .                   }
      .               }
      .           
      .               crate fn may_have_suffix(self) -> bool {
     10 ( 0.00%)          matches!(self, Integer | Float | Err)
      .               }
      .           }
      .           
      .           impl Lit {
      .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
      .                   Lit { kind, symbol, suffix }
    150 ( 0.00%)      }
      .           }
      .           
     28 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
     49 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
      .           
     24 ( 0.00%)      !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [
      .                       kw::Async,
      .                       kw::Do,
      .                       kw::Box,
      .                       kw::Break,
      .                       kw::Const,
      .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
      .                       kw::True,
      .                       kw::Try,
      .                       kw::Unsafe,
      .                       kw::While,
      .                       kw::Yield,
      .                       kw::Static,
      .                   ]
      .                   .contains(&name)
     35 ( 0.00%)  }
      .           
      .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      .               let ident_token = Token::new(Ident(name, is_raw), span);
      .           
      .               !ident_token.is_reserved_ident()
      .                   || ident_token.is_path_segment_keyword()
      .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
      .                       .contains(&name)
      .           }
      .           
327,339 ( 0.18%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub enum TokenKind {
      .               /* Expression-operator symbols. */
      .               Eq,
      .               Lt,
      .               Le,
      .               EqEq,
      .               Ne,
      .               Ge,
      .               Gt,
      .               AndAnd,
      .               OrOr,
      .               Not,
      .               Tilde,
  3,075 ( 0.00%)      BinOp(BinOpToken),
      6 ( 0.00%)      BinOpEq(BinOpToken),
      .           
      .               /* Structural symbols */
      .               At,
      .               Dot,
      .               DotDot,
      .               DotDotDot,
      .               DotDotEq,
      .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
      .               LArrow,
      .               FatArrow,
      .               Pound,
      .               Dollar,
      .               Question,
      .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
      .               SingleQuote,
      .               /// An opening delimiter (e.g., `{`).
  5,445 ( 0.00%)      OpenDelim(DelimToken),
      .               /// A closing delimiter (e.g., `}`).
  1,743 ( 0.00%)      CloseDelim(DelimToken),
      .           
      .               /* Literals */
  1,017 ( 0.00%)      Literal(Lit),
      .           
      .               /// Identifier token.
      .               /// Do not forget about `NtIdent` when you want to match on identifiers.
      .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated identifiers in the same way.
  2,069 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
      .               /// Lifetime identifier token.
      .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
      .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
      .               /// treat regular and interpolated lifetime identifiers in the same way.
      .               Lifetime(Symbol),
      .           
      .               Interpolated(Lrc<Nonterminal>),
      .           
      .               /// A doc comment token.
      .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
      .               /// similarly to symbols in string literal tokens.
    339 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
      .           
      .               Eof,
      .           }
      .           
      .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenKind, 16);
      .           
 19,472 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
      .           pub struct Token {
  1,272 ( 0.00%)      pub kind: TokenKind,
      .               pub span: Span,
      .           }
      .           
      .           impl TokenKind {
      .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
      .                   Literal(Lit::new(kind, symbol, suffix))
      .               }
      .           
      .               // An approximation to proc-macro-style single-character operators used by rustc parser.
      .               // If the operator token can be broken into two tokens, the first of which is single-character,
      .               // then this function performs that operation, otherwise it returns `None`.
    370 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
  1,480 ( 0.00%)          Some(match *self {
      .                       Le => (Lt, Eq),
      .                       EqEq => (Eq, Eq),
      .                       Ne => (Not, Eq),
      .                       Ge => (Gt, Eq),
      .                       AndAnd => (BinOp(And), BinOp(And)),
      .                       OrOr => (BinOp(Or), BinOp(Or)),
      .                       BinOp(Shl) => (Lt, Lt),
      .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
      .                       BinOpEq(Shl) => (Lt, Le),
      .                       BinOpEq(Shr) => (Gt, Ge),
      .                       DotDot => (Dot, Dot),
      .                       DotDotDot => (Dot, DotDot),
      .                       ModSep => (Colon, Colon),
      .                       RArrow => (BinOp(Minus), Gt),
      .                       LArrow => (Lt, BinOp(Minus)),
      .                       FatArrow => (Eq, Gt),
    370 ( 0.00%)              _ => return None,
      .                   })
    370 ( 0.00%)      }
      .           
      .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
      .               /// Enables better error recovery when the wrong token is found.
      .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
      .                   match *self {
      .                       Comma => Some(vec![Dot, Lt, Semi]),
      .                       Semi => Some(vec![Colon, Comma]),
      .                       FatArrow => Some(vec![Eq, RArrow]),
-- line 298 ----------------------------------------
-- line 301 ----------------------------------------
      .               }
      .           
      .               pub fn should_end_const_arg(&self) -> bool {
      .                   matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      .               }
      .           }
      .           
      .           impl Token {
  3,711 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 11,713 ( 0.01%)          Token { kind, span }
  3,711 ( 0.00%)      }
      .           
      .               /// Some token that will be thrown away later.
    184 ( 0.00%)      pub fn dummy() -> Self {
      .                   Token::new(TokenKind::Question, DUMMY_SP)
    184 ( 0.00%)      }
      .           
      .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
      .               pub fn from_ast_ident(ident: Ident) -> Self {
     32 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
      .               }
      .           
      .               /// Return this token by value and leave a dummy token in its place.
  2,566 ( 0.00%)      pub fn take(&mut self) -> Self {
      .                   mem::replace(self, Token::dummy())
  2,566 ( 0.00%)      }
      .           
      .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
      .               /// token refers. For all other tokens this is just a regular span.
      .               /// It is particularly important to use this for identifiers and lifetimes
      .               /// for which spans affect name resolution and edition checks.
      .               /// Note that keywords are also identifiers, so they should use this
      .               /// if they keep spans or perform edition checks.
      .               pub fn uninterpolated_span(&self) -> Span {
    162 ( 0.00%)          match &self.kind {
      .                       Interpolated(nt) => nt.span(),
     81 ( 0.00%)              _ => self.span,
      .                   }
     81 ( 0.00%)      }
      .           
      .               pub fn is_op(&self) -> bool {
  7,698 ( 0.00%)          !matches!(
  2,566 ( 0.00%)              self.kind,
      .                       OpenDelim(..)
      .                           | CloseDelim(..)
      .                           | Literal(..)
      .                           | DocComment(..)
      .                           | Ident(..)
      .                           | Lifetime(..)
      .                           | Interpolated(..)
      .                           | Eof
      .                   )
  2,566 ( 0.00%)      }
      .           
      .               pub fn is_like_plus(&self) -> bool {
    710 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    142 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of an expression.
     13 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
     65 ( 0.00%)          match self.uninterpolate().kind {
     63 ( 0.00%)              Ident(name, is_raw)              =>
     21 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
      .                       OpenDelim(..)                     | // tuple, array or block
      .                       Literal(..)                       | // literal
      .                       Not                               | // operator not
      .                       BinOp(Minus)                      | // unary minus
      .                       BinOp(Star)                       | // dereference
      .                       BinOp(Or) | OrOr                  | // closure
      .                       BinOp(And)                        | // reference
      .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
      .                       Lifetime(..)                      | // labeled loop
      .                       Pound                             => true, // expression attributes
      .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
      .                           NtExpr(..)    |
      .                           NtBlock(..)   |
      .                           NtPath(..)),
      .                       _ => false,
      .                   }
     26 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a type.
      4 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
      9 ( 0.00%)          match self.uninterpolate().kind {
      .                       Ident(name, is_raw)        =>
      .                           ident_can_begin_type(name, self.span, is_raw), // type name or keyword
      .                       OpenDelim(Paren)            | // tuple
      .                       OpenDelim(Bracket)          | // array
      .                       Not                         | // never
      .                       BinOp(Star)                 | // raw pointer
      .                       BinOp(And)                  | // reference
      .                       AndAnd                      | // double reference
      .                       Question                    | // maybe bound in trait object
      .                       Lifetime(..)                | // lifetime bound in trait object
      .                       Lt | BinOp(Shl)             | // associated path
      .                       ModSep                      => true, // global path
      .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
      .                       _ => false,
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token can appear at the start of a const param.
      .               pub fn can_begin_const_arg(&self) -> bool {
      .                   match self.kind {
      .                       OpenDelim(Brace) => true,
      .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
      .                       _ => self.can_begin_literal_maybe_minus(),
      .                   }
-- line 412 ----------------------------------------
-- line 427 ----------------------------------------
      .               }
      .           
      .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
      .               /// for example a '-42', or one of the boolean idents).
      .               ///
      .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
      .               ///
      .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
      3 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
     30 ( 0.00%)          match self.uninterpolate().kind {
      .                       Literal(..) | BinOp(Minus) => true,
     12 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
      .                       Interpolated(ref nt) => match &**nt {
      .                           NtLiteral(_) => true,
      .                           NtExpr(e) => match &e.kind {
      .                               ast::ExprKind::Lit(_) => true,
      .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
      .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
      .                               }
      .                               _ => false,
      .                           },
      .                           _ => false,
      .                       },
      .                       _ => false,
      .                   }
      6 ( 0.00%)      }
      .           
      .               // A convenience function for matching on identifiers during parsing.
      .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
      .               // into the regular identifier or lifetime token it refers to,
      .               // otherwise returns the original token.
    637 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 33,103 ( 0.02%)          match &self.kind {
      .                       Interpolated(nt) => match **nt {
      .                           NtIdent(ident, is_raw) => {
      .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
      .                           }
      .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
      .                           _ => Cow::Borrowed(self),
      .                       },
      .                       _ => Cow::Borrowed(self),
      .                   }
    637 ( 0.00%)      }
      .           
      .               /// Returns an identifier if this token is an identifier.
  3,252 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
      .                   let token = self.uninterpolate();
 23,538 ( 0.01%)          match token.kind {
104,214 ( 0.06%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
      .                       _ => None,
      .                   }
 25,457 ( 0.01%)      }
      .           
      .               /// Returns a lifetime identifier if this token is a lifetime.
     60 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
      .                   let token = self.uninterpolate();
    126 ( 0.00%)          match token.kind {
      .                       Lifetime(name) => Some(Ident::new(name, token.span)),
      .                       _ => None,
      .                   }
    420 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier.
      .               pub fn is_ident(&self) -> bool {
      .                   self.ident().is_some()
    264 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a lifetime.
      3 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
      .                   self.lifetime().is_some()
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an identifier whose name is the given
      .               /// string slice.
    282 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
      .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    564 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is an interpolated path.
      .               fn is_path(&self) -> bool {
  2,140 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      .                       if let NtPath(..) = **nt {
      .                           return true;
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 535 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// Returns `true` if the token is either the `mut` or `const` keyword.
      .               pub fn is_mutability(&self) -> bool {
      .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
      .               }
      .           
    168 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
  1,238 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      .               }
      .           
  2,140 ( 0.00%)      pub fn is_path_start(&self) -> bool {
  3,178 ( 0.00%)          self == &ModSep
      .                       || self.is_qpath_start()
      .                       || self.is_path()
      .                       || self.is_path_segment_keyword()
    526 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
  2,675 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a given keyword, `kw`.
  6,402 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
      .                   self.is_non_raw_ident_where(|id| id.name == kw)
 12,804 ( 0.01%)      }
      .           
    100 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
      .               }
      .           
      .               // Returns true for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
     17 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_special)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
     17 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
     17 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      .               }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
      .               pub fn is_reserved_ident(&self) -> bool {
      .                   self.is_non_raw_ident_where(Ident::is_reserved)
      .               }
      .           
      .               /// Returns `true` if the token is the identifier `true` or `false`.
    100 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    200 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
      .               }
      .           
      .               pub fn is_numeric_lit(&self) -> bool {
      .                   matches!(
      .                       self.kind,
      .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
      .                   )
      .               }
      .           
      .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
     52 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 46,290 ( 0.03%)          match self.ident() {
    549 ( 0.00%)              Some((id, false)) => pred(id),
      .                       _ => false,
      .                   }
     65 ( 0.00%)      }
      .           
  5,900 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
  2,950 ( 0.00%)          let kind = match self.kind {
     52 ( 0.00%)              Eq => match joint.kind {
      .                           Eq => EqEq,
      .                           Gt => FatArrow,
      .                           _ => return None,
      .                       },
     42 ( 0.00%)              Lt => match joint.kind {
      .                           Eq => Le,
      .                           Lt => BinOp(Shl),
      .                           Le => BinOpEq(Shl),
      .                           BinOp(Minus) => LArrow,
      .                           _ => return None,
      .                       },
     13 ( 0.00%)              Gt => match joint.kind {
      .                           Eq => Ge,
      .                           Gt => BinOp(Shr),
      .                           Ge => BinOpEq(Shr),
      .                           _ => return None,
      .                       },
      .                       Not => match joint.kind {
      .                           Eq => Ne,
      .                           _ => return None,
      .                       },
    331 ( 0.00%)              BinOp(op) => match joint.kind {
      .                           Eq => BinOpEq(op),
      7 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
      4 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
     26 ( 0.00%)                  Gt if op == Minus => RArrow,
      .                           _ => return None,
      .                       },
     30 ( 0.00%)              Dot => match joint.kind {
      .                           Dot => DotDot,
      .                           DotDot => DotDotDot,
      .                           _ => return None,
      .                       },
      .                       DotDot => match joint.kind {
      .                           Dot => DotDotDot,
      .                           Eq => DotDotEq,
      .                           _ => return None,
      .                       },
    198 ( 0.00%)              Colon => match joint.kind {
      .                           Colon => ModSep,
      .                           _ => return None,
      .                       },
      .                       SingleQuote => match joint.kind {
      .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
      .                           _ => return None,
      .                       },
      .           
      .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
      .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
      .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
      .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
      .                   };
      .           
  2,353 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
  5,310 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq<TokenKind> for Token {
      .               fn eq(&self, rhs: &TokenKind) -> bool {
 19,498 ( 0.01%)          self.kind == *rhs
      .               }
      .           }
      .           
      .           #[derive(Clone, Encodable, Decodable)]
      .           /// For interpolation during macro expansion.
      .           pub enum Nonterminal {
      .               NtItem(P<ast::Item>),
      .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
      .               Path,
      .               Vis,
      .               TT,
      .           }
      .           
      .           impl NonterminalKind {
      .               /// The `edition` closure is used to get the edition for the given symbol. Doing
      .               /// `span.edition()` is expensive, so we do it lazily.
     32 ( 0.00%)      pub fn from_symbol(
      .                   symbol: Symbol,
      .                   edition: impl FnOnce() -> Edition,
      .               ) -> Option<NonterminalKind> {
     70 ( 0.00%)          Some(match symbol {
      .                       sym::item => NonterminalKind::Item,
      .                       sym::block => NonterminalKind::Block,
      .                       sym::stmt => NonterminalKind::Stmt,
      .                       sym::pat => match edition() {
      .                           Edition::Edition2015 | Edition::Edition2018 => {
      .                               NonterminalKind::PatParam { inferred: true }
      .                           }
      .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
      .                       sym::lifetime => NonterminalKind::Lifetime,
      .                       sym::literal => NonterminalKind::Literal,
      .                       sym::meta => NonterminalKind::Meta,
      .                       sym::path => NonterminalKind::Path,
      .                       sym::vis => NonterminalKind::Vis,
      .                       sym::tt => NonterminalKind::TT,
      .                       _ => return None,
      .                   })
     32 ( 0.00%)      }
      .               fn symbol(self) -> Symbol {
      .                   match self {
      .                       NonterminalKind::Item => sym::item,
      .                       NonterminalKind::Block => sym::block,
      .                       NonterminalKind::Stmt => sym::stmt,
      .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
      .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
      .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

115,092 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
156,342 ( 0.09%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
117,255 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  9,156 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 13,734 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 41,364 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 13,136 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 26,272 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
     54 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 34,275 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 57,125 ( 0.03%)          match undo {
 67,100 ( 0.04%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    224 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
  1,448 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
     58 ( 0.00%)              UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 13,475 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
  3,778 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
 45,700 ( 0.03%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
  4,196 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
  3,976 ( 0.00%)          if self.in_snapshot() {
    432 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 39,696 ( 0.02%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
 47,507 ( 0.03%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
137,100 ( 0.08%)              self.reverse(undo);
      .                   }
      .           
 15,748 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  2,584 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 21,140 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
 46,312 ( 0.03%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 10,077 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  1,536 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 10,845 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
 39,900 ( 0.02%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
  3,359 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 19,848 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
 19,848 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 31,063 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  170,287 ( 0.10%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   15,983 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
1,693,295 ( 0.95%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
    9,992 ( 0.01%)          self.stride += Group::WIDTH;
    9,992 ( 0.01%)          self.pos += self.stride;
    8,199 ( 0.00%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   10,130 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   20,870 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    5,346 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   24,540 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    6,888 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   23,135 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   29,105 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      138 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       20 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    8,663 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
      614 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
      614 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    1,228 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      578 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
      650 ( 0.00%)          self.erase_no_drop(&item);
        9 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   61,579 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       72 ( 0.00%)          match self.find(hash, eq) {
      536 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    8,868 ( 0.00%)              None => None,
        .                   }
   96,570 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      580 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   34,840 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   12,575 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   29,162 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   18,456 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  286,096 ( 0.16%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      288 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  174,240 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        4 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  209,136 ( 0.12%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   69,680 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        .                   unsafe { self.insert(hash, value, hasher).as_mut() }
   52,260 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       66 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   48,089 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      681 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
   97,182 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
   77,602 ( 0.04%)          self.table.items += 1;
        .                   bucket
      107 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      211 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      597 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
      758 ( 0.00%)              eq(self.bucket(index).as_ref())
      125 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       58 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      240 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      526 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      175 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   46,772 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    8,070 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
      680 ( 0.00%)          let allocation = self.into_allocation();
      510 ( 0.00%)          RawIntoIter {
      850 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      238 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       33 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   63,918 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   27,994 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
    9,494 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   16,572 ( 0.01%)          Ok(Self {
        .                       ctrl,
    7,831 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   20,504 ( 0.01%)      }
        .           
        .               #[inline]
   18,385 ( 0.01%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    4,618 ( 0.00%)          if capacity == 0 {
    3,386 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   12,994 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    9,756 ( 0.01%)                  Ok(result)
        .                       }
        .                   }
   18,385 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   15,937 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   15,937 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   31,874 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  113,168 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  334,203 ( 0.19%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  154,946 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    3,196 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  219,102 ( 0.12%)              for bit in group.match_byte(h2_hash) {
  359,046 ( 0.20%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  267,983 ( 0.15%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
   93,214 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  394,288 ( 0.22%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
1,518,659 ( 0.85%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  217,804 ( 0.12%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  174,240 ( 0.10%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  326,503 ( 0.18%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  108,829 ( 0.06%)          *self.ctrl(index) = ctrl;
  108,838 ( 0.06%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   24,992 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   14,494 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  124,139 ( 0.07%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      408 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
    7,891 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    3,575 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    7,152 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
    7,150 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   15,148 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    3,575 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,012 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
   58,901 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    3,575 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,653 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      236 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      381 ( 0.00%)          self.items = 0;
      236 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   14,784 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   59,136 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   73,780 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   59,136 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      384 ( 0.00%)      fn clone(&self) -> Self {
       50 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      432 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        8 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   80,006 ( 0.04%)      fn drop(&mut self) {
   57,186 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   89,536 ( 0.05%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      680 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
      850 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   12,760 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    1,302 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    2,320 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   15,440 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      193 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      144 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      342 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      159 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,569 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    3,134 ( 0.00%)          if let Some(b) = self.iter.next() {
   11,995 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    5,138 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      362 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    1,060 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      162 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       78 ( 0.00%)      fn next(&mut self) -> Option<T> {
       54 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      165 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
       32 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        4 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
       32 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

  825,804 ( 0.46%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir              

-- line 24 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
     .               fn tag(&self) -> &'static str {
     .                   "Equate"
     .               }
     .           
     .               fn tcx(&self) -> TyCtxt<'tcx> {
 3,631 ( 0.00%)          self.fields.tcx()
 3,593 ( 0.00%)      }
     .           
     .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    52 ( 0.00%)          self.fields.param_env
     .               }
     .           
     .               fn a_is_expected(&self) -> bool {
 5,980 ( 0.00%)          self.a_is_expected
     .               }
     .           
   130 ( 0.00%)      fn relate_item_substs(
     .                   &mut self,
     .                   _item_def_id: DefId,
     .                   a_subst: SubstsRef<'tcx>,
     .                   b_subst: SubstsRef<'tcx>,
     .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
     .                   // N.B., once we are equating types, we don't care about
     .                   // variance, so don't try to lookup the variance here. This
     .                   // also avoids some cycles (e.g., #41849) since looking up
     .                   // variance requires computing types which can require
     .                   // performing trait matching (which then performs equality
     .                   // unification).
     .           
    26 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
   156 ( 0.00%)      }
     .           
     .               fn relate_with_variance<T: Relate<'tcx>>(
     .                   &mut self,
     .                   _: ty::Variance,
     .                   _info: ty::VarianceDiagInfo<'tcx>,
     .                   a: T,
     .                   b: T,
     .               ) -> RelateResult<'tcx, T> {
     .                   self.relate(a, b)
     .               }
     .           
52,434 ( 0.03%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
     .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 5,826 ( 0.00%)          if a == b {
     .                       return Ok(a);
     .                   }
     .           
 8,644 ( 0.00%)          let infcx = self.fields.infcx;
 8,644 ( 0.00%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 8,644 ( 0.00%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
     .           
     .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
     .           
36,895 ( 0.02%)          match (a.kind(), b.kind()) {
     .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
     .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
     .                       }
     .           
   862 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
 3,448 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
     .                       }
     .           
    77 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
   385 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
     .                       }
     .           
     .                       _ => {
23,681 ( 0.01%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
     .                       }
     .                   }
     .           
     .                   Ok(a)
52,434 ( 0.03%)      }
     .           
   423 ( 0.00%)      fn regions(
     .                   &mut self,
     .                   a: ty::Region<'tcx>,
     .                   b: ty::Region<'tcx>,
     .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
     .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
   141 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
   282 ( 0.00%)          self.fields
     .                       .infcx
     .                       .inner
     .                       .borrow_mut()
     .                       .unwrap_region_constraints()
   282 ( 0.00%)              .make_eqregion(origin, a, b);
    94 ( 0.00%)          Ok(a)
   423 ( 0.00%)      }
     .           
     .               fn consts(
     .                   &mut self,
     .                   a: &'tcx ty::Const<'tcx>,
     .                   b: &'tcx ty::Const<'tcx>,
     .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
   130 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
     .               }
     .           
     .               fn binders<T>(
     .                   &mut self,
     .                   a: ty::Binder<'tcx, T>,
     .                   b: ty::Binder<'tcx, T>,
     .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
     .               where
-- line 131 ----------------------------------------

15,485 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           };
     .           use rustc_ast_pretty::pprust::token_to_string;
     .           use rustc_data_structures::fx::FxHashMap;
     .           use rustc_errors::PResult;
     .           use rustc_span::Span;
     .           
     .           impl<'a> StringReader<'a> {
     .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    95 ( 0.00%)          let mut tt_reader = TokenTreesReader {
     .                       string_reader: self,
     5 ( 0.00%)              token: Token::dummy(),
     .                       open_braces: Vec::new(),
     .                       unmatched_braces: Vec::new(),
     .                       matching_delim_spans: Vec::new(),
     .                       last_unclosed_found_span: None,
     .                       last_delim_empty_block_spans: FxHashMap::default(),
     .                       matching_block_spans: Vec::new(),
     .                   };
     5 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
    30 ( 0.00%)          (res, tt_reader.unmatched_braces)
     .               }
     .           }
     .           
     .           struct TokenTreesReader<'a> {
     .               string_reader: StringReader<'a>,
     .               token: Token,
     .               /// Stack of open delimiters and their spans. Used for error message.
     .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
     .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
     .               /// Collect the spans of braces (Open, Close). Used only
     .               /// for detecting if blocks are empty and only braces.
     .               matching_block_spans: Vec<(Span, Span)>,
     .           }
     .           
     .           impl<'a> TokenTreesReader<'a> {
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
    40 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
     .                   let mut buf = TokenStreamBuilder::default();
     .           
     .                   self.bump();
   864 ( 0.00%)          while self.token != token::Eof {
 3,416 ( 0.00%)              buf.push(self.parse_token_tree()?);
     .                   }
     .           
     .                   Ok(buf.into_token_stream())
    45 ( 0.00%)      }
     .           
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
     .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
     .                   let mut buf = TokenStreamBuilder::default();
     .                   loop {
 5,958 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
     .                           return buf.into_token_stream();
     .                       }
     .           
12,795 ( 0.01%)              match self.parse_token_tree() {
23,031 ( 0.01%)                  Ok(tree) => buf.push(tree),
     .                           Err(mut e) => {
     .                               e.emit();
     .                               return buf.into_token_stream();
     .                           }
     .                       }
     .                   }
     .               }
     .           
26,874 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 5,972 ( 0.00%)          let sm = self.string_reader.sess.source_map();
     .           
25,194 ( 0.01%)          match self.token.kind {
     .                       token::Eof => {
     .                           let msg = "this file contains an unclosed delimiter";
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
     .                           for &(_, sp) in &self.open_braces {
     .                               err.span_label(sp, "unclosed delimiter");
     .                               self.unmatched_braces.push(UnmatchedBrace {
     .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
     .                                   err.span_label(
     .                                       *close_sp,
     .                                       "...as it matches this but it has different indentation",
     .                                   );
     .                               }
     .                           }
     .                           Err(err)
     .                       }
   420 ( 0.00%)              token::OpenDelim(delim) => {
     .                           // The span for beginning of the delimited section
   420 ( 0.00%)                  let pre_span = self.token.span;
     .           
     .                           // Parse the open delimiter.
 2,940 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
     .                           self.bump();
     .           
     .                           // Parse the token trees within the delimiters.
     .                           // We stop at any delimiter so we can try to recover if the user
     .                           // uses an incorrect delimiter.
   420 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
     .           
     .                           // Expand to cover the entire delimited token tree
 2,100 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
     .           
   840 ( 0.00%)                  match self.token.kind {
     .                               // Correct delimiter.
   840 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
     .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
   840 ( 0.00%)                          let close_brace_span = self.token.span;
     .           
 1,260 ( 0.00%)                          if tts.is_empty() {
   222 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
   296 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
     .                                           // Only track if the block is in the form of `{}`, otherwise it is
     .                                           // likely that it was written on purpose.
     .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
     .                                       }
     .                                   }
     .           
     .                                   //only add braces
 1,680 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
     .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
     .                                   }
     .           
   420 ( 0.00%)                          if self.open_braces.is_empty() {
     .                                       // Clear up these spans to avoid suggesting them as we've found
     .                                       // properly matched delimiters so far for an entire block.
     .                                       self.matching_delim_spans.clear();
     .                                   } else {
     .                                       self.matching_delim_spans.push((
     .                                           open_brace,
     .                                           open_brace_span,
     .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
     .                               token::Eof => {
     .                                   // Silently recover, the EOF token will be seen again
     .                                   // and an error emitted then. Thus we don't pop from
     .                                   // self.open_braces here.
     .                               }
     .                               _ => {}
     .                           }
     .           
 2,940 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
     .                       }
     .                       token::CloseDelim(delim) => {
     .                           // An unexpected closing delimiter (i.e., there is no
     .                           // matching opening delimiter).
     .                           let token_str = token_to_string(&self.token);
     .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
     .                                   err.span_label(parent.1, "...matches this closing brace");
     .                               }
     .                           }
     .           
     .                           err.span_label(self.token.span, "unexpected closing delimiter");
     .                           Err(err)
     .                       }
     .                       _ => {
12,830 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
     .                           let mut spacing = self.bump();
 5,132 ( 0.00%)                  if !self.token.is_op() {
     .                               spacing = Alone;
     .                           }
15,396 ( 0.01%)                  Ok((tt, spacing))
     .                       }
     .                   }
23,888 ( 0.01%)      }
     .           
     .               fn bump(&mut self) -> Spacing {
28,584 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
14,975 ( 0.01%)          self.token = token;
     .                   spacing
     .               }
     .           }
     .           
   420 ( 0.00%)  #[derive(Default)]
     .           struct TokenStreamBuilder {
     .               buf: Vec<TreeAndSpacing>,
     .           }
     .           
     .           impl TokenStreamBuilder {
38,818 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
17,857 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 1,180 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 2,494 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
     .                               self.buf.pop();
 2,172 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
     .                               return;
     .                           }
     .                       }
     .                   }
14,025 ( 0.01%)          self.buf.push((tree, joint))
23,888 ( 0.01%)      }
     .           
     .               fn into_token_stream(self) -> TokenStream {
 4,245 ( 0.00%)          TokenStream::new(self.buf)
     .               }
     .           }

10,407 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 38 ----------------------------------------
     .           #[derive(Debug)]
     .           pub struct Token {
     .               pub kind: TokenKind,
     .               pub len: usize,
     .           }
     .           
     .           impl Token {
     .               fn new(kind: TokenKind, len: usize) -> Token {
45,495 ( 0.03%)          Token { kind, len }
     .               }
     .           }
     .           
     .           /// Enum representing common lexeme types.
     .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
12,450 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
     .           pub enum TokenKind {
     .               // Multi-char tokens:
     .               /// "// comment"
     .               LineComment { doc_style: Option<DocStyle> },
     .               /// `/* block comment */`
     .               ///
     .               /// Block comments can be recursive, so the sequence like `/* /* */`
     .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
     .               /// Literal starts with "0x".
     .               Hexadecimal,
     .               /// Literal doesn't contain a prefix.
     .               Decimal,
     .           }
     .           
     .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
     .           /// but shebang isn't a part of rust syntax.
    35 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
     .               // Shebang must start with `#!` literally, without any preceding whitespace.
     .               // For simplicity we consider any line starting with `#!` a shebang,
     .               // regardless of restrictions put on shebangs by specific platforms.
     .               if let Some(input_tail) = input.strip_prefix("#!") {
     .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
     .                   // then it may be valid Rust code, so consider it Rust code.
     .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
     .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
     .                       )
     .                   });
     .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
     .                       // No other choice than to consider this a shebang.
     .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
     .                   }
     .               }
     .               None
    40 ( 0.00%)  }
     .           
     .           /// Parses the first token from the provided input string.
15,165 ( 0.01%)  pub fn first_token(input: &str) -> Token {
     .               debug_assert!(!input.is_empty());
 5,055 ( 0.00%)      Cursor::new(input).advance_token()
20,220 ( 0.01%)  }
     .           
     .           /// Creates an iterator that produces tokens from the input string.
     .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
     .               let mut cursor = Cursor::new(input);
     .               std::iter::from_fn(move || {
     .                   if cursor.is_eof() {
     .                       None
     .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
     .           /// for definitions of these classes.
     .           pub fn is_whitespace(c: char) -> bool {
     .               // This is Pattern_White_Space.
     .               //
     .               // Note that this set is stable (ie, it doesn't change with different
     .               // Unicode versions), so it's ok to just hard-code the values.
     .           
12,978 ( 0.01%)      matches!(
     .                   c,
     .                   // Usual ASCII suspects
     .                   '\u{0009}'   // \t
     .                   | '\u{000A}' // \n
     .                   | '\u{000B}' // vertical tab
     .                   | '\u{000C}' // form feed
     .                   | '\u{000D}' // \r
     .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
     .               )
     .           }
     .           
     .           /// True if `c` is valid as a first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_start(c: char) -> bool {
     .               // This is XID_Start OR '_' (which formally is not a XID_Start).
   494 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
     .           }
     .           
     .           /// True if `c` is valid as a non-first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_continue(c: char) -> bool {
     .               unicode_xid::UnicodeXID::is_xid_continue(c)
     .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
     .                   is_id_start(start) && chars.all(is_id_continue)
     .               } else {
     .                   false
     .               }
     .           }
     .           
     .           impl Cursor<'_> {
     .               /// Parses a token from the input string.
40,440 ( 0.02%)      fn advance_token(&mut self) -> Token {
     .                   let first_char = self.bump().unwrap();
17,750 ( 0.01%)          let token_kind = match first_char {
     .                       // Slash, comment or block comment.
   588 ( 0.00%)              '/' => match self.first() {
     .                           '/' => self.line_comment(),
     .                           '*' => self.block_comment(),
    28 ( 0.00%)                  _ => Slash,
     .                       },
     .           
     .                       // Whitespace sequence.
     .                       c if is_whitespace(c) => self.whitespace(),
     .           
     .                       // Raw identifier, raw string literal or identifier.
   140 ( 0.00%)              'r' => match (self.first(), self.second()) {
     .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
     .                           ('#', _) | ('"', _) => {
     .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
     .                               let suffix_start = self.len_consumed();
     .                               if err.is_none() {
     .                                   self.eat_literal_suffix();
     .                               }
     .                               let kind = RawStr { n_hashes, err };
     .                               Literal { kind, suffix_start }
     .                           }
     .                           _ => self.ident_or_unknown_prefix(),
     .                       },
     .           
     .                       // Byte literal, byte string literal, raw byte string literal or identifier.
   135 ( 0.00%)              'b' => match (self.first(), self.second()) {
     .                           ('\'', _) => {
     .                               self.bump();
     .                               let terminated = self.single_quoted_string();
     .                               let suffix_start = self.len_consumed();
     .                               if terminated {
     .                                   self.eat_literal_suffix();
     .                               }
     .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
     .                           _ => self.ident_or_unknown_prefix(),
     .                       },
     .           
     .                       // Identifier (this should be checked after other variant that can
     .                       // start as identifier).
     .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
     .           
     .                       // Numeric literal.
 6,102 ( 0.00%)              c @ '0'..='9' => {
     .                           let literal_kind = self.number(c);
     .                           let suffix_start = self.len_consumed();
     .                           self.eat_literal_suffix();
   740 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
     .                       }
     .           
     .                       // One-symbol tokens.
   296 ( 0.00%)              ';' => Semi,
   254 ( 0.00%)              ',' => Comma,
   182 ( 0.00%)              '.' => Dot,
   552 ( 0.00%)              '(' => OpenParen,
   552 ( 0.00%)              ')' => CloseParen,
   200 ( 0.00%)              '{' => OpenBrace,
   200 ( 0.00%)              '}' => CloseBrace,
    88 ( 0.00%)              '[' => OpenBracket,
    88 ( 0.00%)              ']' => CloseBracket,
     .                       '@' => At,
    82 ( 0.00%)              '#' => Pound,
     .                       '~' => Tilde,
     .                       '?' => Question,
   478 ( 0.00%)              ':' => Colon,
     .                       '$' => Dollar,
   230 ( 0.00%)              '=' => Eq,
   100 ( 0.00%)              '!' => Bang,
    68 ( 0.00%)              '<' => Lt,
    82 ( 0.00%)              '>' => Gt,
   140 ( 0.00%)              '-' => Minus,
    46 ( 0.00%)              '&' => And,
    20 ( 0.00%)              '|' => Or,
    38 ( 0.00%)              '+' => Plus,
    54 ( 0.00%)              '*' => Star,
     4 ( 0.00%)              '^' => Caret,
     .                       '%' => Percent,
     .           
     .                       // Lifetime or character literal.
     .                       '\'' => self.lifetime_or_char(),
     .           
     .                       // String literal.
     .                       '"' => {
    27 ( 0.00%)                  let terminated = self.double_quoted_string();
     .                           let suffix_start = self.len_consumed();
    18 ( 0.00%)                  if terminated {
     .                               self.eat_literal_suffix();
     .                           }
     .                           let kind = Str { terminated };
    18 ( 0.00%)                  Literal { kind, suffix_start }
     .                       }
     .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
     .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
     .                       _ => Unknown,
     .                   };
     .                   Token::new(token_kind, self.len_consumed())
45,495 ( 0.03%)      }
     .           
     .               fn line_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '/');
     .                   self.bump();
     .           
   356 ( 0.00%)          let doc_style = match self.first() {
     .                       // `//!` is an inner line doc comment.
     .                       '!' => Some(DocStyle::Inner),
     .                       // `////` (more than 3 slashes) is not considered a doc comment.
   264 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
     .                       _ => None,
     .                   };
     .           
 4,915 ( 0.00%)          self.eat_while(|c| c != '\n');
   399 ( 0.00%)          LineComment { doc_style }
     .               }
     .           
     .               fn block_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '*');
     .                   self.bump();
     .           
     .                   let doc_style = match self.first() {
     .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
     .                   }
     .           
     .                   BlockComment { doc_style, terminated: depth == 0 }
     .               }
     .           
     .               fn whitespace(&mut self) -> TokenKind {
     .                   debug_assert!(is_whitespace(self.prev()));
     .                   self.eat_while(is_whitespace);
 1,629 ( 0.00%)          Whitespace
     .               }
     .           
     .               fn raw_ident(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
     .                   // Eat "#" symbol.
     .                   self.bump();
     .                   // Eat the identifier part of RawIdent.
     .                   self.eat_identifier();
     .                   RawIdent
     .               }
     .           
 6,225 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   debug_assert!(is_id_start(self.prev()));
     .                   // Start is already eaten, eat the rest of identifier.
 2,490 ( 0.00%)          self.eat_while(is_id_continue);
     .                   // Known prefixes must have been handled earlier. So if
     .                   // we see a prefix here, it is definitely an unknown prefix.
 2,490 ( 0.00%)          match self.first() {
     .                       '#' | '"' | '\'' => UnknownPrefix,
 1,245 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
 1,245 ( 0.00%)              _ => Ident,
     .                   }
 4,980 ( 0.00%)      }
     .           
     .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   // Start is already eaten, eat the rest of identifier.
     .                   self.eat_while(|c| {
     .                       unicode_xid::UnicodeXID::is_xid_continue(c)
     .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
     .                           || c == '\u{200d}'
     .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
     .                       '#' | '"' | '\'' => UnknownPrefix,
     .                       _ => InvalidIdent,
     .                   }
     .               }
     .           
     .               fn number(&mut self, first_digit: char) -> LiteralKind {
     .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
     .                   let mut base = Base::Decimal;
   296 ( 0.00%)          if first_digit == '0' {
     .                       // Attempt to parse encoding base.
   259 ( 0.00%)              let has_digits = match self.first() {
     .                           'b' => {
     .                               base = Base::Binary;
     .                               self.bump();
     .                               self.eat_decimal_digits()
     .                           }
     .                           'o' => {
     .                               base = Base::Octal;
     .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
     .                               self.eat_decimal_digits()
     .                           }
     .                           'x' => {
     .                               base = Base::Hexadecimal;
     .                               self.bump();
     .                               self.eat_hexadecimal_digits()
     .                           }
     .                           // Not a base prefix.
   150 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
     .                               self.eat_decimal_digits();
     .                               true
     .                           }
     .                           // Just a 0.
     .                           _ => return Int { base, empty_int: false },
     .                       };
     .                       // Base prefix was provided, but there were no digits
     .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
     .                       if !has_digits {
     .                           return Int { base, empty_int: true };
     .                       }
     .                   } else {
     .                       // No base prefix, parse number in the usual way.
     .                       self.eat_decimal_digits();
     .                   };
     .           
   464 ( 0.00%)          match self.first() {
     .                       // Don't be greedy if this is actually an
     .                       // integer literal followed by field/method access or a range pattern
     .                       // (`0..2` and `12.foo()`)
   200 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
     .                           // might have stuff after the ., and if it does, it needs to start
     .                           // with a number
     .                           self.bump();
     .                           let mut empty_exponent = false;
    90 ( 0.00%)                  if self.first().is_digit(10) {
   150 ( 0.00%)                      self.eat_decimal_digits();
   225 ( 0.00%)                      match self.first() {
     .                                   'e' | 'E' => {
     .                                       self.bump();
     .                                       empty_exponent = !self.eat_float_exponent();
     .                                   }
     .                                   _ => (),
     .                               }
     .                           }
     .                           Float { base, empty_exponent }
-- line 582 ----------------------------------------
-- line 677 ----------------------------------------
     .                   false
     .               }
     .           
     .               /// Eats double-quoted string and returns true
     .               /// if string is terminated.
     .               fn double_quoted_string(&mut self) -> bool {
     .                   debug_assert!(self.prev() == '"');
     .                   while let Some(c) = self.bump() {
   940 ( 0.00%)              match c {
     .                           '"' => {
     .                               return true;
     .                           }
     .                           '\\' if self.first() == '\\' || self.first() == '"' => {
     .                               // Bump again to skip escaped character.
     .                               self.bump();
     .                           }
     .                           _ => (),
     .                       }
     .                   }
     .                   // End of file reached.
     .                   false
     9 ( 0.00%)      }
     .           
     .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
     .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
     .                   // Wrap the actual function to handle the error with too many hashes.
     .                   // This way, it eats the whole raw string.
     .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
     .                   // Only up to 65535 `#`s are allowed in raw strings
     .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
     .                           max_hashes = n_end_hashes;
     .                       }
     .                   }
     .               }
     .           
     .               fn eat_decimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
   770 ( 0.00%)              match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
 1,155 ( 0.00%)                  '0'..='9' => {
     .                               has_digits = true;
     .                               self.bump();
     .                           }
     .                           _ => break,
     .                       }
     .                   }
     .                   has_digits
   434 ( 0.00%)      }
     .           
     .               fn eat_hexadecimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
    30 ( 0.00%)              match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
    69 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
     .                               has_digits = true;
     .                               self.bump();
     .                           }
     .                           _ => break,
     .                       }
     .                   }
     .                   has_digits
     6 ( 0.00%)      }
     .           
     .               /// Eats the float exponent. Returns true if at least one digit was met,
     .               /// and returns false otherwise.
     .               fn eat_float_exponent(&mut self) -> bool {
     .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
     2 ( 0.00%)          if self.first() == '-' || self.first() == '+' {
     .                       self.bump();
     .                   }
     1 ( 0.00%)          self.eat_decimal_digits()
     .               }
     .           
     .               // Eats the suffix of the literal, e.g. "_u8".
     .               fn eat_literal_suffix(&mut self) {
   314 ( 0.00%)          self.eat_identifier();
     .               }
     .           
     .               // Eats the identifier.
   471 ( 0.00%)      fn eat_identifier(&mut self) {
     .                   if !is_id_start(self.first()) {
     .                       return;
     .                   }
     .                   self.bump();
     .           
    25 ( 0.00%)          self.eat_while(is_id_continue);
   608 ( 0.00%)      }
     .           }

68,813 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
 74,229 ( 0.04%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
    749 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 18,435 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
167,584 ( 0.09%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 36,932 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 36,932 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 42,925 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
  9,207 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
    895 ( 0.00%)          self.hash = hash.hash;
    749 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     47 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      5 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
 98,693 ( 0.06%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

    111 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           
      .           /// An entity in the Rust type system, which can be one of
      .           /// several kinds (types, lifetimes, and consts).
      .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
      .           /// with the lowest 2 bits being reserved for a tag to
      .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub struct GenericArg<'tcx> {
 14,021 ( 0.01%)      ptr: NonZeroUsize,
 31,638 ( 0.02%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
      .           }
      .           
      .           const TAG_MASK: usize = 0b11;
      .           const TYPE_TAG: usize = 0b00;
      .           const REGION_TAG: usize = 0b01;
      .           const CONST_TAG: usize = 0b10;
      .           
 19,864 ( 0.01%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
      .           pub enum GenericArgKind<'tcx> {
      .               Lifetime(ty::Region<'tcx>),
      .               Type(Ty<'tcx>),
      .               Const(&'tcx ty::Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> GenericArgKind<'tcx> {
  4,982 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
  4,982 ( 0.00%)          let (tag, ptr) = match self {
      .                       GenericArgKind::Lifetime(lt) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
      .                           (REGION_TAG, lt as *const _ as usize)
      .                       }
      .                       GenericArgKind::Type(ty) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
      .                       }
      .                       GenericArgKind::Const(ct) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
      .                           (CONST_TAG, ct as *const _ as usize)
      .                       }
      .                   };
      .           
  7,732 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
  4,982 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.unpack() {
      .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
      .                       GenericArgKind::Type(ty) => ty.fmt(f),
      .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
      .           
      .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
      .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
      .                   Some(self.cmp(&other))
      .               }
      .           }
      .           
      .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  2,223 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Lifetime(r).pack()
  2,223 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 20,945 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Type(ty).pack()
 20,945 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
    293 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Const(c).pack()
    293 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               #[inline]
      .               pub fn unpack(self) -> GenericArgKind<'tcx> {
      .                   let ptr = self.ptr.get();
      .                   unsafe {
349,707 ( 0.20%)              match ptr & TAG_MASK {
  2,223 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
 94,628 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
    184 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
      .                           _ => intrinsics::unreachable(),
      .                       }
      .                   }
      .               }
      .           
      .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
      .               /// This is true in cases where `Substs` is used in places where the kinds are known
      .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
      .               pub fn expect_ty(self) -> Ty<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Type(ty) => ty,
      .                       _ => bug!("expected a type, but found another kind"),
      .                   }
    324 ( 0.00%)      }
      .           
      .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
      .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Const(c) => c,
      .                       _ => bug!("expected a const, but found another kind"),
      .                   }
      .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
      .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
      .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
     36 ( 0.00%)          self.unpack().encode(e)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
 24,910 ( 0.01%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
 24,910 ( 0.01%)          GenericArgKind::decode(d).pack()
      .               }
      .           }
      .           
      .           /// A substitution mapping generic parameters to new values.
      .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
      .           
      .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
      .           
-- line 192 ----------------------------------------
-- line 211 ----------------------------------------
      .               /// Inline const substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the inferred type;
      .               /// see `ty::InlineConstSubsts` struct for more comments.
      .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
      .                   InlineConstSubsts { substs: self }
      .               }
      .           
      .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
  1,160 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    100 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
  1,044 ( 0.00%)      }
      .           
      .               /// Creates an `InternalSubsts` for generic parameter definitions,
      .               /// by calling closures to obtain each kind.
      .               /// The closures get to observe the `InternalSubsts` as they're
      .               /// being built, which can be used to correctly
      .               /// substitute defaults of generic parameters.
 33,684 ( 0.02%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   let defs = tcx.generics_of(def_id);
      .                   let count = defs.count();
      .                   let mut substs = SmallVec::with_capacity(count);
 11,691 ( 0.01%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  7,476 ( 0.00%)          tcx.intern_substs(&substs)
 33,822 ( 0.02%)      }
      .           
      .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   Self::for_item(tcx, def_id, |param, substs| {
      .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
      .                   })
      .               }
      .           
 38,999 ( 0.02%)      pub fn fill_item<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   tcx: TyCtxt<'tcx>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
 15,663 ( 0.01%)          if let Some(def_id) = defs.parent {
      .                       let parent_defs = tcx.generics_of(def_id);
    105 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
      .                   }
      .                   Self::fill_single(substs, defs, mk_kind)
 31,160 ( 0.02%)      }
      .           
      .               pub fn fill_single<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   substs.reserve(defs.params.len());
      .                   for param in &defs.params {
      .                       let kind = mk_kind(param, substs);
 19,235 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
      .                       substs.push(kind);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
      .                   self.iter()
      .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
-- line 281 ----------------------------------------
-- line 302 ----------------------------------------
      .                   self.iter().filter_map(|k| match k.unpack() {
      .                       GenericArgKind::Lifetime(_) => None,
      .                       generic => Some(generic),
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  5,235 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
      .                       ty
      .                   } else {
      .                       bug!("expected type for param #{} in {:?}", i, self);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
      .               /// impl<U> X<U> for U { fn f<V>() {} }
      .               /// ```
      .               ///
      .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
      .               /// * If `source_ancestor` is the def_id of the trait.
      .               /// * If `target_substs` is `[U]`, the substs for the impl.
      .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
      .               ///   are needed for it to match the trait.
    308 ( 0.00%)      pub fn rebase_onto(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   source_ancestor: DefId,
      .                   target_substs: SubstsRef<'tcx>,
      .               ) -> SubstsRef<'tcx> {
      .                   let defs = tcx.generics_of(source_ancestor);
     88 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    352 ( 0.00%)      }
      .           
      .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
      .                   tcx.mk_substs(self.iter().take(generics.count()))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    777 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
      .                   // typically hit in 90--99.99% of cases. When folding doesn't change
      .                   // the substs, it's faster to reuse the existing substs rather than
      .                   // calling `intern_substs`.
 52,968 ( 0.03%)          match self.len() {
      .                       1 => {
  1,710 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  5,704 ( 0.00%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
      .                       }
      .                       2 => {
  8,139 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
 23,425 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
 28,052 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
      .                               Ok(self)
      .                           } else {
 18,624 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
      .                           }
      .                       }
      .                       0 => Ok(self),
      .                       _ => {
      .                           let params: SmallVec<[_; 8]> =
     62 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      8 ( 0.00%)                  if params[..] == self[..] {
      .                               Ok(self)
      .                           } else {
     14 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
      .                           }
      .                       }
      .                   }
  1,059 ( 0.00%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  6,954 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Public trait `Subst`
      .           //
      .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
      .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
      .               fn subst_spanned(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   substs: &[GenericArg<'tcx>],
      .                   span: Option<Span>,
      .               ) -> T {
 36,646 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
      .                   self.fold_with(&mut folder)
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The actual substitution engine itself is a type folder.
      .           
      .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
      .               span: Option<Span>,
      .           
      .               /// Number of region binders we have passed through while doing the substitution
      .               binders_passed: u32,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  4,141 ( 0.00%)          self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
  2,880 ( 0.00%)          self.binders_passed += 1;
    258 ( 0.00%)          let t = t.super_fold_with(self);
  2,880 ( 0.00%)          self.binders_passed -= 1;
      .                   t
      .               }
      .           
 13,482 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   // Note: This routine only handles regions that are bound on
      .                   // type declarations and other outer declarations, not those
      .                   // bound in *fn types*. Region substitution of the bound
      .                   // regions that appear in a function signature is done using
      .                   // the specialized routine `ty::replace_late_regions()`.
  4,494 ( 0.00%)          match *r {
  4,432 ( 0.00%)              ty::ReEarlyBound(data) => {
  4,432 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
      .                           match rk {
  2,216 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
      .                               _ => {
      .                                   let span = self.span.unwrap_or(DUMMY_SP);
      .                                   let msg = format!(
      .                                       "Region parameter out of range \
      .                                        when substituting in region {} (index={})",
      .                                       data.name, data.index
      .                                   );
      .                                   span_bug!(span, "{}", msg);
      .                               }
      .                           }
      .                       }
      .                       _ => r,
      .                   }
 15,729 ( 0.01%)      }
      .           
 45,456 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 15,152 ( 0.01%)          if !t.needs_subst() {
      .                       return t;
      .                   }
      .           
 13,566 ( 0.01%)          match *t.kind() {
 18,605 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
 18,372 ( 0.01%)              _ => t.super_fold_with(self),
      .                   }
 60,450 ( 0.03%)      }
      .           
  2,646 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
  1,676 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
      .                       self.const_for_param(p, c)
      .                   } else {
  1,746 ( 0.00%)              c.super_fold_with(self)
      .                   }
  1,472 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
      .                   c.super_fold_with(self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
      .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   // Look up the type in the substitutions. It really should be in there.
  7,442 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ty = match opt_ty {
      .                       Some(GenericArgKind::Type(ty)) => ty,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
      .               }
      .           
      .               fn const_for_param(
      .                   &self,
      .                   p: ParamConst,
      .                   source_ct: &'tcx ty::Const<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   // Look up the const in the substitutions. It really should be in there.
    368 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ct = match opt_ct {
      .                       Some(GenericArgKind::Const(ct)) => ct,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
      .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
      .                   debug!(
      .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
      .                       val,
      .                       self.binders_passed,
      .                       val.has_escaping_bound_vars()
      .                   );
      .           
 14,479 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
      .                       return val;
      .                   }
      .           
      .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
      .                   debug!("shift_vars: shifted result = {:?}", result);
      .           
      .                   result
      .               }
      .           
      .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
  4,438 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
      .                       return region;
      .                   }
      .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
      .               }
      .           }
      .           
      .           /// Stores the user-given substs to reach some fully qualified path
      .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
-- line 672 ----------------------------------------
-- line 673 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSubsts<'tcx> {
      .               /// The substitutions for the item as given by the user.
      .               pub substs: SubstsRef<'tcx>,
      .           
      .               /// The self type, in the case of a `<T>::Item` path (when applied
      .               /// to an inherent impl). See `UserSelfTy` below.
    241 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
      .           }
      .           
      .           /// Specifies the user-given self type. In the case of a path that
      .           /// refers to a member in an inherent impl, this self type is
      .           /// sometimes needed to constrain the type parameters on the impl. For
      .           /// example, in this code:
      .           ///
      .           /// ```
-- line 689 ----------------------------------------

146,619 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
  2,897 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
    532 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
  1,289 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
  3,662 ( 0.00%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn min(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
    148 ( 0.00%)          min_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Restrict a value to a certain interval.
      .               ///
      .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
      .               /// less than `min`. Otherwise this returns `self`.
      .               ///
      .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
  5,810 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 23,986 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 49,272 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
     10 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 14,087 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 26,727 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    737 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
  4,277 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
601,435 ( 0.34%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
  1,010 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
 61,376 ( 0.03%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
     40 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
      .               // & pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
    201 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 31,919 ( 0.02%)              PartialEq::eq(*self, *other)
  2,761 ( 0.00%)          }
      .                   #[inline]
      .                   fn ne(&self, other: &&B) -> bool {
     12 ( 0.00%)              PartialEq::ne(*self, *other)
     90 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
     69 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

103,765 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/cxa_finalize.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
47,545,653 (26.58%)  events annotated

