--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tracing --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --cfg feature="attributes" --cfg feature="default" --cfg feature="std" --cfg feature="tracing-attributes" -C metadata=720329352f7827ce -C extra-filename=-720329352f7827ce --out-dir /usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps --extern cfg_if=/usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps/libcfg_if-19e7cc0b6f708960.rmeta --extern pin_project_lite=/usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps/libpin_project_lite-5e3822a68863ba80.rmeta --extern tracing_attributes=/usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps/libtracing_attributes-c4bc18c42379dd39.so --extern tracing_core=/usr/home/liquid/tmp/.tmpSBTpg4/target/release/deps/libtracing_core-fa36fed826cc0b29.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tracing-0.1.29-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,909,699,855 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
67,931,741 ( 3.56%)  ./malloc/malloc.c:_int_free
62,803,064 ( 3.29%)  ./malloc/malloc.c:_int_malloc
51,088,223 ( 2.68%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
42,443,319 ( 2.22%)  ./malloc/malloc.c:malloc
29,171,269 ( 1.53%)  ???:llvm::InstCombinerImpl::run()
25,640,079 ( 1.34%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
24,111,316 ( 1.26%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
22,810,930 ( 1.19%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
21,983,636 ( 1.15%)  ./malloc/malloc.c:free
19,678,496 ( 1.03%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
16,844,832 ( 0.88%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
16,381,769 ( 0.86%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
14,478,404 ( 0.76%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
13,842,375 ( 0.72%)  ./elf/dl-lookup.c:do_lookup_x
12,983,591 ( 0.68%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
12,573,496 ( 0.66%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
11,862,604 ( 0.62%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
11,257,101 ( 0.59%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
10,623,565 ( 0.56%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
10,466,785 ( 0.55%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
10,283,344 ( 0.54%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 9,380,115 ( 0.49%)  ./malloc/malloc.c:malloc_consolidate
 8,990,487 ( 0.47%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
 8,805,490 ( 0.46%)  ???:llvm::ValueHandleBase::AddToUseList()
 8,478,867 ( 0.44%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
 8,292,687 ( 0.43%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
 7,749,736 ( 0.41%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 7,584,901 ( 0.40%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
 7,510,721 ( 0.39%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 7,373,256 ( 0.39%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
 7,148,231 ( 0.37%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 7,137,696 ( 0.37%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 7,048,474 ( 0.37%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 6,975,717 ( 0.37%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
 6,945,137 ( 0.36%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 6,830,182 ( 0.36%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
 6,783,391 ( 0.36%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
 6,547,321 ( 0.34%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
 6,417,246 ( 0.34%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 6,391,760 ( 0.33%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
 6,105,920 ( 0.32%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 5,996,687 ( 0.31%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
 5,638,337 ( 0.30%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
 5,445,067 ( 0.29%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
 5,389,732 ( 0.28%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
 5,166,970 ( 0.27%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
 5,079,431 ( 0.27%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 5,049,843 ( 0.26%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
 4,931,570 ( 0.26%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 4,920,717 ( 0.26%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
 4,913,709 ( 0.26%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
 4,833,265 ( 0.25%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
 4,695,785 ( 0.25%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 4,683,074 ( 0.25%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
 4,637,000 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
 4,589,385 ( 0.24%)  ???:llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const
 4,546,208 ( 0.24%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
 4,498,159 ( 0.24%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
 4,428,908 ( 0.23%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 4,409,378 ( 0.23%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
 4,387,250 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 4,284,754 ( 0.22%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
 4,283,781 ( 0.22%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
 4,270,679 ( 0.22%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 4,268,358 ( 0.22%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
 4,182,366 ( 0.22%)  ???:llvm_regexec
 4,090,465 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 4,056,377 ( 0.21%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 4,050,833 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 3,940,190 ( 0.21%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
 3,930,542 ( 0.21%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 3,879,427 ( 0.20%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
 3,758,597 ( 0.20%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
 3,750,907 ( 0.20%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
 3,730,193 ( 0.20%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
 3,653,155 ( 0.19%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
 3,616,080 ( 0.19%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
 3,600,909 ( 0.19%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
 3,484,406 ( 0.18%)  ???:???
 3,447,198 ( 0.18%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
 3,403,321 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 3,388,240 ( 0.18%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
 3,368,847 ( 0.18%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
 3,357,065 ( 0.18%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
 3,334,249 ( 0.17%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
 3,307,128 ( 0.17%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 3,278,513 ( 0.17%)  ???:llvm::InstCombinerImpl::visitBitCast(llvm::BitCastInst&)
 3,244,173 ( 0.17%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
 3,234,315 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 3,164,133 ( 0.17%)  ???:updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph&, llvm::LazyCallGraph::SCC&, llvm::LazyCallGraph::Node&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::CGSCCUpdateResult&, llvm::AnalysisManager<llvm::Function>&, bool) [clone .llvm.5426518467876156712]
 3,111,121 ( 0.16%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
 3,061,907 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
 3,046,577 ( 0.16%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
 3,035,138 ( 0.16%)  ./malloc/malloc.c:realloc
 2,965,817 ( 0.16%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 2,943,000 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 2,867,599 ( 0.15%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
 2,857,837 ( 0.15%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 2,857,338 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lint::builtin::MissingDoc as rustc_lint::passes::LateLintPass>::enter_lint_attrs
 2,855,758 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,844,842 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor as core::iter::traits::iterator::Iterator>::next
 2,826,132 ( 0.15%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 2,819,439 ( 0.15%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 2,814,125 ( 0.15%)  ???:runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) [clone .llvm.16011871802505272439]
 2,801,362 ( 0.15%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 2,794,470 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,705,199 ( 0.14%)  ???:llvm::ReassociatePass::BuildRankMap(llvm::Function&, llvm::ReversePostOrderTraversal<llvm::Function*, llvm::GraphTraits<llvm::Function*> >&)
 2,674,616 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 2,672,388 ( 0.14%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::initializeRPOT()
 2,537,696 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,457,962 ( 0.13%)  ???:llvm::SHA1::hashBlock()
 2,453,164 ( 0.13%)  ???:llvm::IDFCalculatorBase<llvm::BasicBlock, false>::calculate(llvm::SmallVectorImpl<llvm::BasicBlock*>&)
 2,436,567 ( 0.13%)  ???:llvm::MachineInstr::addRegisterDead(llvm::Register, llvm::TargetRegisterInfo const*, bool)
 2,429,215 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,425,687 ( 0.13%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
 2,419,941 ( 0.13%)  ./elf/do-rel.h:_dl_relocate_object
 2,419,809 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2
 2,415,679 ( 0.13%)  ???:llvm::DenseMapBase<llvm::DenseMap<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >, llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >::destroyAll() [clone .llvm.4316243980339171764]
 2,409,234 ( 0.13%)  ???:llvm::InstCombinerImpl::visitStoreInst(llvm::StoreInst&)
 2,382,925 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,382,181 ( 0.12%)  ???:llvm::SCCPInstVisitor::solve()
 2,359,946 ( 0.12%)  ???:llvm::JumpThreadingPass::processBlock(llvm::BasicBlock*)
 2,359,410 ( 0.12%)  ???:llvm::MemorySSA::OptimizeUses::optimizeUses()
 2,343,098 ( 0.12%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::getModRefBehavior(llvm::CallBase const*)
 2,323,547 ( 0.12%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
 2,314,237 ( 0.12%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 2,296,413 ( 0.12%)  ???:llvm::PopulateLoopsDFS<llvm::BasicBlock, llvm::Loop>::traverse(llvm::BasicBlock*)
 2,252,396 ( 0.12%)  ???:llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>::analyze(llvm::DominatorTreeBase<llvm::BasicBlock, false> const&)
 2,213,629 ( 0.12%)  ???:llvm::PassManager<llvm::LazyCallGraph::SCC, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&>::run(llvm::LazyCallGraph::SCC&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::LazyCallGraph&, llvm::CGSCCUpdateResult&)
 2,190,574 ( 0.11%)  ???:llvm::detail::AnalysisResultModel<llvm::Function, llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>, llvm::Function>, llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>, llvm::Function>::Result, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>::Invalidator, true>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&, llvm::AnalysisManager<llvm::Function>::Invalidator&)
 2,162,327 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 2,159,770 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 2,137,913 ( 0.11%)  ???:llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::TargetLibraryInfo const*, llvm::DomTreeUpdater*)
 2,132,223 ( 0.11%)  ???:llvm::BlockFrequencyInfoImplBase::finalizeMetrics()
 2,130,472 ( 0.11%)  ./malloc/malloc.c:_int_realloc
 2,129,873 ( 0.11%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
 2,127,220 ( 0.11%)  ???:llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction*, llvm::PHITransAddr const&, llvm::MemoryLocation const&, bool, llvm::BasicBlock*, llvm::SmallVectorImpl<llvm::NonLocalDepResult>&, llvm::DenseMap<llvm::BasicBlock*, llvm::Value*, llvm::DenseMapInfo<llvm::BasicBlock*>, llvm::detail::DenseMapPair<llvm::BasicBlock*, llvm::Value*> >&, bool, bool)
 2,112,188 ( 0.11%)  ???:llvm::X86TargetMachine::getSubtargetImpl(llvm::Function const&) const
 2,109,405 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 2,091,145 ( 0.11%)  ???:simplifyFunctionCFGImpl(llvm::Function&, llvm::TargetTransformInfo const&, llvm::DominatorTree*, llvm::SimplifyCFGOptions const&) [clone .llvm.11597842506770977528]
 2,083,660 ( 0.11%)  ???:(anonymous namespace)::BitcodeReader::parseModule(unsigned long, bool, llvm::function_ref<llvm::Optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (llvm::StringRef)>)
 2,058,810 ( 0.11%)  ???:llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm::Optional<llvm::MemoryLocation> const&, llvm::AAQueryInfo&)
 2,056,993 ( 0.11%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > std::__copy_move_a2<false, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > >(llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > >)
 2,056,677 ( 0.11%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::pointsToConstantMemory(llvm::MemoryLocation const&, llvm::AAQueryInfo&, bool)
 2,038,767 ( 0.11%)  ???:int llvm::array_pod_sort_comparator<llvm::Attribute>(void const*, void const*)
 2,019,654 ( 0.11%)  ???:llvm::X86_MC::initLLVMToSEHAndCVRegMapping(llvm::MCRegisterInfo*)
 2,002,078 ( 0.10%)  ???:bool llvm::detail::UniqueFunctionBase<bool, llvm::StringRef, llvm::Any>::CallImpl<llvm::OptNoneInstrumentation::registerCallbacks(llvm::PassInstrumentationCallbacks&)::$_4>(void*, llvm::StringRef, llvm::Any&)
 2,000,505 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 1,998,924 ( 0.10%)  ???:llvm::GVN::performPRE(llvm::Function&)
 1,974,480 ( 0.10%)  ???:llvm::detail::AnalysisResultModel<llvm::Function, llvm::DominatorTreeAnalysis, llvm::DominatorTree, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>::Invalidator, true>::~AnalysisResultModel()
 1,959,685 ( 0.10%)  ???:llvm::Value::stripAndAccumulateConstantOffsets(llvm::DataLayout const&, llvm::APInt&, bool, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
 1,920,085 ( 0.10%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, unsigned int)
 1,912,909 ( 0.10%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::tryToComputeMassInFunction()

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  6,797 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,823 ( 0.00%)              self.file = file;
  2,536 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,868 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 12,642 ( 0.00%)          self.line_number = line_index + 1;
 18,910 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 87,891 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  1,002 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    501 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,505 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  3,507 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  2,004 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
328,447 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
187,684 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 46,921 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 46,921 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 82,164 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 81,940 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
245,820 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 81,940 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 40,970 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 40,970 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 40,970 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
163,880 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 11,678 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 47,296 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  5,415 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  6,498 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,332 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 14,604 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 14,604 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 29,755 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 16,248 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    224 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    336 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    423 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    846 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  1,692 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 11,902 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  5,951 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 11,902 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  5,951 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 29,755 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 17,853 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 17,853 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 17,853 ( 0.00%)          Some((
  5,951 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  5,951 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
422,289 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
545,067 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 32,496 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  5,459 ( 0.00%)              if idx != avoid_idx
  2,860 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  5,415 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,083 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,166 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  8,664 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  5,415 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

588,349 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    46,011 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   245,931 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       559 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   275,215 ( 0.01%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
    43,953 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
    44,408 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
11,271,769 ( 0.59%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         1 ( 0.00%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
   242,213 ( 0.01%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     3,233 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
       845 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
       679 ( 0.00%)                  while let Some(x) = self.next() {
     6,436 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
        88 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
    69,014 ( 0.00%)                  while let Some(x) = self.next() {
   646,498 ( 0.03%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
        88 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
     2,385 ( 0.00%)                  while let Some(x) = self.next() {
    17,307 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         .                           None
     1,688 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
     9,427 ( 0.00%)                  while let Some(x) = self.next() {
    34,885 ( 0.00%)                      if let Some(y) = f(x) {
     4,042 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     1,518 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
    84,631 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    11,465 ( 0.00%)                  while let Some(x) = self.next_back() {
   164,748 ( 0.01%)                      i -= 1;
   138,638 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
     9,502 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
         .                       fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
       870 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
       894 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   227,012 ( 0.01%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

 2,594,374 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .           #[derive(Debug)]
      .           pub struct Token {
      .               pub kind: TokenKind,
      .               pub len: usize,
      .           }
      .           
      .           impl Token {
      .               fn new(kind: TokenKind, len: usize) -> Token {
373,608 ( 0.02%)          Token { kind, len }
      .               }
      .           }
      .           
      .           /// Enum representing common lexeme types.
      .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 75,790 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           pub enum TokenKind {
      .               // Multi-char tokens:
      .               /// "// comment"
      .               LineComment { doc_style: Option<DocStyle> },
      .               /// `/* block comment */`
      .               ///
      .               /// Block comments can be recursive, so the sequence like `/* /* */`
      .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
      .               /// Literal starts with "0x".
      .               Hexadecimal,
      .               /// Literal doesn't contain a prefix.
      .               Decimal,
      .           }
      .           
      .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
      .           /// but shebang isn't a part of rust syntax.
     91 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
      .               // Shebang must start with `#!` literally, without any preceding whitespace.
      .               // For simplicity we consider any line starting with `#!` a shebang,
      .               // regardless of restrictions put on shebangs by specific platforms.
      .               if let Some(input_tail) = input.strip_prefix("#!") {
      .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
      .                   // then it may be valid Rust code, so consider it Rust code.
      .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
      .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
      .                       )
      .                   });
      .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
      .                       // No other choice than to consider this a shebang.
      .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
      .                   }
      .               }
      .               None
    104 ( 0.00%)  }
      .           
      .           /// Parses the first token from the provided input string.
124,536 ( 0.01%)  pub fn first_token(input: &str) -> Token {
      .               debug_assert!(!input.is_empty());
 41,512 ( 0.00%)      Cursor::new(input).advance_token()
166,048 ( 0.01%)  }
      .           
      .           /// Creates an iterator that produces tokens from the input string.
      .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
      .               let mut cursor = Cursor::new(input);
      .               std::iter::from_fn(move || {
      .                   if cursor.is_eof() {
      .                       None
      .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
      .           /// for definitions of these classes.
      .           pub fn is_whitespace(c: char) -> bool {
      .               // This is Pattern_White_Space.
      .               //
      .               // Note that this set is stable (ie, it doesn't change with different
      .               // Unicode versions), so it's ok to just hard-code the values.
      .           
 93,666 ( 0.00%)      matches!(
      .                   c,
      .                   // Usual ASCII suspects
      .                   '\u{0009}'   // \t
      .                   | '\u{000A}' // \n
      .                   | '\u{000B}' // vertical tab
      .                   | '\u{000C}' // form feed
      .                   | '\u{000D}' // \r
      .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
      .               )
      .           }
      .           
      .           /// True if `c` is valid as a first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_start(c: char) -> bool {
      .               // This is XID_Start OR '_' (which formally is not a XID_Start).
    414 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
      .           }
      .           
      .           /// True if `c` is valid as a non-first character of an identifier.
      .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
      .           /// a formal definition of valid identifier name.
      .           pub fn is_id_continue(c: char) -> bool {
      .               unicode_xid::UnicodeXID::is_xid_continue(c)
      .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
      .                   is_id_start(start) && chars.all(is_id_continue)
      .               } else {
      .                   false
      .               }
      .           }
      .           
      .           impl Cursor<'_> {
      .               /// Parses a token from the input string.
332,096 ( 0.02%)      fn advance_token(&mut self) -> Token {
      .                   let first_char = self.bump().unwrap();
156,019 ( 0.01%)          let token_kind = match first_char {
      .                       // Slash, comment or block comment.
 11,380 ( 0.00%)              '/' => match self.first() {
      .                           '/' => self.line_comment(),
      .                           '*' => self.block_comment(),
      .                           _ => Slash,
      .                       },
      .           
      .                       // Whitespace sequence.
      .                       c if is_whitespace(c) => self.whitespace(),
      .           
      .                       // Raw identifier, raw string literal or identifier.
    448 ( 0.00%)              'r' => match (self.first(), self.second()) {
      .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
      .                           ('#', _) | ('"', _) => {
      .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
      .                               let suffix_start = self.len_consumed();
      .                               if err.is_none() {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = RawStr { n_hashes, err };
      .                               Literal { kind, suffix_start }
      .                           }
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    279 ( 0.00%)              'b' => match (self.first(), self.second()) {
      .                           ('\'', _) => {
      .                               self.bump();
      .                               let terminated = self.single_quoted_string();
      .                               let suffix_start = self.len_consumed();
      .                               if terminated {
      .                                   self.eat_literal_suffix();
      .                               }
      .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
      .                           _ => self.ident_or_unknown_prefix(),
      .                       },
      .           
      .                       // Identifier (this should be checked after other variant that can
      .                       // start as identifier).
      .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
      .           
      .                       // Numeric literal.
 61,212 ( 0.00%)              c @ '0'..='9' => {
      .                           let literal_kind = self.number(c);
      .                           let suffix_start = self.len_consumed();
      .                           self.eat_literal_suffix();
     55 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
      .                       }
      .           
      .                       // One-symbol tokens.
    970 ( 0.00%)              ';' => Semi,
  3,616 ( 0.00%)              ',' => Comma,
  1,164 ( 0.00%)              '.' => Dot,
  5,056 ( 0.00%)              '(' => OpenParen,
  5,056 ( 0.00%)              ')' => CloseParen,
  1,542 ( 0.00%)              '{' => OpenBrace,
  1,542 ( 0.00%)              '}' => CloseBrace,
    332 ( 0.00%)              '[' => OpenBracket,
    332 ( 0.00%)              ']' => CloseBracket,
    216 ( 0.00%)              '@' => At,
    324 ( 0.00%)              '#' => Pound,
      .                       '~' => Tilde,
    178 ( 0.00%)              '?' => Question,
  7,132 ( 0.00%)              ':' => Colon,
  6,394 ( 0.00%)              '$' => Dollar,
  1,196 ( 0.00%)              '=' => Eq,
  1,040 ( 0.00%)              '!' => Bang,
    260 ( 0.00%)              '<' => Lt,
  1,040 ( 0.00%)              '>' => Gt,
    156 ( 0.00%)              '-' => Minus,
    602 ( 0.00%)              '&' => And,
     56 ( 0.00%)              '|' => Or,
    916 ( 0.00%)              '+' => Plus,
  1,100 ( 0.00%)              '*' => Star,
      .                       '^' => Caret,
    170 ( 0.00%)              '%' => Percent,
      .           
      .                       // Lifetime or character literal.
    258 ( 0.00%)              '\'' => self.lifetime_or_char(),
      .           
      .                       // String literal.
      .                       '"' => {
    336 ( 0.00%)                  let terminated = self.double_quoted_string();
      .                           let suffix_start = self.len_consumed();
    224 ( 0.00%)                  if terminated {
      .                               self.eat_literal_suffix();
      .                           }
      .                           let kind = Str { terminated };
    224 ( 0.00%)                  Literal { kind, suffix_start }
      .                       }
      .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
      .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
      .                       _ => Unknown,
      .                   };
      .                   Token::new(token_kind, self.len_consumed())
373,608 ( 0.02%)      }
      .           
      .               fn line_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '/');
      .                   self.bump();
      .           
  8,560 ( 0.00%)          let doc_style = match self.first() {
      .                       // `//!` is an inner line doc comment.
      .                       '!' => Some(DocStyle::Inner),
      .                       // `////` (more than 3 slashes) is not considered a doc comment.
  4,230 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
      .                       _ => None,
      .                   };
      .           
102,861 ( 0.01%)          self.eat_while(|c| c != '\n');
  8,535 ( 0.00%)          LineComment { doc_style }
      .               }
      .           
      .               fn block_comment(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '/' && self.first() == '*');
      .                   self.bump();
      .           
      .                   let doc_style = match self.first() {
      .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
      .                   }
      .           
      .                   BlockComment { doc_style, terminated: depth == 0 }
      .               }
      .           
      .               fn whitespace(&mut self) -> TokenKind {
      .                   debug_assert!(is_whitespace(self.prev()));
      .                   self.eat_while(is_whitespace);
 10,684 ( 0.00%)          Whitespace
      .               }
      .           
      .               fn raw_ident(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
      .                   // Eat "#" symbol.
      .                   self.bump();
      .                   // Eat the identifier part of RawIdent.
      .                   self.eat_identifier();
      .                   RawIdent
      .               }
      .           
 37,895 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   debug_assert!(is_id_start(self.prev()));
      .                   // Start is already eaten, eat the rest of identifier.
 15,158 ( 0.00%)          self.eat_while(is_id_continue);
      .                   // Known prefixes must have been handled earlier. So if
      .                   // we see a prefix here, it is definitely an unknown prefix.
 15,158 ( 0.00%)          match self.first() {
      .                       '#' | '"' | '\'' => UnknownPrefix,
  7,579 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
      .                           self.fake_ident_or_unknown_prefix()
      .                       }
  7,579 ( 0.00%)              _ => Ident,
      .                   }
 30,316 ( 0.00%)      }
      .           
      .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
      .                   // Start is already eaten, eat the rest of identifier.
      .                   self.eat_while(|c| {
      .                       unicode_xid::UnicodeXID::is_xid_continue(c)
      .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
      .                           || c == '\u{200d}'
      .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
      .                       '#' | '"' | '\'' => UnknownPrefix,
      .                       _ => InvalidIdent,
      .                   }
      .               }
      .           
      .               fn number(&mut self, first_digit: char) -> LiteralKind {
      .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
      .                   let mut base = Base::Decimal;
     22 ( 0.00%)          if first_digit == '0' {
      .                       // Attempt to parse encoding base.
     28 ( 0.00%)              let has_digits = match self.first() {
      .                           'b' => {
      .                               base = Base::Binary;
      .                               self.bump();
      .                               self.eat_decimal_digits()
      .                           }
      .                           'o' => {
      .                               base = Base::Octal;
      .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
      .                               self.eat_decimal_digits()
      .                           }
      .                           'x' => {
      .                               base = Base::Hexadecimal;
      .                               self.bump();
      .                               self.eat_hexadecimal_digits()
      .                           }
      .                           // Not a base prefix.
     15 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
      .                               self.eat_decimal_digits();
      .                               true
      .                           }
      .                           // Just a 0.
      .                           _ => return Int { base, empty_int: false },
      .                       };
      .                       // Base prefix was provided, but there were no digits
      .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
      .                       if !has_digits {
      .                           return Int { base, empty_int: true };
      .                       }
      .                   } else {
      .                       // No base prefix, parse number in the usual way.
      .                       self.eat_decimal_digits();
      .                   };
      .           
     40 ( 0.00%)          match self.first() {
      .                       // Don't be greedy if this is actually an
      .                       // integer literal followed by field/method access or a range pattern
      .                       // (`0..2` and `12.foo()`)
      4 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
      .                           // might have stuff after the ., and if it does, it needs to start
      .                           // with a number
      .                           self.bump();
      .                           let mut empty_exponent = false;
      .                           if self.first().is_digit(10) {
      .                               self.eat_decimal_digits();
      .                               match self.first() {
      .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
      .                           self.bump();
      .                           let empty_exponent = !self.eat_float_exponent();
      .                           Float { base, empty_exponent }
      .                       }
      .                       _ => Int { base, empty_int: false },
      .                   }
      .               }
      .           
    602 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
      .                   debug_assert!(self.prev() == '\'');
      .           
    172 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
      .                       // It's surely not a lifetime.
      .                       false
      .                   } else {
      .                       // If the first symbol is valid for identifier, it can be a lifetime.
      .                       // Also check if it's a number for a better error reporting (so '0 will
      .                       // be reported as invalid lifetime and not as unterminated char literal).
      .                       is_id_start(self.first()) || self.first().is_digit(10)
      .                   };
-- line 604 ----------------------------------------
-- line 617 ----------------------------------------
      .                   // length greater than 1.
      .           
      .                   let starts_with_number = self.first().is_digit(10);
      .           
      .                   // Skip the literal contents.
      .                   // First symbol can be a number (which isn't a valid identifier start),
      .                   // so skip it without any checks.
      .                   self.bump();
    172 ( 0.00%)          self.eat_while(is_id_continue);
      .           
      .                   // Check if after skipping literal contents we've met a closing
      .                   // single quote (which means that user attempted to create a
      .                   // string with single quotes).
    172 ( 0.00%)          if self.first() == '\'' {
      .                       self.bump();
      .                       let kind = Char { terminated: true };
      .                       Literal { kind, suffix_start: self.len_consumed() }
      .                   } else {
    172 ( 0.00%)              Lifetime { starts_with_number }
      .                   }
    516 ( 0.00%)      }
      .           
      .               fn single_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '\'');
      .                   // Check if it's a one-symbol literal.
      .                   if self.second() == '\'' && self.first() != '\\' {
      .                       self.bump();
      .                       self.bump();
      .                       return true;
-- line 645 ----------------------------------------
-- line 677 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// Eats double-quoted string and returns true
      .               /// if string is terminated.
      .               fn double_quoted_string(&mut self) -> bool {
      .                   debug_assert!(self.prev() == '"');
      .                   while let Some(c) = self.bump() {
  4,772 ( 0.00%)              match c {
      .                           '"' => {
      .                               return true;
      .                           }
      .                           '\\' if self.first() == '\\' || self.first() == '"' => {
      .                               // Bump again to skip escaped character.
      .                               self.bump();
      .                           }
      .                           _ => (),
      .                       }
      .                   }
      .                   // End of file reached.
      .                   false
    112 ( 0.00%)      }
      .           
      .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
      .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
      .                   // Wrap the actual function to handle the error with too many hashes.
      .                   // This way, it eats the whole raw string.
      .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
      .                   // Only up to 65535 `#`s are allowed in raw strings
      .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
      .                           max_hashes = n_end_hashes;
      .                       }
      .                   }
      .               }
      .           
      .               fn eat_decimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
     14 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
     21 ( 0.00%)                  '0'..='9' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
     14 ( 0.00%)      }
      .           
      .               fn eat_hexadecimal_digits(&mut self) -> bool {
      .                   let mut has_digits = false;
      .                   loop {
     20 ( 0.00%)              match self.first() {
      .                           '_' => {
      .                               self.bump();
      .                           }
     60 ( 0.00%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
      .                               has_digits = true;
      .                               self.bump();
      .                           }
      .                           _ => break,
      .                       }
      .                   }
      .                   has_digits
      2 ( 0.00%)      }
      .           
      .               /// Eats the float exponent. Returns true if at least one digit was met,
      .               /// and returns false otherwise.
      .               fn eat_float_exponent(&mut self) -> bool {
      .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
      .                   if self.first() == '-' || self.first() == '+' {
      .                       self.bump();
      .                   }
      .                   self.eat_decimal_digits()
      .               }
      .           
      .               // Eats the suffix of the literal, e.g. "_u8".
      .               fn eat_literal_suffix(&mut self) {
    246 ( 0.00%)          self.eat_identifier();
      .               }
      .           
      .               // Eats the identifier.
    369 ( 0.00%)      fn eat_identifier(&mut self) {
      .                   if !is_id_start(self.first()) {
      .                       return;
      .                   }
      .                   self.bump();
      .           
      .                   self.eat_while(is_id_continue);
    492 ( 0.00%)      }
      .           }

605,132 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    6,605 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  587,856 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    1,155 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    1,078 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  573,945 ( 0.03%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    6,711 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       24 ( 0.00%)          self.position += bytes;
       24 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    1,126 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,307 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   47,460 ( 0.00%)      fn read_u32(&mut self) -> u32 {
  206,649 ( 0.01%)          read_leb128!(self, read_u32_leb128)
   94,920 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.03%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,001,955 ( 0.10%)          let value = self.data[self.position];
  402,704 ( 0.02%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  264,988 ( 0.01%)      fn read_usize(&mut self) -> usize {
  265,020 ( 0.01%)          read_leb128!(self, read_usize_leb128)
  529,976 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   24,487 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   39,074 ( 0.00%)          let len = self.read_usize();
  212,104 ( 0.01%)          let sentinel = self.data[self.position + len];
   53,050 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  132,625 ( 0.01%)          self.position += len + 1;
   36,867 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      526 ( 0.00%)          let start = self.position;
    2,503 ( 0.00%)          self.position += s.len();
      526 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  843,859 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  598,479 ( 0.03%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   49,393 ( 0.00%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
7,293,372 ( 0.38%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   65,456 ( 0.00%)          self.stride += Group::WIDTH;
   65,456 ( 0.00%)          self.pos += self.stride;
   53,223 ( 0.00%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   34,494 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   71,375 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   17,832 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   90,031 ( 0.00%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   22,610 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   70,796 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   94,181 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      288 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
    3,744 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       60 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    3,004 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    3,611 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    3,611 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    7,222 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      972 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    6,250 ( 0.00%)          self.erase_no_drop(&item);
       93 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  194,258 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      830 ( 0.00%)          match self.find(hash, eq) {
    1,259 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   25,251 ( 0.00%)              None => None,
        .                   }
  286,268 ( 0.01%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    4,648 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  114,750 ( 0.01%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   58,066 ( 0.00%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  137,248 ( 0.01%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   93,616 ( 0.00%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  874,806 ( 0.05%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,516 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  556,281 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        4 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  645,126 ( 0.03%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  202,288 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       72 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  151,716 ( 0.01%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      235 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  146,631 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    2,643 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  297,406 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  237,085 ( 0.01%)          self.table.items += 1;
        .                   bucket
      449 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
   16,766 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    1,619 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    7,760 ( 0.00%)              eq(self.bucket(index).as_ref())
      195 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      114 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
   18,952 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   14,228 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
    1,176 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    7,234 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
    1,344 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  213,135 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   24,089 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,436 ( 0.00%)          let allocation = self.into_allocation();
    1,827 ( 0.00%)          RawIntoIter {
    3,045 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,022 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      249 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  176,067 ( 0.01%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  119,372 ( 0.01%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   29,874 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   68,784 ( 0.00%)          Ok(Self {
        .                       ctrl,
   28,723 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   87,224 ( 0.00%)      }
        .           
        .               #[inline]
   10,260 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    2,640 ( 0.00%)          if capacity == 0 {
    1,677 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   54,823 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    5,789 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
   10,260 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   49,175 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   49,175 ( 0.00%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   98,350 ( 0.01%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  390,681 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
1,142,000 ( 0.06%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  519,492 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   21,780 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  930,865 ( 0.05%)              for bit in group.match_byte(h2_hash) {
1,657,115 ( 0.09%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
1,164,355 ( 0.06%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  321,737 ( 0.02%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,435,152 ( 0.08%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
5,967,248 ( 0.31%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  695,213 ( 0.04%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  556,148 ( 0.03%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
1,104,256 ( 0.06%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  367,824 ( 0.02%)          *self.ctrl(index) = ctrl;
  368,367 ( 0.02%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   78,252 ( 0.00%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   67,555 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  335,466 ( 0.02%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,632 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   36,570 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   16,825 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   33,652 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   33,650 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   70,516 ( 0.00%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   16,825 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    4,036 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  218,024 ( 0.01%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   16,825 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
   10,973 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    2,399 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    3,182 ( 0.00%)          self.items = 0;
    2,402 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   43,163 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  172,652 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  215,710 ( 0.01%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  172,652 ( 0.01%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
   10,000 ( 0.00%)      fn clone(&self) -> Self {
    1,261 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
   11,250 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       24 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  227,905 ( 0.01%)      fn drop(&mut self) {
  144,081 ( 0.01%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  243,962 ( 0.01%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,436 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    3,045 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   77,130 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    8,796 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   14,344 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   51,596 ( 0.00%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,642 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      969 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    3,492 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      829 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    9,946 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   55,432 ( 0.00%)          if let Some(b) = self.iter.next() {
  103,859 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   19,892 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,194 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    4,800 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      262 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      800 ( 0.00%)      fn next(&mut self) -> Option<T> {
      243 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
    2,095 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       30 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      808 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
      101 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      808 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

3,340,285 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
1,813,446 ( 0.09%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  545,281 ( 0.03%)      Token(Token),
        .               /// A delimited sequence of token trees.
   48,104 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
    1,156 ( 0.00%)          match self {
    3,188 ( 0.00%)              TokenTree::Token(token) => token.span,
      712 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
      463 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
    1,156 ( 0.00%)          match self {
      463 ( 0.00%)              TokenTree::Token(token) => token.span = span,
      230 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
      578 ( 0.00%)      }
        .           
      593 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
   84,704 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
      593 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
   10,322 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   30,966 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   10,322 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   10,261 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   30,783 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   10,261 ( 0.00%)      }
        .           
    9,930 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    6,620 ( 0.00%)          match self {
   29,790 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
   13,240 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
   39,942 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  331,348 ( 0.02%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
   35,504 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
        .           
        .           /// A lazy version of [`TokenStream`], which defers creation
        .           /// of an actual `TokenStream` until it is needed.
        .           /// `Box` is here only to reduce the structure size.
        .           #[derive(Clone)]
        .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
        .           
        .           impl LazyTokenStream {
       72 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
        .                   LazyTokenStream(Lrc::new(Box::new(inner)))
       72 ( 0.00%)      }
        .           
        .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
       76 ( 0.00%)          self.0.create_token_stream()
        .               }
        .           }
        .           
        .           impl fmt::Debug for LazyTokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
        .               }
        .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
    8,738 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
    8,738 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
       19 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
       19 ( 0.00%)          let trees: Vec<_> = self
        .                       .0
        .                       .iter()
       57 ( 0.00%)              .flat_map(|tree| match &tree.0 {
       38 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
       95 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
        .                           }
        .                           AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
        .                               TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
        .                               tree.1,
        .                           )]
        .                           .into_iter(),
        .                           AttrAnnotatedTokenTree::Attributes(data) => {
        .                               let mut outer_attrs = Vec::new();
-- line 219 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
        .                               }
        .                               flat.extend(target_tokens);
        .                               flat.into_iter()
        .                           }
        .                       })
        .                       .collect();
        .                   TokenStream::new(trees)
       38 ( 0.00%)      }
        .           }
        .           
        .           /// Stores the tokens for an attribute target, along
        .           /// with its attributes.
        .           ///
        .           /// This is constructed during parsing when we need to capture
        .           /// tokens.
        .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  123,184 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
    3,410 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
   28,460 ( 0.00%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
       28 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
        .           
        .           impl Eq for TokenStream {}
        .           
        .           impl PartialEq<TokenStream> for TokenStream {
        .               fn eq(&self, other: &TokenStream) -> bool {
        .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
    3,481 ( 0.00%)          self.0.is_empty()
    3,481 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  197,329 ( 0.01%)          self.0.len()
      138 ( 0.00%)      }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
   10,917 ( 0.00%)          self.clone().into_trees()
   21,834 ( 0.00%)      }
        .           
   13,416 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
   26,832 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
       89 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
    3,468 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
  293,739 ( 0.02%)      fn next(&mut self) -> Option<TokenTree> {
  581,706 ( 0.03%)          self.next_with_spacing().map(|(tree, _)| tree)
  391,652 ( 0.02%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
  495,700 ( 0.03%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
  591,159 ( 0.03%)          if self.index < self.stream.len() {
  316,122 ( 0.02%)              self.index += 1;
  515,942 ( 0.03%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
   50,868 ( 0.00%)              None
        .                   }
  594,840 ( 0.03%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
    5,181 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   10,362 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   10,362 ( 0.00%)      }
        .           }
        .           
  109,565 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
       33 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
       66 ( 0.00%)      }
        .           
    6,930 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
    3,465 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
    1,680 ( 0.00%)      }
        .           
   22,432 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
   16,824 ( 0.00%)      }
        .           }

   79,743 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,799 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 70,005 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
  2,595 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
  2,494 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
  1,248 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
  3,741 ( 0.00%)      pub prev_token: Token,
  1,249 ( 0.00%)      pub capture_cfg: bool,
  2,499 ( 0.00%)      restrictions: Restrictions,
  2,496 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
  2,496 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
  2,496 ( 0.00%)      unmatched_angle_bracket_count: u32,
  3,744 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
  1,248 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
  1,248 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
  5,092 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
  4,992 ( 0.00%)      capturing: Capturing,
  1,248 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  5,166 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 43,997 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  9,992 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  3,263 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 20,046 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  4,331 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  8,662 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  2,075 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
 11,166 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
896,940 ( 0.05%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
445,771 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
 10,322 ( 0.00%)                  self.frame.open_delim = true;
 51,610 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
872,528 ( 0.05%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 42,080 ( 0.00%)              } else if !self.frame.close_delim {
 10,261 ( 0.00%)                  self.frame.close_delim = true;
 51,305 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
 20,506 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
133,289 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  9,468 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
170,106 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
597,960 ( 0.03%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
597,960 ( 0.03%)      }
      .           
357,290 ( 0.02%)      fn next_desugared(&mut self) -> (Token, Spacing) {
107,215 ( 0.01%)          let (data, attr_style, sp) = match self.next() {
     42 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
178,575 ( 0.01%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
  2,858 ( 0.00%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
      .                           '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
     56 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
     70 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
    168 ( 0.00%)              [
     98 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
     56 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    112 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
     14 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
     14 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
    168 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
     42 ( 0.00%)          self.next()
321,561 ( 0.02%)      }
      .           }
      .           
  5,190 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  4,152 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     36 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    592 ( 0.00%)      Some(match token.kind {
  1,184 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
  1,184 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
  1,184 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  2,072 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    592 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  2,072 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  1,480 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  5,810 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    415 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    830 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 12,865 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    415 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    415 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  2,490 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    830 ( 0.00%)          parser.bump();
      .           
      .                   parser
  3,735 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
442,554 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
142,916 ( 0.01%)                  self.token_cursor.next_desugared()
      .                       } else {
114,090 ( 0.01%)                  self.token_cursor.next()
      .                       };
295,036 ( 0.02%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 73,759 ( 0.00%)              self.token_cursor.break_last_token = false;
295,036 ( 0.02%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,724 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
252,080 ( 0.01%)              if matches!(
147,518 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
294,924 ( 0.02%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 13,122 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  1,458 ( 0.00%)          if self.expected_tokens.is_empty() {
  1,692 ( 0.00%)              if self.token == *t {
  1,410 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 14,112 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 21,870 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 16,236 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  2,706 ( 0.00%)          if edible.contains(&self.token.kind) {
  3,645 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 20,295 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  8,967 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  6,915 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 15,932 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  2,276 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 13,656 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  9,104 ( 0.00%)          self.bump();
      .                   Ok(ident)
 22,760 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
196,581 ( 0.01%)      fn check(&mut self, tok: &TokenKind) -> bool {
 85,824 ( 0.00%)          let is_present = self.token == *tok;
 57,844 ( 0.00%)          if !is_present {
121,451 ( 0.01%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
196,581 ( 0.01%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
 37,567 ( 0.00%)          let is_present = self.check(tok);
 24,699 ( 0.00%)          if is_present {
  5,274 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
      .               }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  9,695 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  2,084 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 59,935 ( 0.00%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 13,965 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 12,116 ( 0.00%)          if self.check_keyword(kw) {
  1,357 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 13,965 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,924 ( 0.00%)          if self.token.is_keyword(kw) {
    388 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    500 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    400 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  7,944 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  3,972 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  8,937 ( 0.00%)      }
      .           
  9,852 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,704 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  2,104 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  9,852 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,742 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  3,604 ( 0.00%)      fn check_path(&mut self) -> bool {
  8,209 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  4,505 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    782 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    656 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,746 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    970 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,746 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,080 ( 0.00%)          self.check_or_expected(
    540 ( 0.00%)              self.token.is_like_plus(),
    540 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 16,500 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  9,625 ( 0.00%)          if self.token.kind == expected {
  1,040 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  4,275 ( 0.00%)          match self.token.kind.break_two_token_op() {
     35 ( 0.00%)              Some((first, second)) if first == expected => {
     20 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     25 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     45 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      5 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
     70 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  2,550 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 15,775 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    196 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    960 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     72 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    820 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  3,213 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  2,088 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    688 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    739 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    820 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  1,032 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    516 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    344 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  3,669 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    204 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  3,378 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  2,170 ( 0.00%)              if let Some(ref t) = sep.sep {
  3,009 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  1,941 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  1,232 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    789 ( 0.00%)              let t = f(self)?;
  2,111 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,836 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,937 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  2,280 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  1,144 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    644 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  2,869 ( 0.00%)          Ok((val, trailing))
  1,824 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  1,016 ( 0.00%)          self.expect(bra)?;
  1,824 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    440 ( 0.00%)              &token::OpenDelim(delim),
    652 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
958,568 ( 0.05%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
442,416 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
294,944 ( 0.02%)          self.prev_token = mem::replace(&mut self.token, next_token);
 73,736 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 73,736 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
589,848 ( 0.03%)      pub fn bump(&mut self) {
294,924 ( 0.02%)          let next_token = self.next_tok(self.token.span);
442,386 ( 0.02%)          self.bump_with(next_token);
589,848 ( 0.03%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    900 ( 0.00%)          if dist == 0 {
    340 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  3,216 ( 0.00%)          let frame = &self.token_cursor.frame;
  3,445 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  7,846 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 10,280 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 12,892 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  4,472 ( 0.00%)                      Some(tree) => match tree {
  2,035 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  1,674 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  2,174 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    949 ( 0.00%)          let mut token = Token::dummy();
    837 ( 0.00%)          while i < dist {
  7,308 ( 0.00%)              token = cursor.next().0;
  3,111 ( 0.00%)              if matches!(
  1,944 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    435 ( 0.00%)              i += 1;
      .                   }
     73 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  3,501 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    989 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  3,501 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    332 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      5 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  1,328 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  3,672 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  1,206 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     45 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  6,426 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
     28 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    362 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      6 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      6 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     78 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    117 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    443 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    735 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  3,600 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  3,200 ( 0.00%)          Ok(
  2,780 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    585 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    585 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,288 ( 0.00%)                  match self.parse_token_tree() {
  1,610 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    644 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    156 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     24 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     24 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     24 ( 0.00%)                      let span = expr.span;
      .           
    120 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    216 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  2,800 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,746 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    972 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
 24,704 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
 14,536 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
135,188 ( 0.01%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
109,446 ( 0.01%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
  3,540 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
  3,540 ( 0.00%)                  let span = frame.span;
  1,770 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
  3,540 ( 0.00%)                  self.bump();
  8,850 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
  2,636 ( 0.00%)                  self.bump();
  6,590 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
 21,616 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    686 ( 0.00%)          let old = self.restrictions;
    904 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    865 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  5,000 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  3,125 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  5,625 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  5,490 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  1,805 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    481 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,924 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    372 ( 0.00%)              return Ok(Visibility {
  1,116 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
    109 ( 0.00%)          let lo = self.prev_token.span;
      .           
    545 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
    207 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     69 ( 0.00%)                  self.bump(); // `(`
     46 ( 0.00%)                  self.bump(); // `crate`
     69 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
     23 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     69 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    258 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  4,941 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     92 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
    590 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    107 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
    590 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 16,728 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  8,364 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  4,860 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 17,028 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
 13,304 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  6,652 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  6,652 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
 13,304 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

292,529 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
   23,662 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      767 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
   21,139 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    1,725 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   13,495 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      125 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      225 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
       75 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
-- line 91 ----------------------------------------
-- line 92 ----------------------------------------
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
       50 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      125 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      217 ( 0.00%)      }
        .           }
        .           
       28 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       49 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
       28 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       35 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      426 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      154 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
3,706,528 ( 0.19%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   30,876 ( 0.00%)      BinOp(BinOpToken),
        .               BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   16,569 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    5,577 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
   14,374 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   54,288 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
      891 ( 0.00%)      Lifetime(Symbol),
        .           
    2,535 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
    8,409 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
1,039,456 ( 0.05%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   20,077 ( 0.00%)      pub kind: TokenKind,
    1,222 ( 0.00%)      pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
       70 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
      855 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    3,475 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
      850 ( 0.00%)              _ => return None,
        .                   })
      855 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
      514 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      121 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
   36,375 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  114,741 ( 0.01%)          Token { kind, span }
   36,375 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    1,768 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    1,768 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
      144 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
   23,828 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
   23,828 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      566 ( 0.00%)          match &self.kind {
       16 ( 0.00%)              Interpolated(nt) => nt.span(),
      275 ( 0.00%)              _ => self.span,
        .                   }
      275 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   71,484 ( 0.00%)          !matches!(
   23,828 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
   23,828 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    3,595 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
      715 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       36 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
      204 ( 0.00%)          match self.uninterpolate().kind {
       63 ( 0.00%)              Ident(name, is_raw)              =>
       21 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
        .                       // DotDotDot is no longer supported, but we need some way to display the error
        .                       DotDot | DotDotDot | DotDotEq     | // range notation
        .                       Lt | BinOp(Shl)                   | // associated path
        .                       ModSep                            | // global path
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
      160 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      856 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    1,412 ( 0.00%)          match self.uninterpolate().kind {
      639 ( 0.00%)              Ident(name, is_raw)        =>
       71 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
      242 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
    1,284 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
      410 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
      160 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
       62 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
        .                       || self == &Question
        .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
       64 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
      605 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      132 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      128 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    1,091 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  217,369 ( 0.01%)          match &self.kind {
   16,087 ( 0.00%)              Interpolated(nt) => match **nt {
    3,144 ( 0.00%)                  NtIdent(ident, is_raw) => {
    7,868 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    1,091 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   42,804 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  139,065 ( 0.01%)          match token.kind {
  456,622 ( 0.02%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  270,549 ( 0.01%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
   14,857 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
   30,840 ( 0.00%)          match token.kind {
    1,752 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
  103,999 ( 0.01%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    3,210 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      563 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    1,126 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      376 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
      752 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    4,780 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      114 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       32 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       16 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      288 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    2,678 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    4,780 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    7,007 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
      839 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    5,975 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   19,336 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   38,672 ( 0.00%)      }
        .           
      159 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      296 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      296 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      296 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
      264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      159 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      318 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
       16 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  129,768 ( 0.01%)          match self.ident() {
      786 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
       20 ( 0.00%)      }
        .           
   70,140 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   35,070 ( 0.00%)          let kind = match self.kind {
    1,605 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
      118 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      175 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        2 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
    2,935 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        9 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        2 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       78 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
    1,480 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
    1,966 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
   18,278 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   63,126 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   60,004 ( 0.00%)          self.kind == *rhs
        .               }
        .           }
        .           
      126 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
        .               NtStmt(ast::Stmt),
        .               NtPat(P<ast::Pat>),
       36 ( 0.00%)      NtExpr(P<ast::Expr>),
        .               NtTy(P<ast::Ty>),
        .               NtIdent(Ident, /* is_raw */ bool),
        .               NtLifetime(Ident),
        .               NtLiteral(P<ast::Expr>),
        .               /// Stuff inside brackets for attributes
        .               NtMeta(P<ast::AttrItem>),
        .               NtPath(ast::Path),
        .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
    4,188 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
    9,656 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
    4,188 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------
-- line 765 ----------------------------------------
        .           
        .           impl fmt::Display for NonterminalKind {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "{}", self.symbol())
        .               }
        .           }
        .           
        .           impl Nonterminal {
        8 ( 0.00%)      pub fn span(&self) -> Span {
       40 ( 0.00%)          match self {
        .                       NtItem(item) => item.span,
        .                       NtBlock(block) => block.span,
        .                       NtStmt(stmt) => stmt.span,
        .                       NtPat(pat) => pat.span,
        .                       NtExpr(expr) | NtLiteral(expr) => expr.span,
        .                       NtTy(ty) => ty.span,
        8 ( 0.00%)              NtIdent(ident, _) | NtLifetime(ident) => ident.span,
        .                       NtMeta(attr_item) => attr_item.span(),
        .                       NtPath(path) => path.span,
        .                       NtVis(vis) => vis.span,
        .                       NtTT(tt) => tt.span(),
        .                   }
       16 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq for Nonterminal {
        .               fn eq(&self, rhs: &Self) -> bool {
        .                   match (self, rhs) {
        .                       (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) => {
        .                           ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs
        .                       }
-- line 795 ----------------------------------------

1,054,412 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  744,594 ( 0.04%)          Vec { buf: RawVec::NEW, len: 0 }
       34 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  319,327 ( 0.02%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   19,961 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  198,005 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   70,241 ( 0.00%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,478 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   23,980 ( 0.00%)          if self.capacity() > self.len {
    3,845 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    8,289 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  397,097 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  248,111 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  106,287 ( 0.01%)              self.len = len;
      946 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  476,484 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  962,300 ( 0.05%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
1,176,973 ( 0.06%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  271,696 ( 0.01%)          self.len = new_len;
    2,274 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        3 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,659 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      258 ( 0.00%)          let len = self.len();
      586 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    1,060 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,527 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    1,060 ( 0.00%)              self.set_len(len + 1);
        .                   }
    1,422 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      157 ( 0.00%)          let len = self.len();
      551 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,057 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      328 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      235 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   53,890 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    3,035 ( 0.00%)          self.retain_mut(|elem| f(elem));
   52,432 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    6,768 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    5,502 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    3,855 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   83,385 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   18,914 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      523 ( 0.00%)                      g.processed_len += 1;
      130 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        8 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    1,338 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    1,261 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    3,836 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      748 ( 0.00%)          let len = self.len();
    2,094 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    2,375 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      206 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
    1,523 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    4,384 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      315 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
2,176,329 ( 0.11%)          if self.len == self.buf.capacity() {
  152,616 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   67,550 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
2,654,273 ( 0.14%)              self.len += 1;
        .                   }
      252 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  274,055 ( 0.01%)          if self.len == 0 {
       19 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  189,027 ( 0.01%)                  self.len -= 1;
   32,765 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      399 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      342 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
   13,393 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  119,595 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,691 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      250 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   24,043 ( 0.00%)              Drain {
        .                           tail_start: end,
      218 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  677,995 ( 0.04%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   93,272 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      495 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      393 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,847 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      793 ( 0.00%)          let len = self.len();
    1,586 ( 0.00%)          if new_len > len {
    5,774 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    5,054 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        4 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       75 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    4,510 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      451 ( 0.00%)          let len = self.len();
        .           
    1,353 ( 0.00%)          if new_len > len {
    1,548 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      659 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      102 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   74,923 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,672 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   71,355 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   56,051 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      549 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   14,167 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   78,966 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   15,699 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
1,207,456 ( 0.06%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       69 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  262,227 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   89,337 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  109,408 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   23,748 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        8 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  368,145 ( 0.02%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  132,153 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   45,276 ( 0.00%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,092 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      208 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  133,453 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      208 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        4 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   32,040 ( 0.00%)          while let Some(element) = iterator.next() {
    5,250 ( 0.00%)              let len = self.len();
   66,746 ( 0.00%)              if len == self.capacity() {
      507 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   53,038 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
      229 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      484 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      790 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      768 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  245,691 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  105,737 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  289,428 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  358,897 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
       34 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       17 ( 0.00%)              from_str_radix(src, radix)
       51 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   64,545 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  175,423 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  167,432 ( 0.01%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
4,947,911 ( 0.26%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       18 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  327,743 ( 0.02%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   10,901 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      328 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   48,455 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    1,997 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
3,469,831 ( 0.18%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  644,766 ( 0.03%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,917,574 ( 0.10%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        5 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  257,358 ( 0.01%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
       10 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        7 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   67,431 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
       14 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  498,879 ( 0.03%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      186 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    4,388 ( 0.00%)              if self <= 1 { return 0; }
        .           
    6,904 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   20,601 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    6,951 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    9,388 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   31,328 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   30,667 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   37,190 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   82,009 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    8,643 ( 0.00%)          i += 2
        .               }
        .           
   37,190 ( 0.00%)      if i < count {
   23,311 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  335,263 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
2,192,481 ( 0.11%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  649,183 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
   88,327 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   32,813 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   32,813 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  328,130 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  262,504 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  295,317 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  153,609 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  131,252 ( 0.01%)          self.processed += BUFFER_SIZE;
   65,626 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    8,119 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  100,050 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   36,634 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   18,340 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   12,458 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
    8,150 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    1,630 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    4,890 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    1,630 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    3,260 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   12,777 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   14,407 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   25,554 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    3,260 ( 0.00%)          let input_left = length - processed;
      909 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      464 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      464 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      464 ( 0.00%)              self.state.v0 ^= elem;
      928 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    1,630 ( 0.00%)          self.nbuf = extra_bytes_left;
    8,150 ( 0.00%)          self.processed += nbuf + processed;
    9,780 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   10,659 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   14,212 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
    9,823 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    9,823 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
    9,823 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    7,106 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    3,293 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   10,015 ( 0.00%)          let length = self.processed + self.nbuf;
    6,332 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    3,166 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    3,166 ( 0.00%)          state.v0 ^= b;
        .           
    3,166 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   10,266 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    3,930 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    3,930 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,192,639 ( 0.06%)          compress!(state);
1,291,706 ( 0.07%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   20,524 ( 0.00%)          compress!(state);
   20,524 ( 0.00%)          compress!(state);
   20,524 ( 0.00%)          compress!(state);
   17,360 ( 0.00%)          compress!(state);
        .               }
        .           }

  154,082 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    247 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
     13 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
     13 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     78 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
    104 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
  5,988 ( 0.00%)          while self.token != token::Eof {
 23,848 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
    117 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
 55,554 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
121,560 ( 0.01%)              match self.parse_token_tree() {
218,808 ( 0.01%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
245,637 ( 0.01%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 54,586 ( 0.00%)          let sm = self.string_reader.sess.source_map();
      .           
231,777 ( 0.01%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
  3,465 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
  3,465 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
 24,255 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
  3,465 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
 17,325 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
  6,930 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
  6,930 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
  6,930 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
 10,395 ( 0.00%)                          if tts.is_empty() {
    975 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
  1,300 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
 13,860 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
  3,465 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
 24,255 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
119,140 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
 47,656 ( 0.00%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
142,968 ( 0.01%)                  Ok((tt, spacing))
      .                       }
      .                   }
218,344 ( 0.01%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
259,575 ( 0.01%)          let (spacing, token) = self.string_reader.next_token();
136,582 ( 0.01%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
  3,465 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
354,809 ( 0.02%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
170,785 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 14,028 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 26,666 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
 16,872 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
129,435 ( 0.01%)          self.buf.push((tree, joint))
218,344 ( 0.01%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
 34,767 ( 0.00%)          TokenStream::new(self.buf)
      .               }
      .           }

 92,296 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  181,974 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       29 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,078 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,872 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       18 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       72 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,344 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        9 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       47 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,117 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,620 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        4 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       63 ( 0.00%)      fn from(p: PathBuf) -> Self {
       18 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       54 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       63 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       52 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       78 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       78 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       65 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      136 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      102 ( 0.00%)          match self.inner {
       34 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      136 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,100 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       34 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
       68 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        9 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       18 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       20 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        8 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       20 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       74 ( 0.00%)      pub lo: BytePos,
       74 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       74 ( 0.00%)      pub ctxt: SyntaxContext,
       16 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  187,329 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      342 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   26,368 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   19,776 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   26,368 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   41,490 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   27,660 ( 0.00%)      }
        .               #[inline]
   13,240 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   13,240 ( 0.00%)      }
        .               #[inline]
   30,753 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
   20,502 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    2,465 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,479 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       42 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       28 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,026 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      684 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// the macro callsite that expanded to it.
        .               pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
        .               }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
      310 ( 0.00%)      pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
      124 ( 0.00%)          if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      744 ( 0.00%)      }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      390 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      485 ( 0.00%)          while !outer.contains(self) {
      310 ( 0.00%)              self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      429 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    3,675 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    2,450 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      741 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      540 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      483 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,176 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,008 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      840 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       25 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       30 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       20 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        5 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       20 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  107,503 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   19,420 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      126 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      107 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   67,613 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   87,957 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      528 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      336 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      384 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      726 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      132 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      462 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      594 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      124 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      756 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      441 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   32,886 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   12,780 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    8,520 ( 0.00%)          let mut span = self.data();
    7,030 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   12,780 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   14,130 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       62 ( 0.00%)          let mut span = self.data();
       93 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      248 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      747 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
    1,054 ( 0.00%)          let mut span = self.data();
    1,527 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    2,971 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      830 ( 0.00%)      }
        .           
        .               #[inline]
    9,120 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    7,980 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1047 ----------------------------------------
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
       30 ( 0.00%)      pub fn from_span(primary_span: Span) -> MultiSpan {
    1,650 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
       30 ( 0.00%)      }
        .           
        5 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       75 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        5 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
       24 ( 0.00%)          self.span_labels.push((span, label));
       60 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      312 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
       16 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,620 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,620 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       70 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       56 ( 0.00%)          MultiSpan::from_spans(spans)
       70 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       55 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       27 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       56 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,092 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       54 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,184 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       42 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       41 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      522 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        9 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        9 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        9 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       36 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       18 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       18 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       27 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       99 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,914 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      546 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  883,424 ( 0.05%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,092 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,006 ( 0.00%)              SourceFile {
    4,368 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,184 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,184 ( 0.00%)                  lines,
    2,184 ( 0.00%)                  multibyte_chars,
    2,184 ( 0.00%)                  non_narrow_chars,
    2,184 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,914 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      143 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       39 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       26 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       26 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       39 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      156 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       26 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      221 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      143 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       52 ( 0.00%)              lines,
       52 ( 0.00%)              multibyte_chars,
       52 ( 0.00%)              non_narrow_chars,
       52 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      117 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      532 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       88 ( 0.00%)          if matches!(
      152 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       75 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      684 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      550 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   25,758 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    8,426 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   19,333 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   13,065 ( 0.00%)          assert!(line_index < self.lines.len());
   18,963 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       43 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   12,610 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       86 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      258 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      204 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
      444 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
      370 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      516 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      430 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      172 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
      301 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       86 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       42 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       43 ( 0.00%)                  let linebpos = self.lines[a];
       86 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       43 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      344 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      344 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      129 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       86 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       43 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      215 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
      301 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      140 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      126 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   40,272 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    4,785 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   88,984 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,742,959 ( 0.09%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,473,017 ( 0.08%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  175,716 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  329,770 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   86,420 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  243,350 ( 0.01%)          let span = self.data_untracked();
   23,416 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
  141,330 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   94,409 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   93,842 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  187,684 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   93,842 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   46,921 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   46,921 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  376,880 ( 0.02%)      }
        .           }

1,900,071 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
    182 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
    117 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 38,363 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
215,397 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
 61,542 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 92,313 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 30,771 ( 0.00%)          if is_beginning_of_file {
     52 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
 52,279 ( 0.00%)              let start_src_index = self.src_index(self.pos);
124,575 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 41,525 ( 0.00%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     65 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
124,536 ( 0.01%)              let token = rustc_lexer::first_token(text);
      .           
 83,024 ( 0.00%)              let start = self.pos;
 41,512 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
343,196 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
246,064 ( 0.01%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
184,548 ( 0.01%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
276,939 ( 0.01%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
    490 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
    560 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
207,560 ( 0.01%)          Some(match token {
  2,845 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
 14,015 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
 13,875 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      .                           if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 30,316 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 37,895 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
 15,158 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
 22,737 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
 37,895 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
 30,316 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 15,158 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
 53,053 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
  1,968 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
    369 ( 0.00%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
      .                                       .emit();
      .                                   None
      .                               } else {
      .                                   Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
    984 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
    172 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
     86 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
    258 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    344 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
 33,300 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
  2,775 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
  8,325 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
 41,625 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start + BytePos(1), suffix_start),
      .                                   "unterminated byte constant",
      .                                   error_code!(E0763),
      .                               )
      .                           }
      .                           (token::Byte, Mode::Byte, 2, 1) // b' '
      .                       }
    112 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    112 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated double quote string",
      .                                   error_code!(E0765),
      .                               )
      .                           }
      .                           (token::Str, Mode::Str, 1, 1) // " "
      .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
      .                           let n = u32::from(n_hashes);
      .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
      .                       }
      .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
      .                           self.report_raw_str_error(start, err);
      .                           let n = u32::from(n_hashes);
      .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
      .                       }
     22 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
     11 ( 0.00%)                  return if empty_int {
      .                               self.sess
      .                                   .span_diagnostic
      .                                   .struct_span_err_with_code(
      .                                       self.mk_sp(start, suffix_start),
      .                                       "no valid digits found for number",
      .                                       error_code!(E0768),
      .                                   )
      .                                   .emit();
      .                               (token::Integer, sym::integer(0))
      .                           } else {
      .                               self.validate_int_literal(base, start, suffix_start);
     33 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
      .                           };
      .                       }
      .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
      .                           if empty_exponent {
      .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
      .                           }
      .           
      .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
    336 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
 66,427 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
  1,421 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 10,745 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
 42,980 ( 0.00%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
    672 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
 11,112 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
  2,162 ( 0.00%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
  9,729 ( 0.00%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
     44 ( 0.00%)          let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
      .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
      .                   for (idx, c) in s.char_indices() {
      .                       let idx = idx as u32;
      .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
 68,211 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 15,158 ( 0.00%)      match is_nfc_quick(string.chars()) {
 75,790 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

167,647 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
133,997,844 ( 7.02%)  events annotated

