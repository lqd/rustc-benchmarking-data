--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name crc --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=174d7fead4378494 -C extra-filename=-174d7fead4378494 --out-dir /usr/home/liquid/tmp/.tmpeLSVQO/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpeLSVQO/target/release/deps --extern crc_catalog=/usr/home/liquid/tmp/.tmpeLSVQO/target/release/deps/libcrc_catalog-2cded642d6e70226.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-crc-2.1.0-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,201,196,178 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
117,846,123 ( 9.81%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 61,312,053 ( 5.10%)  ???:llvm::SelectionDAG::computeKnownBits(llvm::SDValue, llvm::APInt const&, unsigned int) const
 25,606,818 ( 2.13%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 24,803,416 ( 2.06%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
 22,461,167 ( 1.87%)  ./malloc/malloc.c:_int_free
 20,786,947 ( 1.73%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 20,635,878 ( 1.72%)  ./malloc/malloc.c:_int_malloc
 17,518,838 ( 1.46%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
 15,289,549 ( 1.27%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 13,914,489 ( 1.16%)  ./malloc/malloc.c:malloc
 11,125,841 ( 0.93%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
 10,728,411 ( 0.89%)  ???:llvm::InstCombinerImpl::run()
 10,309,110 ( 0.86%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
  9,668,121 ( 0.80%)  ???:llvm::KnownBits::shl(llvm::KnownBits const&, llvm::KnownBits const&)
  9,377,884 ( 0.78%)  ???:llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*)
  8,913,718 ( 0.74%)  ???:llvm::TargetLowering::SimplifyDemandedBits(llvm::SDValue, llvm::APInt const&, llvm::APInt const&, llvm::KnownBits&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const
  8,459,889 ( 0.70%)  ???:ComputeNumSignBitsImpl(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  8,362,191 ( 0.70%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  7,585,434 ( 0.63%)  ???:computeKnownBitsFromShiftOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&, llvm::function_ref<llvm::KnownBits (llvm::KnownBits const&, llvm::KnownBits const&)>)
  7,411,158 ( 0.62%)  ???:llvm::KnownBits::ashr(llvm::KnownBits const&, llvm::KnownBits const&)
  7,243,717 ( 0.60%)  ./malloc/malloc.c:free
  7,067,170 ( 0.59%)  ???:llvm::ConstantDataSequential::getElementAsConstant(unsigned int) const
  6,969,300 ( 0.58%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
  6,428,603 ( 0.54%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
  5,530,181 ( 0.46%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
  5,437,888 ( 0.45%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
  5,024,488 ( 0.42%)  ???:(anonymous namespace)::JoinVals::computeAssignment(unsigned int, (anonymous namespace)::JoinVals&)
  4,845,521 ( 0.40%)  ./elf/dl-lookup.c:do_lookup_x
  4,655,832 ( 0.39%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  4,490,812 ( 0.37%)  ???:llvm::ValueHandleBase::AddToUseList()
  4,414,303 ( 0.37%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
  4,235,132 ( 0.35%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
  4,211,795 ( 0.35%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  4,192,109 ( 0.35%)  ???:llvm::ScalarEvolution::getAddExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::SCEV::NoWrapFlags, unsigned int)
  4,141,271 ( 0.34%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  3,985,569 ( 0.33%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  3,685,519 ( 0.31%)  ???:(anonymous namespace)::RegisterCoalescer::joinCopy(llvm::MachineInstr*, bool&)
  3,645,275 ( 0.30%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
  3,533,040 ( 0.29%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  3,323,755 ( 0.28%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
  3,307,786 ( 0.28%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
  3,296,620 ( 0.27%)  ???:llvm::ScalarEvolution::getSCEV(llvm::Value*)
  3,288,414 ( 0.27%)  ???:llvm::EVT::getVectorNumElements() const
  3,160,523 ( 0.26%)  ???:llvm::APInt::zextOrTrunc(unsigned int) const
  3,126,404 ( 0.26%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  3,110,954 ( 0.26%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  3,009,257 ( 0.25%)  ???:llvm::ScheduleDAGMILive::updatePressureDiffs(llvm::ArrayRef<llvm::RegisterMaskPair>)
  2,991,027 ( 0.25%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
  2,970,494 ( 0.25%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
  2,932,109 ( 0.24%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  2,925,513 ( 0.24%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  2,823,156 ( 0.24%)  ???:llvm::SelectionDAG::computeKnownBits(llvm::SDValue, unsigned int) const
  2,778,655 ( 0.23%)  ./malloc/malloc.c:malloc_consolidate
  2,753,252 ( 0.23%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  2,743,776 ( 0.23%)  ???:llvm::KnownBits::operator^=(llvm::KnownBits const&)
  2,615,593 ( 0.22%)  ???:llvm::InstCombinerImpl::visitXor(llvm::BinaryOperator&)
  2,591,196 ( 0.22%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  2,575,764 ( 0.21%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
  2,560,105 ( 0.21%)  ???:llvm::Type::getPrimitiveSizeInBits() const
  2,542,108 ( 0.21%)  ???:llvm::ScalarEvolution::getRangeRef(llvm::SCEV const*, llvm::ScalarEvolution::RangeSignHint)
  2,427,164 ( 0.20%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  2,406,368 ( 0.20%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
  2,350,172 ( 0.20%)  ???:llvm::BuildVectorSDNode::getSplatValue(llvm::APInt const&, llvm::BitVector*) const
  2,306,790 ( 0.19%)  ???:llvm::KnownBits::commonBits(llvm::KnownBits const&, llvm::KnownBits const&)
  2,295,371 ( 0.19%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
  2,290,623 ( 0.19%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  2,270,737 ( 0.19%)  ???:llvm::TargetLowering::SimplifyDemandedVectorElts(llvm::SDValue, llvm::APInt const&, llvm::APInt&, llvm::APInt&, llvm::TargetLowering::TargetLoweringOpt&, unsigned int, bool) const
  2,265,890 ( 0.19%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  2,255,717 ( 0.19%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  2,182,187 ( 0.18%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
  2,139,033 ( 0.18%)  ./elf/do-rel.h:_dl_relocate_object
  2,095,836 ( 0.17%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
  2,088,024 ( 0.17%)  ???:(anonymous namespace)::RAGreedy::tryAssign(llvm::LiveInterval&, llvm::AllocationOrder&, llvm::SmallVectorImpl<llvm::Register>&, llvm::SmallSet<llvm::Register, 16u, std::less<llvm::Register> > const&)
  2,065,722 ( 0.17%)  ???:llvm::RegPressureTracker::recede(llvm::RegisterOperands const&, llvm::SmallVectorImpl<llvm::RegisterMaskPair>*)
  2,059,267 ( 0.17%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
  2,030,967 ( 0.17%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  2,024,167 ( 0.17%)  ???:llvm::VirtRegAuxInfo::weightCalcHelper(llvm::LiveInterval&, llvm::SlotIndex*, llvm::SlotIndex*)
  2,018,570 ( 0.17%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
  2,015,689 ( 0.17%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::EVT, llvm::SDValue, llvm::SDValue, llvm::SDNodeFlags)
  2,004,988 ( 0.17%)  ???:llvm::LiveIntervalCalc::calculate(llvm::LiveInterval&, bool)
  2,000,472 ( 0.17%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
  1,991,202 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  1,988,876 ( 0.17%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  1,984,724 ( 0.17%)  ???:llvm::SelectionDAG::Legalize()
  1,976,558 ( 0.16%)  ???:llvm::MVT::getSizeInBits() const
  1,964,466 ( 0.16%)  ???:llvm::KnownBits::computeForAddCarry(llvm::KnownBits const&, llvm::KnownBits const&, llvm::KnownBits const&)
  1,927,503 ( 0.16%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
  1,877,090 ( 0.16%)  ???:llvm::X86TargetLowering::computeKnownBitsForTargetNode(llvm::SDValue, llvm::KnownBits&, llvm::APInt const&, llvm::SelectionDAG const&, unsigned int) const
  1,867,372 ( 0.16%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
  1,859,022 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  1,810,967 ( 0.15%)  ???:llvm::ScalarEvolution::getAddRecExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::Loop const*, llvm::SCEV::NoWrapFlags)
  1,808,300 ( 0.15%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
  1,802,264 ( 0.15%)  ???:llvm::MachineInstrExpressionTrait::getHashValue(llvm::MachineInstr const* const&)
  1,757,529 ( 0.15%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  1,744,020 ( 0.15%)  ???:llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predicate, llvm::APInt const&)
  1,738,872 ( 0.14%)  ???:llvm::ScalarEvolution::~ScalarEvolution()
  1,714,010 ( 0.14%)  ???:llvm::ScheduleDAGInstrs::buildSchedGraph(llvm::AAResults*, llvm::RegPressureTracker*, llvm::PressureDiffs*, llvm::LiveIntervals*, bool)
  1,700,324 ( 0.14%)  ???:llvm::SelectionDAG::getValidMinimumShiftAmountConstant(llvm::SDValue, llvm::APInt const&) const
  1,682,537 ( 0.14%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  1,671,985 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  1,671,497 ( 0.14%)  ???:llvm::SelectionDAG::ComputeNumSignBits(llvm::SDValue, llvm::APInt const&, unsigned int) const
  1,664,552 ( 0.14%)  ???:llvm::ScheduleDAGInstrs::addVRegDefDeps(llvm::SUnit*, unsigned int)
  1,657,956 ( 0.14%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  1,656,178 ( 0.14%)  ???:llvm::LiveRange::join(llvm::LiveRange&, int const*, int const*, llvm::SmallVectorImpl<llvm::VNInfo*>&)
  1,649,825 ( 0.14%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  1,629,387 ( 0.14%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
  1,620,859 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
  1,613,500 ( 0.13%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  1,607,476 ( 0.13%)  ???:llvm::DAGTypeLegalizer::run()
  1,598,400 ( 0.13%)  ???:llvm::hash_value(llvm::MachineOperand const&)
  1,589,392 ( 0.13%)  ???:(anonymous namespace)::VirtRegRewriter::runOnMachineFunction(llvm::MachineFunction&)
  1,573,918 ( 0.13%)  ???:llvm::SDValue::getScalarValueSizeInBits() const
  1,566,565 ( 0.13%)  ???:llvm::ScalarEvolution::getLoopDisposition(llvm::SCEV const*, llvm::Loop const*)
  1,553,678 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
  1,541,224 ( 0.13%)  ???:getShuffleDemandedElts(llvm::ShuffleVectorInst const*, llvm::APInt const&, llvm::APInt&, llvm::APInt&)
  1,537,457 ( 0.13%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  1,532,006 ( 0.13%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
  1,517,419 ( 0.13%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  1,489,080 ( 0.12%)  ???:llvm::GenericScheduler::pickNode(bool&)
  1,487,671 ( 0.12%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  1,480,041 ( 0.12%)  ???:(anonymous namespace)::RegisterCoalescer::updateRegDefsUses(llvm::Register, llvm::Register, unsigned int)
  1,428,211 ( 0.12%)  ???:llvm::ScalarEvolution::getMulExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::SCEV::NoWrapFlags, unsigned int)
  1,420,164 ( 0.12%)  ./stdlib/msort.c:msort_with_tmp.part.0
  1,420,037 ( 0.12%)  ???:(anonymous namespace)::MachineCSE::runOnMachineFunction(llvm::MachineFunction&)
  1,403,708 ( 0.12%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
  1,402,651 ( 0.12%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
  1,340,895 ( 0.11%)  ???:llvm::TargetTransformInfo::Model<llvm::X86TTIImpl>::getUserCost(llvm::User const*, llvm::ArrayRef<llvm::Value const*>, llvm::TargetTransformInfo::TargetCostKind)
  1,338,552 ( 0.11%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
  1,338,318 ( 0.11%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
  1,332,046 ( 0.11%)  ???:(anonymous namespace)::LiveRangeShrink::runOnMachineFunction(llvm::MachineFunction&)
  1,305,551 ( 0.11%)  ???:llvm::LiveRange::extendInBlock(llvm::ArrayRef<llvm::SlotIndex>, llvm::SlotIndex, llvm::SlotIndex)
  1,304,883 ( 0.11%)  ???:(anonymous namespace)::MachineLICMBase::runOnMachineFunction(llvm::MachineFunction&)
  1,250,577 ( 0.10%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
  1,242,384 ( 0.10%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
  1,231,950 ( 0.10%)  ???:llvm::ScalarEvolution::getBackedgeTakenInfo(llvm::Loop const*)
  1,230,249 ( 0.10%)  ???:SimplifyAndInst(llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  1,216,085 ( 0.10%)  ???:llvm::InstCombinerImpl::visitAnd(llvm::BinaryOperator&)
  1,215,153 ( 0.10%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
  1,202,894 ( 0.10%)  ???:SimplifyShift(llvm::Instruction::BinaryOps, llvm::Value*, llvm::Value*, bool, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  1,202,573 ( 0.10%)  ???:llvm::SCCPInstVisitor::visitBinaryOperator(llvm::Instruction&)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    2,325 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   97,547 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    1,659 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      224 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  112,164 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,423 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
        4 ( 0.00%)          self.position += bytes;
        4 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      326 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      405 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   11,687 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   45,974 ( 0.00%)          read_leb128!(self, read_u32_leb128)
   23,374 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.05%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,048,932 ( 0.09%)          let value = self.data[self.position];
  201,149 ( 0.02%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   56,185 ( 0.00%)      fn read_usize(&mut self) -> usize {
   56,185 ( 0.00%)          read_leb128!(self, read_usize_leb128)
  112,370 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   14,592 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    7,948 ( 0.00%)          let len = self.read_usize();
   48,392 ( 0.00%)          let sentinel = self.data[self.position + len];
   12,098 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   30,245 ( 0.00%)          self.position += len + 1;
    5,685 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       40 ( 0.00%)          let start = self.position;
    1,264 ( 0.00%)          self.position += s.len();
       40 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  248,071 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  334,761 ( 0.03%)          Vec { buf: RawVec::NEW, len: 0 }
       39 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   88,714 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    6,325 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   34,653 ( 0.00%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   25,503 ( 0.00%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,091 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,628 ( 0.00%)          if self.capacity() > self.len {
    2,172 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      637 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,972 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   12,059 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   16,743 ( 0.00%)              self.len = len;
      399 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   15,560 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  341,358 ( 0.03%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  482,709 ( 0.04%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   58,693 ( 0.00%)          self.len = new_len;
      846 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      469 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       67 ( 0.00%)          let len = self.len();
      134 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      172 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      258 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      172 ( 0.00%)              self.set_len(len + 1);
        .                   }
      402 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       39 ( 0.00%)          let len = self.len();
      156 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
        .                           ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      134 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       39 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   26,802 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      992 ( 0.00%)          self.retain_mut(|elem| f(elem));
   26,216 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,290 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,358 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,300 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   48,087 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   10,656 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      400 ( 0.00%)                      g.processed_len += 1;
       96 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    1,245 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    1,102 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       60 ( 0.00%)          let len = self.len();
      308 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      570 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       56 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      326 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       60 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,036,003 ( 0.09%)          if self.len == self.buf.capacity() {
   36,996 ( 0.00%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   15,825 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,172,299 ( 0.10%)              self.len += 1;
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  105,361 ( 0.01%)          if self.len == 0 {
        5 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   91,519 ( 0.01%)                  self.len -= 1;
   11,573 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       56 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    2,001 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   25,417 ( 0.00%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,199 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       58 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       97 ( 0.00%)              Drain {
        .                           tail_start: end,
       50 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   23,123 ( 0.00%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   31,940 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      176 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      160 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,780 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      238 ( 0.00%)          let len = self.len();
      476 ( 0.00%)          if new_len > len {
    2,186 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,542 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       38 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    2,380 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      238 ( 0.00%)          let len = self.len();
        .           
      714 ( 0.00%)          if new_len > len {
      480 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      302 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   22,491 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      682 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   23,109 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   17,917 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,942 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   30,078 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    3,986 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  481,481 ( 0.04%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  120,398 ( 0.01%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   18,634 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   23,414 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   14,760 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  125,139 ( 0.01%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   61,633 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   22,329 ( 0.00%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      630 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
        .               fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   50,067 ( 0.00%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
        .               }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
-- line 2626 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    8,977 ( 0.00%)          while let Some(element) = iterator.next() {
    1,201 ( 0.00%)              let len = self.len();
   19,101 ( 0.00%)              if len == self.capacity() {
       53 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   14,659 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
      445 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
       88 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      442 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      504 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   92,944 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   36,309 ( 0.00%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  109,474 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  130,616 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 84 ----------------------------------------
      .           pub struct SessionGlobals {
      .               symbol_interner: symbol::Interner,
      .               span_interner: Lock<span_encoding::SpanInterner>,
      .               hygiene_data: Lock<hygiene::HygieneData>,
      .               source_map: Lock<Option<Lrc<SourceMap>>>,
      .           }
      .           
      .           impl SessionGlobals {
     12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
     50 ( 0.00%)          SessionGlobals {
      2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
      .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
      6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
      .                       source_map: Lock::new(None),
      .                   }
     10 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
      1 ( 0.00%)      assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
      3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
      7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
      1 ( 0.00%)  }
      .           
      .           #[inline]
      .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
      .               assert!(
      .                   !SESSION_GLOBALS.is_set(),
      .                   "SESSION_GLOBALS should never be overwritten! \
      .                    Use another thread if you need another SessionGlobals"
      .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
      .               SESSION_GLOBALS.set(session_globals, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
      1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
      3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
     11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
      1 ( 0.00%)      } else {
      .                   SESSION_GLOBALS.with(f)
      .               }
      .           }
      .           
      .           #[inline]
      .           pub fn with_session_globals<R, F>(f: F) -> R
      .           where
      .               F: FnOnce(&SessionGlobals) -> R,
      .           {
 47,962 ( 0.00%)      SESSION_GLOBALS.with(f)
      .           }
      .           
      .           #[inline]
      .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
      .               create_session_globals_then(edition::DEFAULT_EDITION, f)
      .           }
      .           
      .           // If this ever becomes non thread-local, `decode_syntax_context`
      .           // and `decode_expn_id` will need to be updated to handle concurrent
      .           // deserialization.
      .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
      .           
      .           // FIXME: We should use this enum or something like it to get rid of the
      .           // use of magic `/rust/1.x/...` paths across the board.
     25 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    624 ( 0.00%)  #[derive(Decodable)]
      .           pub enum RealFileName {
      .               LocalPath(PathBuf),
      .               /// For remapped paths (namely paths into libstd that have been mapped
      .               /// to the appropriate spot on the local host's file system, and local file
      .               /// system paths that have been remapped with `FilePathMapping`),
      .               Remapped {
      .                   /// `local_path` is the (host-dependent) local path to the file. This is
      .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
      .           }
      .           
      .           impl Hash for RealFileName {
      .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
      .                   // To prevent #70924 from happening again we should only hash the
      .                   // remapped (virtualized) path if that exists. This is because
      .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
      .                   // remain stable even if the corresponding local_path changes
  1,699 ( 0.00%)          self.remapped_path_if_available().hash(state)
      .               }
      .           }
      .           
      .           // This is functionally identical to #[derive(Encodable)], with the exception of
      .           // an added assert statement
      .           impl<S: Encoder> Encodable<S> for RealFileName {
      .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
     14 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
      .                       RealFileName::LocalPath(ref local_path) => {
     56 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
      .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
      .                               Ok(())
      .                           })
      .                       }
      .           
      .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
      .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
      .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
      .                           p.as_ref().map(PathBuf::as_path)
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
      2 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p) => Some(p),
      .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
      .                   }
      3 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for embedding into build artifacts. This would still
      .               /// be a local path if it has not been remapped. A remapped path will not correspond
      .               /// to a valid file system path: see `local_path_if_available()` for something that
      .               /// is more likely to return paths into the local host file system.
      .               pub fn remapped_path_if_available(&self) -> &Path {
  1,366 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(p)
      .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Returns the path suitable for reading from the file system on the local host,
      .               /// if this information exists. Otherwise returns the remapped name.
      .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
      .               pub fn local_path_if_available(&self) -> &Path {
      7 ( 0.00%)          match self {
      .                       RealFileName::LocalPath(path)
      .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
      .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
      .                   }
      .               }
      .           
      .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
     22 ( 0.00%)          match display_pref {
      .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
      .                       FileNameDisplayPreference::Remapped => {
      .                           self.remapped_path_if_available().to_string_lossy()
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           /// Differentiates between real files and common virtual files.
  3,493 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
  3,850 ( 0.00%)  #[derive(Decodable, Encodable)]
      .           pub enum FileName {
      .               Real(RealFileName),
      .               /// Call to `quote!`.
      .               QuoteExpansion(u64),
      .               /// Command line.
      .               Anon(u64),
      .               /// Hack in `src/librustc_ast/parse.rs`.
      .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
      .               /// Custom sources for explicit parser calls from plugins and drivers.
      .               Custom(String),
      .               DocTest(PathBuf, isize),
      .               /// Post-substitution inline assembly from LLVM.
      .               InlineAsm(u64),
      .           }
      .           
      .           impl From<PathBuf> for FileName {
     49 ( 0.00%)      fn from(p: PathBuf) -> Self {
     14 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
     42 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
     49 ( 0.00%)      }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
      .           pub enum FileNameDisplayPreference {
      .               Remapped,
      .               Local,
      .           }
      .           
      .           pub struct FileNameDisplay<'a> {
      .               inner: &'a FileName,
      .               display_pref: FileNameDisplayPreference,
      .           }
      .           
      .           impl fmt::Display for FileNameDisplay<'_> {
     28 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
      .                   use FileName::*;
     42 ( 0.00%)          match *self.inner {
      .                       Real(ref name) => {
     42 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
      .                       }
      .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
      .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
      .                       Anon(_) => write!(fmt, "<anon>"),
      .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
      .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
      .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
      .                       Custom(ref s) => write!(fmt, "<{}>", s),
      .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
      .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
      .                   }
     35 ( 0.00%)      }
      .           }
      .           
      .           impl FileNameDisplay<'_> {
     60 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
     45 ( 0.00%)          match self.inner {
     15 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
      .                       _ => Cow::from(format!("{}", self)),
      .                   }
     60 ( 0.00%)      }
      .           }
      .           
      .           impl FileName {
      .               pub fn is_real(&self) -> bool {
      .                   use FileName::*;
    644 ( 0.00%)          match *self {
      .                       Real(_) => true,
      .                       Anon(_)
      .                       | MacroExpansion(_)
      .                       | ProcMacroSourceCode(_)
      .                       | CfgSpec(_)
      .                       | CliCrateAttr(_)
      .                       | Custom(_)
      .                       | QuoteExpansion(_)
      .                       | DocTest(_, _)
      .                       | InlineAsm(_) => false,
      .                   }
      .               }
      .           
     15 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
     30 ( 0.00%)      }
      .           
      .               // This may include transient local filesystem information.
      .               // Must not be embedded in build outputs.
      7 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
     14 ( 0.00%)      }
      .           
      .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
      .                   FileNameDisplay { inner: self, display_pref }
      .               }
      .           
      .               pub fn macro_expansion_source_code(src: &str) -> FileName {
      .                   let mut hasher = StableHasher::new();
      .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
      .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
      .           /// [`BytePos`] range between files.
      .           ///
      .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
      .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
      .           /// Using `Span` is generally preferred.
      .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
      .           pub struct SpanData {
      3 ( 0.00%)      pub lo: BytePos,
      3 ( 0.00%)      pub hi: BytePos,
      .               /// Information about where the macro came from, if this piece of
      .               /// code was created by a macro expansion.
      9 ( 0.00%)      pub ctxt: SyntaxContext,
      3 ( 0.00%)      pub parent: Option<LocalDefId>,
      .           }
      .           
      .           // Order spans by position in the file.
      .           impl Ord for SpanData {
      .               fn cmp(&self, other: &Self) -> Ordering {
      .                   let SpanData {
      .                       lo: s_lo,
      .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
      .               }
      .               #[inline]
      .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
      .                   Span::new(self.lo, self.hi, self.ctxt, parent)
      .               }
      .               /// Returns `true` if this is a dummy span with any hygienic context.
      .               #[inline]
      .               pub fn is_dummy(self) -> bool {
 20,612 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
      .               }
      .               /// Returns `true` if `self` fully encloses `other`.
      .               pub fn contains(self, other: Self) -> bool {
    105 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
      .               }
      .           }
      .           
      .           // The interner is pointed to by a thread local value which is only set on the main thread
      .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
      .           // to avoid panics and other errors, even though it would be memory safe to do so.
      .           #[cfg(not(parallel_compiler))]
      .           impl !Send for Span {}
      .           #[cfg(not(parallel_compiler))]
      .           impl !Sync for Span {}
      .           
      .           impl PartialOrd for Span {
  2,928 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
  2,196 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
  2,928 ( 0.00%)      }
      .           }
      .           impl Ord for Span {
      .               fn cmp(&self, rhs: &Self) -> Ordering {
      .                   Ord::cmp(&self.data(), &rhs.data())
      .               }
      .           }
      .           
      .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
      .           }
      .           
      .           impl Span {
      .               #[inline]
      .               pub fn lo(self) -> BytePos {
      .                   self.data().lo
      .               }
      .               #[inline]
  4,212 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
      .                   self.data().with_lo(lo)
  2,808 ( 0.00%)      }
      .               #[inline]
     44 ( 0.00%)      pub fn hi(self) -> BytePos {
      .                   self.data().hi
     44 ( 0.00%)      }
      .               #[inline]
    441 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
      .                   self.data().with_hi(hi)
    294 ( 0.00%)      }
      .               #[inline]
      .               pub fn ctxt(self) -> SyntaxContext {
      .                   self.data_untracked().ctxt
      .               }
      .               #[inline]
     80 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
      .                   self.data_untracked().with_ctxt(ctxt)
     48 ( 0.00%)      }
      .               #[inline]
      .               pub fn parent(self) -> Option<LocalDefId> {
      .                   self.data().parent
      .               }
      .               #[inline]
      .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
      .                   self.data().with_parent(ctxt)
      .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
      .               /// Returns a new span representing an empty span at the beginning of this span.
      .               #[inline]
      .               pub fn shrink_to_lo(self) -> Span {
      .                   let span = self.data_untracked();
      .                   span.with_hi(span.lo)
      .               }
      .               /// Returns a new span representing an empty span at the end of this span.
      .               #[inline]
     36 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
      .                   let span = self.data_untracked();
      .                   span.with_lo(span.hi)
     24 ( 0.00%)      }
      .           
      .               #[inline]
      .               /// Returns `true` if `hi == lo`.
      .               pub fn is_empty(self) -> bool {
      .                   let span = self.data_untracked();
      .                   span.hi == span.lo
      .               }
      .           
      .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
      .               pub fn substitute_dummy(self, other: Span) -> Span {
      .                   if self.is_dummy() { other } else { self }
      .               }
      .           
      .               /// Returns `true` if `self` fully encloses `other`.
    315 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.contains(other)
    210 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` touches `other`.
      .               pub fn overlaps(self, other: Span) -> bool {
      .                   let span = self.data();
      .                   let other = other.data();
      .                   span.lo < other.hi && other.lo < span.hi
      .               }
      .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
      .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
      .               /// if any.
      .               pub fn parent_callsite(self) -> Option<Span> {
      .                   let expn_data = self.ctxt().outer_expn_data();
      .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
      .               }
      .           
      .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
     80 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
     40 ( 0.00%)          while !outer.contains(self) {
      .                       self = self.parent_callsite()?;
      .                   }
      .                   Some(self)
     88 ( 0.00%)      }
      .           
      .               /// Edition of the crate from which this span came.
  1,398 ( 0.00%)      pub fn edition(self) -> edition::Edition {
      .                   self.ctxt().edition()
    932 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn rust_2015(self) -> bool {
    210 ( 0.00%)          self.edition() == edition::Edition::Edition2015
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2018(self) -> bool {
    288 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
      .               }
      .           
      .               #[inline]
      .               pub fn rust_2021(self) -> bool {
    182 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
      .               }
      .           
      .               /// Returns the source callee.
      .               ///
      .               /// Returns `None` if the supplied span has no expansion trace,
      .               /// else returns the `ExpnData` for the macro definition
      .               /// corresponding to the source callsite.
      .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
      .                   }
      .                   let expn_data = self.ctxt().outer_expn_data();
      .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
      .               }
      .           
      .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
      .               /// items can be used (that is, a macro marked with
      .               /// `#[allow_internal_unstable]`).
      5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      1 ( 0.00%)          self.ctxt()
      .                       .outer_expn_data()
      .                       .allow_internal_unstable
      .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      4 ( 0.00%)      }
      .           
      .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    273 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    234 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => k == kind,
      .                       _ => false,
      .                   }
    195 ( 0.00%)      }
      .           
      .               /// Returns the compiler desugaring that created this span, or `None`
      .               /// if this span is not from a desugaring.
    110 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    132 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
      .                       ExpnKind::Desugaring(k) => Some(k),
      .                       _ => None,
      .                   }
     88 ( 0.00%)      }
      .           
      .               /// Checks if a span is "internal" to a macro in which `unsafe`
      .               /// can be used without triggering the `unsafe_code` lint.
      .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      .               pub fn allows_unsafe(self) -> bool {
      .                   self.ctxt().outer_expn_data().allow_internal_unsafe
      .               }
      .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
      .           
      .               /// Returns a `Span` that would enclose both `self` and `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^^^^
      .               /// ```
 32,021 ( 0.00%)      pub fn to(self, end: Span) -> Span {
      .                   let span_data = self.data();
      .                   let end_data = end.data();
      .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
      .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
      .                   // have an incomplete span than a completely nonsensical one.
  5,822 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      .                       if span_data.ctxt == SyntaxContext::root() {
      .                           return end;
      .                       } else if end_data.ctxt == SyntaxContext::root() {
      .                           return self;
      .                       }
      .                       // Both spans fall within a macro.
      .                       // FIXME(estebank): check if it is the *same* macro.
      .                   }
      .                   Span::new(
      .                       cmp::min(span_data.lo, end_data.lo),
      .                       cmp::max(span_data.hi, end_data.hi),
      .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
 20,377 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
      .                   )
 26,199 ( 0.00%)      }
      .           
      .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///         ^^^^^^^^^^^^^
      .               /// ```
     88 ( 0.00%)      pub fn between(self, end: Span) -> Span {
      .                   let span = self.data();
      .                   let end = end.data();
      .                   Span::new(
      .                       span.hi,
      .                       end.lo,
      .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
     56 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
      .                   )
     64 ( 0.00%)      }
      .           
      .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
      .               ///
      .               /// ```text
      .               ///     ____             ___
      .               ///     self lorem ipsum end
      .               ///     ^^^^^^^^^^^^^^^^^
      .               /// ```
    572 ( 0.00%)      pub fn until(self, end: Span) -> Span {
      .                   // Most of this function's body is copied from `to`.
      .                   // We can't just do `self.to(end.shrink_to_lo())`,
      .                   // because to also does some magic where it uses min/max so
      .                   // it can handle overlapping spans. Some advanced mis-use of
      .                   // `until` with different ctxts makes this visible.
      .                   let span_data = self.data();
      .                   let end_data = end.data();
      .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
      .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
      .                   // have an incomplete span than a completely nonsensical one.
    104 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      .                       if span_data.ctxt == SyntaxContext::root() {
      .                           return end;
      .                       } else if end_data.ctxt == SyntaxContext::root() {
      .                           return self;
      .                       }
      .                       // Both spans fall within a macro.
      .                       // FIXME(estebank): check if it is the *same* macro.
      .                   }
      .                   Span::new(
      .                       span_data.lo,
      .                       end_data.lo,
      .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    364 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
      .                   )
    468 ( 0.00%)      }
      .           
      .               pub fn from_inner(self, inner: InnerSpan) -> Span {
      .                   let span = self.data();
      .                   Span::new(
      .                       span.lo + BytePos::from_usize(inner.start),
      .                       span.lo + BytePos::from_usize(inner.end),
      .                       span.ctxt,
      .                       span.parent,
      .                   )
      .               }
      .           
      .               /// Equivalent of `Span::def_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
      .               }
      .           
      .               /// Equivalent of `Span::call_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
      .               }
      .           
      .               /// Equivalent of `Span::mixed_site` from the proc macro API,
      .               /// except that the location is taken from the `self` span.
      .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
      .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
      .               }
      .           
      .               /// Produces a span with the same location as `self` and context produced by a macro with the
      .               /// given ID and transparency, assuming that macro was defined directly and not produced by
      .               /// some other macro (which is the case for built-in and procedural macros).
     24 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
     14 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
      .               }
      .           
      .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
      .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut span = self.data();
      .                   let mark = span.ctxt.adjust(expn_id);
      .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
  3,663 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  2,442 ( 0.00%)          let mut span = self.data();
  2,035 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  3,663 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
  4,070 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
     48 ( 0.00%)          let mut span = self.data();
     72 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
    192 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
      .               }
      .           
      .               #[inline]
    603 ( 0.00%)      pub fn reverse_glob_adjust(
      .                   &mut self,
      .                   expn_id: ExpnId,
      .                   glob_span: Span,
      .               ) -> Option<Option<ExpnId>> {
    544 ( 0.00%)          let mut span = self.data();
    619 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
  1,171 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
      .                   mark
    670 ( 0.00%)      }
      .           
      .               #[inline]
  4,736 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  4,144 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> Span {
      .                   let span = self.data();
      .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
      .               }
      .           }
      .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
      .           
      .               /// What label should we attach to this span (if any)?
      .               pub label: Option<String>,
      .           }
      .           
      .           impl Default for Span {
      .               fn default() -> Self {
      .                   DUMMY_SP
      2 ( 0.00%)      }
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for Span {
      .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
      .                   let span = self.data();
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
      .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
      .           /// any spans that are debug-printed during the closure's execution.
      .           ///
      .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
      .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
      .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
      .           /// a `TyCtxt` is available. In this case, we fall back to
      .           /// the `SourceMap` provided to this function. If that is not available,
      .           /// we fall back to printing the raw `Span` field values.
      9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
      .               with_session_globals(|session_globals| {
      2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
      .               });
      .               struct ClearSourceMap;
      .               impl Drop for ClearSourceMap {
      .                   fn drop(&mut self) {
      .                       with_session_globals(|session_globals| {
      1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
      .                       });
      .                   }
      .               }
      .           
      .               let _guard = ClearSourceMap;
      4 ( 0.00%)      f()
      8 ( 0.00%)  }
      .           
      .           pub fn debug_with_source_map(
      .               span: Span,
      .               f: &mut fmt::Formatter<'_>,
      .               source_map: &SourceMap,
      .           ) -> fmt::Result {
      .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
      .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
      .           
      .           impl MultiSpan {
      .               #[inline]
      .               pub fn new() -> MultiSpan {
      .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_span(primary_span: Span) -> MultiSpan {
    130 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
      .               }
      .           
      .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
      .                   vec.sort();
     20 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
      .               }
      .           
      .               pub fn push_span_label(&mut self, span: Span, label: String) {
      .                   self.span_labels.push((span, label));
      .               }
      .           
      .               /// Selects the first primary span (if any).
      .               pub fn primary_span(&self) -> Option<Span> {
      .                   self.primary_spans.first().cloned()
      1 ( 0.00%)      }
      .           
      .               /// Returns all primary spans.
      .               pub fn primary_spans(&self) -> &[Span] {
      .                   &self.primary_spans
      .               }
      .           
      .               /// Returns `true` if any of the primary spans are displayable.
      .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
      .           
      .               /// Returns `true` if any of the span labels is displayable.
      .               pub fn has_span_labels(&self) -> bool {
      .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
      .               }
      .           }
      .           
      .           impl From<Span> for MultiSpan {
    130 ( 0.00%)      fn from(span: Span) -> MultiSpan {
      .                   MultiSpan::from_span(span)
    130 ( 0.00%)      }
      .           }
      .           
      .           impl From<Vec<Span>> for MultiSpan {
     20 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
     16 ( 0.00%)          MultiSpan::from_spans(spans)
     20 ( 0.00%)      }
      .           }
      .           
      .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
      .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub struct MultiByteChar {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The number of bytes, `>= 2`.
      .               pub bytes: u8,
      .           }
      .           
      .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
    268 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub enum NonNarrowChar {
      .               /// Represents a zero-width character.
      .               ZeroWidth(BytePos),
      .               /// Represents a wide (full-width) character.
      .               Wide(BytePos),
      .               /// Represents a tab character, represented visually with a width of 4 characters.
      .               Tab(BytePos),
      .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl Add<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
      .               fn add(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
      .                   }
      .               }
      .           }
      .           
      .           impl Sub<BytePos> for NonNarrowChar {
      .               type Output = Self;
      .           
    134 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
    466 ( 0.00%)          match self {
      .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
      .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
      .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
      .                   }
    402 ( 0.00%)      }
      .           }
      .           
      .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
      .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
      .           pub struct NormalizedPos {
      .               /// The absolute offset of the character in the `SourceMap`.
      .               pub pos: BytePos,
      .               /// The difference between original and normalized string at position.
      .               pub diff: u32,
      .           }
      .           
     21 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
      .           pub enum ExternalSource {
      .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
      .               Unneeded,
      .               Foreign {
      .                   kind: ExternalSourceKind,
      .                   /// This SourceFile's byte-offset within the source_map of its original crate.
      .                   original_start_pos: BytePos,
      .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
      .                       _ => None,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug)]
      .           pub struct OffsetOverflowError;
      .           
    630 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
      .           pub enum SourceFileHashAlgorithm {
      .               Md5,
      .               Sha1,
      .               Sha256,
      .           }
      .           
      .           impl FromStr for SourceFileHashAlgorithm {
      .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
      .                       _ => Err(()),
      .                   }
      .               }
      .           }
      .           
      .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
      .           
      .           /// The hash of the on-disk source file used for debug info.
     42 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
  1,260 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
      .           pub struct SourceFileHash {
      .               pub kind: SourceFileHashAlgorithm,
      .               value: [u8; 32],
      .           }
      .           
      .           impl SourceFileHash {
      .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
      .                   let mut hash = SourceFileHash { kind, value: Default::default() };
      .                   let len = hash.hash_len();
      .                   let value = &mut hash.value[..len];
      .                   let data = src.as_bytes();
      .                   match kind {
      .                       SourceFileHashAlgorithm::Md5 => {
     21 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha1 => {
      .                           value.copy_from_slice(&Sha1::digest(data));
      .                       }
      .                       SourceFileHashAlgorithm::Sha256 => {
      .                           value.copy_from_slice(&Sha256::digest(data));
      .                       }
      .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
      .           
      .               /// The bytes of the hash.
      .               pub fn hash_bytes(&self) -> &[u8] {
      .                   let len = self.hash_len();
      .                   &self.value[..len]
      .               }
      .           
      .               fn hash_len(&self) -> usize {
     21 ( 0.00%)          match self.kind {
      .                       SourceFileHashAlgorithm::Md5 => 16,
      .                       SourceFileHashAlgorithm::Sha1 => 20,
      .                       SourceFileHashAlgorithm::Sha256 => 32,
      .                   }
      .               }
      .           }
      .           
      .           /// A single source in the [`SourceMap`].
    406 ( 0.00%)  #[derive(Clone)]
      .           pub struct SourceFile {
      .               /// The name of the file that the source came from. Source that doesn't
      .               /// originate from files has names between angle brackets by convention
      .               /// (e.g., `<anon>`).
      .               pub name: FileName,
      .               /// The complete source code.
      7 ( 0.00%)      pub src: Option<Lrc<String>>,
      .               /// The source code's hash.
      .               pub src_hash: SourceFileHash,
      .               /// The external source code (used for external crates, which will have a `None`
      .               /// value as `self.src`.
      .               pub external_src: Lock<ExternalSource>,
      .               /// The start position of this source in the `SourceMap`.
      .               pub start_pos: BytePos,
      .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
      .               pub lines: Vec<BytePos>,
      .               /// Locations of multi-byte characters in the source code.
      .               pub multibyte_chars: Vec<MultiByteChar>,
      .               /// Width of characters that are not narrow in the source code.
      .               pub non_narrow_chars: Vec<NonNarrowChar>,
      .               /// Locations of characters removed during normalization.
      .               pub normalized_pos: Vec<NormalizedPos>,
      .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
      7 ( 0.00%)      pub name_hash: u128,
      .               /// Indicates which crate this `SourceFile` was imported from.
      7 ( 0.00%)      pub cnum: CrateNum,
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for SourceFile {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_struct(false, |s| {
      .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
      .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
      .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
      .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
      .                       s.emit_struct_field("lines", false, |s| {
      .                           let lines = &self.lines[..];
      .                           // Store the length.
      .                           s.emit_u32(lines.len() as u32)?;
      .           
     28 ( 0.00%)                  if !lines.is_empty() {
      .                               // In order to preserve some space, we exploit the fact that
      .                               // the lines list is sorted and individual lines are
      .                               // probably not that long. Because of that we can store lines
      .                               // as a difference list, using as little space as possible
      .                               // for the differences.
      .                               let max_line_length = if lines.len() == 1 {
      .                                   0
      .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
      .                                       .array_windows()
      .                                       .map(|&[fst, snd]| snd - fst)
      .                                       .map(|bp| bp.to_usize())
      .                                       .max()
      .                                       .unwrap()
      .                               };
      .           
      .                               let bytes_per_diff: u8 = match max_line_length {
     14 ( 0.00%)                          0..=0xFF => 1,
      .                                   0x100..=0xFFFF => 2,
      .                                   _ => 4,
      .                               };
      .           
      .                               // Encode the number of bytes used per diff.
      .                               bytes_per_diff.encode(s)?;
      .           
      .                               // Encode the first element.
      .                               lines[0].encode(s)?;
      .           
      .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
      .           
     14 ( 0.00%)                      match bytes_per_diff {
      .                                   1 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u8).encode(s)?
      .                                       }
      .                                   }
      .                                   2 => {
      .                                       for diff in diff_iter {
      .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
      .                                   _ => unreachable!(),
      .                               }
      .                           }
      .           
      .                           Ok(())
      .                       })?;
      .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
      .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
     21 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
      .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
     77 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
      .                   })
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for SourceFile {
  2,835 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
      .                   d.read_struct(|d| {
      .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
      .                       let src_hash: SourceFileHash =
      .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
      .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
      .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
      .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
      .                           let num_lines: u32 = Decodable::decode(d);
    315 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
      .           
      .                           if num_lines > 0 {
      .                               // Read the number of bytes used per diff.
      .                               let bytes_per_diff: u8 = Decodable::decode(d);
      .           
      .                               // Read the first element.
      .                               let mut line_start: BytePos = Decodable::decode(d);
      .                               lines.push(line_start);
      .           
      .                               for _ in 1..num_lines {
636,936 ( 0.05%)                          let diff = match bytes_per_diff {
      .                                       1 => d.read_u8() as u32,
      .                                       2 => d.read_u16() as u32,
      .                                       4 => d.read_u32(),
      .                                       _ => unreachable!(),
      .                                   };
      .           
      .                                   line_start = line_start + BytePos(diff);
      .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
      .                           }
      .           
      .                           lines
      .                       });
      .                       let multibyte_chars: Vec<MultiByteChar> =
      .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
      .                       let non_narrow_chars: Vec<NonNarrowChar> =
      .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    630 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
      .                       let normalized_pos: Vec<NormalizedPos> =
      .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
      .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
  3,465 ( 0.00%)              SourceFile {
  2,520 ( 0.00%)                  name,
      .                           start_pos,
      .                           end_pos,
      .                           src: None,
  1,260 ( 0.00%)                  src_hash,
      .                           // Unused - the metadata decoder will construct
      .                           // a new SourceFile, filling in `external_src` properly
      .                           external_src: Lock::new(ExternalSource::Unneeded),
  1,260 ( 0.00%)                  lines,
  1,260 ( 0.00%)                  multibyte_chars,
  1,260 ( 0.00%)                  non_narrow_chars,
  1,260 ( 0.00%)                  normalized_pos,
      .                           name_hash,
      .                           cnum,
      .                       }
      .                   })
  2,835 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SourceFile {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(fmt, "SourceFile({:?})", self.name)
      .               }
      .           }
      .           
      .           impl SourceFile {
     77 ( 0.00%)      pub fn new(
      .                   name: FileName,
      .                   mut src: String,
      .                   start_pos: BytePos,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> Self {
      .                   // Compute the file hash before any normalization.
      .                   let src_hash = SourceFileHash::new(hash_kind, &src);
     21 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
      .           
      .                   let name_hash = {
      .                       let mut hasher: StableHasher = StableHasher::new();
     14 ( 0.00%)              name.hash(&mut hasher);
      .                       hasher.finish::<u128>()
      .                   };
     14 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
     21 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
      .           
     84 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
     14 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
      .           
    119 ( 0.00%)          SourceFile {
      .                       name,
      .                       src: Some(Lrc::new(src)),
     77 ( 0.00%)              src_hash,
      .                       external_src: Lock::new(ExternalSource::Unneeded),
      .                       start_pos,
      .                       end_pos: Pos::from_usize(end_pos),
     28 ( 0.00%)              lines,
     28 ( 0.00%)              multibyte_chars,
     28 ( 0.00%)              non_narrow_chars,
     28 ( 0.00%)              normalized_pos,
      .                       name_hash,
      .                       cnum: LOCAL_CRATE,
      .                   }
     63 ( 0.00%)      }
      .           
      .               /// Returns the `BytePos` of the beginning of the current line.
      .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
      .                   let line_index = self.lookup_line(pos).unwrap();
      .                   self.lines[line_index]
      .               }
      .           
      .               /// Add externally loaded source.
      .               /// If the hash of the input doesn't match or no input is supplied via None,
      .               /// it is interpreted as an error and the corresponding enum variant is set.
      .               /// The return value signifies whether some kind of source is present.
    161 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
      .               where
      .                   F: FnOnce() -> Option<String>,
      .               {
     23 ( 0.00%)          if matches!(
     46 ( 0.00%)              *self.external_src.borrow(),
      .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
      .                   ) {
      .                       let src = get_src();
      .                       let mut external_src = self.external_src.borrow_mut();
      .                       // Check that no-one else have provided the source while we were getting it
      .                       if let ExternalSource::Foreign {
      .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
      .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
      .                               *src_kind = ExternalSourceKind::AbsentErr;
      .                           }
      .           
      .                           false
      .                       } else {
      .                           self.src.is_some() || external_src.get_source().is_some()
      .                       }
      .                   } else {
     23 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
      .                   }
    207 ( 0.00%)      }
      .           
      .               /// Gets a line from the list of pre-computed line-beginnings.
      .               /// The line number here is 0-based.
      .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      .                   fn get_until_newline(src: &str, begin: usize) -> &str {
      .                       // We can't use `lines.get(line_number+1)` because we might
      .                       // be parsing when we call this function and thus the current
      .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
      .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               pub fn is_real_file(&self) -> bool {
      .                   self.name.is_real()
    322 ( 0.00%)      }
      .           
      .               pub fn is_imported(&self) -> bool {
      .                   self.src.is_none()
  3,600 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.lines.len()
      .               }
      .           
      .               /// Finds the line containing the given position. The return value is the
      .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
      .               /// number. If the source_file is empty or the position is located before the
      .               /// first line, `None` is returned.
      .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
  1,100 ( 0.00%)          match self.lines.binary_search(&pos) {
      .                       Ok(idx) => Some(idx),
      .                       Err(0) => None,
      .                       Err(idx) => Some(idx - 1),
      .                   }
      .               }
      .           
      .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  2,234 ( 0.00%)          if self.is_empty() {
      .                       return self.start_pos..self.end_pos;
      .                   }
      .           
  1,601 ( 0.00%)          assert!(line_index < self.lines.len());
  2,148 ( 0.00%)          if line_index == (self.lines.len() - 1) {
     51 ( 0.00%)              self.lines[line_index]..self.end_pos
      .                   } else {
  1,390 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
      .                   }
      .               }
      .           
      .               /// Returns whether or not the file contains the given `SourceMap` byte
      .               /// position. The position one past the end of the file is considered to be
      .               /// contained by the file. This implies that files for which `is_empty`
      .               /// returns true still contain one byte position according to this function.
      .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
      .                       Err(i) if i == 0 => 0,
      .                       Err(i) => self.normalized_pos[i - 1].diff,
      .                   };
      .           
      .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
      .               }
      .           
      .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
     32 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
      .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
      .                   let mut total_extra_bytes = 0;
      .           
     96 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
      .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      .                       if mbc.pos < bpos {
      .                           // Every character is at least one byte, so we only
      .                           // count the actual extra bytes.
      .                           total_extra_bytes += mbc.bytes as u32 - 1;
      .                           // We should never see a byte position in the middle of a
      .                           // character.
      .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
      .                       } else {
      .                           break;
      .                       }
      .                   }
      .           
    192 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    160 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
     64 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
      .               /// given `BytePos`.
    112 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
     32 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
     15 ( 0.00%)          match self.lookup_line(pos) {
      .                       Some(a) => {
      .                           let line = a + 1; // Line numbers start at 1
     16 ( 0.00%)                  let linebpos = self.lines[a];
     32 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
      .                           let col = chpos - linechpos;
      .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
      .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
      .                           debug!("byte is on line: {}", line);
     16 ( 0.00%)                  assert!(chpos >= linechpos);
      .                           (line, col)
      .                       }
      .                       None => (0, chpos),
      .                   }
    128 ( 0.00%)      }
      .           
      .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
      .               /// column offset when displayed, for a given `BytePos`.
    128 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
     48 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
     32 ( 0.00%)          if line > 0 {
      .                       let col = col_or_chpos;
     16 ( 0.00%)              let linebpos = self.lines[line - 1];
      .                       let col_display = {
      .                           let start_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&linebpos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let special_chars = end_width_idx - start_width_idx;
      .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
      .                               .iter()
      .                               .map(|x| x.width())
      .                               .sum();
     80 ( 0.00%)                  col.0 - special_chars + non_narrow
      .                       };
      .                       (line, col, col_display)
      .                   } else {
      .                       let chpos = col_or_chpos;
      .                       let col_display = {
      .                           let end_width_idx = self
      .                               .non_narrow_chars
      .                               .binary_search_by_key(&pos, |x| x.pos())
      .                               .unwrap_or_else(|x| x);
      .                           let non_narrow: usize =
      .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
      .                           chpos.0 - end_width_idx + non_narrow
      .                       };
      .                       (0, chpos, col_display)
      .                   }
    112 ( 0.00%)      }
      .           }
      .           
      .           /// Normalizes the source code and records the normalizations.
     70 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
      .               let mut normalized_pos = vec![];
      .               remove_bom(src, &mut normalized_pos);
      .               normalize_newlines(src, &mut normalized_pos);
      .           
      .               // Offset all the positions by start_pos to match the final file positions.
      .               for np in &mut normalized_pos {
      .                   np.pos.0 += start_pos.0;
      .               }
      .           
      .               normalized_pos
     63 ( 0.00%)  }
      .           
      .           /// Removes UTF-8 BOM, if any.
      .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      7 ( 0.00%)      if src.starts_with('\u{feff}') {
      .                   src.drain(..3);
      .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
      .               }
      .           }
      .           
      .           /// Replaces `\r\n` with `\n` in-place in `src`.
      .           ///
      .           /// Returns error if there's a lone `\r` in the string.
      .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
      7 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
      .                   return;
      .               }
      .           
      .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
      .               // While we *can* call `as_mut_vec` and do surgery on the live string
      .               // directly, let's rather steal the contents of `src`. This makes the code
      .               // safe even if a panic occurs.
      .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
      .               (
      .                   $(
      .                       $(#[$attr:meta])*
      .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
      .                   )*
      .               ) => {
      .                   $(
      .                       $(#[$attr])*
  4,796 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
      .           
      .                       impl Pos for $ident {
      .                           #[inline(always)]
      .                           fn from_usize(n: usize) -> $ident {
    301 ( 0.00%)                      $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn to_usize(&self) -> usize {
  8,288 ( 0.00%)                      self.0 as usize
      .                           }
      .           
      .                           #[inline(always)]
      .                           fn from_u32(n: u32) -> $ident {
      .                               $ident(n as $inner_ty)
      .                           }
      .           
      .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       impl Add for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn add(self, rhs: $ident) -> $ident {
985,399 ( 0.08%)                      $ident(self.0 + rhs.0)
      .                           }
      .                       }
      .           
      .                       impl Sub for $ident {
      .                           type Output = $ident;
      .           
      .                           #[inline(always)]
      .                           fn sub(self, rhs: $ident) -> $ident {
558,568 ( 0.05%)                      $ident(self.0 - rhs.0)
      .                           }
      .                       }
      .                   )*
      .               };
      .           }
      .           
      .           impl_pos! {
      .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
      .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   s.emit_u32(self.0)
      .               }
      .           }
      .           
      .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
      .               fn decode(d: &mut D) -> BytePos {
 21,656 ( 0.00%)          BytePos(d.read_u32())
      .               }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // Loc, SourceFileAndLine, SourceFileAndBytePos
      .           //
      .           
      .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
      .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
      .               /// triple, which stays the same even if the containing `SourceFile` has moved
      .               /// within the `SourceMap`.
      .               ///
      .               /// Also note that we are hashing byte offsets for the column, not unicode
      .               /// codepoint offsets. For the purpose of the hash that's sufficient.
      .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
      .               /// span starts and ends in the same file, which is almost always the case.
 36,029 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_VALID_SPAN: u8 = 0;
      .                   const TAG_INVALID_SPAN: u8 = 1;
      .                   const TAG_RELATIVE_SPAN: u8 = 2;
      .           
  6,649 ( 0.00%)          if !ctx.hash_spans() {
      .                       return;
      .                   }
      .           
 29,380 ( 0.00%)          let span = self.data_untracked();
 10,935 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
 15,441 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
      .           
 10,432 ( 0.00%)          if span.is_dummy() {
      .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                       return;
      .                   }
      .           
 10,018 ( 0.00%)          if let Some(parent) = span.parent {
      .                       let def_span = ctx.def_span(parent).data_untracked();
      .                       if def_span.contains(span) {
      .                           // This span is enclosed in a definition: only hash the relative position.
      .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
      .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
      .                           return;
      .                       }
      .                   }
      .           
      .                   // If this is not an empty or invalid span, we want to hash the last
      .                   // position that belongs to it, as opposed to hashing the first
      .                   // position past it.
 20,036 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
      .                   {
 10,018 ( 0.00%)              Some(pos) => pos,
      .                       None => {
      .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
      .                           return;
      .                       }
      .                   };
      .           
      .                   Hash::hash(&TAG_VALID_SPAN, hasher);
      .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
      .                   // hash only the length, for example, then two otherwise equal spans with
      .                   // different end locations will have the same hash. This can cause a problem
      .                   // during incremental compilation wherein a previous result for a query that
      .                   // depends on the end location of a span will be incorrectly reused when the
      .                   // end location of the span it depends on has changed (see issue #74890). A
      .                   // similar analysis applies if some query depends specifically on the length
      .                   // of the span, but we only hash the end location. So hash both.
      .           
  5,009 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
      .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
      .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
      .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
      .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  5,009 ( 0.00%)          let len = (span.hi - span.lo).0;
      .                   Hash::hash(&col_line, hasher);
      .                   Hash::hash(&len, hasher);
 41,176 ( 0.00%)      }
      .           }

808,665 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
10,798,960 ( 0.90%)  events annotated

