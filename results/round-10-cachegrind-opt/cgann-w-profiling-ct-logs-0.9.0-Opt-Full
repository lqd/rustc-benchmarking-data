--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name ct_logs --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=7ec3dcf790de25be -C extra-filename=-7ec3dcf790de25be --out-dir /usr/home/liquid/tmp/.tmprKmTdU/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmprKmTdU/target/release/deps --extern sct=/usr/home/liquid/tmp/.tmprKmTdU/target/release/deps/libsct-b15f63450f29ce6b.rmeta -L native=/usr/home/liquid/tmp/.tmprKmTdU/target/release/build/ring-5e08914e4937eabf/out -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-ct-logs-0.9.0-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
146,090,284 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,308,916 ( 7.06%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 4,845,200 ( 3.32%)  ./elf/dl-lookup.c:do_lookup_x
 4,361,315 ( 2.99%)  ./malloc/malloc.c:_int_malloc
 4,141,271 ( 2.83%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,112,505 ( 2.13%)  ./malloc/malloc.c:_int_free
 2,795,665 ( 1.91%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,477,508 ( 1.70%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,329,694 ( 1.59%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,202,373 ( 1.51%)  ./malloc/malloc.c:malloc
 2,139,033 ( 1.46%)  ./elf/do-rel.h:_dl_relocate_object
 2,003,982 ( 1.37%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 1,437,784 ( 0.98%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,349,780 ( 0.92%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
 1,339,882 ( 0.92%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
 1,072,524 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,068,557 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,065,625 ( 0.73%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   866,296 ( 0.59%)  ./elf/dl-lookup.c:check_match
   855,690 ( 0.59%)  ./malloc/malloc.c:free
   796,658 ( 0.55%)  ???:char const** std::__find_if<char const**, __gnu_cxx::__ops::_Iter_equals_val<llvm::StringRef const> >(char const**, char const**, __gnu_cxx::__ops::_Iter_equals_val<llvm::StringRef const>, std::random_access_iterator_tag)
   779,565 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   732,769 ( 0.50%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   721,921 ( 0.49%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
   711,185 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   709,897 ( 0.49%)  ./malloc/malloc.c:malloc_consolidate
   641,989 ( 0.44%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
   540,031 ( 0.37%)  ???:(anonymous namespace)::ModuleBitcodeWriter::writeConstants(unsigned int, unsigned int, bool)
   531,375 ( 0.36%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   498,622 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_operand::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
   473,357 ( 0.32%)  ???:void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl<unsigned long>(unsigned int, llvm::ArrayRef<unsigned long>, llvm::StringRef, llvm::Optional<unsigned int>)
   472,019 ( 0.32%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
   455,208 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   439,869 ( 0.30%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   430,355 ( 0.29%)  ???:llvm::SHA1::hashBlock()
   413,193 ( 0.28%)  ???:llvm::MD5::body(llvm::ArrayRef<unsigned char>)
   411,780 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   409,715 ( 0.28%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   397,852 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
   376,684 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   374,099 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   370,148 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
   353,478 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   353,478 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   353,478 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   335,026 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   309,542 ( 0.21%)  ???:void llvm::BitstreamWriter::emitBlob<unsigned char>(llvm::ArrayRef<unsigned char>, bool)
   308,132 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
   306,015 ( 0.21%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
   304,714 ( 0.21%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
   282,110 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   277,965 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:<rustc_middle::ty::TyS>::is_trivially_unpin
   269,055 ( 0.18%)  ???:llvm::PMTopLevelManager::setLastUser(llvm::ArrayRef<llvm::Pass*>, llvm::Pass*)
   264,320 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:<rustc_middle::ty::TyS>::is_freeze
   259,028 ( 0.18%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   251,965 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   243,431 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   239,692 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
   238,378 ( 0.16%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
   230,066 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
   229,190 ( 0.16%)  ???:llvm::StringMapImpl::RehashTable(unsigned int)
   226,259 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   226,005 ( 0.15%)  ???:llvm::PMTopLevelManager::AUFoldingSetNode::Profile(llvm::FoldingSetNodeID&, llvm::AnalysisUsage const&)
   221,269 ( 0.15%)  ./stdlib/cxa_finalize.c:__cxa_finalize
   221,218 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   218,981 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_rvalue::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
   217,337 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   215,537 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   213,296 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
   211,360 ( 0.14%)  ???:(anonymous namespace)::GetCFGOnlyPasses::passEnumerate(llvm::PassInfo const*) [clone .llvm.764396836974782617]
   211,125 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
   206,127 ( 0.14%)  ???:llvm::MD5::update(llvm::StringRef)
   203,395 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::inspect_node
   202,820 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   201,479 ( 0.14%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
   195,415 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
   187,738 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   184,664 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
   183,624 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
   183,198 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
   182,346 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   179,608 ( 0.12%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   179,115 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   179,011 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   177,188 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
   177,187 ( 0.12%)  ./malloc/malloc.c:realloc
   176,823 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
   176,096 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   175,853 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::slice_write_process_buffer
   174,563 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   173,304 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
   169,020 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   168,714 ( 0.12%)  ???:llvm::MCAssembler::writeSectionData(llvm::raw_ostream&, llvm::MCSection const*, llvm::MCAsmLayout const&) const
   167,523 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs:<rustc_middle::mir::Constant>::check_static_ptr
   167,516 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   167,016 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
   165,685 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   163,343 ( 0.11%)  ???:???
   163,088 ( 0.11%)  ???:llvm::ConstantExprKeyType::getHash() const
   162,009 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   156,084 ( 0.11%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   154,372 ( 0.11%)  ???:(anonymous namespace)::BitcodeReader::parseConstants()
   154,328 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs:<rustc_const_eval::transform::promote_consts::Validator>::validate_local
   153,489 ( 0.11%)  ???:llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*)
   153,057 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs:<std::path::Path as core::hash::Hash>::hash::<rustc_data_structures::stable_hasher::StableHasher>
   152,877 ( 0.10%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
   151,707 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   150,116 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   146,676 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_parse::lexer::StringReader>::validate_literal_escape::{closure#0}>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  3,057 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
517,807 ( 0.35%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
  2,422 ( 0.00%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  2,475 ( 0.00%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
     77 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
    285 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
     95 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
    455 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
-- line 1041 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      8 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

 69,433 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  151,445 ( 0.10%)          Vec { buf: RawVec::NEW, len: 0 }
        .               }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
-- line 433 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   15,536 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
      768 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   32,632 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
    2,952 ( 0.00%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      156 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
      700 ( 0.00%)          if self.capacity() > self.len {
       47 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
       86 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   16,612 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   11,362 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
    5,270 ( 0.00%)              self.len = len;
        5 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   19,932 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  127,493 ( 0.09%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  473,481 ( 0.32%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   42,766 ( 0.03%)          self.len = new_len;
        .               }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
-- line 1275 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       35 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
        5 ( 0.00%)          let len = self.len();
      280 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      360 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      540 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      360 ( 0.00%)              self.set_len(len + 1);
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      168 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
        .                   self.retain_mut(|elem| f(elem));
      168 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      297 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
      576 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      841 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   12,062 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    4,331 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    4,230 ( 0.00%)                      g.processed_len += 1;
    3,678 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
    2,581 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
       18 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
       12 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
       12 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1699 ----------------------------------------
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       15 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,269,647 ( 0.87%)          if self.len == self.buf.capacity() {
    8,338 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
    3,741 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,371,772 ( 0.94%)              self.len += 1;
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
   37,095 ( 0.03%)          if self.len == 0 {
        3 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   34,259 ( 0.02%)                  self.len -= 1;
    3,771 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1789 ----------------------------------------
        .               }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
      876 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   11,840 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,035 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
      120 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       57 ( 0.00%)              Drain {
        .                           tail_start: end,
       86 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   29,801 ( 0.02%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   18,566 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    1,024 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      146 ( 0.00%)          let len = self.len();
      292 ( 0.00%)          if new_len > len {
    1,048 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      878 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       20 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       20 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        2 ( 0.00%)          let len = self.len();
        .           
        6 ( 0.00%)          if new_len > len {
       18 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      514 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
      635 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
       62 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
    1,339 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
      499 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
      370 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
      590 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
      330 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  198,190 ( 0.14%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
   37,275 ( 0.03%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
    2,020 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
    2,361 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
       81 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
   20,798 ( 0.01%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   19,441 ( 0.01%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   10,424 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,054 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
        .               fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
    9,892 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
        .               }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
-- line 2626 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    1,279 ( 0.00%)          while let Some(element) = iterator.next() {
      524 ( 0.00%)              let len = self.len();
    5,644 ( 0.00%)              if len == self.capacity() {
       20 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
    5,441 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
        .               }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
-- line 2663 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      374 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
        4 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
        .                   DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
-- line 2761 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   74,608 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   22,464 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   87,944 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

   65,000 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs
--------------------------------------------------------------------------------
Ir              

-- line 30 ----------------------------------------
     .           
     .           /// A `MirPass` for promotion.
     .           ///
     .           /// Promotion is the extraction of promotable temps into separate MIR bodies so they can have
     .           /// `'static` lifetime.
     .           ///
     .           /// After this pass is run, `promoted_fragments` will hold the MIR body corresponding to each
     .           /// newly created `Constant`.
     5 ( 0.00%)  #[derive(Default)]
     .           pub struct PromoteTemps<'tcx> {
     .               pub promoted_fragments: Cell<IndexVec<Promoted, Body<'tcx>>>,
     .           }
     .           
     .           impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {
     .               fn phase_change(&self) -> Option<MirPhase> {
     .                   Some(MirPhase::ConstPromotion)
     2 ( 0.00%)      }
     .           
     6 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
     .                   // There's not really any point in promoting errorful MIR.
     .                   //
     .                   // This does not include MIR that failed const-checking, which we still try to promote.
     1 ( 0.00%)          if body.return_ty().references_error() {
     .                       tcx.sess.delay_span_bug(body.span, "PromoteTemps: MIR had errors");
     .                       return;
     .                   }
     .           
     1 ( 0.00%)          if body.source.promoted.is_some() {
     .                       return;
     .                   }
     .           
     3 ( 0.00%)          let mut rpo = traversal::reverse_postorder(body);
     3 ( 0.00%)          let ccx = ConstCx::new(tcx, body);
    10 ( 0.00%)          let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);
     .           
     .                   let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);
     .           
    14 ( 0.00%)          let promoted = promote_candidates(body, tcx, temps, promotable_candidates);
     .                   self.promoted_fragments.set(promoted);
     7 ( 0.00%)      }
     .           }
     .           
     .           /// State of a temporary during collection and promotion.
 4,556 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           pub enum TempState {
     .               /// No references to this temp.
     .               Undefined,
     .               /// One direct assignment and any number of direct uses.
     .               /// A borrow of this temp is promotable if the assigned
     .               /// value is qualified as constant.
     .               Defined { location: Location, uses: usize },
     .               /// Any other combination of assignments/uses.
-- line 81 ----------------------------------------
-- line 102 ----------------------------------------
     .           
     .           struct Collector<'a, 'tcx> {
     .               ccx: &'a ConstCx<'a, 'tcx>,
     .               temps: IndexVec<Local, TempState>,
     .               candidates: Vec<Candidate>,
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {
 5,266 ( 0.00%)      fn visit_local(&mut self, &index: &Local, context: PlaceContext, location: Location) {
     .                   debug!("visit_local: index={:?} context={:?} location={:?}", index, context, location);
     .                   // We're only interested in temporaries and the return place
   340 ( 0.00%)          match self.ccx.body.local_kind(index) {
     .                       LocalKind::Temp | LocalKind::ReturnPointer => {}
     .                       LocalKind::Arg | LocalKind::Var => return,
     .                   }
     .           
     .                   // Ignore drops, if the temp gets promoted,
     .                   // then it's constant and thus drop is noop.
     .                   // Non-uses are also irrelevant.
 2,670 ( 0.00%)          if context.is_drop() || !context.is_use() {
     .                       debug!(
     .                           "visit_local: context.is_drop={:?} context.is_use={:?}",
     .                           context.is_drop(),
     .                           context.is_use(),
     .                       );
     .                       return;
     .                   }
     .           
     .                   let temp = &mut self.temps[index];
     .                   debug!("visit_local: temp={:?}", temp);
     .                   if *temp == TempState::Undefined {
 1,335 ( 0.00%)              match context {
     .                           PlaceContext::MutatingUse(MutatingUseContext::Store)
     .                           | PlaceContext::MutatingUse(MutatingUseContext::Call) => {
 1,335 ( 0.00%)                      *temp = TempState::Defined { location, uses: 0 };
     .                               return;
     .                           }
     .                           _ => { /* mark as unpromotable below */ }
     .                       }
 1,780 ( 0.00%)          } else if let TempState::Defined { ref mut uses, .. } = *temp {
     .                       // We always allow borrows, even mutable ones, as we need
     .                       // to promote mutable borrows of some ZSTs e.g., `&mut []`.
 1,780 ( 0.00%)              let allowed_use = match context {
     .                           PlaceContext::MutatingUse(MutatingUseContext::Borrow)
     .                           | PlaceContext::NonMutatingUse(_) => true,
     .                           PlaceContext::MutatingUse(_) | PlaceContext::NonUse(_) => false,
     .                       };
     .                       debug!("visit_local: allowed_use={:?}", allowed_use);
     .                       if allowed_use {
 1,780 ( 0.00%)                  *uses += 1;
     .                           return;
     .                       }
     .                       /* mark as unpromotable below */
     .                   }
     .                   *temp = TempState::Unpromotable;
 1,780 ( 0.00%)      }
     .           
 4,895 ( 0.00%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
     .                   self.super_rvalue(rvalue, location);
     .           
   890 ( 0.00%)          match *rvalue {
     .                       Rvalue::Ref(..) => {
     .                           self.candidates.push(Candidate { location });
     .                       }
     .                       _ => {}
     .                   }
 3,560 ( 0.00%)      }
     .           }
     .           
    10 ( 0.00%)  pub fn collect_temps_and_candidates<'tcx>(
     .               ccx: &ConstCx<'_, 'tcx>,
     .               rpo: &mut ReversePostorder<'_, 'tcx>,
     .           ) -> (IndexVec<Local, TempState>, Vec<Candidate>) {
     7 ( 0.00%)      let mut collector = Collector {
     2 ( 0.00%)          temps: IndexVec::from_elem(TempState::Undefined, &ccx.body.local_decls),
     .                   candidates: vec![],
     .                   ccx,
     .               };
     4 ( 0.00%)      for (bb, data) in rpo {
     .                   collector.visit_basic_block_data(bb, data);
     .               }
     9 ( 0.00%)      (collector.temps, collector.candidates)
     8 ( 0.00%)  }
     .           
     .           /// Checks whether locals that appear in a promotion context (`Candidate`) are actually promotable.
     .           ///
     .           /// This wraps an `Item`, and has access to all fields of that `Item` via `Deref` coercion.
     .           struct Validator<'a, 'tcx> {
     .               ccx: &'a ConstCx<'a, 'tcx>,
     .               temps: &'a IndexVec<Local, TempState>,
     .           }
     .           
     .           impl<'a, 'tcx> std::ops::Deref for Validator<'a, 'tcx> {
     .               type Target = ConstCx<'a, 'tcx>;
     .           
     .               fn deref(&self) -> &Self::Target {
11,943 ( 0.01%)          &self.ccx
     .               }
     .           }
     .           
     .           struct Unpromotable;
     .           
     .           impl<'tcx> Validator<'_, 'tcx> {
     .               fn validate_candidate(&self, candidate: Candidate) -> Result<(), Unpromotable> {
     .                   let loc = candidate.location;
   615 ( 0.00%)          let statement = &self.body[loc.block].statements[loc.statement_index];
 1,230 ( 0.00%)          match &statement.kind {
     .                       StatementKind::Assign(box (_, Rvalue::Ref(_, kind, place))) => {
     .                           // We can only promote interior borrows of promotable temps (non-temps
     .                           // don't get promoted anyway).
 1,025 ( 0.00%)                  self.validate_local(place.local)?;
     .           
     .                           // The reference operation itself must be promotable.
     .                           // (Needs to come after `validate_local` to avoid ICEs.)
 1,230 ( 0.00%)                  self.validate_ref(*kind, place)?;
     .           
     .                           // We do not check all the projections (they do not get promoted anyway),
     .                           // but we do stay away from promoting anything involving a dereference.
   615 ( 0.00%)                  if place.projection.contains(&ProjectionElem::Deref) {
     .                               return Err(Unpromotable);
     .                           }
     .           
     .                           // We cannot promote things that need dropping, since the promoted value
     .                           // would not get dropped.
   105 ( 0.00%)                  if self.qualif_local::<qualifs::NeedsDrop>(place.local) {
     .                               return Err(Unpromotable);
     .                           }
     .           
     .                           Ok(())
     .                       }
     .                       _ => bug!(),
     .                   }
     .               }
     .           
     .               // FIXME(eddyb) maybe cache this?
16,476 ( 0.01%)      fn qualif_local<Q: qualifs::Qualif>(&self, local: Local) -> bool {
43,936 ( 0.03%)          if let TempState::Defined { location: loc, .. } = self.temps[local] {
16,476 ( 0.01%)              let num_stmts = self.body[loc.block].statements.len();
     .           
10,984 ( 0.01%)              if loc.statement_index < num_stmts {
 5,492 ( 0.00%)                  let statement = &self.body[loc.block].statements[loc.statement_index];
10,984 ( 0.01%)                  match &statement.kind {
21,968 ( 0.02%)                      StatementKind::Assign(box (_, rhs)) => qualifs::in_rvalue::<Q, _>(
     .                                   &self.ccx,
47,336 ( 0.03%)                          &mut |l| self.qualif_local::<Q>(l),
     .                                   rhs,
     .                               ),
     .                               _ => {
     .                                   span_bug!(
     .                                       statement.source_info.span,
     .                                       "{:?} is not an assignment",
     .                                       statement
     .                                   );
-- line 254 ----------------------------------------
-- line 265 ----------------------------------------
     .                                   span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
     .                               }
     .                           }
     .                       }
     .                   } else {
     .                       let span = self.body.local_decls[local].source_info.span;
     .                       span_bug!(span, "{:?} not promotable, qualif_local shouldn't have been called", local);
     .                   }
10,984 ( 0.01%)      }
     .           
     .               // FIXME(eddyb) maybe cache this?
14,328 ( 0.01%)      fn validate_local(&self, local: Local) -> Result<(), Unpromotable> {
14,328 ( 0.01%)          if let TempState::Defined { location: loc, .. } = self.temps[local] {
 1,791 ( 0.00%)              let block = &self.body[loc.block];
 3,582 ( 0.00%)              let num_stmts = block.statements.len();
     .           
 3,582 ( 0.00%)              if loc.statement_index < num_stmts {
 1,791 ( 0.00%)                  let statement = &block.statements[loc.statement_index];
 3,582 ( 0.00%)                  match &statement.kind {
 1,791 ( 0.00%)                      StatementKind::Assign(box (_, rhs)) => self.validate_rvalue(rhs),
     .                               _ => {
     .                                   span_bug!(
     .                                       statement.source_info.span,
     .                                       "{:?} is not an assignment",
     .                                       statement
     .                                   );
     .                               }
     .                           }
-- line 292 ----------------------------------------
-- line 298 ----------------------------------------
     .                               kind => {
     .                                   span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
     .                               }
     .                           }
     .                       }
     .                   } else {
     .                       Err(Unpromotable)
     .                   }
16,119 ( 0.01%)      }
     .           
14,274 ( 0.01%)      fn validate_place(&self, place: PlaceRef<'tcx>) -> Result<(), Unpromotable> {
     .                   match place.last_projection() {
15,860 ( 0.01%)              None => self.validate_local(place.local),
     .                       Some((place_base, elem)) => {
     .                           // Validate topmost projection, then recurse.
     .                           match elem {
     .                               ProjectionElem::Deref => {
     .                                   let mut promotable = false;
     .                                   // We need to make sure this is a `Deref` of a local with no further projections.
     .                                   // Discussion can be found at
     .                                   // https://github.com/rust-lang/rust/pull/74945#discussion_r463063247
-- line 318 ----------------------------------------
-- line 412 ----------------------------------------
     .                               }
     .                           }
     .           
     .                           self.validate_place(place_base)
     .                       }
     .                   }
     .               }
     .           
   135 ( 0.00%)      fn validate_operand(&self, operand: &Operand<'tcx>) -> Result<(), Unpromotable> {
13,106 ( 0.01%)          match operand {
 1,756 ( 0.00%)              Operand::Copy(place) | Operand::Move(place) => self.validate_place(place.as_ref()),
     .           
     .                       // The qualifs for a constant (e.g. `HasMutInterior`) are checked in
     .                       // `validate_rvalue` upon access.
     .                       Operand::Constant(c) => {
30,110 ( 0.02%)                  if let Some(def_id) = c.check_static_ptr(self.tcx) {
     .                               // Only allow statics (not consts) to refer to other statics.
     .                               // FIXME(eddyb) does this matter at all for promotion?
     .                               // FIXME(RalfJung) it makes little sense to not promote this in `fn`/`const fn`,
     .                               // and in `const` this cannot occur anyway. The only concern is that we might
     .                               // promote even `let x = &STATIC` which would be useless, but this applies to
     .                               // promotion inside statics as well.
     .                               let is_static = matches!(self.const_kind, Some(hir::ConstContext::Static(_)));
     .                               if !is_static {
-- line 435 ----------------------------------------
-- line 442 ----------------------------------------
     .                               }
     .                           }
     .           
     .                           Ok(())
     .                       }
     .                   }
     .               }
     .           
 6,391 ( 0.00%)      fn validate_ref(&self, kind: BorrowKind, place: &Place<'tcx>) -> Result<(), Unpromotable> {
10,956 ( 0.01%)          match kind {
     .                       // Reject these borrow types just to be safe.
     .                       // FIXME(RalfJung): could we allow them? Should we? No point in it until we have a usecase.
     .                       BorrowKind::Shallow | BorrowKind::Unique => return Err(Unpromotable),
     .           
     .                       BorrowKind::Shared => {
 1,826 ( 0.00%)                  let has_mut_interior = self.qualif_local::<qualifs::HasMutInterior>(place.local);
 1,826 ( 0.00%)                  if has_mut_interior {
     .                               return Err(Unpromotable);
     .                           }
     .                       }
     .           
     .                       BorrowKind::Mut { .. } => {
     .                           let ty = place.ty(self.body, self.tcx).ty;
     .           
     .                           // In theory, any zero-sized value could be borrowed
-- line 466 ----------------------------------------
-- line 473 ----------------------------------------
     .                               }
     .                           } else {
     .                               return Err(Unpromotable);
     .                           }
     .                       }
     .                   }
     .           
     .                   Ok(())
 8,217 ( 0.01%)      }
     .           
     .               fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {
10,746 ( 0.01%)          match rvalue {
     .                       Rvalue::Use(operand) | Rvalue::Repeat(operand, _) => {
     .                           self.validate_operand(operand)?;
     .                       }
     .           
     .                       Rvalue::Discriminant(place) | Rvalue::Len(place) => {
     .                           self.validate_place(place.as_ref())?
     .                       }
     .           
     .                       Rvalue::ThreadLocalRef(_) => return Err(Unpromotable),
     .           
   135 ( 0.00%)              Rvalue::Cast(kind, operand, cast_ty) => {
   270 ( 0.00%)                  if matches!(kind, CastKind::Misc) {
     .                               let operand_ty = operand.ty(self.body, self.tcx);
     .                               let cast_in = CastTy::from_ty(operand_ty).expect("bad input type for cast");
     .                               let cast_out = CastTy::from_ty(cast_ty).expect("bad output type for cast");
     .                               if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {
     .                                   // ptr-to-int casts are not possible in consts and thus not promotable
     .                                   return Err(Unpromotable);
     .                               }
     .                               // int-to-ptr casts are fine, they just use the integer value at pointer type.
     .                           }
     .           
   270 ( 0.00%)                  self.validate_operand(operand)?;
     .                       }
     .           
     .                       Rvalue::NullaryOp(op, _) => match op {
     .                           NullOp::SizeOf => {}
     .                           NullOp::AlignOf => {}
     .                       },
     .           
     .                       Rvalue::ShallowInitBox(_, _) => return Err(Unpromotable),
-- line 515 ----------------------------------------
-- line 591 ----------------------------------------
     .                               }
     .                           }
     .                           return Err(Unpromotable);
     .                       }
     .           
     .                       Rvalue::Ref(_, kind, place) => {
     .                           // Special-case reborrows to be more like a copy of the reference.
     .                           let mut place_simplified = place.as_ref();
 3,030 ( 0.00%)                  if let Some((place_base, ProjectionElem::Deref)) =
     .                               place_simplified.last_projection()
     .                           {
 3,636 ( 0.00%)                      let base_ty = place_base.ty(self.body, self.tcx).ty;
 1,212 ( 0.00%)                      if let ty::Ref(..) = base_ty.kind() {
     .                                   place_simplified = place_base;
     .                               }
     .                           }
     .           
 4,248 ( 0.00%)                  self.validate_place(place_simplified)?;
     .           
     .                           // Check that the reference is fine (using the original place!).
     .                           // (Needs to come after `validate_place` to avoid ICEs.)
 3,540 ( 0.00%)                  self.validate_ref(*kind, place)?;
     .                       }
     .           
     .                       Rvalue::Aggregate(_, operands) => {
     .                           for o in operands {
 1,486 ( 0.00%)                      self.validate_operand(o)?;
     .                           }
     .                       }
     .                   }
     .           
     .                   Ok(())
     .               }
     .           
     .               fn validate_call(
-- line 625 ----------------------------------------
-- line 663 ----------------------------------------
     .           }
     .           
     .           // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.
     .           pub fn validate_candidates(
     .               ccx: &ConstCx<'_, '_>,
     .               temps: &IndexVec<Local, TempState>,
     .               candidates: &[Candidate],
     .           ) -> Vec<Candidate> {
     3 ( 0.00%)      let validator = Validator { ccx, temps };
     .           
     .               candidates
     .                   .iter()
     .                   .copied()
   205 ( 0.00%)          .filter(|&candidate| validator.validate_candidate(candidate).is_ok())
     .                   .collect()
     .           }
     .           
     .           struct Promoter<'a, 'tcx> {
     .               tcx: TyCtxt<'tcx>,
     .               source: &'a mut Body<'tcx>,
     .               promoted: Body<'tcx>,
     .               temps: &'a mut IndexVec<Local, TempState>,
-- line 684 ----------------------------------------
-- line 685 ----------------------------------------
     .               extra_statements: &'a mut Vec<(Location, Statement<'tcx>)>,
     .           
     .               /// If true, all nested temps are also kept in the
     .               /// source MIR, not moved to the promoted MIR.
     .               keep_original: bool,
     .           }
     .           
     .           impl<'a, 'tcx> Promoter<'a, 'tcx> {
     8 ( 0.00%)      fn new_block(&mut self) -> BasicBlock {
     1 ( 0.00%)          let span = self.promoted.span;
     5 ( 0.00%)          self.promoted.basic_blocks_mut().push(BasicBlockData {
     .                       statements: vec![],
     .                       terminator: Some(Terminator {
     .                           source_info: SourceInfo::outermost(span),
     .                           kind: TerminatorKind::Return,
     .                       }),
     .                       is_cleanup: false,
     .                   })
     9 ( 0.00%)      }
     .           
 3,544 ( 0.00%)      fn assign(&mut self, dest: Local, rvalue: Rvalue<'tcx>, span: Span) {
   443 ( 0.00%)          let last = self.promoted.basic_blocks().last().unwrap();
     .                   let data = &mut self.promoted[last];
 1,772 ( 0.00%)          data.statements.push(Statement {
     .                       source_info: SourceInfo::outermost(span),
 3,544 ( 0.00%)              kind: StatementKind::Assign(Box::new((Place::from(dest), rvalue))),
     .                   });
 3,544 ( 0.00%)      }
     .           
     .               fn is_temp_kind(&self, local: Local) -> bool {
     .                   self.source.local_kind(local) == LocalKind::Temp
     .               }
     .           
     .               /// Copies the initialization of this temp to the
     .               /// promoted MIR, recursing through temps.
     .               fn promote_temp(&mut self, temp: Local) -> Local {
     .                   let old_keep_original = self.keep_original;
 3,094 ( 0.00%)          let loc = match self.temps[temp] {
 1,768 ( 0.00%)              TempState::Defined { location, uses } if uses > 0 => {
   884 ( 0.00%)                  if uses > 1 {
     .                               self.keep_original = true;
     .                           }
     .                           location
     .                       }
     .                       state => {
     .                           span_bug!(self.promoted.span, "{:?} not promotable: {:?}", temp, state);
     .                       }
     .                   };
   884 ( 0.00%)          if !self.keep_original {
   884 ( 0.00%)              self.temps[temp] = TempState::PromotedOut;
     .                   }
     .           
   884 ( 0.00%)          let num_stmts = self.source[loc.block].statements.len();
     .                   let new_temp = self.promoted.local_decls.push(LocalDecl::new(
   442 ( 0.00%)              self.source.local_decls[temp].ty,
     .                       self.source.local_decls[temp].source_info.span,
     .                   ));
     .           
     .                   debug!("promote({:?} @ {:?}/{:?}, {:?})", temp, loc, num_stmts, self.keep_original);
     .           
     .                   // First, take the Rvalue or Call out of the source MIR,
     .                   // or duplicate it, depending on keep_original.
 1,326 ( 0.00%)          if loc.statement_index < num_stmts {
 5,304 ( 0.00%)              let (mut rvalue, source_info) = {
   884 ( 0.00%)                  let statement = &mut self.source[loc.block].statements[loc.statement_index];
 1,326 ( 0.00%)                  let rhs = match statement.kind {
   442 ( 0.00%)                      StatementKind::Assign(box (_, ref mut rhs)) => rhs,
     .                               _ => {
     .                                   span_bug!(
     .                                       statement.source_info.span,
     .                                       "{:?} is not an assignment",
     .                                       statement
     .                                   );
     .                               }
     .                           };
     .           
 3,536 ( 0.00%)                  (
   884 ( 0.00%)                      if self.keep_original {
     .                                   rhs.clone()
     .                               } else {
     .                                   let unit = Rvalue::Use(Operand::Constant(Box::new(Constant {
   442 ( 0.00%)                              span: statement.source_info.span,
     .                                       user_ty: None,
   884 ( 0.00%)                              literal: ty::Const::zero_sized(self.tcx, self.tcx.types.unit).into(),
     .                                   })));
     .                                   mem::replace(rhs, unit)
     .                               },
   442 ( 0.00%)                      statement.source_info,
     .                           )
     .                       };
     .           
   884 ( 0.00%)              self.visit_rvalue(&mut rvalue, loc);
 6,630 ( 0.00%)              self.assign(new_temp, rvalue, source_info.span);
     .                   } else {
     .                       let terminator = if self.keep_original {
     .                           self.source[loc.block].terminator().clone()
     .                       } else {
     .                           let terminator = self.source[loc.block].terminator_mut();
     .                           let target = match terminator.kind {
     .                               TerminatorKind::Call { destination: Some((_, target)), .. } => target,
     .                               ref kind => {
-- line 785 ----------------------------------------
-- line 816 ----------------------------------------
     .                               };
     .                           }
     .                           ref kind => {
     .                               span_bug!(terminator.source_info.span, "{:?} not promotable", kind);
     .                           }
     .                       };
     .                   };
     .           
   442 ( 0.00%)          self.keep_original = old_keep_original;
     .                   new_temp
     .               }
     .           
     .               fn promote_candidate(mut self, candidate: Candidate, next_promoted_id: usize) -> Body<'tcx> {
     8 ( 0.00%)          let def = self.source.source.with_opt_param();
     .                   let mut rvalue = {
     .                       let promoted = &mut self.promoted;
     .                       let promoted_id = Promoted::new(next_promoted_id);
     2 ( 0.00%)              let tcx = self.tcx;
     .                       let mut promoted_operand = |ty, span| {
     1 ( 0.00%)                  promoted.span = span;
    10 ( 0.00%)                  promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);
     .           
     .                           Operand::Constant(Box::new(Constant {
     .                               span,
     .                               user_ty: None,
     4 ( 0.00%)                      literal: tcx
    10 ( 0.00%)                          .mk_const(ty::Const {
     .                                       ty,
     .                                       val: ty::ConstKind::Unevaluated(ty::Unevaluated {
     .                                           def,
     4 ( 0.00%)                                  substs: InternalSubsts::for_item(tcx, def.did, |param, _| {
     .                                               if let ty::GenericParamDefKind::Lifetime = param.kind {
     .                                                   tcx.lifetimes.re_erased.into()
     .                                               } else {
     .                                                   tcx.mk_param_from_def(param)
     .                                               }
     .                                           }),
     .                                           promoted: Some(promoted_id),
     .                                       }),
     .                                   })
     .                                   .into(),
     .                           }))
     .                       };
     .                       let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();
     .                       let loc = candidate.location;
     .                       let statement = &mut blocks[loc.block].statements[loc.statement_index];
     5 ( 0.00%)              match statement.kind {
     .                           StatementKind::Assign(box (
     .                               _,
     .                               Rvalue::Ref(ref mut region, borrow_kind, ref mut place),
     .                           )) => {
     .                               // Use the underlying local for this (necessarily interior) borrow.
     4 ( 0.00%)                      let ty = local_decls.local_decls()[place.local].ty;
     2 ( 0.00%)                      let span = statement.source_info.span;
     .           
     1 ( 0.00%)                      let ref_ty = tcx.mk_ref(
     2 ( 0.00%)                          tcx.lifetimes.re_erased,
     2 ( 0.00%)                          ty::TypeAndMut { ty, mutbl: borrow_kind.to_mutbl_lossy() },
     .                               );
     .           
     3 ( 0.00%)                      *region = tcx.lifetimes.re_erased;
     .           
     1 ( 0.00%)                      let mut projection = vec![PlaceElem::Deref];
     1 ( 0.00%)                      projection.extend(place.projection);
     4 ( 0.00%)                      place.projection = tcx.intern_place_elems(&projection);
     .           
     .                               // Create a temp to hold the promoted reference.
     .                               // This is because `*r` requires `r` to be a local,
     .                               // otherwise we would use the `promoted` directly.
     .                               let mut promoted_ref = LocalDecl::new(ref_ty, span);
     2 ( 0.00%)                      promoted_ref.source_info = statement.source_info;
    10 ( 0.00%)                      let promoted_ref = local_decls.push(promoted_ref);
     3 ( 0.00%)                      assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);
     .           
     4 ( 0.00%)                      let promoted_ref_statement = Statement {
     4 ( 0.00%)                          source_info: statement.source_info,
     .                                   kind: StatementKind::Assign(Box::new((
     3 ( 0.00%)                              Place::from(promoted_ref),
     .                                       Rvalue::Use(promoted_operand(ref_ty, span)),
     .                                   ))),
     .                               };
    10 ( 0.00%)                      self.extra_statements.push((loc, promoted_ref_statement));
     .           
     7 ( 0.00%)                      Rvalue::Ref(
     3 ( 0.00%)                          tcx.lifetimes.re_erased,
     .                                   borrow_kind,
     .                                   Place {
     .                                       local: mem::replace(&mut place.local, promoted_ref),
     .                                       projection: List::empty(),
     .                                   },
     .                               )
     .                           }
     .                           _ => bug!(),
     .                       }
     .                   };
     .           
     4 ( 0.00%)          assert_eq!(self.new_block(), START_BLOCK);
     3 ( 0.00%)          self.visit_rvalue(
     .                       &mut rvalue,
     .                       Location { block: BasicBlock::new(0), statement_index: usize::MAX },
     .                   );
     .           
     1 ( 0.00%)          let span = self.promoted.span;
    10 ( 0.00%)          self.assign(RETURN_PLACE, rvalue, span);
     5 ( 0.00%)          self.promoted
     .               }
     .           }
     .           
     .           /// Replaces all temporaries with their promoted counterparts.
     .           impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
     .                   self.tcx
     .               }
     .           
 3,536 ( 0.00%)      fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {
 1,054 ( 0.00%)          if self.is_temp_kind(*local) {
   442 ( 0.00%)              *local = self.promote_temp(*local);
     .                   }
 3,536 ( 0.00%)      }
     .           }
     .           
     9 ( 0.00%)  pub fn promote_candidates<'tcx>(
     .               body: &mut Body<'tcx>,
     .               tcx: TyCtxt<'tcx>,
     .               mut temps: IndexVec<Local, TempState>,
     .               candidates: Vec<Candidate>,
     .           ) -> IndexVec<Promoted, Body<'tcx>> {
     .               // Visit candidates in reverse, in case they're nested.
     .               debug!("promote_candidates({:?})", candidates);
     .           
     .               let mut promotions = IndexVec::new();
     .           
     .               let mut extra_statements = vec![];
    35 ( 0.00%)      for candidate in candidates.into_iter().rev() {
     .                   let Location { block, statement_index } = candidate.location;
   280 ( 0.00%)          if let StatementKind::Assign(box (place, _)) = &body[block].statements[statement_index].kind
     .                   {
    35 ( 0.00%)              if let Some(local) = place.as_local() {
     .                           if temps[local] == TempState::PromotedOut {
     .                               // Already promoted.
     .                               continue;
     .                           }
     .                       }
     .                   }
     .           
     .                   // Declare return place local so that `mir::Body::new` doesn't complain.
     3 ( 0.00%)          let initial_locals = iter::once(LocalDecl::new(tcx.types.never, body.span)).collect();
     .           
     5 ( 0.00%)          let mut scope = body.source_scopes[body.source_info(candidate.location).scope].clone();
     .                   scope.parent_scope = None;
     .           
    14 ( 0.00%)          let promoted = Body::new(
     4 ( 0.00%)              body.source, // `promoted` gets filled in below
     .                       IndexVec::new(),
     .                       IndexVec::from_elem_n(scope, 1),
     4 ( 0.00%)              initial_locals,
     .                       IndexVec::new(),
     .                       0,
     .                       vec![],
     .                       body.span,
     .                       body.generator_kind(),
     .                   );
     .           
     .                   let promoter = Promoter {
-- line 979 ----------------------------------------
-- line 980 ----------------------------------------
     .                       promoted,
     .                       tcx,
     .                       source: body,
     .                       temps: &mut temps,
     .                       extra_statements: &mut extra_statements,
     .                       keep_original: false,
     .                   };
     .           
    12 ( 0.00%)          let mut promoted = promoter.promote_candidate(candidate, promotions.len());
     2 ( 0.00%)          promoted.source.promoted = Some(promotions.next_index());
     .                   promotions.push(promoted);
     .               }
     .           
     .               // Insert each of `extra_statements` before its indicated location, which
     .               // has to be done in reverse location order, to not invalidate the rest.
     .               extra_statements.sort_by_key(|&(loc, _)| cmp::Reverse(loc));
    10 ( 0.00%)      for (loc, statement) in extra_statements {
    10 ( 0.00%)          body[loc.block].statements.insert(loc.statement_index, statement);
     .               }
     .           
     .               // Eliminate assignments to, and drops of promoted temps.
     2 ( 0.00%)      let promoted = |index: Local| temps[index] == TempState::PromotedOut;
     .               for block in body.basic_blocks_mut() {
 6,095 ( 0.00%)          block.statements.retain(|statement| match &statement.kind {
   446 ( 0.00%)              StatementKind::Assign(box (place, _)) => {
   446 ( 0.00%)                  if let Some(index) = place.as_local() {
     .                               !promoted(index)
     .                           } else {
     .                               true
     .                           }
     .                       }
     .                       StatementKind::StorageLive(index) | StatementKind::StorageDead(index) => {
   853 ( 0.00%)                  !promoted(*index)
     .                       }
     .                       _ => true,
     .                   });
     .                   let terminator = block.terminator_mut();
     2 ( 0.00%)          if let TerminatorKind::Drop { place, target, .. } = &terminator.kind {
     .                       if let Some(index) = place.as_local() {
     .                           if promoted(index) {
     .                               terminator.kind = TerminatorKind::Goto { target: *target };
     .                           }
     .                       }
     .                   }
     .               }
     .           
     .               promotions
     8 ( 0.00%)  }
     .           
     .           /// This function returns `true` if the function being called in the array
     .           /// repeat expression is a `const` function.
     .           pub fn is_const_fn_in_array_repeat_expression<'tcx>(
     .               ccx: &ConstCx<'_, 'tcx>,
     .               place: &Place<'tcx>,
     .               body: &Body<'tcx>,
     .           ) -> bool {
-- line 1035 ----------------------------------------

47,812 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/promote_consts.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      .               fn clone(&self) -> Self {
      9 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
      2 ( 0.00%)              table: self.table.clone(),
      .                   }
      .               }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
  6,365 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 23,744 ( 0.02%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 12,798 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 19,120 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     76 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
      .               /// map.insert("c", 3);
      .               ///
      .               /// for key in map.keys() {
      .               ///     println!("{}", key);
      .               /// }
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn keys(&self) -> Keys<'_, K, V> {
      6 ( 0.00%)          Keys { inner: self.iter() }
      .               }
      .           
      .               /// An iterator visiting all values in arbitrary order.
      .               /// The iterator element type is `&'a V`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
    250 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  4,915 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 65,686 ( 0.04%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 59,578 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  5,362 ( 0.00%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
  9,994 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      1 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      6 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      2 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      2 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
      .               ///
      .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
      .               /// mutable reference will be returned to any value. `None` will be returned if any of the
      .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
157,414 ( 0.11%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      3 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
 60,264 ( 0.04%)              self.table
 65,227 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  3,540 ( 0.00%)              None
      .                   }
140,250 ( 0.10%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  7,494 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 20,092 ( 0.01%)          match self.remove_entry(k) {
  1,273 ( 0.00%)              Some((_, v)) => Some(v),
  4,070 ( 0.00%)              None => None,
      .                   }
 15,674 ( 0.01%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  7,472 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 48,496 ( 0.03%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
148,026 ( 0.10%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
151,585 ( 0.10%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 14,578 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
 62,880 ( 0.04%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 25,451 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 51,605 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
 38,717 ( 0.03%)          self.from_hash(hash, equivalent(k))
 84,744 ( 0.06%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
 90,107 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 40,342 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      1 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    878 ( 0.00%)          IntoIter {
    926 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
      3 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  5,960 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
      .                           Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      4 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     22 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
    431 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
    168 ( 0.00%)          let iter = iter.into_iter();
    244 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 16,322 ( 0.01%)              self.insert(k, v);
      .                   });
    358 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

 90,283 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs
--------------------------------------------------------------------------------
Ir               

-- line 153 ----------------------------------------
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Attempts to returns the deeply last field of nested structures, but
      .               /// does not apply any normalization in its search. Returns the same type
      .               /// if input `ty` is not a structure at all.
    315 ( 0.00%)      pub fn struct_tail_without_normalization(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   let tcx = self;
      .                   tcx.struct_tail_with_normalize(ty, |ty| ty)
    280 ( 0.00%)      }
      .           
      .               /// Returns the deeply last field of nested structures, or the same type if
      .               /// not a structure at all. Corresponds to the only possible unsized field,
      .               /// and its type can be used to determine unsizing strategy.
      .               ///
      .               /// Should only be called if `ty` has no inference variables and does not
      .               /// need its lifetimes preserved (e.g. as part of codegen); otherwise
      .               /// normalization attempt may cause compiler bugs.
  4,994 ( 0.00%)      pub fn struct_tail_erasing_lifetimes(
      .                   self,
      .                   ty: Ty<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tcx = self;
      .                   tcx.struct_tail_with_normalize(ty, |ty| tcx.normalize_erasing_regions(param_env, ty))
  4,086 ( 0.00%)      }
      .           
      .               /// Returns the deeply last field of nested structures, or the same type if
      .               /// not a structure at all. Corresponds to the only possible unsized field,
      .               /// and its type can be used to determine unsizing strategy.
      .               ///
      .               /// This is parameterized over the normalization strategy (i.e. how to
      .               /// handle `<T as Trait>::Assoc` and `impl Trait`); pass the identity
      .               /// function to indicate no normalization should take place.
-- line 188 ----------------------------------------
-- line 189 ----------------------------------------
      .               ///
      .               /// See also `struct_tail_erasing_lifetimes`, which is suitable for use
      .               /// during codegen.
      .               pub fn struct_tail_with_normalize(
      .                   self,
      .                   mut ty: Ty<'tcx>,
      .                   mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
  2,445 ( 0.00%)          let recursion_limit = self.recursion_limit();
      .                   for iteration in 0.. {
    557 ( 0.00%)              if !recursion_limit.value_within_limit(iteration) {
      .                           return self.ty_error_with_message(
      .                               DUMMY_SP,
      .                               &format!("reached the recursion limit finding the struct tail for {}", ty),
      .                           );
      .                       }
  4,113 ( 0.00%)              match *ty.kind() {
     68 ( 0.00%)                  ty::Adt(def, substs) => {
    136 ( 0.00%)                      if !def.is_struct() {
      .                                   break;
      .                               }
     68 ( 0.00%)                      match def.non_enum_variant().fields.last() {
    204 ( 0.00%)                          Some(f) => ty = f.ty(self, substs),
      .                                   None => break,
      .                               }
      .                           }
      .           
      .                           ty::Tuple(tys) if let Some((&last_ty, _)) = tys.split_last() => {
      .                               ty = last_ty.expect_ty();
      .                           }
      .           
-- line 219 ----------------------------------------
-- line 240 ----------------------------------------
      .               /// keeps going as long as the two types are instances of the same
      .               /// structure definitions.
      .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
      .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
      .               ///
      .               /// Should only be called if the types have no inference variables and do
      .               /// not need their lifetimes preserved (e.g., as part of codegen); otherwise,
      .               /// normalization attempt may cause compiler bugs.
    525 ( 0.00%)      pub fn struct_lockstep_tails_erasing_lifetimes(
      .                   self,
      .                   source: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> (Ty<'tcx>, Ty<'tcx>) {
      .                   let tcx = self;
      .                   tcx.struct_lockstep_tails_with_normalize(source, target, |ty| {
      .                       tcx.normalize_erasing_regions(param_env, ty)
      .                   })
    350 ( 0.00%)      }
      .           
      .               /// Same as applying `struct_tail` on `source` and `target`, but only
      .               /// keeps going as long as the two types are instances of the same
      .               /// structure definitions.
      .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
      .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
      .               ///
      .               /// See also `struct_lockstep_tails_erasing_lifetimes`, which is suitable for use
-- line 266 ----------------------------------------
-- line 268 ----------------------------------------
      .               pub fn struct_lockstep_tails_with_normalize(
      .                   self,
      .                   source: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> (Ty<'tcx>, Ty<'tcx>) {
      .                   let (mut a, mut b) = (source, target);
      .                   loop {
    420 ( 0.00%)              match (&a.kind(), &b.kind()) {
      .                           (&Adt(a_def, a_substs), &Adt(b_def, b_substs))
      .                               if a_def == b_def && a_def.is_struct() =>
      .                           {
      .                               if let Some(f) = a_def.non_enum_variant().fields.last() {
      .                                   a = f.ty(self, a_substs);
      .                                   b = f.ty(self, b_substs);
      .                               } else {
      .                                   break;
-- line 284 ----------------------------------------
-- line 310 ----------------------------------------
      .           
      .                           _ => break,
      .                       }
      .                   }
      .                   (a, b)
      .               }
      .           
      .               /// Calculate the destructor of a given type.
     12 ( 0.00%)      pub fn calculate_dtor(
      .                   self,
      .                   adt_did: DefId,
      .                   validate: impl Fn(Self, DefId) -> Result<(), ErrorReported>,
      .               ) -> Option<ty::Destructor> {
      5 ( 0.00%)          let drop_trait = self.lang_items().drop_trait()?;
      .                   self.ensure().coherent_trait(drop_trait);
      .           
      1 ( 0.00%)          let ty = self.type_of(adt_did);
      9 ( 0.00%)          let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {
      .                       if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {
      .                           if validate(self, impl_did).is_ok() {
      .                               return Some((*item_id, self.impl_constness(impl_did)));
      .                           }
      .                       }
      .                       None
      .                   })?;
      .           
      .                   Some(ty::Destructor { did, constness })
     10 ( 0.00%)      }
      .           
      .               /// Returns the set of types that are required to be alive in
      .               /// order to run the destructor of `def` (see RFCs 769 and
      .               /// 1238).
      .               ///
      .               /// Note that this returns only the constraints for the
      .               /// destructor of `def` itself. For the destructors of the
      .               /// contents, you need `adt_dtorck_constraint`.
     11 ( 0.00%)      pub fn destructor_constraints(self, def: &'tcx ty::AdtDef) -> Vec<ty::subst::GenericArg<'tcx>> {
      5 ( 0.00%)          let dtor = match def.destructor(self) {
      .                       None => {
      .                           debug!("destructor_constraints({:?}) - no dtor", def.did);
      .                           return vec![];
      .                       }
      .                       Some(dtor) => dtor.did,
      .                   };
      .           
      .                   let impl_def_id = self.associated_item(dtor).container.id();
-- line 355 ----------------------------------------
-- line 406 ----------------------------------------
      .                                   false
      .                               }
      .                           }
      .                       })
      .                       .map(|(item_param, _)| item_param)
      .                       .collect();
      .                   debug!("destructor_constraint({:?}) = {:?}", def.did, result);
      .                   result
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a closure (e.g., `|x| x * 2`). Note
      .               /// that closures have a `DefId`, but the closure *expression* also
      .               /// has a `HirId` that is located within the context where the
      .               /// closure appears (and, sadly, a corresponding `NodeId`, since
      .               /// those are not yet phased out). The parent of the closure's
      .               /// `DefId` will also be the context where it appears.
      5 ( 0.00%)      pub fn is_closure(self, def_id: DefId) -> bool {
     25 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a definition that does not have its own
      .               /// type-checking context, i.e. closure, generator or inline const.
      2 ( 0.00%)      pub fn is_typeck_child(self, def_id: DefId) -> bool {
     32 ( 0.00%)          matches!(
     34 ( 0.00%)              self.def_kind(def_id),
      .                       DefKind::Closure | DefKind::Generator | DefKind::InlineConst
      .                   )
      4 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).
      8 ( 0.00%)      pub fn is_trait(self, def_id: DefId) -> bool {
      8 ( 0.00%)          self.def_kind(def_id) == DefKind::Trait
     16 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`),
      .               /// and `false` otherwise.
     36 ( 0.00%)      pub fn is_trait_alias(self, def_id: DefId) -> bool {
     36 ( 0.00%)          self.def_kind(def_id) == DefKind::TraitAlias
     72 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `DefId` refers to the implicit constructor for
      .               /// a tuple struct like `struct Foo(u32)`, and `false` otherwise.
      2 ( 0.00%)      pub fn is_constructor(self, def_id: DefId) -> bool {
      6 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Ctor(..))
      4 ( 0.00%)      }
      .           
      .               /// Given the `DefId`, returns the `DefId` of the innermost item that
      .               /// has its own type-checking context or "inference enviornment".
      .               ///
      .               /// For example, a closure has its own `DefId`, but it is type-checked
      .               /// with the containing item. Similarly, an inline const block has its
      .               /// own `DefId` but it is type-checked together with the containing item.
      .               ///
      .               /// Therefore, when we fetch the
      .               /// `typeck` the closure, for example, we really wind up
      .               /// fetching the `typeck` the enclosing fn item.
     80 ( 0.00%)      pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {
      .                   let mut def_id = def_id;
      .                   while self.is_typeck_child(def_id) {
      .                       def_id = self.parent(def_id).unwrap_or_else(|| {
      .                           bug!("closure {:?} has no parent", def_id);
      .                       });
      .                   }
      .                   def_id
     64 ( 0.00%)      }
      .           
      .               /// Given the `DefId` and substs a closure, creates the type of
      .               /// `self` argument that the closure expects. For example, for a
      .               /// `Fn` closure, this would return a reference type `&T` where
      .               /// `T = closure_ty`.
      .               ///
      .               /// Returns `None` if this closure's kind has not yet been inferred.
      .               /// This should only be possible during type checking.
-- line 478 ----------------------------------------
-- line 492 ----------------------------------------
      .                       ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),
      .                       ty::ClosureKind::FnMut => self.mk_mut_ref(self.mk_region(env_region), closure_ty),
      .                       ty::ClosureKind::FnOnce => closure_ty,
      .                   };
      .                   Some(env_ty)
      .               }
      .           
      .               /// Returns `true` if the node pointed to by `def_id` is a `static` item.
     56 ( 0.00%)      pub fn is_static(self, def_id: DefId) -> bool {
      .                   self.static_mutability(def_id).is_some()
     64 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.
      7 ( 0.00%)      pub fn is_thread_local_static(self, def_id: DefId) -> bool {
      .                   self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)
      8 ( 0.00%)      }
      .           
      .               /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.
      7 ( 0.00%)      pub fn is_mutable_static(self, def_id: DefId) -> bool {
      .                   self.static_mutability(def_id) == Some(hir::Mutability::Mut)
      8 ( 0.00%)      }
      .           
      .               /// Get the type of the pointer to the static that we use in MIR.
      .               pub fn static_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {
      .                   // Make sure that any constants in the static's type are evaluated.
      .                   let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));
      .           
      .                   // Make sure that accesses to unsafe statics end up using raw pointers.
      .                   // For thread-locals, this needs to be kept in sync with `Rvalue::ty`.
-- line 520 ----------------------------------------
-- line 672 ----------------------------------------
      .               }
      .           
      .               /// Checks whether values of this type `T` have a size known at
      .               /// compile time (i.e., whether `T: Sized`). Lifetimes are ignored
      .               /// for the purposes of this check, so it can be an
      .               /// over-approximation in generic contexts, where one can have
      .               /// strange rules like `<T as Foo<'static>>::Bar: Sized` that
      .               /// actually carry lifetime requirements.
  8,100 ( 0.01%)      pub fn is_sized(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
  4,500 ( 0.00%)          self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))
  5,400 ( 0.00%)      }
      .           
      .               /// Checks whether values of this type `T` implement the `Freeze`
      .               /// trait -- frozen types are those that do not contain an
      .               /// `UnsafeCell` anywhere. This is a language concept used to
      .               /// distinguish "true immutability", which is relevant to
      .               /// optimization as well as the rules around static values. Note
      .               /// that the `Freeze` trait is not exposed to end users and is
      .               /// effectively an implementation detail.
118,944 ( 0.08%)      pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
 66,080 ( 0.05%)          self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))
 79,296 ( 0.05%)      }
      .           
      .               /// Fast path helper for testing if a type is `Freeze`.
      .               ///
      .               /// Returning true means the type is known to be `Freeze`. Returning
      .               /// `false` means nothing -- could be `Freeze`, might not be.
      .               fn is_trivially_freeze(&self) -> bool {
      .                   match self.kind() {
      .                       ty::Int(_)
-- line 701 ----------------------------------------
-- line 731 ----------------------------------------
      .               pub fn is_unpin(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))
      .               }
      .           
      .               /// Fast path helper for testing if a type is `Unpin`.
      .               ///
      .               /// Returning true means the type is known to be `Unpin`. Returning
      .               /// `false` means nothing -- could be `Unpin`, might not be.
 66,080 ( 0.05%)      fn is_trivially_unpin(&self) -> bool {
 66,095 ( 0.05%)          match self.kind() {
      .                       ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Bool
      .                       | ty::Char
      .                       | ty::Str
      .                       | ty::Never
      .                       | ty::Ref(..)
      .                       | ty::RawPtr(_)
      .                       | ty::FnDef(..)
      .                       | ty::Error(_)
      .                       | ty::FnPtr(_) => true,
      .                       ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_unpin),
      6 ( 0.00%)              ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_unpin(),
      .                       ty::Adt(..)
      .                       | ty::Bound(..)
      .                       | ty::Closure(..)
      .                       | ty::Dynamic(..)
      .                       | ty::Foreign(_)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(_)
      .                       | ty::Infer(_)
      .                       | ty::Opaque(..)
      .                       | ty::Param(_)
      .                       | ty::Placeholder(_)
      .                       | ty::Projection(_) => false,
      .                   }
 92,512 ( 0.06%)      }
      .           
      .               /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely
      .               /// non-copy and *might* have a destructor attached; if it returns
      .               /// `false`, then `ty` definitely has no destructor (i.e., no drop glue).
      .               ///
      .               /// (Note that this implies that if `ty` has a destructor attached,
      .               /// then `needs_drop` will definitely return `true` for `ty`.)
      .               ///
      .               /// Note that this method is used to check eligible types in unions.
      .               #[inline]
  4,090 ( 0.00%)      pub fn needs_drop(&'tcx self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   // Avoid querying in simple cases.
 17,971 ( 0.01%)          match needs_drop_components(self, &tcx.data_layout) {
      .                       Err(AlwaysRequiresDrop) => true,
 11,708 ( 0.01%)              Ok(components) => {
      .                           let query_ty = match *components {
  5,854 ( 0.00%)                      [] => return false,
      .                               // If we've got a single component, call the query with that
      .                               // to increase the chance that we hit the query cache.
      .                               [component_ty] => component_ty,
      .                               _ => self,
      .                           };
      .           
      .                           // This doesn't depend on regions, so try to minimize distinct
      .                           // query keys used.
      .                           // If normalization fails, we just use `query_ty`.
      .                           let query_ty =
      .                               tcx.try_normalize_erasing_regions(param_env, query_ty).unwrap_or(query_ty);
      .           
      .                           tcx.needs_drop_raw(param_env.and(query_ty))
      .                       }
      .                   }
  3,681 ( 0.00%)      }
      .           
      .               /// Checks if `ty` has has a significant drop.
      .               ///
      .               /// Note that this method can return false even if `ty` has a destructor
      .               /// attached; even if that is the case then the adt has been marked with
      .               /// the attribute `rustc_insignificant_dtor`.
      .               ///
      .               /// Note that this method is used to check for change in drop order for
-- line 809 ----------------------------------------
-- line 854 ----------------------------------------
      .               ///
      .               /// This function is "shallow" because it may return `true` for a composite type whose fields
      .               /// are not `StructuralEq`. For example, `[T; 4]` has structural equality regardless of `T`
      .               /// because equality for arrays is determined by the equality of each array element. If you
      .               /// want to know whether a given call to `PartialEq::eq` will proceed structurally all the way
      .               /// down, you will need to use a type visitor.
      .               #[inline]
      .               pub fn is_structural_eq_shallow(&'tcx self, tcx: TyCtxt<'tcx>) -> bool {
    412 ( 0.00%)          match self.kind() {
      .                       // Look for an impl of both `PartialStructuralEq` and `StructuralEq`.
      .                       Adt(..) => tcx.has_structural_eq_impls(self),
      .           
      .                       // Primitive types that satisfy `Eq`.
      .                       Bool | Char | Int(_) | Uint(_) | Str | Never => true,
      .           
      .                       // Composite types that satisfy `Eq` when all of their fields do.
      .                       //
-- line 870 ----------------------------------------
-- line 976 ----------------------------------------
      .                       _ => Other,
      .                   }
      .               }
      .           }
      .           
      .           /// Returns a list of types such that the given type needs drop if and only if
      .           /// *any* of the returned types need drop. Returns `Err(AlwaysRequiresDrop)` if
      .           /// this type always needs drop.
 20,727 ( 0.01%)  pub fn needs_drop_components<'tcx>(
      .               ty: Ty<'tcx>,
      .               target_layout: &TargetDataLayout,
      .           ) -> Result<SmallVec<[Ty<'tcx>; 2]>, AlwaysRequiresDrop> {
 17,766 ( 0.01%)      match ty.kind() {
      .                   ty::Infer(ty::FreshIntTy(_))
      .                   | ty::Infer(ty::FreshFloatTy(_))
      .                   | ty::Bool
      .                   | ty::Int(_)
      .                   | ty::Uint(_)
      .                   | ty::Float(_)
      .                   | ty::Never
      .                   | ty::FnDef(..)
-- line 996 ----------------------------------------
-- line 1003 ----------------------------------------
      .           
      .                   // Foreign types can never have destructors.
      .                   ty::Foreign(..) => Ok(SmallVec::new()),
      .           
      .                   ty::Dynamic(..) | ty::Error(_) => Err(AlwaysRequiresDrop),
      .           
      .                   ty::Slice(ty) => needs_drop_components(ty, target_layout),
      .                   ty::Array(elem_ty, size) => {
    204 ( 0.00%)              match needs_drop_components(elem_ty, target_layout) {
    272 ( 0.00%)                  Ok(v) if v.is_empty() => Ok(v),
      .                           res => match size.val.try_to_bits(target_layout.pointer_size) {
      .                               // Arrays of size zero don't need drop, even if their element
      .                               // type does.
      .                               Some(0) => Ok(SmallVec::new()),
      .                               Some(_) => res,
      .                               // We don't know which of the cases above we are in, so
      .                               // return the whole type and let the caller decide what to
      .                               // do.
-- line 1020 ----------------------------------------
-- line 1034 ----------------------------------------
      .                   | ty::Param(_)
      .                   | ty::Bound(..)
      .                   | ty::Placeholder(..)
      .                   | ty::Opaque(..)
      .                   | ty::Infer(_)
      .                   | ty::Closure(..)
      .                   | ty::Generator(..) => Ok(smallvec![ty]),
      .               }
 17,766 ( 0.01%)  }
      .           
      6 ( 0.00%)  pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {
      4 ( 0.00%)      match *ty.kind() {
      .                   ty::Bool
      .                   | ty::Char
      .                   | ty::Int(_)
      .                   | ty::Uint(_)
      .                   | ty::Float(_)
      .                   | ty::Infer(ty::IntVar(_))
      .                   | ty::Infer(ty::FloatVar(_))
      .                   | ty::Str
-- line 1053 ----------------------------------------
-- line 1070 ----------------------------------------
      .                   // Not trivial because they have components, and instead of looking inside,
      .                   // we'll just perform trait selection.
      .                   ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,
      .           
      .                   ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),
      .           
      .                   ty::Tuple(tys) => tys.iter().all(|ty| is_trivially_const_drop(ty.expect_ty())),
      .               }
      8 ( 0.00%)  }
      .           
      .           // Does the equivalent of
      .           // ```
      .           // let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();
      .           // folder.tcx().intern_*(&v)
      .           // ```
  1,173 ( 0.00%)  pub fn fold_list<'tcx, F, T>(
      .               list: &'tcx ty::List<T>,
      .               folder: &mut F,
      .               intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,
      .           ) -> Result<&'tcx ty::List<T>, F::Error>
      .           where
      .               F: FallibleTypeFolder<'tcx>,
      .               T: TypeFoldable<'tcx> + PartialEq + Copy,
      .           {
-- line 1093 ----------------------------------------
-- line 1107 ----------------------------------------
      .                       }
      .                       Ok(intern(folder.tcx(), &new_list))
      .                   }
      .                   Some((_, Err(err))) => {
      .                       return Err(err);
      .                   }
      .                   None => Ok(list),
      .               }
  1,209 ( 0.00%)  }
      .           
      .           #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct AlwaysRequiresDrop;
      .           
      .           /// Normalizes all opaque types in the given value, replacing them
      .           /// with their underlying types.
      4 ( 0.00%)  pub fn normalize_opaque_types<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               val: &'tcx List<ty::Predicate<'tcx>>,
      .           ) -> &'tcx List<ty::Predicate<'tcx>> {
      7 ( 0.00%)      let mut visitor = OpaqueTypeExpander {
      .                   seen_opaque_tys: FxHashSet::default(),
      .                   expanded_cache: FxHashMap::default(),
      .                   primary_def_id: None,
      .                   found_recursion: false,
      .                   found_any_recursion: false,
      .                   check_recursion: false,
      .                   tcx,
      .               };
      .               val.fold_with(&mut visitor)
      5 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      *providers = ty::query::Providers { normalize_opaque_types, ..*providers }
      .           }

 62,433 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   13,289 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,042 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,630 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,100 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        1 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,367 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,295 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        4 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,056 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        2 ( 0.00%)      pub lo: BytePos,
        2 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        6 ( 0.00%)      pub ctxt: SyntaxContext,
        2 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   15,278 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      105 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
      760 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
      570 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
      760 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    3,699 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    2,466 ( 0.00%)      }
        .               #[inline]
      120 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      120 ( 0.00%)      }
        .               #[inline]
      270 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      180 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
       25 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
       15 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 618 ----------------------------------------
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      315 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      210 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      350 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      175 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      385 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
      117 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
       78 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
       40 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
        .                   self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
-- line 693 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
        .               pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
        .               }
-- line 728 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   19,085 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    3,468 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   12,145 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   15,615 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
-- line 804 ----------------------------------------
-- line 856 ----------------------------------------
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
       24 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    4,032 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    2,688 ( 0.00%)          let mut span = self.data();
    2,240 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    4,032 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    4,480 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      576 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
      504 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
       40 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        5 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
        7 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
       40 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
       40 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        5 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
        4 ( 0.00%)          MultiSpan::from_spans(spans)
        5 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,054 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,108 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        3 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        3 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        4 ( 0.00%)                          0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,743 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      527 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  866,298 ( 0.59%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,054 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,797 ( 0.00%)              SourceFile {
    4,216 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,108 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,108 ( 0.00%)                  lines,
    2,108 ( 0.00%)                  multibyte_chars,
    2,108 ( 0.00%)                  non_narrow_chars,
    2,108 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,743 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       11 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        3 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        2 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        2 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        3 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       12 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        2 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       17 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       11 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        4 ( 0.00%)              lines,
        4 ( 0.00%)              multibyte_chars,
        4 ( 0.00%)              non_narrow_chars,
        4 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
        7 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
        1 ( 0.00%)          if matches!(
        2 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
        1 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      528 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    3,330 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      284 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
      896 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      576 ( 0.00%)          assert!(line_index < self.lines.len());
      861 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        7 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      568 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       10 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
        9 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        1 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        1 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    4,501 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      570 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   10,777 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,440,097 ( 0.99%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  778,445 ( 0.53%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   10,750 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   22,848 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    3,286 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   19,562 ( 0.01%)          let span = self.data_untracked();
    9,734 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
    9,792 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
    6,548 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    6,488 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   12,976 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    6,488 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    3,244 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    3,244 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   26,112 ( 0.02%)      }
        .           }

1,126,480 ( 0.77%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
      .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
      .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
      .               ///
      .               /// The result is meaningful only if the tree is ordered by key, like the tree
      .               /// in a `BTreeMap` is.
 35,954 ( 0.02%)      pub fn search_tree<Q: ?Sized>(
      .                   mut self,
      .                   key: &Q,
      .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   loop {
      .                       self = match self.search_node(key) {
      .                           Found(handle) => return Found(handle),
  1,668 ( 0.00%)                  GoDown(handle) => match handle.force() {
      .                               Leaf(leaf) => return GoDown(leaf),
      .                               Internal(internal) => internal.descend(),
      .                           },
      .                       }
      .                   }
 17,796 ( 0.01%)      }
      .           
      .               /// Descends to the nearest node where the edge matching the lower bound
      .               /// of the range is different from the edge matching the upper bound, i.e.,
      .               /// the nearest node that has at least one key contained in the range.
      .               ///
      .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
      .               /// edge indices in the node delimiting the range, and the corresponding
      .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
      .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   let node = self.reborrow();
      .                   let keys = node.keys();
      .                   debug_assert!(start_index <= keys.len());
 42,284 ( 0.03%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
205,692 ( 0.14%)              match key.cmp(k.borrow()) {
      .                           Ordering::Greater => {}
      .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
      .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
      .                       }
      .                   }
      .                   IndexResult::Edge(keys.len())
      .               }
      .           
-- line 219 ----------------------------------------

 87,632 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 38 ----------------------------------------
     .           #[derive(Debug)]
     .           pub struct Token {
     .               pub kind: TokenKind,
     .               pub len: usize,
     .           }
     .           
     .           impl Token {
     .               fn new(kind: TokenKind, len: usize) -> Token {
45,315 ( 0.03%)          Token { kind, len }
     .               }
     .           }
     .           
     .           /// Enum representing common lexeme types.
     .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
 2,860 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
     .           pub enum TokenKind {
     .               // Multi-char tokens:
     .               /// "// comment"
     .               LineComment { doc_style: Option<DocStyle> },
     .               /// `/* block comment */`
     .               ///
     .               /// Block comments can be recursive, so the sequence like `/* /* */`
     .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
     .               /// Literal starts with "0x".
     .               Hexadecimal,
     .               /// Literal doesn't contain a prefix.
     .               Decimal,
     .           }
     .           
     .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
     .           /// but shebang isn't a part of rust syntax.
     7 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
     .               // Shebang must start with `#!` literally, without any preceding whitespace.
     .               // For simplicity we consider any line starting with `#!` a shebang,
     .               // regardless of restrictions put on shebangs by specific platforms.
     .               if let Some(input_tail) = input.strip_prefix("#!") {
     .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
     .                   // then it may be valid Rust code, so consider it Rust code.
     .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
     .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
     .                       )
     .                   });
     .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
     .                       // No other choice than to consider this a shebang.
     .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
     .                   }
     .               }
     .               None
     8 ( 0.00%)  }
     .           
     .           /// Parses the first token from the provided input string.
15,105 ( 0.01%)  pub fn first_token(input: &str) -> Token {
     .               debug_assert!(!input.is_empty());
 5,035 ( 0.00%)      Cursor::new(input).advance_token()
20,140 ( 0.01%)  }
     .           
     .           /// Creates an iterator that produces tokens from the input string.
     .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
     .               let mut cursor = Cursor::new(input);
     .               std::iter::from_fn(move || {
     .                   if cursor.is_eof() {
     .                       None
     .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
     .           /// for definitions of these classes.
     .           pub fn is_whitespace(c: char) -> bool {
     .               // This is Pattern_White_Space.
     .               //
     .               // Note that this set is stable (ie, it doesn't change with different
     .               // Unicode versions), so it's ok to just hard-code the values.
     .           
10,982 ( 0.01%)      matches!(
     .                   c,
     .                   // Usual ASCII suspects
     .                   '\u{0009}'   // \t
     .                   | '\u{000A}' // \n
     .                   | '\u{000B}' // vertical tab
     .                   | '\u{000C}' // form feed
     .                   | '\u{000D}' // \r
     .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
     .               )
     .           }
     .           
     .           /// True if `c` is valid as a first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_start(c: char) -> bool {
     .               // This is XID_Start OR '_' (which formally is not a XID_Start).
 2,516 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
     .           }
     .           
     .           /// True if `c` is valid as a non-first character of an identifier.
     .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
     .           /// a formal definition of valid identifier name.
     .           pub fn is_id_continue(c: char) -> bool {
     .               unicode_xid::UnicodeXID::is_xid_continue(c)
     .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
     .                   is_id_start(start) && chars.all(is_id_continue)
     .               } else {
     .                   false
     .               }
     .           }
     .           
     .           impl Cursor<'_> {
     .               /// Parses a token from the input string.
40,280 ( 0.03%)      fn advance_token(&mut self) -> Token {
     .                   let first_char = self.bump().unwrap();
16,245 ( 0.01%)          let token_kind = match first_char {
     .                       // Slash, comment or block comment.
    96 ( 0.00%)              '/' => match self.first() {
     .                           '/' => self.line_comment(),
     .                           '*' => self.block_comment(),
     .                           _ => Slash,
     .                       },
     .           
     .                       // Whitespace sequence.
     .                       c if is_whitespace(c) => self.whitespace(),
     .           
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
     .                               }
     .                               let kind = RawStr { n_hashes, err };
     .                               Literal { kind, suffix_start }
     .                           }
     .                           _ => self.ident_or_unknown_prefix(),
     .                       },
     .           
     .                       // Byte literal, byte string literal, raw byte string literal or identifier.
    68 ( 0.00%)              'b' => match (self.first(), self.second()) {
     .                           ('\'', _) => {
     .                               self.bump();
     .                               let terminated = self.single_quoted_string();
     .                               let suffix_start = self.len_consumed();
     .                               if terminated {
     .                                   self.eat_literal_suffix();
     .                               }
     .                               let kind = Byte { terminated };
     .                               Literal { kind, suffix_start }
     .                           }
     .                           ('"', _) => {
     .                               self.bump();
   102 ( 0.00%)                      let terminated = self.double_quoted_string();
     .                               let suffix_start = self.len_consumed();
    68 ( 0.00%)                      if terminated {
     .                                   self.eat_literal_suffix();
     .                               }
     .                               let kind = ByteStr { terminated };
    68 ( 0.00%)                      Literal { kind, suffix_start }
     .                           }
     .                           ('r', '"') | ('r', '#') => {
     .                               self.bump();
     .                               let (n_hashes, err) = self.raw_double_quoted_string(2);
     .                               let suffix_start = self.len_consumed();
     .                               if err.is_none() {
     .                                   self.eat_literal_suffix();
     .                               }
-- line 357 ----------------------------------------
-- line 361 ----------------------------------------
     .                           _ => self.ident_or_unknown_prefix(),
     .                       },
     .           
     .                       // Identifier (this should be checked after other variant that can
     .                       // start as identifier).
     .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
     .           
     .                       // Numeric literal.
 8,961 ( 0.01%)              c @ '0'..='9' => {
     .                           let literal_kind = self.number(c);
     .                           let suffix_start = self.len_consumed();
     .                           self.eat_literal_suffix();
 5,610 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
     .                       }
     .           
     .                       // One-symbol tokens.
     2 ( 0.00%)              ';' => Semi,
 2,594 ( 0.00%)              ',' => Comma,
     .                       '.' => Dot,
     4 ( 0.00%)              '(' => OpenParen,
     4 ( 0.00%)              ')' => CloseParen,
    68 ( 0.00%)              '{' => OpenBrace,
    68 ( 0.00%)              '}' => CloseBrace,
    76 ( 0.00%)              '[' => OpenBracket,
    76 ( 0.00%)              ']' => CloseBracket,
     .                       '@' => At,
     4 ( 0.00%)              '#' => Pound,
     .                       '~' => Tilde,
     .                       '?' => Question,
   550 ( 0.00%)              ':' => Colon,
     .                       '$' => Dollar,
     2 ( 0.00%)              '=' => Eq,
     4 ( 0.00%)              '!' => Bang,
     .                       '<' => Lt,
     .                       '>' => Gt,
     .                       '-' => Minus,
    74 ( 0.00%)              '&' => And,
     .                       '|' => Or,
     .                       '+' => Plus,
     .                       '*' => Star,
     .                       '^' => Caret,
     .                       '%' => Percent,
     .           
     .                       // Lifetime or character literal.
     .                       '\'' => self.lifetime_or_char(),
     .           
     .                       // String literal.
     .                       '"' => {
   306 ( 0.00%)                  let terminated = self.double_quoted_string();
     .                           let suffix_start = self.len_consumed();
   204 ( 0.00%)                  if terminated {
     .                               self.eat_literal_suffix();
     .                           }
     .                           let kind = Str { terminated };
   204 ( 0.00%)                  Literal { kind, suffix_start }
     .                       }
     .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
     .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
     .                       _ => Unknown,
     .                   };
     .                   Token::new(token_kind, self.len_consumed())
45,315 ( 0.03%)      }
     .           
     .               fn line_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '/');
     .                   self.bump();
     .           
    28 ( 0.00%)          let doc_style = match self.first() {
     .                       // `//!` is an inner line doc comment.
     .                       '!' => Some(DocStyle::Inner),
     .                       // `////` (more than 3 slashes) is not considered a doc comment.
     .                       '/' if self.second() != '/' => Some(DocStyle::Outer),
     .                       _ => None,
     .                   };
     .           
   231 ( 0.00%)          self.eat_while(|c| c != '\n');
    21 ( 0.00%)          LineComment { doc_style }
     .               }
     .           
     .               fn block_comment(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == '/' && self.first() == '*');
     .                   self.bump();
     .           
   136 ( 0.00%)          let doc_style = match self.first() {
     .                       // `/*!` is an inner block doc comment.
     .                       '!' => Some(DocStyle::Inner),
     .                       // `/***` (more than 2 stars) is not considered a doc comment.
     .                       // `/**/` is not considered a doc comment.
     .                       '*' if !matches!(self.second(), '*' | '/') => Some(DocStyle::Outer),
     .                       _ => None,
     .                   };
     .           
     .                   let mut depth = 1usize;
73,402 ( 0.05%)          while let Some(c) = self.bump() {
     .                       match c {
   250 ( 0.00%)                  '/' if self.first() == '*' => {
     .                               self.bump();
     .                               depth += 1;
     .                           }
   692 ( 0.00%)                  '*' if self.first() == '/' => {
     .                               self.bump();
    68 ( 0.00%)                      depth -= 1;
    68 ( 0.00%)                      if depth == 0 {
     .                                   // This block comment is closed, so for a construction like "/* */ */"
     .                                   // there will be a successfully parsed block comment "/* */"
     .                                   // and " */" will be processed separately.
     .                                   break;
     .                               }
     .                           }
     .                           _ => (),
     .                       }
     .                   }
     .           
   170 ( 0.00%)          BlockComment { doc_style, terminated: depth == 0 }
     .               }
     .           
     .               fn whitespace(&mut self) -> TokenKind {
     .                   debug_assert!(is_whitespace(self.prev()));
     .                   self.eat_while(is_whitespace);
 1,687 ( 0.00%)          Whitespace
     .               }
     .           
     .               fn raw_ident(&mut self) -> TokenKind {
     .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
     .                   // Eat "#" symbol.
     .                   self.bump();
     .                   // Eat the identifier part of RawIdent.
     .                   self.eat_identifier();
     .                   RawIdent
     .               }
     .           
 1,430 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   debug_assert!(is_id_start(self.prev()));
     .                   // Start is already eaten, eat the rest of identifier.
   572 ( 0.00%)          self.eat_while(is_id_continue);
     .                   // Known prefixes must have been handled earlier. So if
     .                   // we see a prefix here, it is definitely an unknown prefix.
   572 ( 0.00%)          match self.first() {
     .                       '#' | '"' | '\'' => UnknownPrefix,
   286 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
     .                           self.fake_ident_or_unknown_prefix()
     .                       }
   286 ( 0.00%)              _ => Ident,
     .                   }
 1,144 ( 0.00%)      }
     .           
     .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
     .                   // Start is already eaten, eat the rest of identifier.
     .                   self.eat_while(|c| {
     .                       unicode_xid::UnicodeXID::is_xid_continue(c)
     .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
     .                           || c == '\u{200d}'
     .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
     .                       '#' | '"' | '\'' => UnknownPrefix,
     .                       _ => InvalidIdent,
     .                   }
     .               }
     .           
     .               fn number(&mut self, first_digit: char) -> LiteralKind {
     .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
     .                   let mut base = Base::Decimal;
 2,244 ( 0.00%)          if first_digit == '0' {
     .                       // Attempt to parse encoding base.
 3,264 ( 0.00%)              let has_digits = match self.first() {
     .                           'b' => {
     .                               base = Base::Binary;
     .                               self.bump();
     .                               self.eat_decimal_digits()
     .                           }
     .                           'o' => {
     .                               base = Base::Octal;
     .                               self.bump();
-- line 537 ----------------------------------------
-- line 555 ----------------------------------------
     .                       if !has_digits {
     .                           return Int { base, empty_int: true };
     .                       }
     .                   } else {
     .                       // No base prefix, parse number in the usual way.
     .                       self.eat_decimal_digits();
     .                   };
     .           
 6,732 ( 0.00%)          match self.first() {
     .                       // Don't be greedy if this is actually an
     .                       // integer literal followed by field/method access or a range pattern
     .                       // (`0..2` and `12.foo()`)
     .                       '.' if self.second() != '.' && !is_id_start(self.second()) => {
     .                           // might have stuff after the ., and if it does, it needs to start
     .                           // with a number
     .                           self.bump();
     .                           let mut empty_exponent = false;
-- line 571 ----------------------------------------
-- line 677 ----------------------------------------
     .                   false
     .               }
     .           
     .               /// Eats double-quoted string and returns true
     .               /// if string is terminated.
     .               fn double_quoted_string(&mut self) -> bool {
     .                   debug_assert!(self.prev() == '"');
     .                   while let Some(c) = self.bump() {
41,858 ( 0.03%)              match c {
     .                           '"' => {
     .                               return true;
     .                           }
 8,840 ( 0.01%)                  '\\' if self.first() == '\\' || self.first() == '"' => {
     .                               // Bump again to skip escaped character.
     .                               self.bump();
     .                           }
     .                           _ => (),
     .                       }
     .                   }
     .                   // End of file reached.
     .                   false
   136 ( 0.00%)      }
     .           
     .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
     .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
     .                   // Wrap the actual function to handle the error with too many hashes.
     .                   // This way, it eats the whole raw string.
     .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
     .                   // Only up to 65535 `#`s are allowed in raw strings
     .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
     .                           max_hashes = n_end_hashes;
     .                       }
     .                   }
     .               }
     .           
     .               fn eat_decimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
   340 ( 0.00%)              match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
   510 ( 0.00%)                  '0'..='9' => {
     .                               has_digits = true;
     .                               self.bump();
     .                           }
     .                           _ => break,
     .                       }
     .                   }
     .                   has_digits
    68 ( 0.00%)      }
     .           
     .               fn eat_hexadecimal_digits(&mut self) -> bool {
     .                   let mut has_digits = false;
     .                   loop {
 6,528 ( 0.00%)              match self.first() {
     .                           '_' => {
     .                               self.bump();
     .                           }
15,489 ( 0.01%)                  '0'..='9' | 'a'..='f' | 'A'..='F' => {
     .                               has_digits = true;
     .                               self.bump();
     .                           }
     .                           _ => break,
     .                       }
     .                   }
     .                   has_digits
 2,176 ( 0.00%)      }
     .           
     .               /// Eats the float exponent. Returns true if at least one digit was met,
     .               /// and returns false otherwise.
     .               fn eat_float_exponent(&mut self) -> bool {
     .                   debug_assert!(self.prev() == 'e' || self.prev() == 'E');
     .                   if self.first() == '-' || self.first() == '+' {
     .                       self.bump();
     .                   }
     .                   self.eat_decimal_digits()
     .               }
     .           
     .               // Eats the suffix of the literal, e.g. "_u8".
     .               fn eat_literal_suffix(&mut self) {
 2,516 ( 0.00%)          self.eat_identifier();
     .               }
     .           
     .               // Eats the identifier.
 3,774 ( 0.00%)      fn eat_identifier(&mut self) {
     .                   if !is_id_start(self.first()) {
     .                       return;
     .                   }
     .                   self.bump();
     .           
     .                   self.eat_while(is_id_continue);
 5,032 ( 0.00%)      }
     .           }

78,221 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 57 ----------------------------------------
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
  2,244 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
  1,122 ( 0.00%)              from_str_radix(src, radix)
  3,366 ( 0.00%)          }
      .           
      .                   /// Returns the number of ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
      .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[doc(alias = "popcount")]
      .                   #[doc(alias = "popcnt")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn count_ones(self) -> u32 {
    330 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of zeros in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
      .                   /// assert_eq!(n.leading_zeros(), 2);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn leading_zeros(self) -> u32 {
  8,266 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
      .                   }
      .           
      .                   /// Returns the number of trailing zeros in the binary representation
      .                   /// of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
      .                   /// assert_eq!(n.trailing_zeros(), 3);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn trailing_zeros(self) -> u32 {
 23,255 ( 0.02%)              intrinsics::cttz(self) as u32
      .                   }
      .           
      .                   /// Returns the number of leading ones in the binary representation of `self`.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
      .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn rotate_left(self, n: u32) -> Self {
540,825 ( 0.37%)              intrinsics::rotate_left(self, n as $SelfT)
      .                   }
      .           
      .                   /// Shifts the bits to the right by a specified amount, `n`,
      .                   /// wrapping the truncated bits to the beginning of the resulting
      .                   /// integer.
      .                   ///
      .                   /// Please note this isn't the same operation as the `>>` shifting operator!
      .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_add`.
 53,734 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
      .                   }
      .           
      .                   /// Checked addition with a signed integer. Computes `self + rhs`,
      .                   /// returning `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
      .                   )]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
      .                   #[inline(always)]
      .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
      .                       // SAFETY: the caller must uphold the safety contract for
      .                       // `unchecked_sub`.
    462 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
      .                   }
      .           
      .                   /// Checked integer multiplication. Computes `self * rhs`, returning
      .                   /// `None` if overflow occurred.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
      .                                 without modifying the original"]
      .                   #[inline]
      .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
      .                       if unlikely!(rhs == 0) {
      .                           None
      .                       } else {
      .                           // SAFETY: div by zero has been checked above and unsigned types have no other
      .                           // failure modes for division
     16 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
      .                       }
      .                   }
      .           
      .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
      .                   /// if `rhs == 0`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 15,466 ( 0.01%)              intrinsics::saturating_add(self, rhs)
      .                   }
      .           
      .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
      .                   #[inline(always)]
      .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
  8,334 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
      .                   }
      .           
      .                   /// Saturating integer multiplication. Computes `self * rhs`,
      .                   /// saturating at the numeric bounds instead of overflowing.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
351,117 ( 0.24%)              intrinsics::wrapping_add(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) addition with a signed integer. Computes
      .                   /// `self + rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 89,269 ( 0.06%)              intrinsics::wrapping_sub(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) multiplication. Computes `self *
      .                   /// rhs`, wrapping around at the boundary of the type.
      .                   ///
      .                   /// # Examples
      .                   ///
      .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
      .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
315,438 ( 0.22%)              intrinsics::wrapping_mul(self, rhs)
      .                   }
      .           
      .                   /// Wrapping (modular) division. Computes `self / rhs`.
      .                   /// Wrapped division on unsigned types is just normal division.
      .                   /// There's no way wrapping could ever happen.
      .                   /// This function exists, so that all operations
      .                   /// are accounted for in the wrapping operations.
      .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 76,821 ( 0.05%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self + rhs + carry` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
      .                   /// additional bit of overflow. This allows for chaining together multiple additions
      .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
      .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 12,207 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
      .                   ///
      .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
      .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
      .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
      .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
      .                   /// ```
      .                   #[stable(feature = "wrapping", since = "1.7.0")]
      .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                     without modifying the original"]
      .                   #[inline(always)]
      .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 51,567 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
      .                       (a as Self, b)
      .                   }
      .           
      .                   /// Calculates the divisor when `self` is divided by `rhs`.
      .                   ///
      .                   /// Returns a tuple of the divisor along with a boolean indicating
      .                   /// whether an arithmetic overflow would occur. Note that for unsigned
      .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
      .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
      .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
      .                   /// ```
      .                   #[must_use]
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
      .                   #[inline(always)]
      .                   pub const fn is_power_of_two(self) -> bool {
    156 ( 0.00%)              self.count_ones() == 1
      .                   }
      .           
      .                   // Returns one less than next power of two.
      .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
      .                   //
      .                   // 8u8.one_less_than_next_power_of_two() == 7
      .                   // 6u8.one_less_than_next_power_of_two() == 7
      .                   //
      .                   // This method cannot overflow, as in the `next_power_of_two`
      .                   // overflow cases it instead ends up returning the maximum value
      .                   // of the type, and can return 0 for 0.
      .                   #[inline]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   const fn one_less_than_next_power_of_two(self) -> Self {
    234 ( 0.00%)              if self <= 1 { return 0; }
      .           
    518 ( 0.00%)              let p = self - 1;
      .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
      .                       // That means the shift is always in-bounds, and some processors
      .                       // (such as intel pre-haswell) have more efficient ctlz
      .                       // intrinsics when the argument is non-zero.
  1,554 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    518 ( 0.00%)              <$SelfT>::MAX >> z
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `self`.
      .                   ///
      .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
      .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
      .                   /// release mode (the only situation in which method can return 0).
      .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
      .                   /// ```
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
      .                   #[must_use = "this returns the result of the operation, \
      .                                 without modifying the original"]
      .                   #[inline]
      .                   #[rustc_inherit_overflow_checks]
      .                   pub const fn next_power_of_two(self) -> Self {
    802 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
      .                   }
      .           
      .                   /// Returns the smallest power of two greater than or equal to `n`. If
      .                   /// the next power of two is greater than the type's maximum value,
      .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
      .                   ///
      .                   /// # Examples
      .                   ///
-- line 2195 ----------------------------------------

  1,544 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs
--------------------------------------------------------------------------------
Ir               

-- line 86 ----------------------------------------
      .           impl Qualif for HasMutInterior {
      .               const ANALYSIS_NAME: &'static str = "flow_has_mut_interior";
      .           
      .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
      .                   qualifs.has_mut_interior
      .               }
      .           
      .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
 78,864 ( 0.05%)          !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)
      .               }
      .           
      .               fn in_adt_inherently<'tcx>(
      .                   cx: &ConstCx<'_, 'tcx>,
      .                   adt: &'tcx AdtDef,
      .                   _: SubstsRef<'tcx>,
      .               ) -> bool {
      .                   // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.
      .                   // It arises structurally for all other types.
  1,680 ( 0.00%)          Some(adt.did) == cx.tcx.lang_items().unsafe_cell_type()
      .               }
      .           }
      .           
      .           /// Constant containing an ADT that implements `Drop`.
      .           /// This must be ruled out because implicit promotion would remove side-effects
      .           /// that occur as part of dropping that value. N.B., the implicit promotion has
      .           /// to reject const Drop implementations because even if side-effects are ruled
      .           /// out through other means, the execution of the drop could diverge.
-- line 112 ----------------------------------------
-- line 115 ----------------------------------------
      .           impl Qualif for NeedsDrop {
      .               const ANALYSIS_NAME: &'static str = "flow_needs_drop";
      .               const IS_CLEARED_ON_MOVE: bool = true;
      .           
      .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
      .                   qualifs.needs_drop
      .               }
      .           
 20,136 ( 0.01%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
  5,034 ( 0.00%)          ty.needs_drop(cx.tcx, cx.param_env)
 22,653 ( 0.02%)      }
      .           
      .               fn in_adt_inherently<'tcx>(
      .                   cx: &ConstCx<'_, 'tcx>,
      .                   adt: &'tcx AdtDef,
      .                   _: SubstsRef<'tcx>,
      .               ) -> bool {
    204 ( 0.00%)          adt.has_dtor(cx.tcx)
      .               }
      .           }
      .           
      .           /// Constant containing an ADT that implements non-const `Drop`.
      .           /// This must be ruled out because we cannot run `Drop` during compile-time.
      .           pub struct NeedsNonConstDrop;
      .           
      .           impl Qualif for NeedsNonConstDrop {
-- line 140 ----------------------------------------
-- line 141 ----------------------------------------
      .               const ANALYSIS_NAME: &'static str = "flow_needs_nonconst_drop";
      .               const IS_CLEARED_ON_MOVE: bool = true;
      .               const ALLOW_PROMOTED: bool = true;
      .           
      .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
      .                   qualifs.needs_non_const_drop
      .               }
      .           
      9 ( 0.00%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
      .                   // Avoid selecting for simple cases, such as builtin types.
      4 ( 0.00%)          if ty::util::is_trivially_const_drop(ty) {
      .                       return false;
      .                   }
      .           
      .                   let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {
      .                       // there is no way to define a type that needs non-const drop
      .                       // without having the lang item present.
      .                       return false;
      .                   };
-- line 159 ----------------------------------------
-- line 196 ----------------------------------------
      .                       let mut fcx = FulfillmentContext::new();
      .                       for nested in impl_src.nested_obligations() {
      .                           fcx.register_predicate_obligation(&infcx, nested);
      .                       }
      .           
      .                       // If we had any errors, then it's bad
      .                       !fcx.select_all_or_error(&infcx).is_empty()
      .                   })
      9 ( 0.00%)      }
      .           
      .               fn in_adt_inherently<'tcx>(
      .                   cx: &ConstCx<'_, 'tcx>,
      .                   adt: &'tcx AdtDef,
      .                   _: SubstsRef<'tcx>,
      .               ) -> bool {
      .                   adt.has_non_const_dtor(cx.tcx)
      .               }
-- line 212 ----------------------------------------
-- line 223 ----------------------------------------
      .               }
      .           
      .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
      .                   // If *any* component of a composite data type does not implement `Structural{Partial,}Eq`,
      .                   // we know that at least some values of that type are not structural-match. I say "some"
      .                   // because that component may be part of an enum variant (e.g.,
      .                   // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be
      .                   // structural-match (`Option::None`).
  9,795 ( 0.01%)          traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()
      .               }
      .           
    476 ( 0.00%)      fn in_adt_inherently<'tcx>(
      .                   cx: &ConstCx<'_, 'tcx>,
      .                   adt: &'tcx AdtDef,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> bool {
     68 ( 0.00%)          let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));
      .                   !ty.is_structural_eq_shallow(cx.tcx)
    544 ( 0.00%)      }
      .           }
      .           
      .           // FIXME: Use `mir::visit::Visitor` for the `in_*` functions if/when it supports early return.
      .           
      .           /// Returns `true` if this `Rvalue` contains qualif `Q`.
 63,820 ( 0.04%)  pub fn in_rvalue<'tcx, Q, F>(
      .               cx: &ConstCx<'_, 'tcx>,
      .               in_local: &mut F,
      .               rvalue: &Rvalue<'tcx>,
      .           ) -> bool
      .           where
      .               Q: Qualif,
      .               F: FnMut(Local) -> bool,
      .           {
 31,910 ( 0.02%)      match rvalue {
      .                   Rvalue::ThreadLocalRef(_) | Rvalue::NullaryOp(..) => {
      .                       Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx))
      .                   }
      .           
      .                   Rvalue::Discriminant(place) | Rvalue::Len(place) => {
      .                       in_place::<Q, _>(cx, in_local, place.as_ref())
      .                   }
      .           
      .                   Rvalue::Use(operand)
      .                   | Rvalue::Repeat(operand, _)
      .                   | Rvalue::UnaryOp(_, operand)
      .                   | Rvalue::Cast(_, operand, _)
 13,148 ( 0.01%)          | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),
      .           
      .                   Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {
      .                       in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)
      .                   }
      .           
  4,788 ( 0.00%)          Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {
      .                       // Special-case reborrows to be more like a copy of the reference.
  4,176 ( 0.00%)              if let Some((place_base, ProjectionElem::Deref)) = place.as_ref().last_projection() {
  2,088 ( 0.00%)                  let base_ty = place_base.ty(cx.body, cx.tcx).ty;
  4,176 ( 0.00%)                  if let ty::Ref(..) = base_ty.kind() {
 11,883 ( 0.01%)                      return in_place::<Q, _>(cx, in_local, place_base);
      .                           }
      .                       }
      .           
  1,594 ( 0.00%)              in_place::<Q, _>(cx, in_local, place.as_ref())
      .                   }
      .           
      .                   Rvalue::Aggregate(kind, operands) => {
      .                       // Return early if we know that the struct or enum being constructed is always
      .                       // qualified.
  3,930 ( 0.00%)              if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {
    472 ( 0.00%)                  let def = cx.tcx.adt_def(adt_did);
    948 ( 0.00%)                  if Q::in_adt_inherently(cx, def, substs) {
      .                               return true;
      .                           }
    404 ( 0.00%)                  if def.is_union() && Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)) {
      .                               return true;
      .                           }
      .                       }
      .           
      .                       // Otherwise, proceed structurally...
 80,916 ( 0.06%)              operands.iter().any(|o| in_operand::<Q, _>(cx, in_local, o))
      .                   }
      .               }
 21,035 ( 0.01%)  }
      .           
      .           /// Returns `true` if this `Place` contains qualif `Q`.
 61,611 ( 0.04%)  pub fn in_place<'tcx, Q, F>(cx: &ConstCx<'_, 'tcx>, in_local: &mut F, place: PlaceRef<'tcx>) -> bool
      .           where
      .               Q: Qualif,
      .               F: FnMut(Local) -> bool,
      .           {
    315 ( 0.00%)      let mut place = place;
      .               while let Some((place_base, elem)) = place.last_projection() {
      .                   match elem {
      .                       ProjectionElem::Index(index) if in_local(index) => return true,
      .           
      .                       ProjectionElem::Deref
      .                       | ProjectionElem::Field(_, _)
      .                       | ProjectionElem::ConstantIndex { .. }
      .                       | ProjectionElem::Subslice { .. }
-- line 320 ----------------------------------------
-- line 327 ----------------------------------------
      .                   if !Q::in_any_value_of_ty(cx, proj_ty) {
      .                       return false;
      .                   }
      .           
      .                   place = place_base;
      .               }
      .           
      .               assert!(place.projection.is_empty());
    175 ( 0.00%)      in_local(place.local)
  3,856 ( 0.00%)  }
      .           
      .           /// Returns `true` if this `Operand` contains qualif `Q`.
183,378 ( 0.13%)  pub fn in_operand<'tcx, Q, F>(
      .               cx: &ConstCx<'_, 'tcx>,
      .               in_local: &mut F,
      .               operand: &Operand<'tcx>,
      .           ) -> bool
      .           where
      .               Q: Qualif,
      .               F: FnMut(Local) -> bool,
      .           {
 41,408 ( 0.03%)      let constant = match operand {
      .                   Operand::Copy(place) | Operand::Move(place) => {
 19,524 ( 0.01%)              return in_place::<Q, _>(cx, in_local, place.as_ref());
      .                   }
      .           
      .                   Operand::Constant(c) => c,
      .               };
      .           
      .               // Check the qualifs of the value of `const` items.
 90,360 ( 0.06%)      if let Some(ct) = constant.literal.const_for_ty() {
 36,144 ( 0.02%)          if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {
      .                       // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible
      .                       // only for `NeedsNonConstDrop` with precise drop checking. This is the only const
      .                       // check performed after the promotion. Verify that with an assertion.
      .                       assert!(promoted.is_none() || Q::ALLOW_PROMOTED);
      .                       // Don't peek inside trait associated constants.
      .                       if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {
      .                           let qualifs = if let Some((did, param_did)) = def.as_const_arg() {
      .                               cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))
-- line 366 ----------------------------------------
-- line 374 ----------------------------------------
      .           
      .                           // Just in case the type is more specific than
      .                           // the definition, e.g., impl associated const
      .                           // with type parameters, take it into account.
      .                       }
      .                   }
      .               }
      .               // Otherwise use the qualifs of the type.
 43,692 ( 0.03%)      Q::in_any_value_of_ty(cx, constant.literal.ty())
159,402 ( 0.11%)  }

 42,936 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir               

-- line 77 ----------------------------------------
      .           //
      .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
      .           // placate the same deriving in `ty::FreeRegion`, but we may want to
      .           // actually attach a more meaningful ordering to scopes than the one
      .           // generated via deriving here.
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct Scope {
  1,363 ( 0.00%)      pub id: hir::ItemLocalId,
 37,179 ( 0.03%)      pub data: ScopeData,
      .           }
      .           
      .           impl fmt::Debug for Scope {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.data {
      .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
      .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
      .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
      .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
      .                           self.id,
      .                           fsi.as_u32(),
      .                       ),
      .                   }
      .               }
      .           }
      .           
168,182 ( 0.12%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub enum ScopeData {
      .               Node,
      .           
      .               /// Scope of the call-site for a function or closure
      .               /// (outlives the arguments as well as the body).
      .               CallSite,
      .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
      .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
      .               pub fn item_local_id(&self) -> hir::ItemLocalId {
      .                   self.id
      .               }
      .           
      .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
    409 ( 0.00%)          scope_tree
      .                       .root_body
      .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
      .               }
      .           
      .               /// Returns the span of this `Scope`. Note that in general the
      .               /// returned span may not correspond to the span of any `NodeId` in
      .               /// the AST.
  2,863 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
    818 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
      .                       Some(hir_id) => hir_id,
      .                       None => return DUMMY_SP,
      .                   };
  1,636 ( 0.00%)          let span = tcx.hir().span(hir_id);
  1,636 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
      .                       if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
      .                           // Want span for scope starting after the
      .                           // indexed statement and ending at end of
      .                           // `blk`; reuse span of `blk` and shift `lo`
      .                           // forward to end of indexed statement.
      .                           //
      .                           // (This is the special case alluded to in the
      .                           // doc-comment for this method)
-- line 189 ----------------------------------------
-- line 193 ----------------------------------------
      .                           // To avoid issues with macro-generated spans, the span
      .                           // of the statement must be nested in that of the block.
      .                           if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
      .                               return span.with_lo(stmt_span.lo());
      .                           }
      .                       }
      .                   }
      .                   span
  3,681 ( 0.00%)      }
      .           }
      .           
      .           pub type ScopeDepth = u32;
      .           
      .           /// The region scope tree encodes information about region relationships.
      .           #[derive(Default, Debug)]
      .           pub struct ScopeTree {
      .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
      .               /// The `Span` of the yield.
      .               pub span: Span,
      .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
      .               pub expr_and_pat_count: usize,
      .               pub source: hir::YieldSource,
      .           }
      .           
      .           impl ScopeTree {
  8,190 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
      .                   debug!("{:?}.parent = {:?}", child, parent);
      .           
  2,730 ( 0.00%)          if let Some(p) = parent {
      .                       let prev = self.parent_map.insert(child, p);
  1,364 ( 0.00%)              assert!(prev.is_none());
      .                   }
      .           
      .                   // Record the destruction scopes for later so we can query them.
  2,730 ( 0.00%)          if let ScopeData::Destruction = child.data {
      .                       self.destruction_scopes.insert(child.item_local_id(), child);
      .                   }
  5,456 ( 0.00%)      }
      .           
  2,724 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
      .                   self.destruction_scopes.get(&n).cloned()
  2,724 ( 0.00%)      }
      .           
      .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
      .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
      .                   assert!(var != lifetime.item_local_id());
      .                   self.var_map.insert(var, lifetime);
      .               }
      .           
      .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
      .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
    140 ( 0.00%)          if let Some(lifetime) = lifetime {
      .                       assert!(var != lifetime.item_local_id());
      .                   }
      .                   self.rvalue_scopes.insert(var, lifetime);
      .               }
      .           
      .               /// Returns the narrowest scope that encloses `id`, if any.
      .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
      .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
-- line 363 ----------------------------------------
-- line 367 ----------------------------------------
      .               pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
      .                   self.var_map
      .                       .get(&var_id)
      .                       .cloned()
      .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
      .               }
      .           
      .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
 19,068 ( 0.01%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
      .                   // Check for a designated rvalue scope.
    210 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
      .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
      .                       return s;
      .                   }
      .           
      .                   // Otherwise, locate the innermost terminating scope
      .                   // if there's one. Static items, for instance, won't
      .                   // have an enclosing scope, hence no scope will be
      .                   // returned.
  2,654 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
      .           
104,460 ( 0.07%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
 33,256 ( 0.02%)              match p.data {
      .                           ScopeData::Destruction => {
      .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
      .                               return Some(id);
      .                           }
 12,648 ( 0.01%)                  _ => id = p,
      .                       }
      .                   }
      .           
      .                   debug!("temporary_scope({:?}) = None", expr_id);
      .                   None
 21,792 ( 0.01%)      }
      .           
      .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
      .               /// `false` otherwise.
      .               ///
      .               /// Used by clippy.
      .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
      .                   let mut s = subscope;
      .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

 61,964 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  7,255 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 13,360 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 28,638 ( 0.02%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  4,131 ( 0.00%)          i += 2
      .               }
      .           
 13,360 ( 0.01%)      if i < count {
  6,977 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 20,032 ( 0.01%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
132,753 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
 41,208 ( 0.03%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
  3,873 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  1,690 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  1,690 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 16,900 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 13,520 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 15,210 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
  8,202 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  6,760 ( 0.00%)          self.processed += BUFFER_SIZE;
  3,380 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  7,198 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 37,796 ( 0.03%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 11,608 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,304 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  4,854 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  5,030 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  1,006 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  3,018 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
  1,006 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  2,012 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  7,553 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  8,559 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 15,106 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  2,012 ( 0.00%)          let input_left = length - processed;
  1,668 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    862 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    862 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    862 ( 0.00%)              self.state.v0 ^= elem;
  1,724 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
  1,006 ( 0.00%)          self.nbuf = extra_bytes_left;
  5,030 ( 0.00%)          self.processed += nbuf + processed;
  6,036 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  1,680 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  2,240 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  1,465 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  1,465 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  1,465 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  1,120 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    487 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  1,607 ( 0.00%)          let length = self.processed + self.nbuf;
  1,116 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
    558 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
    558 ( 0.00%)          state.v0 ^= b;
      .           
    558 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  1,168 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
     50 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
     50 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
100,540 ( 0.07%)          compress!(state);
123,561 ( 0.08%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  2,332 ( 0.00%)          compress!(state);
  2,332 ( 0.00%)          compress!(state);
  2,332 ( 0.00%)          compress!(state);
  1,775 ( 0.00%)          compress!(state);
      .               }
      .           }

 14,138 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir              

-- line 8 ----------------------------------------
     .           };
     .           use rustc_ast_pretty::pprust::token_to_string;
     .           use rustc_data_structures::fx::FxHashMap;
     .           use rustc_errors::PResult;
     .           use rustc_span::Span;
     .           
     .           impl<'a> StringReader<'a> {
     .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
    19 ( 0.00%)          let mut tt_reader = TokenTreesReader {
     .                       string_reader: self,
     1 ( 0.00%)              token: Token::dummy(),
     .                       open_braces: Vec::new(),
     .                       unmatched_braces: Vec::new(),
     .                       matching_delim_spans: Vec::new(),
     .                       last_unclosed_found_span: None,
     .                       last_delim_empty_block_spans: FxHashMap::default(),
     .                       matching_block_spans: Vec::new(),
     .                   };
     1 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     6 ( 0.00%)          (res, tt_reader.unmatched_braces)
     .               }
     .           }
     .           
     .           struct TokenTreesReader<'a> {
     .               string_reader: StringReader<'a>,
     .               token: Token,
     .               /// Stack of open delimiters and their spans. Used for error message.
     .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
     .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
     .               /// Collect the spans of braces (Open, Close). Used only
     .               /// for detecting if blocks are empty and only braces.
     .               matching_block_spans: Vec<(Span, Span)>,
     .           }
     .           
     .           impl<'a> TokenTreesReader<'a> {
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
     8 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
     .                   let mut buf = TokenStreamBuilder::default();
     .           
     .                   self.bump();
    48 ( 0.00%)          while self.token != token::Eof {
   184 ( 0.00%)              buf.push(self.parse_token_tree()?);
     .                   }
     .           
     .                   Ok(buf.into_token_stream())
     9 ( 0.00%)      }
     .           
     .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
     .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
     .                   let mut buf = TokenStreamBuilder::default();
     .                   loop {
 6,582 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
     .                           return buf.into_token_stream();
     .                       }
     .           
16,085 ( 0.01%)              match self.parse_token_tree() {
28,953 ( 0.02%)                  Ok(tree) => buf.push(tree),
     .                           Err(mut e) => {
     .                               e.emit();
     .                               return buf.into_token_stream();
     .                           }
     .                       }
     .                   }
     .               }
     .           
29,160 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
 6,480 ( 0.00%)          let sm = self.string_reader.sess.source_map();
     .           
28,864 ( 0.02%)          match self.token.kind {
     .                       token::Eof => {
     .                           let msg = "this file contains an unclosed delimiter";
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
     .                           for &(_, sp) in &self.open_braces {
     .                               err.span_label(sp, "unclosed delimiter");
     .                               self.unmatched_braces.push(UnmatchedBrace {
     .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
     .                                   err.span_label(
     .                                       *close_sp,
     .                                       "...as it matches this but it has different indentation",
     .                                   );
     .                               }
     .                           }
     .                           Err(err)
     .                       }
    74 ( 0.00%)              token::OpenDelim(delim) => {
     .                           // The span for beginning of the delimited section
    74 ( 0.00%)                  let pre_span = self.token.span;
     .           
     .                           // Parse the open delimiter.
   518 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
     .                           self.bump();
     .           
     .                           // Parse the token trees within the delimiters.
     .                           // We stop at any delimiter so we can try to recover if the user
     .                           // uses an incorrect delimiter.
    74 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
     .           
     .                           // Expand to cover the entire delimited token tree
   370 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
     .           
   148 ( 0.00%)                  match self.token.kind {
     .                               // Correct delimiter.
   148 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
     .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
   148 ( 0.00%)                          let close_brace_span = self.token.span;
     .           
   222 ( 0.00%)                          if tts.is_empty() {
     .                                       let empty_block_span = open_brace_span.to(close_brace_span);
     .                                       if !sm.is_multiline(empty_block_span) {
     .                                           // Only track if the block is in the form of `{}`, otherwise it is
     .                                           // likely that it was written on purpose.
     .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
     .                                       }
     .                                   }
     .           
     .                                   //only add braces
   296 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
     .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
     .                                   }
     .           
    74 ( 0.00%)                          if self.open_braces.is_empty() {
     .                                       // Clear up these spans to avoid suggesting them as we've found
     .                                       // properly matched delimiters so far for an entire block.
     .                                       self.matching_delim_spans.clear();
     .                                   } else {
     .                                       self.matching_delim_spans.push((
     .                                           open_brace,
     .                                           open_brace_span,
     .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
     .                               token::Eof => {
     .                                   // Silently recover, the EOF token will be seen again
     .                                   // and an error emitted then. Thus we don't pop from
     .                                   // self.open_braces here.
     .                               }
     .                               _ => {}
     .                           }
     .           
   518 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
     .                       }
     .                       token::CloseDelim(delim) => {
     .                           // An unexpected closing delimiter (i.e., there is no
     .                           // matching opening delimiter).
     .                           let token_str = token_to_string(&self.token);
     .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
     .                           let mut err =
     .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
     .                                   err.span_label(parent.1, "...matches this closing brace");
     .                               }
     .                           }
     .           
     .                           err.span_label(self.token.span, "unexpected closing delimiter");
     .                           Err(err)
     .                       }
     .                       _ => {
15,830 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
     .                           let mut spacing = self.bump();
 6,332 ( 0.00%)                  if !self.token.is_op() {
     .                               spacing = Alone;
     .                           }
18,996 ( 0.01%)                  Ok((tt, spacing))
     .                       }
     .                   }
25,920 ( 0.02%)      }
     .           
     .               fn bump(&mut self) -> Spacing {
29,462 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
16,209 ( 0.01%)          self.token = token;
     .                   spacing
     .               }
     .           }
     .           
    74 ( 0.00%)  #[derive(Default)]
     .           struct TokenStreamBuilder {
     .               buf: Vec<TreeAndSpacing>,
     .           }
     .           
     .           impl TokenStreamBuilder {
42,120 ( 0.03%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
24,945 ( 0.02%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 3,012 ( 0.00%)              if let TokenTree::Token(token) = &tree {
 4,658 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
     .                               self.buf.pop();
   420 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
     .                               return;
     .                           }
     .                       }
     .                   }
16,025 ( 0.01%)          self.buf.push((tree, joint))
25,920 ( 0.02%)      }
     .           
     .               fn into_token_stream(self) -> TokenStream {
   749 ( 0.00%)          TokenStream::new(self.buf)
     .               }
     .           }

 7,357 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      8 ( 0.00%)      match &node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
    146 ( 0.00%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
     26 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
      .                   Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 115 ----------------------------------------
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
     54 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
     18 ( 0.00%)          if self.current_id.local_id.index() != 0 {
      4 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
     16 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
      2 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      2 ( 0.00%)              return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
      2 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      2 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
     48 ( 0.00%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    203 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     29 ( 0.00%)          self.tcx.hir_crate(())
    232 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
     84 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
     48 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
     63 ( 0.00%)      }
      .           
      .               #[inline]
    128 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
     23 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
      .                       self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
    144 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
     12 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      1 ( 0.00%)          self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      9 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
     52 ( 0.00%)          let def_kind = match self.find(hir_id)? {
     12 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
     16 ( 0.00%)          Some(def_kind)
     40 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
 62,544 ( 0.04%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  7,818 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 15,626 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  7,813 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
 23,439 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
 62,544 ( 0.04%)      }
      .           
      .               pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
 46,793 ( 0.03%)          self.find_parent_node(hir_id).unwrap()
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  4,000 ( 0.00%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
    500 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
     91 ( 0.00%)              Some(owner.node.into())
      .                   } else {
    818 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
    409 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  1,227 ( 0.00%)              Some(node.node)
      .                   }
  4,000 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
     23 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
     57 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
     31 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
     38 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
      4 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      2 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      4 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
    539 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    154 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
    616 ( 0.00%)      }
      .           
      .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
      .               }
      .           
      .               pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
      .               }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
    203 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
     58 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
    232 ( 0.00%)      }
      .           
      .               pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      .                   if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
      .               }
      .           
      3 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      3 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
      3 ( 0.00%)      }
      .           
      .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
      .                   for (parent, _) in self.parent_iter(hir_id) {
      .                       if let Some(body) = self.maybe_body_owned_by(parent) {
      .                           return self.body_owner(body);
      .                       }
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
    152 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
    114 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
    152 ( 0.00%)      }
      .           
     50 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
     80 ( 0.00%)          self.local_def_id(self.body_owner(id))
     50 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
      7 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
     23 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
     21 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
     18 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
     14 ( 0.00%)      }
      .           
      .               pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      .                   self.body(id).params.iter().map(|arg| match arg.pat.kind {
      .                       PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
      .               }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
     36 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
     72 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
     12 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
     36 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
     48 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
     72 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
     18 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
      .                       BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      .                       BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
      .                           if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
     54 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
     12 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
     10 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
     24 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
      9 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
      .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
      .                   match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
      .                       Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
      .               }
      .           
     72 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
      8 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
     72 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     26 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
     70 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
     50 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      .                       Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     30 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
     90 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     25 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
     16 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
     55 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
    128 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     19 ( 0.00%)          let krate = self.krate();
     69 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    120 ( 0.00%)              match owner.node() {
    117 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      .                           OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
    128 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      3 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
      .                       Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
      .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
     86 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
     11 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
     12 ( 0.00%)          for id in module.items.iter() {
    135 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.trait_items.iter() {
      .                       visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.impl_items.iter() {
      .                       visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
     88 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
      8 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
      3 ( 0.00%)              let items = self.tcx.hir_module_items(id);
     32 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 711 ----------------------------------------
      .               pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
     16 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
      4 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
     36 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
     14 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
      2 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
     35 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
     15 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
     40 ( 0.00%)      }
      .           
      .               pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      .                   match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
      .               }
      .           
-- line 906 ----------------------------------------
-- line 954 ----------------------------------------
      .                   match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
 93,317 ( 0.06%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 13,331 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
106,648 ( 0.07%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
     12 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  1,640 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
     12 ( 0.00%)      }
      .           
  2,919 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  2,919 ( 0.00%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
     12 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
     12 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      .                       Node::TraitItem(trait_item) => match &trait_item.kind {
      .                           TraitItemKind::Fn(sig, _) => sig.span,
      .                           _ => trait_item.span,
      .                       },
      .                       Node::ImplItem(impl_item) => match &impl_item.kind {
      .                           ImplItemKind::Fn(sig, _) => sig.span,
-- line 986 ----------------------------------------
-- line 1007 ----------------------------------------
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
  4,170 ( 0.00%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
      .               pub fn span_if_local(&self, id: DefId) -> Option<Span> {
      8 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      .               }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
-- line 1041 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
     19 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
     36 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      .                   self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      .                   self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
      2 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
    125 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
     25 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
      9 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      6 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
      5 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
     16 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
     11 ( 0.00%)      return ModuleItems {
      4 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      4 ( 0.00%)          items: items.into_boxed_slice(),
      4 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      4 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      4 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
      3 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
     15 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      9 ( 0.00%)              self.items.push(item.item_id());
      6 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
      .                           self.submodules.push(item.def_id);
      .                       } else {
     18 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
      .                   }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      .                       self.trait_items.push(item.trait_item_id());
      .                       intravisit::walk_trait_item(self, item)
      .                   }
      .           
-- line 1299 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      8 ( 0.00%)  }

 18,161 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir              

-- line 18 ----------------------------------------
     .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
     .           use rustc_span::def_id::DefId;
     .           use rustc_span::Span;
     .           use rustc_target::abi::VariantIdx;
     .           
     .           impl<'tcx> Cx<'tcx> {
     .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
     .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
 1,097 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
     .               }
     .           
     .               crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
 3,366 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
     .               }
     .           
12,258 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
 9,534 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
     .                   let expr_scope =
     .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
     .           
     .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
     .           
 5,448 ( 0.00%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
     .           
 8,172 ( 0.01%)          let adjustment_span = match self.adjustment_span {
     .                       Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
     .                       _ => None,
     .                   };
     .           
     .                   // Now apply adjustments, if any.
 5,448 ( 0.00%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
     .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
   680 ( 0.00%)              let span = expr.span;
 2,625 ( 0.00%)              expr =
 6,750 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
     .                   }
     .           
     .                   // Next, wrap this up in the expr's scope.
17,706 ( 0.01%)          expr = Expr {
     .                       temp_lifetime,
 1,192 ( 0.00%)              ty: expr.ty,
 1,362 ( 0.00%)              span: hir_expr.span,
     .                       kind: ExprKind::Scope {
     .                           region_scope: expr_scope,
24,516 ( 0.02%)                  value: self.thir.exprs.push(expr),
 2,724 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
     .                       },
     .                   };
     .           
     .                   // Finally, create a destruction scope, if any.
 4,086 ( 0.00%)          if let Some(region_scope) =
 2,724 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
     .                   {
    12 ( 0.00%)              expr = Expr {
     .                           temp_lifetime,
     .                           ty: expr.ty,
     1 ( 0.00%)                  span: hir_expr.span,
     .                           kind: ExprKind::Scope {
     .                               region_scope,
    14 ( 0.00%)                      value: self.thir.exprs.push(expr),
     .                               lint_level: LintLevel::Inherited,
     .                           },
     .                       };
     .                   }
     .           
     .                   // OK, all done!
29,964 ( 0.02%)          self.thir.exprs.push(expr)
12,258 ( 0.01%)      }
     .           
     .               fn apply_adjustment(
     .                   &mut self,
     .                   hir_expr: &'tcx hir::Expr<'tcx>,
     .                   mut expr: Expr<'tcx>,
     .                   adjustment: &Adjustment<'tcx>,
     .                   mut span: Span,
     .               ) -> Expr<'tcx> {
   750 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
     .           
     .                   // Adjust the span from the block, to the last expression of the
     .                   // block. This is a better span when returning a mutable reference
     .                   // with too short a lifetime. The error message will use the span
     .                   // from the assignment to the return place, which should only point
     .                   // at the returned value, not the entire function body.
     .                   //
     .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
     .                   //      x
     .                   //   // ^ error message points at this expression.
     .                   // }
     .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
   410 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
     .                           if let Some(last_expr) = body.expr {
     .                               span = self.thir[last_expr].span;
     .                               expr.span = span;
     .                           }
     .                       }
     .                   };
     .           
 3,410 ( 0.00%)          let kind = match adjustment.kind {
     .                       Adjust::Pointer(PointerCast::Unsize) => {
     .                           adjust_span(&mut expr);
   595 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
     .                       }
     .                       Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
     .                       Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
     .                       Adjust::Deref(None) => {
     .                           adjust_span(&mut expr);
 2,890 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
     .                       }
     .                       Adjust::Deref(Some(deref)) => {
     .                           // We don't need to do call adjust_span here since
     .                           // deref coercions always start with a built-in deref.
     .                           let call = deref.method_call(self.tcx(), expr.ty);
     .           
     .                           expr = Expr {
     .                               temp_lifetime,
-- line 132 ----------------------------------------
-- line 139 ----------------------------------------
     .                                   arg: self.thir.exprs.push(expr),
     .                               },
     .                           };
     .           
     .                           let expr = Box::new([self.thir.exprs.push(expr)]);
     .           
     .                           self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
     .                       }
   680 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
     .                           borrow_kind: m.to_borrow_kind(),
 2,380 ( 0.00%)                  arg: self.thir.exprs.push(expr),
     .                       },
     .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
     .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
     .                       }
     .                   };
     .           
 7,125 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
     .               }
     .           
13,620 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
 5,448 ( 0.00%)          let expr_ty = self.typeck_results().expr_ty(expr);
 1,362 ( 0.00%)          let expr_span = expr.span;
 6,810 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
     .           
 8,242 ( 0.01%)          let kind = match expr.kind {
     .                       // Here comes the interesting stuff:
     .                       hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
     .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
     .                           let expr = self.method_callee(expr, segment.ident.span, None);
     .                           // When we apply adjustments to the receiver, use the span of
     .                           // the overall method call for better diagnostics. args[0]
     .                           // is guaranteed to exist, since a method call always has a receiver.
     .                           let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
-- line 172 ----------------------------------------
-- line 259 ----------------------------------------
     .                                       from_hir_call: true,
     .                                       fn_span: expr.span,
     .                                   }
     .                               }
     .                           }
     .                       }
     .           
     .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
   175 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
     .                       }
     .           
     .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
     .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
     .                       }
     .           
     .                       hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
     .           
-- line 275 ----------------------------------------
-- line 286 ----------------------------------------
     .                               ExprKind::AssignOp {
     .                                   op: bin_op(op.node),
     .                                   lhs: self.mirror_expr(lhs),
     .                                   rhs: self.mirror_expr(rhs),
     .                               }
     .                           }
     .                       }
     .           
 1,258 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
 5,032 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
     .                           user_ty: None,
     .                           const_id: None,
     .                       },
     .           
     .                       hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
     .                           if self.typeck_results().is_method_call(expr) {
     .                               let lhs = self.mirror_expr(lhs);
     .                               let rhs = self.mirror_expr(rhs);
-- line 303 ----------------------------------------
-- line 365 ----------------------------------------
     .                                   user_ty: None,
     .                                   const_id: None,
     .                               }
     .                           } else {
     .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
     .                           }
     .                       }
     .           
    68 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
    68 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
     .                               AdtKind::Struct | AdtKind::Union => {
   102 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
   136 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
     .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
   136 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
    68 ( 0.00%)                              adt_def: adt,
     .                                       variant_index: VariantIdx::new(0),
    68 ( 0.00%)                              substs,
     .                                       user_ty,
    68 ( 0.00%)                              fields: self.field_refs(fields),
   136 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
     .                                           base: self.mirror_expr(base),
     .                                           field_types: self.typeck_results().fru_field_types()[expr.hir_id]
     .                                               .iter()
     .                                               .copied()
     .                                               .collect(),
     .                                       }),
     .                                   }))
     .                               }
-- line 393 ----------------------------------------
-- line 761 ----------------------------------------
     .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
     .                           }
     .                       }
     .                       hir::ExprKind::DropTemps(ref source) => {
     .                           ExprKind::Use { source: self.mirror_expr(source) }
     .                       }
     .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
     .                       hir::ExprKind::Array(ref fields) => {
   175 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
     .                       }
     .                       hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
     .           
     .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
     .                       hir::ExprKind::Err => unreachable!(),
     .                   };
     .           
46,308 ( 0.03%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
10,896 ( 0.01%)      }
     .           
     .               fn user_substs_applied_to_res(
     .                   &mut self,
     .                   hir_id: hir::HirId,
     .                   res: Res,
     .               ) -> Option<ty::CanonicalUserType<'tcx>> {
     .                   debug!("user_substs_applied_to_res: res={:?}", res);
     .                   let user_provided_type = match res {
-- line 786 ----------------------------------------
-- line 1121 ----------------------------------------
     .                   }
     .               }
     .           
     .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
     .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
     .                   fields
     .                       .iter()
     .                       .map(|field| FieldExpr {
   612 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
     .                           expr: self.mirror_expr(field.expr),
     .                       })
     .                       .collect()
     .               }
     .           }
     .           
     .           trait ToBorrowKind {
     .               fn to_borrow_kind(&self) -> BorrowKind;
     .           }
     .           
     .           impl ToBorrowKind for AutoBorrowMutability {
     .               fn to_borrow_kind(&self) -> BorrowKind {
     .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
 1,190 ( 0.00%)          match *self {
     .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
     .                           allow_two_phase_borrow: match allow_two_phase_borrow {
     .                               AllowTwoPhase::Yes => true,
     .                               AllowTwoPhase::No => false,
     .                           },
     .                       },
     .                       AutoBorrowMutability::Not => BorrowKind::Shared,
     .                   }
-- line 1151 ----------------------------------------

21,068 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 35 ----------------------------------------
     .           
     .               /// Contains the successors for all the Sccs, concatenated. The
     .               /// range of indices corresponding to a given SCC is found in its
     .               /// SccData.
     .               all_successors: Vec<S>,
     .           }
     .           
     .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
     9 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
     .                   SccsConstruction::construct(graph)
     9 ( 0.00%)      }
     .           
     .               /// Returns the number of SCCs in the graph.
     .               pub fn num_sccs(&self) -> usize {
     .                   self.scc_data.len()
     .               }
     .           
     .               /// Returns an iterator over the SCCs in the graph.
     .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
     .               /// This is convenient when the edges represent dependencies: when you visit
     .               /// `S1`, the value for `S2` will already have been computed.
     .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
     .                   (0..self.scc_data.len()).map(S::new)
     .               }
     .           
     .               /// Returns the SCC to which a node `r` belongs.
     .               pub fn scc(&self, r: N) -> S {
 2,790 ( 0.00%)          self.scc_indices[r]
     .               }
     .           
     .               /// Returns the successors of the given SCC.
     .               pub fn successors(&self, scc: S) -> &[S] {
     .                   self.scc_data.successors(scc)
     .               }
     .           
     .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
     .                   self.ranges.len()
     .               }
     .           
     .               /// Returns the successors of the given SCC.
     .               fn successors(&self, scc: S) -> &[S] {
     .                   // Annoyingly, `range` does not implement `Copy`, so we have
     .                   // to do `range.start..range.end`:
     .                   let range = &self.ranges[scc];
 3,880 ( 0.00%)          &self.all_successors[range.start..range.end]
     .               }
     .           
     .               /// Creates a new SCC with `successors` as its successors and
     .               /// returns the resulting index.
     .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
     .                   // Store the successors on `scc_successors_vec`, remembering
     .                   // the range of indices.
   485 ( 0.00%)          let all_successors_start = self.all_successors.len();
     .                   self.all_successors.extend(successors);
     .                   let all_successors_end = self.all_successors.len();
     .           
     .                   debug!(
     .                       "create_scc({:?}) successors={:?}",
     .                       self.ranges.len(),
     .                       &self.all_successors[all_successors_start..all_successors_end],
     .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
     .               /// into the successors_stack, we sometimes get duplicate entries.
     .               /// We use this set to remove those -- we also keep its storage
     .               /// around between successors to amortize memory allocation costs.
     .               duplicate_set: FxHashSet<S>,
     .           
     .               scc_data: SccData<S>,
     .           }
     .           
     5 ( 0.00%)  #[derive(Copy, Clone, Debug)]
     .           enum NodeState<N, S> {
     .               /// This node has not yet been visited as part of the DFS.
     .               ///
     .               /// After SCC construction is complete, this state ought to be
     .               /// impossible.
     .               NotVisited,
     .           
     .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
     .               /// N with depth D can reach some other node N' with lower depth
     .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
     .               /// between them on the stack are part of an SCC.
     .               ///
     .               /// [wikipedia]: https://bit.ly/2EZIx84
     .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
     .                   let num_nodes = graph.num_nodes();
     .           
    11 ( 0.00%)          let mut this = Self {
     .                       graph,
     .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
     .                       node_stack: Vec::with_capacity(num_nodes),
     .                       successors_stack: Vec::new(),
     .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
     .                       duplicate_set: FxHashSet::default(),
     .                   };
     .           
     .                   let scc_indices = (0..num_nodes)
     .                       .map(G::Node::new)
 8,364 ( 0.01%)              .map(|node| match this.start_walk_from(node) {
     .                           WalkReturn::Complete { scc_index } => scc_index,
     .                           WalkReturn::Cycle { min_depth } => panic!(
     .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
     .                               node, min_depth
     .                           ),
     .                       })
     .                       .collect();
     .           
     6 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
     .               }
     .           
12,546 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
 5,576 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
     .                       result
     .                   } else {
     .                       self.walk_unvisited_node(node)
     .                   }
13,940 ( 0.01%)      }
     .           
     .               /// Inspect a node during the DFS. We first examine its current
     .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
     .               /// that the caller might push it onto the stack and start walking its
     .               /// successors.
     .               ///
     .               /// If it is already on the DFS stack it will be in the state
     .               /// `BeingVisited`. In that case, we have found a cycle and we
     .               /// return the depth from the stack.
     .               ///
     .               /// Otherwise, we are looking at a node that has already been
     .               /// completely visited. We therefore return `WalkReturn::Complete`
     .               /// with its associated SCC index.
14,808 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
29,616 ( 0.02%)          Some(match self.find_state(node) {
 4,179 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
     .           
 2,745 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
     .           
     .                       NodeState::NotVisited => return None,
     .           
     .                       NodeState::InCycleWith { parent } => panic!(
     .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
     .                           parent
     .                       ),
     .                   })
25,914 ( 0.02%)      }
     .           
     .               /// Fetches the state of the node `r`. If `r` is recorded as being
     .               /// in a cycle with some other node `r2`, then fetches the state
     .               /// of `r2` (and updates `r` to reflect current result). This is
     .               /// basically the "find" part of a standard union-find algorithm
     .               /// (with path compression).
     .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
     .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
     .                   // following links downwards is then simply as soon as we have
     .                   // found the initial self-loop.
     .                   let mut previous_node = node;
     .           
     .                   // Ultimately assigned by the parent when following
     .                   // `InCycleWith` upwards.
     .                   let node_state = loop {
     .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
37,028 ( 0.03%)              match self.node_states[node] {
 5,572 ( 0.00%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
 3,660 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
 1,394 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
 2,550 ( 0.00%)                  NodeState::InCycleWith { parent } => {
     .                               // We test this, to be extremely sure that we never
     .                               // ever break our termination condition for the
     .                               // reverse iteration loop.
 2,550 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
     .                               // Store the previous node as an inverted list link
12,750 ( 0.01%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
     .                               // Update to parent node.
     .                               previous_node = node;
     .                               node = parent;
     .                           }
     .                       }
     .                   };
     .           
     .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
     .                   // We can then walk backwards, starting from `previous_node`, and assign
     .                   // each node in the list with the updated state. The loop terminates
     .                   // when we reach the self-cycle.
     .           
     .                   // Move backwards until we found the node where we started. We
     .                   // will know when we hit the state where previous_node == node.
     .                   loop {
     .                       // Back at the beginning, we can return.
 7,655 ( 0.01%)              if previous_node == node {
     .                           return node_state;
     .                       }
     .                       // Update to previous node in the link.
 5,100 ( 0.00%)              match self.node_states[previous_node] {
 2,550 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
     .                               node = previous_node;
     .                               previous_node = previous;
     .                           }
     .                           // Only InCycleWith nodes were added to the reverse linked list.
     .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
     .                       }
     .           
     .                       debug!("find_state: parent_state = {:?}", node_state);
     .           
     .                       // Update the node state from the parent state. The assigned
     .                       // state is actually a loop invariant but it will only be
     .                       // evaluated if there is at least one backlink to follow.
     .                       // Fully trusting llvm here to find this loop optimization.
10,200 ( 0.01%)              match node_state {
     .                           // Path compression, make current node point to the same root.
     .                           NodeState::InCycle { .. } => {
 1,818 ( 0.00%)                      self.node_states[node] = node_state;
     .                           }
     .                           // Still visiting nodes, compress to cycle to the node
     .                           // at that depth.
 1,641 ( 0.00%)                  NodeState::BeingVisited { depth } => {
 3,282 ( 0.00%)                      self.node_states[node] =
 1,641 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
     .                           }
     .                           // These are never allowed as parent nodes. InCycleWith
     .                           // should have been followed to a real parent and
     .                           // NotVisited can not be part of a cycle since it should
     .                           // have instead gotten explored.
     .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
     .                               panic!("invalid parent state: {:?}", node_state)
     .                           }
     .                       }
     .                   }
 7,404 ( 0.01%)      }
     .           
     .               /// Walks a node that has never been visited before.
     .               ///
     .               /// Call this method when `inspect_node` has returned `None`. Having the
     .               /// caller decide avoids mutual recursion between the two methods and allows
     .               /// us to maintain an allocated stack for nodes on the path between calls.
     .               #[instrument(skip(self, initial), level = "debug")]
     .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
     .                       successor_node: G::Node,
     .                   }
     .           
     .                   // Move the stack to a local variable. We want to utilize the existing allocation and
     .                   // mutably borrow it without borrowing self at the same time.
     .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
     .                   debug_assert_eq!(successors_stack.len(), 0);
     .           
     7 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
     .                       node: initial,
     .                       depth: 0,
     .                       min_depth: 0,
     .                       iter: None,
     .                       successors_len: 0,
     .                       min_cycle_root: initial,
     .                       successor_node: initial,
     .                   }];
     .           
     .                   let mut return_value = None;
     .           
 1,394 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
     .                       let VisitingNodeFrame {
 5,574 ( 0.00%)                  node,
     .                           depth,
     .                           iter,
 5,574 ( 0.00%)                  successors_len,
     .                           min_depth,
     .                           min_cycle_root,
     .                           successor_node,
     .                       } = frame;
     .           
 2,787 ( 0.00%)              let node = *node;
 5,574 ( 0.00%)              let depth = *depth;
     .           
 8,361 ( 0.01%)              let successors = match iter {
     .                           Some(iter) => iter,
     .                           None => {
     .                               // This None marks that we still have the initialize this node's frame.
     .                               debug!(?depth, ?node);
     .           
     .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
     .           
     .                               // Push `node` onto the stack.
 5,576 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
     .                               self.node_stack.push(node);
     .           
     .                               // Walk each successor of the node, looking to see if any of
     .                               // them can reach a node that is presently on the stack. If
     .                               // so, that means they can also reach us.
 2,788 ( 0.00%)                      *successors_len = successors_stack.len();
     .                               // Set and return a reference, this is currently empty.
 5,576 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
     .                           }
     .                       };
     .           
     .                       // Now that iter is initialized, this is a constant for this frame.
 5,574 ( 0.00%)              let successors_len = *successors_len;
     .           
     .                       // Construct iterators for the nodes and walk results. There are two cases:
     .                       // * The walk of a successor node returned.
     .                       // * The remaining successor nodes.
     .                       let returned_walk =
     .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
     .           
     .                       let successor_walk = successors.by_ref().map(|successor_node| {
     .                           debug!(?node, ?successor_node);
 6,924 ( 0.00%)                  (successor_node, self.inspect_node(successor_node))
     .                       });
     .           
10,190 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
11,156 ( 0.01%)                  match walk {
     .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
     .                                   // Track the minimum depth we can reach.
 3,648 ( 0.00%)                          assert!(successor_min_depth <= depth);
 4,560 ( 0.00%)                          if successor_min_depth < *min_depth {
     .                                       debug!(?node, ?successor_min_depth);
 2,736 ( 0.00%)                              *min_depth = successor_min_depth;
   912 ( 0.00%)                              *min_cycle_root = successor_node;
     .                                   }
     .                               }
     .           
     .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
     .                                   // Push the completed SCC indices onto
     .                                   // the `successors_stack` for later.
     .                                   debug!(?node, ?successor_scc_index);
     .                                   successors_stack.push(successor_scc_index);
     .                               }
     .           
     .                               None => {
 2,786 ( 0.00%)                          let depth = depth + 1;
     .                                   debug!(?depth, ?successor_node);
     .                                   // Remember which node the return value will come from.
 1,393 ( 0.00%)                          frame.successor_node = successor_node;
     .                                   // Start a new stack frame the step into it.
     .                                   stack.push(VisitingNodeFrame {
     .                                       node: successor_node,
     .                                       depth,
     .                                       iter: None,
     .                                       successors_len: 0,
     .                                       min_depth: depth,
     .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
     .                       let frame = stack.pop().unwrap();
     .           
     .                       // If `min_depth == depth`, then we are the root of the
     .                       // cycle: we can't reach anyone further down the stack.
     .           
     .                       // Pass the 'return value' down the stack.
     .                       // We return one frame at a time so there can't be another return value.
     .                       debug_assert!(return_value.is_none());
 2,788 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
     .                           // Note that successor stack may have duplicates, so we
     .                           // want to remove those:
     .                           let deduplicated_successors = {
     .                               let duplicate_set = &mut self.duplicate_set;
     .                               duplicate_set.clear();
     .                               successors_stack
     .                                   .drain(successors_len..)
   484 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
     .                           };
     .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
 2,910 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
     .                           WalkReturn::Complete { scc_index }
     .                       } else {
     .                           // We are not the head of the cycle. Return back to our
     .                           // caller. They will take ownership of the
     .                           // `self.successors` data that we pushed.
 5,454 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
     .                           WalkReturn::Cycle { min_depth: frame.min_depth }
     .                       });
     .                   }
     .           
     .                   // Keep the allocation we used for successors_stack.
     9 ( 0.00%)          self.successors_stack = successors_stack;
     .                   debug_assert_eq!(self.successors_stack.len(), 0);
     .           
     .                   return_value.unwrap()
     .               }
     .           }

67,197 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
      149 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  126,043 ( 0.09%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
    7,882 ( 0.01%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    2,583 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   73,738 ( 0.05%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      914 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       25 ( 0.00%)          self.position += bytes;
       25 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      528 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      440 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
    3,283 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   15,048 ( 0.01%)          read_leb128!(self, read_u32_leb128)
    6,566 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.38%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.05%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.11%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,707,155 ( 1.17%)          let value = self.data[self.position];
  313,042 ( 0.21%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   22,640 ( 0.02%)      fn read_usize(&mut self) -> usize {
   22,640 ( 0.02%)          read_leb128!(self, read_usize_leb128)
   45,280 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
      900 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    3,322 ( 0.00%)          let len = self.read_usize();
   16,952 ( 0.01%)          let sentinel = self.data[self.position + len];
    4,238 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   10,595 ( 0.01%)          self.position += len + 1;
    3,609 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       19 ( 0.00%)          let start = self.position;
       94 ( 0.00%)          self.position += s.len();
       19 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  191,143 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir              

-- line 27 ----------------------------------------
     .           impl CacheEntry {
     .               #[inline]
     .               fn update(
     .                   &mut self,
     .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
     .                   pos: BytePos,
     .                   time_stamp: usize,
     .               ) {
   256 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    70 ( 0.00%)              self.file = file;
    35 ( 0.00%)              self.file_index = file_idx;
     .                   }
     .           
   252 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
     .                   let line_bounds = self.file.line_bounds(line_index);
   574 ( 0.00%)          self.line_number = line_index + 1;
   894 ( 0.00%)          self.line = line_bounds;
     .                   self.touch(time_stamp);
     .               }
     .           
     .               #[inline]
     .               fn touch(&mut self, time_stamp: usize) {
 6,236 ( 0.00%)          self.time_stamp = time_stamp;
     .               }
     .           }
     .           
     .           #[derive(Clone)]
     .           pub struct CachingSourceMapView<'sm> {
     .               source_map: &'sm SourceMap,
     .               line_cache: [CacheEntry; 3],
     .               time_stamp: usize,
     .           }
     .           
     .           impl<'sm> CachingSourceMapView<'sm> {
     6 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
     .                   let files = source_map.files();
     3 ( 0.00%)          let first_file = files[0].clone();
     .                   let entry = CacheEntry {
     .                       time_stamp: 0,
     .                       line_number: 0,
     .                       line: BytePos(0)..BytePos(0),
     .                       file: first_file,
     .                       file_index: 0,
     .                   };
     .           
    15 ( 0.00%)          CachingSourceMapView {
     .                       source_map,
    21 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
     .                       time_stamp: 0,
     .                   }
    12 ( 0.00%)      }
     .           
     .               pub fn byte_pos_to_line_and_col(
     .                   &mut self,
     .                   pos: BytePos,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
     .                   self.time_stamp += 1;
     .           
     .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
     .                   };
     .           
     .                   let cache_entry = &mut self.line_cache[oldest];
     .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
     .           
     .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
     .               }
     .           
22,708 ( 0.02%)      pub fn span_data_to_lines_and_cols(
     .                   &mut self,
     .                   span_data: &SpanData,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
12,976 ( 0.01%)          self.time_stamp += 1;
     .           
     .                   // Check if lo and hi are in the cached lines.
 3,244 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 3,244 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
     .           
 5,986 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
     .                       // Cache hit for span lo and hi. Check if they belong to the same file.
     .                       let result = {
 5,984 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
     .                           let hi = &self.line_cache[hi_cache_idx as usize];
     .           
17,952 ( 0.01%)                  if lo.file_index != hi.file_index {
     .                               return None;
     .                           }
     .           
     .                           (
 5,984 ( 0.00%)                      lo.file.clone(),
     .                               lo.line_number,
     .                               span_data.lo - lo.line.start,
 2,992 ( 0.00%)                      hi.line_number,
     .                               span_data.hi - hi.line.start,
     .                           )
     .                       };
     .           
 2,992 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 2,992 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
     .           
11,968 ( 0.01%)              return Some(result);
     .                   }
     .           
     .                   // No cache hit or cache hit for only one of span lo and hi.
   502 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
     .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
     .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
     .                   } else {
     .                       self.oldest_cache_entry_index()
     .                   };
     .           
     .                   // If the entry doesn't point to the correct file, get the new file and index.
     .                   // Return early if the file containing beginning of span doesn't contain end of span.
 2,016 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
     .                       let new_file_and_idx = self.file_for_position(span_data.lo)?;
     .                       if !file_contains(&new_file_and_idx.0, span_data.hi) {
     .                           return None;
     .                       }
     .           
     .                       Some(new_file_and_idx)
     .                   } else {
     .                       let file = &self.line_cache[oldest].file;
   756 ( 0.00%)              if !file_contains(&file, span_data.hi) {
     .                           return None;
     .                       }
     .           
   756 ( 0.00%)              None
     .                   };
     .           
     .                   // Update the cache entries.
 1,260 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, -1) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .           
   747 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
     .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
     .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
     .                               let hi = &mut self.line_cache[next_oldest];
     .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     .                               (oldest, next_oldest)
     .                           } else {
     .                               (oldest, oldest)
     .                           }
     .                       }
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, _) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     2 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     3 ( 0.00%)                  hi.touch(self.time_stamp);
     .                           (oldest, hi_cache_idx as usize)
     .                       }
     .                       // Oldest cache entry is for span_data.hi line.
     .                       (_, -1) => {
     .                           let hi = &mut self.line_cache[oldest];
     2 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     4 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
     8 ( 0.00%)                  lo.touch(self.time_stamp);
     .                           (lo_cache_idx as usize, oldest)
     .                       }
     .                       _ => {
     .                           panic!();
     .                       }
     .                   };
     .           
     .                   let lo = &self.line_cache[lo_idx];
     .                   let hi = &self.line_cache[hi_idx];
     .           
     .                   // Span lo and hi may equal line end when last line doesn't
     .                   // end in newline, hence the inclusive upper bounds below.
   504 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   252 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   504 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   252 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 1,260 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   756 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   756 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
     .           
   756 ( 0.00%)          Some((
   252 ( 0.00%)              lo.file.clone(),
     .                       lo.line_number,
     .                       span_data.lo - lo.line.start,
   252 ( 0.00%)              hi.line_number,
     .                       span_data.hi - hi.line.start,
     .                   ))
29,196 ( 0.02%)      }
     .           
     .               fn cache_entry_index(&self, pos: BytePos) -> isize {
     .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
27,660 ( 0.02%)              if cache_entry.line.contains(&pos) {
     .                           return idx as isize;
     .                       }
     .                   }
     .           
     .                   -1
     .               }
     .           
     .               fn oldest_cache_entry_index(&self) -> usize {
     .                   let mut oldest = 0;
     .           
     .                   for idx in 1..self.line_cache.len() {
 1,494 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
     .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
     .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
     .           
     .                   for idx in 0..self.line_cache.len() {
   228 ( 0.00%)              if idx != avoid_idx
   132 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
     .                       {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
-- line 270 ----------------------------------------

37,888 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs
--------------------------------------------------------------------------------
Ir              

-- line 316 ----------------------------------------
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           // Cross-platform, iterator-independent parsing
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Says whether the first byte after the prefix is a separator.
     .           fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {
     .               let path = if let Some(p) = prefix { &s[p.len()..] } else { s };
   280 ( 0.00%)      !path.is_empty() && is_sep_byte(path[0])
     .           }
     .           
     .           // basic workhorse for splitting stem and extension
     .           fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {
     .               if os_str_as_u8_slice(file) == b".." {
     .                   return (Some(file), None);
     .               }
     .           
     .               // The unsafety here stems from converting between &OsStr and &[u8]
     .               // and back. This is safe to do because (1) we only look at ASCII
     .               // contents of the encoding and (2) new &OsStr values are produced
     .               // only from ASCII-bounded slices of existing &OsStr values.
   288 ( 0.00%)      let mut iter = os_str_as_u8_slice(file).rsplitn(2, |b| *b == b'.');
     .               let after = iter.next();
     .               let before = iter.next();
     .               if before == Some(b"") {
     .                   (Some(file), None)
     .               } else {
     .                   unsafe { (before.map(|s| u8_slice_as_os_str(s)), after.map(|s| u8_slice_as_os_str(s))) }
     .               }
     .           }
-- line 345 ----------------------------------------
-- line 368 ----------------------------------------
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           /// Component parsing works by a double-ended state machine; the cursors at the
     .           /// front and back of the path each keep track of what parts of the path have
     .           /// been consumed so far.
     .           ///
     .           /// Going front to back, a path is made up of a prefix, a starting
     .           /// directory component, and a body (of normal components)
   331 ( 0.00%)  #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
     .           enum State {
     .               Prefix = 0,   // c:
     .               StartDir = 1, // / or . or nothing
     .               Body = 2,     // foo/bar/baz
     .               Done = 3,
     .           }
     .           
     .           /// A structure wrapping a Windows path prefix as well as its unparsed string
-- line 384 ----------------------------------------
-- line 493 ----------------------------------------
     .           /// let components = path.components().collect::<Vec<_>>();
     .           /// assert_eq!(&components, &[
     .           ///     Component::RootDir,
     .           ///     Component::Normal("tmp".as_ref()),
     .           ///     Component::Normal("foo".as_ref()),
     .           ///     Component::Normal("bar.txt".as_ref()),
     .           /// ]);
     .           /// ```
     2 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub enum Component<'a> {
     .               /// A Windows path prefix, e.g., `C:` or `\\server\share`.
     .               ///
     .               /// There is a large variety of prefix types, see [`Prefix`]'s documentation
     .               /// for more.
     .               ///
     .               /// Does not occur on Unix.
-- line 509 ----------------------------------------
-- line 586 ----------------------------------------
     .           /// let path = Path::new("/tmp/foo/bar.txt");
     .           ///
     .           /// for component in path.components() {
     .           ///     println!("{:?}", component);
     .           /// }
     .           /// ```
     .           ///
     .           /// [`components`]: Path::components
    72 ( 0.00%)  #[derive(Clone)]
     .           #[must_use = "iterators are lazy and do nothing unless consumed"]
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           pub struct Components<'a> {
     .               // The path left to parse components from
    12 ( 0.00%)      path: &'a [u8],
     .           
     .               // The prefix as it was originally parsed, if any
     .               prefix: Option<Prefix<'a>>,
     .           
     .               // true if path *physically* has a root separator; for most Windows
     .               // prefixes, it may have a "logical" root separator for the purposes of
     .               // normalization, e.g.,  \\server\share == \\server\share\.
     .               has_physical_root: bool,
     .           
     .               // The iterator is double-ended, and these two states keep track of what has
     .               // been produced from either end
     6 ( 0.00%)      front: State,
     6 ( 0.00%)      back: State,
     .           }
     .           
     .           /// An iterator over the [`Component`]s of a [`Path`], as [`OsStr`] slices.
     .           ///
     .           /// This `struct` is created by the [`iter`] method on [`Path`].
     .           /// See its documentation for more.
     .           ///
     .           /// [`iter`]: Path::iter
-- line 620 ----------------------------------------
-- line 650 ----------------------------------------
     .               #[inline]
     .               fn prefix_verbatim(&self) -> bool {
     .                   self.prefix.as_ref().map(Prefix::is_verbatim).unwrap_or(false)
     .               }
     .           
     .               /// how much of the prefix is left from the point of view of iteration?
     .               #[inline]
     .               fn prefix_remaining(&self) -> usize {
   217 ( 0.00%)          if self.front == State::Prefix { self.prefix_len() } else { 0 }
     .               }
     .           
     .               // Given the iteration so far, how much of the pre-State::Body path is left?
     .               #[inline]
 1,519 ( 0.00%)      fn len_before_body(&self) -> usize {
   868 ( 0.00%)          let root = if self.front <= State::StartDir && self.has_physical_root { 1 } else { 0 };
   229 ( 0.00%)          let cur_dir = if self.front <= State::StartDir && self.include_cur_dir() { 1 } else { 0 };
   868 ( 0.00%)          self.prefix_remaining() + root + cur_dir
 1,953 ( 0.00%)      }
     .           
     .               // is the iteration complete?
     .               #[inline]
     .               fn finished(&self) -> bool {
     .                   self.front == State::Done || self.back == State::Done || self.front > self.back
     .               }
     .           
     .               #[inline]
-- line 675 ----------------------------------------
-- line 687 ----------------------------------------
     .               /// let mut components = Path::new("/tmp/foo/bar.txt").components();
     .               /// components.next();
     .               /// components.next();
     .               ///
     .               /// assert_eq!(Path::new("foo/bar.txt"), components.as_path());
     .               /// ```
     .               #[must_use]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    36 ( 0.00%)      pub fn as_path(&self) -> &'a Path {
     .                   let mut comps = self.clone();
     6 ( 0.00%)          if comps.front == State::Body {
     .                       comps.trim_left();
     .                   }
     6 ( 0.00%)          if comps.back == State::Body {
     .                       comps.trim_right();
     .                   }
     .                   unsafe { Path::from_u8_slice(comps.path) }
    54 ( 0.00%)      }
     .           
     .               /// Is the *original* path rooted?
     .               fn has_root(&self) -> bool {
   434 ( 0.00%)          if self.has_physical_root {
     .                       return true;
     .                   }
    15 ( 0.00%)          if let Some(p) = self.prefix {
     .                       if p.has_implicit_root() {
     .                           return true;
     .                       }
     .                   }
     .                   false
     .               }
     .           
     .               /// Should the normalized path include a leading . ?
     .               fn include_cur_dir(&self) -> bool {
     6 ( 0.00%)          if self.has_root() {
     .                       return false;
     .                   }
    11 ( 0.00%)          let mut iter = self.path[self.prefix_len()..].iter();
     4 ( 0.00%)          match (iter.next(), iter.next()) {
     .                       (Some(&b'.'), None) => true,
     .                       (Some(&b'.'), Some(&b)) => self.is_sep_byte(b),
     .                       _ => false,
     .                   }
     .               }
     .           
     .               // parse a given byte sequence into the corresponding path component
     .               fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {
     .                   match comp {
   648 ( 0.00%)              b"." if self.prefix_verbatim() => Some(Component::CurDir),
     .                       b"." => None, // . components are normalized away, except at
     .                       // the beginning of a path, which is treated
     .                       // separately via `include_cur_dir`
     .                       b".." => Some(Component::ParentDir),
     .                       b"" => None,
     .                       _ => Some(Component::Normal(unsafe { u8_slice_as_os_str(comp) })),
     .                   }
     .               }
-- line 743 ----------------------------------------
-- line 750 ----------------------------------------
     .                       None => (0, self.path),
     .                       Some(i) => (1, &self.path[..i]),
     .                   };
     .                   (comp.len() + extra, self.parse_single_component(comp))
     .               }
     .           
     .               // parse a component from the right, saying how many bytes to consume to
     .               // remove the component
   540 ( 0.00%)      fn parse_next_component_back(&self) -> (usize, Option<Component<'a>>) {
     .                   debug_assert!(self.back == State::Body);
   216 ( 0.00%)          let start = self.len_before_body();
   108 ( 0.00%)          let (extra, comp) = match self.path[start..].iter().rposition(|b| self.is_sep_byte(*b)) {
     .                       None => (0, &self.path[start..]),
   428 ( 0.00%)              Some(i) => (1, &self.path[start + i + 1..]),
     .                   };
   648 ( 0.00%)          (comp.len() + extra, self.parse_single_component(comp))
   432 ( 0.00%)      }
     .           
     .               // trim away repeated separators (i.e., empty components) on the left
     .               fn trim_left(&mut self) {
     .                   while !self.path.is_empty() {
     .                       let (size, comp) = self.parse_next_component();
     .                       if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[size..];
     .                       }
     .                   }
     .               }
     .           
     .               // trim away repeated separators (i.e., empty components) on the right
     .               fn trim_right(&mut self) {
    18 ( 0.00%)          while self.path.len() > self.len_before_body() {
    18 ( 0.00%)              let (size, comp) = self.parse_next_component_back();
     6 ( 0.00%)              if comp.is_some() {
     .                           return;
     .                       } else {
     .                           self.path = &self.path[..self.path.len() - size];
     .                       }
     .                   }
     .               }
     .           }
     .           
-- line 792 ----------------------------------------
-- line 930 ----------------------------------------
     .                       }
     .                   }
     .                   None
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> DoubleEndedIterator for Components<'a> {
 1,030 ( 0.00%)      fn next_back(&mut self) -> Option<Component<'a>> {
   517 ( 0.00%)          while !self.finished() {
   216 ( 0.00%)              match self.back {
   515 ( 0.00%)                  State::Body if self.path.len() > self.len_before_body() => {
 1,224 ( 0.00%)                      let (size, comp) = self.parse_next_component_back();
   408 ( 0.00%)                      self.path = &self.path[..self.path.len() - size];
   102 ( 0.00%)                      if comp.is_some() {
   816 ( 0.00%)                          return comp;
     .                               }
     .                           }
     .                           State::Body => {
     3 ( 0.00%)                      self.back = State::StartDir;
     .                           }
     .                           State::StartDir => {
     2 ( 0.00%)                      self.back = State::Prefix;
   103 ( 0.00%)                      if self.has_physical_root {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::RootDir);
    12 ( 0.00%)                      } else if let Some(p) = self.prefix {
     .                                   if p.has_implicit_root() && !p.is_verbatim() {
     .                                       return Some(Component::RootDir);
     .                                   }
     .                               } else if self.include_cur_dir() {
     .                                   self.path = &self.path[..self.path.len() - 1];
     .                                   return Some(Component::CurDir);
     .                               }
     .                           }
-- line 964 ----------------------------------------
-- line 965 ----------------------------------------
     .                           State::Prefix if self.prefix_len() > 0 => {
     .                               self.back = State::Done;
     .                               return Some(Component::Prefix(PrefixComponent {
     .                                   raw: unsafe { u8_slice_as_os_str(self.path) },
     .                                   parsed: self.prefix.unwrap(),
     .                               }));
     .                           }
     .                           State::Prefix => {
     1 ( 0.00%)                      self.back = State::Done;
     .                               return None;
     .                           }
     .                           State::Done => unreachable!(),
     .                       }
     .                   }
     .                   None
   927 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "fused", since = "1.26.0")]
     .           impl FusedIterator for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialEq for Components<'a> {
     .               #[inline]
     .               fn eq(&self, other: &Components<'a>) -> bool {
     .                   let Components { path: _, front: _, back: _, has_physical_root: _, prefix: _ } = self;
     .           
     .                   // Fast path for exact matches, e.g. for hashmap lookups.
     .                   // Don't explicitly compare the prefix or has_physical_root fields since they'll
     .                   // either be covered by the `path` buffer or are only relevant for `prefix_verbatim()`.
   272 ( 0.00%)          if self.path.len() == other.path.len()
    34 ( 0.00%)              && self.front == other.front
     .                       && self.back == State::Body
     .                       && other.back == State::Body
    34 ( 0.00%)              && self.prefix_verbatim() == other.prefix_verbatim()
     .                   {
     .                       // possible future improvement: this could bail out earlier if there were a
     .                       // reverse memcmp/bcmp comparing back to front
   102 ( 0.00%)              if self.path == other.path {
     .                           return true;
     .                       }
     .                   }
     .           
     .                   // compare back to front since absolute paths often share long prefixes
     1 ( 0.00%)          Iterator::eq(self.clone().rev(), other.clone().rev())
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Components<'_> {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl<'a> cmp::PartialOrd for Components<'a> {
-- line 1017 ----------------------------------------
-- line 1179 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let path = PathBuf::new();
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               #[inline]
     .               pub fn new() -> PathBuf {
    36 ( 0.00%)          PathBuf { inner: OsString::new() }
     .               }
     .           
     .               /// Creates a new `PathBuf` with a given capacity used to create the
     .               /// internal [`OsString`]. See [`with_capacity`] defined on [`OsString`].
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1195 ----------------------------------------
-- line 1260 ----------------------------------------
     .               /// use std::path::PathBuf;
     .               ///
     .               /// let mut path = PathBuf::from("/tmp");
     .               /// path.push("/etc");
     .               /// assert_eq!(path, PathBuf::from("/etc"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn push<P: AsRef<Path>>(&mut self, path: P) {
   432 ( 0.00%)          self._push(path.as_ref())
     .               }
     .           
   864 ( 0.00%)      fn _push(&mut self, path: &Path) {
     .                   // in general, a separator is needed if the rightmost byte is not a separator
     .                   let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);
     .           
     .                   // in the special case of `C:` on Windows, do *not* add a separator
     .                   let comps = self.components();
     .           
     .                   if comps.prefix_len() > 0
     .                       && comps.prefix_len() == comps.path.len()
-- line 1279 ----------------------------------------
-- line 1327 ----------------------------------------
     .                       return;
     .           
     .                   // `path` has a root but no prefix, e.g., `\windows` (Windows only)
     .                   } else if path.has_root() {
     .                       let prefix_len = self.components().prefix_remaining();
     .                       self.as_mut_vec().truncate(prefix_len);
     .           
     .                   // `path` is a pure relative path
   107 ( 0.00%)          } else if need_sep {
     .                       self.inner.push(MAIN_SEP_STR);
     .                   }
     .           
     .                   self.inner.push(path);
   648 ( 0.00%)      }
     .           
     .               /// Truncates `self` to [`self.parent`].
     .               ///
     .               /// Returns `false` and does nothing if [`self.parent`] is [`None`].
     .               /// Otherwise, returns `true`.
     .               ///
     .               /// [`self.parent`]: Path::parent
     .               ///
-- line 1348 ----------------------------------------
-- line 1354 ----------------------------------------
     .               /// let mut p = PathBuf::from("/spirited/away.rs");
     .               ///
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/spirited"), p);
     .               /// p.pop();
     .               /// assert_eq!(Path::new("/"), p);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
    16 ( 0.00%)      pub fn pop(&mut self) -> bool {
     4 ( 0.00%)          match self.parent().map(|p| p.as_u8_slice().len()) {
     .                       Some(len) => {
     .                           self.as_mut_vec().truncate(len);
     .                           true
     .                       }
     .                       None => false,
     .                   }
    16 ( 0.00%)      }
     .           
     .               /// Updates [`self.file_name`] to `file_name`.
     .               ///
     .               /// If [`self.file_name`] was [`None`], this is equivalent to pushing
     .               /// `file_name`.
     .               ///
     .               /// Otherwise it is equivalent to calling [`pop`] and then pushing
     .               /// `file_name`. The new path will be a sibling of the original path.
-- line 1378 ----------------------------------------
-- line 1428 ----------------------------------------
     .               /// p.set_extension("force");
     .               /// assert_eq!(Path::new("/feel/the.force"), p.as_path());
     .               ///
     .               /// p.set_extension("dark_side");
     .               /// assert_eq!(Path::new("/feel/the.dark_side"), p.as_path());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {
    40 ( 0.00%)          self._set_extension(extension.as_ref())
     .               }
     .           
   120 ( 0.00%)      fn _set_extension(&mut self, extension: &OsStr) -> bool {
    96 ( 0.00%)          let file_stem = match self.file_stem() {
     .                       None => return false,
     .                       Some(f) => os_str_as_u8_slice(f),
     .                   };
     .           
     .                   // truncate until right after the file stem
     .                   let end_file_stem = file_stem[file_stem.len()..].as_ptr() as usize;
     .                   let start = os_str_as_u8_slice(&self.inner).as_ptr() as usize;
     .                   let v = self.as_mut_vec();
     .                   v.truncate(end_file_stem.wrapping_sub(start));
     .           
     .                   // add the new extension, if any
     .                   let new = os_str_as_u8_slice(extension);
    12 ( 0.00%)          if !new.is_empty() {
    33 ( 0.00%)              v.reserve_exact(new.len() + 1);
     .                       v.push(b'.');
     .                       v.extend_from_slice(new);
     .                   }
     .           
     .                   true
    96 ( 0.00%)      }
     .           
     .               /// Consumes the `PathBuf`, yielding its internal [`OsString`] storage.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::PathBuf;
     .               ///
-- line 1468 ----------------------------------------
-- line 1558 ----------------------------------------
     .                   self.inner.shrink_to(min_capacity)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Clone for PathBuf {
     .               #[inline]
     .               fn clone(&self) -> Self {
     9 ( 0.00%)          PathBuf { inner: self.inner.clone() }
     .               }
     .           
     .               #[inline]
     .               fn clone_from(&mut self, source: &Self) {
     .                   self.inner.clone_from(&source.inner)
     .               }
     .           }
     .           
-- line 1574 ----------------------------------------
-- line 1642 ----------------------------------------
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl From<OsString> for PathBuf {
     .               /// Converts an [`OsString`] into a [`PathBuf`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
     .               #[inline]
     .               fn from(s: OsString) -> PathBuf {
   345 ( 0.00%)          PathBuf { inner: s }
     .               }
     .           }
     .           
     .           #[stable(feature = "from_path_buf_for_os_string", since = "1.14.0")]
     .           impl From<PathBuf> for OsString {
     .               /// Converts a [`PathBuf`] into an [`OsString`]
     .               ///
     .               /// This conversion does not allocate or copy memory.
-- line 1658 ----------------------------------------
-- line 1825 ----------------------------------------
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl ToOwned for Path {
     .               type Owned = PathBuf;
     .               #[inline]
     .               fn to_owned(&self) -> PathBuf {
     7 ( 0.00%)          self.to_path_buf()
     .               }
     .               #[inline]
     .               fn clone_into(&self, target: &mut PathBuf) {
     .                   self.inner.clone_into(&mut target.inner);
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for PathBuf {
     .               #[inline]
   136 ( 0.00%)      fn eq(&self, other: &PathBuf) -> bool {
   136 ( 0.00%)          self.components() == other.components()
   136 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for PathBuf {
   350 ( 0.00%)      fn hash<H: Hasher>(&self, h: &mut H) {
     .                   self.as_path().hash(h)
   280 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for PathBuf {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for PathBuf {
     .               #[inline]
-- line 1861 ----------------------------------------
-- line 1936 ----------------------------------------
     .           
     .           impl Path {
     .               // The following (private!) function allows construction of a path from a u8
     .               // slice, which is only safe when it is known to follow the OsStr encoding.
     .               unsafe fn from_u8_slice(s: &[u8]) -> &Path {
     .                   unsafe { Path::new(u8_slice_as_os_str(s)) }
     .               }
     .               // The following (private!) function reveals the byte encoding used for OsStr.
 1,190 ( 0.00%)      fn as_u8_slice(&self) -> &[u8] {
     .                   os_str_as_u8_slice(&self.inner)
   595 ( 0.00%)      }
     .           
     .               /// Directly wraps a string slice as a `Path` slice.
     .               ///
     .               /// This is a cost-free conversion.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 1954 ----------------------------------------
-- line 1964 ----------------------------------------
     .               ///
     .               /// let string = String::from("foo.txt");
     .               /// let from_string = Path::new(&string);
     .               /// let from_path = Path::new(&from_string);
     .               /// assert_eq!(from_string, from_path);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {
     4 ( 0.00%)          unsafe { &*(s.as_ref() as *const OsStr as *const Path) }
     .               }
     .           
     .               /// Yields the underlying [`OsStr`] slice.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
     .               /// use std::path::Path;
-- line 1980 ----------------------------------------
-- line 2050 ----------------------------------------
     .               ///
     .               /// let path_buf = Path::new("foo.txt").to_path_buf();
     .               /// assert_eq!(path_buf, std::path::PathBuf::from("foo.txt"));
     .               /// ```
     .               #[rustc_conversion_suggestion]
     .               #[must_use = "this returns the result of the operation, \
     .                             without modifying the original"]
     .               #[stable(feature = "rust1", since = "1.0.0")]
    88 ( 0.00%)      pub fn to_path_buf(&self) -> PathBuf {
     .                   PathBuf::from(self.inner.to_os_string())
    77 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is absolute, i.e., if it is independent of
     .               /// the current directory.
     .               ///
     .               /// * On Unix, a path is absolute if it starts with the root, so
     .               /// `is_absolute` and [`has_root`] are equivalent.
     .               ///
     .               /// * On Windows, a path is absolute if it has a prefix and starts with the
-- line 2068 ----------------------------------------
-- line 2082 ----------------------------------------
     .               #[allow(deprecated)]
     .               pub fn is_absolute(&self) -> bool {
     .                   if cfg!(target_os = "redox") {
     .                       // FIXME: Allow Redox prefixes
     .                       self.has_root() || has_redox_scheme(self.as_u8_slice())
     .                   } else {
     .                       self.has_root() && (cfg!(any(unix, target_os = "wasi")) || self.prefix().is_some())
     .                   }
     2 ( 0.00%)      }
     .           
     .               /// Returns `true` if the `Path` is relative, i.e., not absolute.
     .               ///
     .               /// See [`is_absolute`]'s documentation for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2098 ----------------------------------------
-- line 2150 ----------------------------------------
     .               /// assert_eq!(parent, Path::new("/foo"));
     .               ///
     .               /// let grand_parent = parent.parent().unwrap();
     .               /// assert_eq!(grand_parent, Path::new("/"));
     .               /// assert_eq!(grand_parent.parent(), None);
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     2 ( 0.00%)      pub fn parent(&self) -> Option<&Path> {
     .                   let mut comps = self.components();
     6 ( 0.00%)          let comp = comps.next_back();
     8 ( 0.00%)          comp.and_then(|p| match p {
     .                       Component::Normal(_) | Component::CurDir | Component::ParentDir => {
    10 ( 0.00%)                  Some(comps.as_path())
     .                       }
     .                       _ => None,
     .                   })
     4 ( 0.00%)      }
     .           
     .               /// Produces an iterator over `Path` and its ancestors.
     .               ///
     .               /// The iterator will yield the `Path` that is returned if the [`parent`] method is used zero
     .               /// or more times. That means, the iterator will yield `&self`, `&self.parent().unwrap()`,
     .               /// `&self.parent().unwrap().parent().unwrap()` and so on. If the [`parent`] method returns
     .               /// [`None`], the iterator will do likewise. The iterator will always yield at least one value,
     .               /// namely `&self`.
-- line 2175 ----------------------------------------
-- line 2217 ----------------------------------------
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("tmp/foo.txt").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.").file_name());
     .               /// assert_eq!(Some(OsStr::new("foo.txt")), Path::new("foo.txt/.//").file_name());
     .               /// assert_eq!(None, Path::new("foo.txt/..").file_name());
     .               /// assert_eq!(None, Path::new("/").file_name());
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
    83 ( 0.00%)      pub fn file_name(&self) -> Option<&OsStr> {
   285 ( 0.00%)          self.components().next_back().and_then(|p| match p {
     .                       Component::Normal(p) => Some(p),
     .                       _ => None,
     .                   })
   166 ( 0.00%)      }
     .           
     .               /// Returns a path that, when joined onto `base`, yields `self`.
     .               ///
     .               /// # Errors
     .               ///
     .               /// If `base` is not a prefix of `self` (i.e., [`starts_with`]
     .               /// returns `false`), returns [`Err`].
     .               ///
-- line 2238 ----------------------------------------
-- line 2354 ----------------------------------------
     .               /// # See Also
     .               /// This method is similar to [`Path::file_prefix`], which extracts the portion of the file name
     .               /// before the *first* `.`
     .               ///
     .               /// [`Path::file_prefix`]: Path::file_prefix
     .               ///
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
    12 ( 0.00%)      pub fn file_stem(&self) -> Option<&OsStr> {
     .                   self.file_name().map(rsplit_file_at_dot).and_then(|(before, after)| before.or(after))
    24 ( 0.00%)      }
     .           
     .               /// Extracts the prefix of [`self.file_name`].
     .               ///
     .               /// The prefix is:
     .               ///
     .               /// * [`None`], if there is no file name;
     .               /// * The entire file name if there is no embedded `.`;
     .               /// * The portion of the file name before the first non-beginning `.`;
-- line 2372 ----------------------------------------
-- line 2431 ----------------------------------------
     .               /// ```
     .               /// use std::path::{Path, PathBuf};
     .               ///
     .               /// assert_eq!(Path::new("/etc").join("passwd"), PathBuf::from("/etc/passwd"));
     .               /// ```
     .               #[stable(feature = "rust1", since = "1.0.0")]
     .               #[must_use]
     .               pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {
    68 ( 0.00%)          self._join(path.as_ref())
     .               }
     .           
   288 ( 0.00%)      fn _join(&self, path: &Path) -> PathBuf {
     .                   let mut buf = self.to_path_buf();
     .                   buf.push(path);
     .                   buf
   216 ( 0.00%)      }
     .           
     .               /// Creates an owned [`PathBuf`] like `self` but with the given file name.
     .               ///
     .               /// See [`PathBuf::set_file_name`] for more details.
     .               ///
     .               /// # Examples
     .               ///
     .               /// ```
-- line 2454 ----------------------------------------
-- line 2529 ----------------------------------------
     .               /// assert_eq!(components.next(), Some(Component::RootDir));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("tmp"))));
     .               /// assert_eq!(components.next(), Some(Component::Normal(OsStr::new("foo.txt"))));
     .               /// assert_eq!(components.next(), None)
     .               /// ```
     .               ///
     .               /// [`CurDir`]: Component::CurDir
     .               #[stable(feature = "rust1", since = "1.0.0")]
    68 ( 0.00%)      pub fn components(&self) -> Components<'_> {
     .                   let prefix = parse_prefix(self.as_os_str());
 1,047 ( 0.00%)          Components {
     .                       path: self.as_u8_slice(),
     .                       prefix,
   279 ( 0.00%)              has_physical_root: has_physical_root(self.as_u8_slice(), prefix)
     .                           || has_redox_scheme(self.as_u8_slice()),
     .                       front: State::Prefix,
     .                       back: State::Body,
     .                   }
    68 ( 0.00%)      }
     .           
     .               /// Produces an iterator over the path's components viewed as [`OsStr`]
     .               /// slices.
     .               ///
     .               /// For more information about the particulars of how the path is separated
     .               /// into components, see [`components`].
     .               ///
     .               /// [`components`]: Path::components
-- line 2555 ----------------------------------------
-- line 2775 ----------------------------------------
     .               ///
     .               /// When the goal is simply to read from (or write to) the source, the most
     .               /// reliable way to test the source can be read (or written to) is to open
     .               /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on
     .               /// a Unix-like system for example. See [`fs::File::open`] or
     .               /// [`fs::OpenOptions::open`] for more information.
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
     5 ( 0.00%)      pub fn is_file(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_file()).unwrap_or(false)
     3 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a directory.
     .               ///
     .               /// This function will traverse symbolic links to query information about the
     .               /// destination file.
     .               ///
     .               /// If you cannot access the metadata of the file, e.g. because of a
     .               /// permission error or broken symbolic links, this will return `false`.
-- line 2793 ----------------------------------------
-- line 2802 ----------------------------------------
     .               ///
     .               /// # See Also
     .               ///
     .               /// This is a convenience function that coerces errors to false. If you want to
     .               /// check errors, call [`fs::metadata`] and handle its [`Result`]. Then call
     .               /// [`fs::Metadata::is_dir`] if it was [`Ok`].
     .               #[stable(feature = "path_ext", since = "1.5.0")]
     .               #[must_use]
    15 ( 0.00%)      pub fn is_dir(&self) -> bool {
     .                   fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)
     9 ( 0.00%)      }
     .           
     .               /// Returns `true` if the path exists on disk and is pointing at a symbolic link.
     .               ///
     .               /// This function will not traverse symbolic links.
     .               /// In case of a broken symbolic link this will also return true.
     .               ///
     .               /// If you cannot access the directory containing the file, e.g., because of a
     .               /// permission error, this will return false.
-- line 2820 ----------------------------------------
-- line 2898 ----------------------------------------
     .           impl fmt::Debug for Display<'_> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   fmt::Debug::fmt(&self.path, f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl fmt::Display for Display<'_> {
     6 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     6 ( 0.00%)          self.path.inner.display(f)
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialEq for Path {
     .               #[inline]
     .               fn eq(&self, other: &Path) -> bool {
     .                   self.components() == other.components()
     .               }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl Hash for Path {
 4,200 ( 0.00%)      fn hash<H: Hasher>(&self, h: &mut H) {
   665 ( 0.00%)          let bytes = self.as_u8_slice();
     .                   let prefix_len = match parse_prefix(&self.inner) {
     .                       Some(prefix) => {
     .                           prefix.hash(h);
     .                           prefix.len()
     .                       }
     .                       None => 0,
     .                   };
     .                   let bytes = &bytes[prefix_len..];
     .           
     .                   let mut component_start = 0;
     .                   let mut bytes_hashed = 0;
     .           
     .                   for i in 0..bytes.len() {
59,212 ( 0.04%)              if is_sep_byte(bytes[i]) {
20,379 ( 0.01%)                  if i > component_start {
     .                               let to_hash = &bytes[component_start..i];
     8 ( 0.00%)                      h.write(to_hash);
12,400 ( 0.01%)                      bytes_hashed += to_hash.len();
     .                           }
     .           
     .                           // skip over separator and optionally a following CurDir item
     .                           // since components() would normalize these away
27,696 ( 0.02%)                  component_start = i + match bytes[i..] {
13,586 ( 0.01%)                      [_, b'.', b'/', ..] | [_, b'.'] => 2,
     .                               _ => 1,
     .                           };
     .                       }
     .                   }
     .           
 1,190 ( 0.00%)          if component_start < bytes.len() {
     .                       let to_hash = &bytes[component_start..];
     3 ( 0.00%)              h.write(to_hash);
 1,190 ( 0.00%)              bytes_hashed += to_hash.len();
     .                   }
     .           
     .                   h.write_usize(bytes_hashed);
 4,192 ( 0.00%)      }
     .           }
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::Eq for Path {}
     .           
     .           #[stable(feature = "rust1", since = "1.0.0")]
     .           impl cmp::PartialOrd for Path {
     .               #[inline]
-- line 2967 ----------------------------------------

31,783 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/path.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir              

-- line 5 ----------------------------------------
     .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
     .           unsafe impl GlobalAlloc for System {
     .               #[inline]
     .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
     .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
     .                   // So only rely on MIN_ALIGN if size >= align.
     .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
     .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
85,778 ( 0.06%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
64,332 ( 0.04%)              libc::malloc(layout.size()) as *mut u8
     .                   } else {
     .                       #[cfg(target_os = "macos")]
     .                       {
     .                           if layout.align() > (1 << 31) {
     .                               return ptr::null_mut();
     .                           }
     .                       }
     .                       aligned_malloc(&layout)
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
     .                   // See the comment above in `alloc` for why this check looks the way it does.
   768 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 1,152 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
     .                   } else {
     .                       let ptr = self.alloc(layout);
     .                       if !ptr.is_null() {
     .                           ptr::write_bytes(ptr, 0, layout.size());
     .                       }
     .                       ptr
     .                   }
     .               }
     .           
     .               #[inline]
     .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
21,626 ( 0.01%)          libc::free(ptr as *mut libc::c_void)
     .               }
     .           
     .               #[inline]
     .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 6,080 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
12,160 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
     .                   } else {
     .                       realloc_fallback(self, ptr, layout, new_size)
     .                   }
     .               }
     .           }
     .           
     .           cfg_if::cfg_if! {
     .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
     .               } else if #[cfg(target_os = "wasi")] {
     .                   #[inline]
     .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
     .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
     .                   }
     .               } else {
     .                   #[inline]
     .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
     1 ( 0.00%)              let mut out = ptr::null_mut();
     .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
     .                       // Since these are all powers of 2, we can just use max.
     .                       let align = layout.align().max(crate::mem::size_of::<usize>());
     2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
     2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
     .                   }
     .               }
     .           }

     1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir              

     .           #![allow(clippy::many_single_char_names)]
     .           use crate::consts::RC;
     .           use core::convert::TryInto;
     .           
     .           #[inline(always)]
     .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
60,241 ( 0.04%)      ((x & y) | (!x & z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           #[inline(always)]
     .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
57,426 ( 0.04%)      ((x & z) | (y & !z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline(always)]
     .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
28,150 ( 0.02%)      (x ^ y ^ z)
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline(always)]
     .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
36,032 ( 0.02%)      (y ^ (x | !z))
     .                   .wrapping_add(w)
     .                   .wrapping_add(m)
     .                   .wrapping_add(c)
     .                   .rotate_left(s)
     .                   .wrapping_add(x)
     .           }
     .           
     .           #[inline]
 5,067 ( 0.00%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
 1,126 ( 0.00%)      let mut a = state[0];
   563 ( 0.00%)      let mut b = state[1];
   563 ( 0.00%)      let mut c = state[2];
   563 ( 0.00%)      let mut d = state[3];
     .           
     .               let mut data = [0u32; 16];
     .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
14,075 ( 0.01%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
     .               }
     .           
     .               // round 1
     .               a = op_f(a, b, c, d, data[0], RC[0], 7);
     .               d = op_f(d, a, b, c, data[1], RC[1], 12);
     .               c = op_f(c, d, a, b, data[2], RC[2], 17);
     .               b = op_f(b, c, d, a, data[3], RC[3], 22);
     .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
     .               c = op_i(c, d, a, b, data[6], RC[58], 15);
     .               b = op_i(b, c, d, a, data[13], RC[59], 21);
     .           
     .               a = op_i(a, b, c, d, data[4], RC[60], 6);
     .               d = op_i(d, a, b, c, data[11], RC[61], 10);
     .               c = op_i(c, d, a, b, data[2], RC[62], 15);
     .               b = op_i(b, c, d, a, data[9], RC[63], 21);
     .           
 1,126 ( 0.00%)      state[0] = state[0].wrapping_add(a);
   563 ( 0.00%)      state[1] = state[1].wrapping_add(b);
   563 ( 0.00%)      state[2] = state[2].wrapping_add(c);
   563 ( 0.00%)      state[3] = state[3].wrapping_add(d);
 4,504 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::collections::BTreeMap;
      .           use std::ops::Range;
      .           use std::{cmp, fmt, mem};
      .           
      .           mod leak_check;
      .           
      .           pub use rustc_middle::infer::MemberConstraint;
      .           
 27,302 ( 0.02%)  #[derive(Default)]
      .           pub struct RegionConstraintStorage<'tcx> {
      .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
      .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
      .           
      .               data: RegionConstraintData<'tcx>,
      .           
      .               /// For a given pair of regions (R1, R2), maps to a region R3 that
      .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
      .               storage: &'a mut RegionConstraintStorage<'tcx>,
      .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .           }
      .           
      .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
      .               type Target = RegionConstraintStorage<'tcx>;
      .               #[inline]
      .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
     38 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  2,339 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
      .           
      .           /// The full set of region constraints gathered up by the collector.
      .           /// Describes constraints between the region variables and other
      .           /// regions, as well as other conditions that must be verified, or
      .           /// assumptions that can be made.
  9,972 ( 0.01%)  #[derive(Debug, Default, Clone)]
      .           pub struct RegionConstraintData<'tcx> {
      .               /// Constraints of the form `A <= B`, where either `A` or `B` can
      .               /// be a region variable (or neither, as it happens).
      .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
      .           
      .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
      .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
      .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
      .               /// This hashmap is used to avoid that naive scenario. Basically
      .               /// we record the fact that `'a <= 'b` is implied by the fn
      .               /// signature, and then ignore the constraint when solving
      .               /// equations. This is a bit of a hack but seems to work.
      .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
      .           }
      .           
      .           /// Represents a constraint that influences the inference process.
218,934 ( 0.15%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
      .           pub enum Constraint<'tcx> {
      .               /// A region variable is a subregion of another.
 61,290 ( 0.04%)      VarSubVar(RegionVid, RegionVid),
      .           
      .               /// A concrete region is a subregion of region variable.
    585 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
      .           
      .               /// A region variable is a subregion of a concrete region. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
     20 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
      .           
      .               /// A constraint where neither side is a variable. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
      .               RegSubReg(Region<'tcx>, Region<'tcx>),
      .           }
      .           
      .           impl Constraint<'_> {
      .               pub fn involves_placeholders(&self) -> bool {
     16 ( 0.00%)          match self {
      .                       Constraint::VarSubVar(_, _) => false,
      .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
      .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 263 ----------------------------------------
      .               /// In other words, if we meet *all* bounds in `B`, that suffices.
      .               /// This is used when *some* bound in `B` is known to suffice, but
      .               /// we don't know which.
      .               AllBounds(Vec<VerifyBound<'tcx>>),
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub(crate) struct TwoRegions<'tcx> {
    123 ( 0.00%)      a: Region<'tcx>,
    128 ( 0.00%)      b: Region<'tcx>,
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq)]
      .           pub(crate) enum UndoLog<'tcx> {
      .               /// We added `RegionVid`.
      .               AddVar(RegionVid),
      .           
      .               /// We added the given `constraint`.
-- line 280 ----------------------------------------
-- line 304 ----------------------------------------
      .               pub universe: ty::UniverseIndex,
      .           }
      .           
      .           pub struct RegionSnapshot {
      .               any_unifications: bool,
      .           }
      .           
      .           impl<'tcx> RegionConstraintStorage<'tcx> {
  4,964 ( 0.00%)      pub fn new() -> Self {
      .                   Self::default()
  4,964 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
      .                   &'a mut self,
      .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .               ) -> RegionConstraintCollector<'a, 'tcx> {
      .                   RegionConstraintCollector { storage: self, undo_log }
      .               }
      .           
      .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
  7,460 ( 0.01%)          match undo_entry {
      .                       AddVar(vid) => {
      .                           self.var_infos.pop().unwrap();
  2,624 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
      .                       }
    836 ( 0.00%)              AddConstraint(ref constraint) => {
  3,344 ( 0.00%)                  self.data.constraints.remove(constraint);
      .                       }
      .                       AddVerify(index) => {
      .                           self.data.verifys.pop();
      .                           assert_eq!(self.data.verifys.len(), index);
      .                       }
      .                       AddGiven(sub, sup) => {
      .                           self.data.givens.remove(&(sub, sup));
      .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
      .               pub fn num_region_vars(&self) -> usize {
      .                   self.var_infos.len()
      .               }
      .           
      .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
      4 ( 0.00%)          &self.data
      4 ( 0.00%)      }
      .           
      .               /// Once all the constraints have been gathered, extract out the final data.
      .               ///
      .               /// Not legal during a snapshot.
      .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
     11 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
      .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
      .               }
      .           
      .               /// Takes (and clears) the current set of constraints. Note that
      .               /// the set of variables remains intact, but all relationships
      .               /// between them are reset. This is used during NLL checking to
      .               /// grab the set of constraints that arose from a particular
      .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
      .           
      .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
      .                   debug!("RegionConstraintCollector: start_snapshot");
      .                   RegionSnapshot { any_unifications: self.any_unifications }
      .               }
      .           
      .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
      .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
    338 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
      .               }
      .           
 14,034 ( 0.01%)      pub fn new_region_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: RegionVariableOrigin,
      .               ) -> RegionVid {
  2,339 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
      .           
  7,017 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  2,339 ( 0.00%)          assert_eq!(vid, u_vid.vid);
      .                   self.undo_log.push(AddVar(vid));
      .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
      .                   vid
 18,712 ( 0.01%)      }
      .           
      .               /// Returns the universe for the given variable.
      .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
    714 ( 0.00%)          self.var_infos[vid].universe
      .               }
      .           
      .               /// Returns the origin for the given variable.
      .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
      .                   self.var_infos[vid].origin
      .               }
      .           
      .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
      .           
      .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
      .                   // present in the map yet. This prevents origins from outside the snapshot being
      .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
      .                   let undo_log = &mut self.undo_log;
 14,200 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
  7,602 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  5,068 ( 0.00%)              origin
      .                   });
      .               }
      .           
      .               fn add_verify(&mut self, verify: Verify<'tcx>) {
      .                   // cannot add verifys once regions are resolved
      .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
      .           
      .                   // skip no-op cases known to be satisfied
-- line 471 ----------------------------------------
-- line 484 ----------------------------------------
      .                   // cannot add givens once regions are resolved
      .                   if self.data.givens.insert((sub, sup)) {
      .                       debug!("add_given({:?} <= {:?})", sub, sup);
      .           
      .                       self.undo_log.push(AddGiven(sub, sup));
      .                   }
      .               }
      .           
  3,960 ( 0.00%)      pub fn make_eqregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
  1,980 ( 0.00%)          if sub != sup {
      .                       // Eventually, it would be nice to add direct support for
      .                       // equating regions.
  2,896 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  3,258 ( 0.00%)              self.make_subregion(origin, sup, sub);
      .           
  1,810 ( 0.00%)              match (sub, sup) {
  1,074 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
  1,790 ( 0.00%)                      self.unification_table().union(sub, sup);
      .                               self.any_unifications = true;
      .                           }
      .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
     16 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
      .                               self.any_unifications = true;
      .                           }
      .                           (_, _) => {}
      .                       }
      .                   }
  2,534 ( 0.00%)      }
      .           
      .               pub fn member_constraint(
      .                   &mut self,
      .                   opaque_type_def_id: DefId,
      .                   definition_span: Span,
      .                   hidden_ty: Ty<'tcx>,
      .                   member_region: ty::Region<'tcx>,
      .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
      .                       opaque_type_def_id,
      .                       definition_span,
      .                       hidden_ty,
      .                       member_region,
      .                       choice_regions: choice_regions.clone(),
      .                   });
      .               }
      .           
 20,156 ( 0.01%)      #[instrument(skip(self, origin), level = "debug")]
      .               pub fn make_subregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("origin = {:#?}", origin);
      .           
 13,854 ( 0.01%)          match (sub, sup) {
      .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
      .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
      .                       }
      .                       (_, &ReStatic) => {
      .                           // all regions are subregions of static, so we can ignore this
      .                       }
  1,250 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
  8,750 ( 0.01%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
      .                       }
      .                       (_, &ReVar(sup_id)) => {
    322 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
      .                       }
      4 ( 0.00%)              (&ReVar(sub_id), _) => {
     28 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
      .                       }
      .                       _ => {
      .                           self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
      .                       }
      .                   }
      .               }
      .           
      .               pub fn verify_generic_bound(
-- line 575 ----------------------------------------
-- line 599 ----------------------------------------
      .                       _ if a == b => {
      .                           a // LUB(a,a) = a
      .                       }
      .           
      .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
      .                   }
      .               }
      .           
    528 ( 0.00%)      pub fn glb_regions(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .               ) -> Region<'tcx> {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
    260 ( 0.00%)          match (a, b) {
      .                       (&ReStatic, r) | (r, &ReStatic) => {
      .                           r // static lives longer than everything else
      .                       }
      .           
    128 ( 0.00%)              _ if a == b => {
      .                           a // GLB(a,a) = a
      .                       }
      .           
    768 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
      .                   }
    528 ( 0.00%)      }
      .           
      .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
      .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
    374 ( 0.00%)          self.unification_table().find(rid).vid
      .               }
      .           
      .               /// If the Region is a `ReVar`, then resolves it either to the root value in
      .               /// the unification table, if it exists, or to the root `ReVar` in the table.
      .               /// If the Region is not a `ReVar`, just returns the Region itself.
      .               pub fn opportunistic_resolve_region(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
      .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
      .                           })
      .                       }
      .                       _ => region,
      .                   }
      .               }
      .           
      .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
    512 ( 0.00%)          match t {
      .                       Glb => &mut self.glbs,
      .                       Lub => &mut self.lubs,
      .                   }
      .               }
      .           
    768 ( 0.00%)      fn combine_vars(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   t: CombineMapType,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .               ) -> Region<'tcx> {
      .                   let vars = TwoRegions { a, b };
      .                   if let Some(&c) = self.combine_map(t).get(&vars) {
      .                       return tcx.mk_region(ReVar(c));
      .                   }
      .                   let a_universe = self.universe(a);
      .                   let b_universe = self.universe(b);
      .                   let c_universe = cmp::max(a_universe, b_universe);
    320 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
      .                   self.combine_map(t).insert(vars, c);
     64 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
    320 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
    512 ( 0.00%)          for old_r in [a, b] {
    128 ( 0.00%)              match t {
  1,088 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
      .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
      .                       }
      .                   }
      .                   debug!("combine_vars() c={:?}", c);
      .                   new_r
    576 ( 0.00%)      }
      .           
      .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
  1,388 ( 0.00%)          match *region {
      .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
      .                           ty::UniverseIndex::ROOT
      .                       }
      .                       ty::ReEmpty(ui) => ui,
      .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    210 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
      .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
      .                   }
      .               }
      .           
    170 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &self,
      .                   value_count: usize,
      .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
      .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    204 ( 0.00%)          (
      .                       range.clone(),
      .                       (range.start.index()..range.end.index())
      .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
      .                           .collect(),
      .                   )
    204 ( 0.00%)      }
      .           
      .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
     90 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
     30 ( 0.00%)          self.undo_log
      .                       .region_constraints_in_snapshot(mark)
     26 ( 0.00%)              .map(|&elt| match elt {
      8 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
      .                           _ => None,
      .                       })
      .                       .max()
      .                       .unwrap_or(None)
    120 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
  5,589 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
      .               }
      .           }
      .           
      .           impl fmt::Debug for RegionSnapshot {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "RegionSnapshot")
      .               }
      .           }
-- line 737 ----------------------------------------
-- line 796 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> RegionConstraintData<'tcx> {
      .               /// Returns `true` if this region constraint data contains no constraints, and `false`
      .               /// otherwise.
      .               pub fn is_empty(&self) -> bool {
      .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
      3 ( 0.00%)          constraints.is_empty()
      .                       && member_constraints.is_empty()
      .                       && verifys.is_empty()
      .                       && givens.is_empty()
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
  7,460 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  5,968 ( 0.00%)          self.rollback_undo_entry(undo)
  7,460 ( 0.01%)      }
      .           }

 52,189 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .                   &self.local_decls
      .               }
      .           }
      .           
      .           /// A streamlined trait that you can implement to create a pass; the
      .           /// pass will be named after the type, and it will consist of a main
      .           /// loop that goes over each available MIR and applies `run_pass`.
      .           pub trait MirPass<'tcx> {
    148 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
      .                   let name = std::any::type_name::<Self>();
      .                   if let Some(tail) = name.rfind(':') {
     17 ( 0.00%)              Cow::from(&name[tail + 1..])
      .                   } else {
      .                       Cow::from(name)
      .                   }
     99 ( 0.00%)      }
      .           
      .               /// Returns `true` if this pass is enabled with the current combination of compiler flags.
      .               fn is_enabled(&self, _sess: &Session) -> bool {
      .                   true
     50 ( 0.00%)      }
      .           
      .               fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);
      .           
      .               /// If this pass causes the MIR to enter a new phase, return that phase.
      .               fn phase_change(&self) -> Option<MirPhase> {
      .                   None
     54 ( 0.00%)      }
      .           
      .               fn is_mir_dump_enabled(&self) -> bool {
      .                   true
     56 ( 0.00%)      }
      .           }
      .           
      .           /// The various "big phases" that MIR goes through.
      .           ///
      .           /// These phases all describe dialects of MIR. Since all MIR uses the same datastructures, the
      .           /// dialects forbid certain variants or values in certain phases.
      .           ///
      .           /// Note: Each phase's validation checks all invariants of the *previous* phases' dialects. A phase
      .           /// that changes the dialect documents what invariants must be upheld *after* that phase finishes.
      .           ///
      .           /// Warning: ordering of variants is significant.
     15 ( 0.00%)  #[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub enum MirPhase {
      .               Build = 0,
      .               // FIXME(oli-obk): it's unclear whether we still need this phase (and its corresponding query).
      .               // We used to have this for pre-miri MIR based const eval.
      .               Const = 1,
      .               /// This phase checks the MIR for promotable elements and takes them out of the main MIR body
      .               /// by creating a new MIR body per promoted element. After this phase (and thus the termination
-- line 141 ----------------------------------------
-- line 157 ----------------------------------------
      .           impl MirPhase {
      .               /// Gets the index of the current MirPhase within the set of all `MirPhase`s.
      .               pub fn phase_index(&self) -> usize {
      .                   *self as usize
      .               }
      .           }
      .           
      .           /// Where a specific `mir::Body` comes from.
     15 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      8 ( 0.00%)  #[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct MirSource<'tcx> {
      .               pub instance: InstanceDef<'tcx>,
      .           
      .               /// If `Some`, this is a promoted rvalue within the parent function.
      .               pub promoted: Option<Promoted>,
      .           }
      .           
      .           impl<'tcx> MirSource<'tcx> {
      1 ( 0.00%)      pub fn item(def_id: DefId) -> Self {
      5 ( 0.00%)          MirSource {
      .                       instance: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),
      .                       promoted: None,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn from_instance(instance: InstanceDef<'tcx>) -> Self {
      .                   MirSource { instance, promoted: None }
      .               }
      .           
      .               pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {
      3 ( 0.00%)          self.instance.with_opt_param()
      3 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_id(&self) -> DefId {
    113 ( 0.00%)          self.instance.def_id()
      .               }
      .           }
      .           
      .           #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]
      .           pub struct GeneratorInfo<'tcx> {
      .               /// The yield type of the function, if it is a generator.
      .               pub yield_ty: Option<Ty<'tcx>>,
      .           
-- line 200 ----------------------------------------
-- line 205 ----------------------------------------
      .               pub generator_layout: Option<GeneratorLayout<'tcx>>,
      .           
      .               /// If this is a generator then record the type of source expression that caused this generator
      .               /// to be created.
      .               pub generator_kind: GeneratorKind,
      .           }
      .           
      .           /// The lowered representation of a single function.
    219 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]
      .           pub struct Body<'tcx> {
      .               /// A list of basic blocks. References to basic block use a newtyped index type [`BasicBlock`]
      .               /// that indexes into this vector.
      .               basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,
      .           
      .               /// Records how far through the "desugaring and optimization" process this particular
      .               /// MIR has traversed. This is particularly useful when inlining, since in that context
      .               /// we instantiate the promoted constants and add them to our promoted vector -- but those
      .               /// promoted items have already been optimized, whereas ours have not. This field allows
      .               /// us to see the difference and forego optimization on the inlined promoted items.
      5 ( 0.00%)      pub phase: MirPhase,
      .           
      .               pub source: MirSource<'tcx>,
      .           
      .               /// A list of source scopes; these are referenced by statements
      .               /// and used for debuginfo. Indexed by a `SourceScope`.
      6 ( 0.00%)      pub source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,
      .           
      6 ( 0.00%)      pub generator: Option<Box<GeneratorInfo<'tcx>>>,
      .           
      .               /// Declarations of locals.
      .               ///
      .               /// The first local is the return value pointer, followed by `arg_count`
      .               /// locals for the function arguments, followed by any user-declared
      .               /// variables and temporaries.
      .               pub local_decls: LocalDecls<'tcx>,
      .           
-- line 240 ----------------------------------------
-- line 242 ----------------------------------------
      .               pub user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,
      .           
      .               /// The number of arguments this function takes.
      .               ///
      .               /// Starting at local 1, `arg_count` locals will be provided by the caller
      .               /// and can be assumed to be initialized.
      .               ///
      .               /// If this MIR was built for a constant, this will be 0.
      3 ( 0.00%)      pub arg_count: usize,
      .           
      .               /// Mark an argument local (which must be a tuple) as getting passed as
      .               /// its individual components at the LLVM level.
      .               ///
      .               /// This is used for the "rust-call" ABI.
      6 ( 0.00%)      pub spread_arg: Option<Local>,
      .           
      .               /// Debug information pertaining to user variables, including captures.
      3 ( 0.00%)      pub var_debug_info: Vec<VarDebugInfo<'tcx>>,
      .           
      .               /// A span representing this MIR, for error reporting.
      .               pub span: Span,
      .           
      .               /// Constants that are required to evaluate successfully for this MIR to be well-formed.
      .               /// We hold in this field all the constants we are not able to evaluate yet.
      .               pub required_consts: Vec<Constant<'tcx>>,
      .           
-- line 267 ----------------------------------------
-- line 275 ----------------------------------------
      .               /// fn test<T>() {
      .               ///     let _ = [0; std::mem::size_of::<*mut T>()];
      .               /// }
      .               /// ```
      .               ///
      .               /// **WARNING**: Do not change this flags after the MIR was originally created, even if an optimization
      .               /// removed the last mention of all generic params. We do not want to rely on optimizations and
      .               /// potentially allow things like `[u8; std::mem::size_of::<T>() * 0]` due to this.
      3 ( 0.00%)      pub is_polymorphic: bool,
      .           
      .               predecessor_cache: PredecessorCache,
      .               is_cyclic: GraphIsCyclicCache,
      .           }
      .           
      .           impl<'tcx> Body<'tcx> {
     24 ( 0.00%)      pub fn new(
      .                   source: MirSource<'tcx>,
      .                   basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,
      .                   source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,
      .                   local_decls: LocalDecls<'tcx>,
      .                   user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,
      .                   arg_count: usize,
      .                   var_debug_info: Vec<VarDebugInfo<'tcx>>,
      .                   span: Span,
      .                   generator_kind: Option<GeneratorKind>,
      .               ) -> Self {
      .                   // We need `arg_count` locals, and one for the return place.
      2 ( 0.00%)          assert!(
      2 ( 0.00%)              local_decls.len() > arg_count,
      .                       "expected at least {} locals, got {}",
      .                       arg_count + 1,
      .                       local_decls.len()
      .                   );
      .           
     40 ( 0.00%)          let mut body = Body {
      .                       phase: MirPhase::Build,
      .                       source,
      .                       basic_blocks,
      .                       source_scopes,
      .                       generator: generator_kind.map(|generator_kind| {
      .                           Box::new(GeneratorInfo {
      .                               yield_ty: None,
      .                               generator_drop: None,
      .                               generator_layout: None,
      .                               generator_kind,
      .                           })
      .                       }),
      8 ( 0.00%)              local_decls,
      8 ( 0.00%)              user_type_annotations,
      .                       arg_count,
      .                       spread_arg: None,
      8 ( 0.00%)              var_debug_info,
      .                       span,
      .                       required_consts: Vec::new(),
      .                       is_polymorphic: false,
      .                       predecessor_cache: PredecessorCache::new(),
      .                       is_cyclic: GraphIsCyclicCache::new(),
      .                   };
      2 ( 0.00%)          body.is_polymorphic = body.has_param_types_or_consts();
      .                   body
     18 ( 0.00%)      }
      .           
      .               /// Returns a partially initialized MIR body containing only a list of basic blocks.
      .               ///
      .               /// The returned MIR contains no `LocalDecl`s (even for the return place) or source scopes. It
      .               /// is only useful for testing but cannot be `#[cfg(test)]` because it is used in a different
      .               /// crate.
      .               pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {
      .                   let mut body = Body {
-- line 343 ----------------------------------------
-- line 368 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {
      .                   // Because the user could mutate basic block terminators via this reference, we need to
      .                   // invalidate the caches.
      .                   //
      .                   // FIXME: Use a finer-grained API for this, so only transformations that alter terminators
      .                   // invalidate the caches.
     12 ( 0.00%)          self.predecessor_cache.invalidate();
      .                   self.is_cyclic.invalidate();
      .                   &mut self.basic_blocks
      .               }
      .           
      .               #[inline]
      .               pub fn basic_blocks_and_local_decls_mut(
      .                   &mut self,
      .               ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {
-- line 384 ----------------------------------------
-- line 397 ----------------------------------------
      .               ) {
      .                   self.predecessor_cache.invalidate();
      .                   self.is_cyclic.invalidate();
      .                   (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)
      .               }
      .           
      .               /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the
      .               /// `START_BLOCK`.
     20 ( 0.00%)      pub fn is_cfg_cyclic(&self) -> bool {
      .                   self.is_cyclic.is_cyclic(self)
     30 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_kind(&self, local: Local) -> LocalKind {
      .                   let index = local.as_usize();
  3,927 ( 0.00%)          if index == 0 {
      .                       debug_assert!(
      .                           self.local_decls[local].mutability == Mutability::Mut,
      .                           "return place should be mutable"
      .                       );
      .           
      .                       LocalKind::ReturnPointer
 15,350 ( 0.01%)          } else if index < self.arg_count + 1 {
      .                       LocalKind::Arg
      .                   } else if self.local_decls[local].is_user_variable() {
      .                       LocalKind::Var
      .                   } else {
      .                       LocalKind::Temp
      .                   }
      .               }
      .           
      .               /// Returns an iterator over all user-declared mutable locals.
      .               #[inline]
      .               pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {
      3 ( 0.00%)          (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {
      .                       let local = Local::new(index);
      .                       let decl = &self.local_decls[local];
    170 ( 0.00%)              if decl.is_user_variable() && decl.mutability == Mutability::Mut {
      .                           Some(local)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               /// Returns an iterator over all user-declared mutable arguments and locals.
      .               #[inline]
      .               pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {
      .                   (1..self.local_decls.len()).filter_map(move |index| {
      .                       let local = Local::new(index);
      .                       let decl = &self.local_decls[local];
  2,395 ( 0.00%)              if (decl.is_user_variable() || index < self.arg_count + 1)
      .                           && decl.mutability == Mutability::Mut
      .                       {
      .                           Some(local)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               /// Returns an iterator over all function arguments.
      .               #[inline]
      .               pub fn args_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {
     45 ( 0.00%)          (1..self.arg_count + 1).map(Local::new)
      .               }
      .           
      .               /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all
      .               /// locals that are neither arguments nor the return place).
      .               #[inline]
      .               pub fn vars_and_temps_iter(
      .                   &self,
      .               ) -> impl DoubleEndedIterator<Item = Local> + ExactSizeIterator {
-- line 469 ----------------------------------------
-- line 479 ----------------------------------------
      .               /// invalidating statement indices in `Location`s.
      .               pub fn make_statement_nop(&mut self, location: Location) {
      .                   let block = &mut self.basic_blocks[location.block];
      .                   debug_assert!(location.statement_index < block.statements.len());
      .                   block.statements[location.statement_index].make_nop()
      .               }
      .           
      .               /// Returns the source info associated with `location`.
  2,996 ( 0.00%)      pub fn source_info(&self, location: Location) -> &SourceInfo {
      .                   let block = &self[location.block];
      .                   let stmts = &block.statements;
  1,498 ( 0.00%)          let idx = location.statement_index;
  7,490 ( 0.01%)          if idx < stmts.len() {
  4,494 ( 0.00%)              &stmts[idx].source_info
      .                   } else {
      .                       assert_eq!(idx, stmts.len());
      .                       &block.terminator().source_info
      .                   }
  2,996 ( 0.00%)      }
      .           
      .               /// Returns the return type; it always return first element from `local_decls` array.
      .               #[inline]
      .               pub fn return_ty(&self) -> Ty<'tcx> {
     16 ( 0.00%)          self.local_decls[RETURN_PLACE].ty
      .               }
      .           
      .               /// Gets the location of the terminator for the given block.
      .               #[inline]
      .               pub fn terminator_loc(&self, bb: BasicBlock) -> Location {
      5 ( 0.00%)          Location { block: bb, statement_index: self[bb].statements.len() }
      .               }
      .           
      .               pub fn stmt_at(&self, location: Location) -> Either<&Statement<'tcx>, &Terminator<'tcx>> {
      .                   let Location { block, statement_index } = location;
      .                   let block_data = &self.basic_blocks[block];
      .                   block_data
      .                       .statements
      .                       .get(statement_index)
-- line 516 ----------------------------------------
-- line 520 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn predecessors(&self) -> &Predecessors {
      .                   self.predecessor_cache.compute(&self.basic_blocks)
      .               }
      .           
      .               #[inline]
      .               pub fn dominators(&self) -> Dominators<BasicBlock> {
      4 ( 0.00%)          dominators(self)
      .               }
      .           
      .               #[inline]
      .               pub fn yield_ty(&self) -> Option<Ty<'tcx>> {
      .                   self.generator.as_ref().and_then(|generator| generator.yield_ty)
      .               }
      .           
      .               #[inline]
-- line 536 ----------------------------------------
-- line 571 ----------------------------------------
      .           
      .           impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {
      .               #[inline]
      .               fn index_mut(&mut self, index: BasicBlock) -> &mut BasicBlockData<'tcx> {
      .                   &mut self.basic_blocks_mut()[index]
      .               }
      .           }
      .           
     28 ( 0.00%)  #[derive(Copy, Clone, Debug, HashStable, TypeFoldable)]
      .           pub enum ClearCrossCrate<T> {
      .               Clear,
      .               Set(T),
      .           }
      .           
      .           impl<T> ClearCrossCrate<T> {
      .               pub fn as_ref(&self) -> ClearCrossCrate<&T> {
  5,517 ( 0.00%)          match self {
      .                       ClearCrossCrate::Clear => ClearCrossCrate::Clear,
      .                       ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),
      .                   }
      .               }
      .           
      .               pub fn assert_crate_local(self) -> T {
  1,397 ( 0.00%)          match self {
      .                       ClearCrossCrate::Clear => bug!("unwrapping cross-crate data"),
      .                       ClearCrossCrate::Set(v) => v,
      .                   }
     70 ( 0.00%)      }
      .           }
      .           
      .           const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;
      .           const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>, T: Encodable<E>> Encodable<E> for ClearCrossCrate<T> {
      .               #[inline]
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
-- line 606 ----------------------------------------
-- line 637 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Grouped information about the source code origin of a MIR entity.
      .           /// Intended to be inspected by diagnostics and debuginfo.
      .           /// Most passes can work with it as a whole, within a single function.
      .           // The unofficial Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and
      .           // `Hash`. Please ping @bjorn3 if removing them.
 10,089 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub struct SourceInfo {
      .               /// The source span for the AST pertaining to this MIR entity.
      .               pub span: Span,
      .           
      .               /// The source scope, keeping track of which bindings can be
      .               /// seen by debuginfo, active lint levels, `unsafe {...}`, etc.
      .               pub scope: SourceScope,
      .           }
-- line 653 ----------------------------------------
-- line 657 ----------------------------------------
      .               pub fn outermost(span: Span) -> Self {
      .                   SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Borrow kinds
      .           
  3,920 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           #[derive(Hash, HashStable)]
      .           pub enum BorrowKind {
      .               /// Data must be immutable and is aliasable.
      .               Shared,
      .           
      .               /// The immediately borrowed place must be immutable, but projections from
      .               /// it don't need to be. For example, a shallow borrow of `a.b` doesn't
      .               /// conflict with a mutable borrow of `a.b.c`.
-- line 673 ----------------------------------------
-- line 870 ----------------------------------------
      .               /// `Span` of the tail expression.
      .               pub span: Span,
      .           }
      .           
      .           /// A MIR local.
      .           ///
      .           /// This can be a binding declared by the user, a temporary inserted by the compiler, a function
      .           /// argument, or the return place.
 10,668 ( 0.01%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct LocalDecl<'tcx> {
      .               /// Whether this is a mutable binding (i.e., `let x` or `let mut x`).
      .               ///
      .               /// Temporaries and the return place are always mutable.
  2,670 ( 0.00%)      pub mutability: Mutability,
      .           
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub local_info: Option<Box<LocalInfo<'tcx>>>,
      .           
      .               /// `true` if this is an internal local.
      .               ///
      .               /// These locals are not based on types in the source code and are only used
      .               /// for a few desugarings at the moment.
-- line 891 ----------------------------------------
-- line 894 ----------------------------------------
      .               /// across a suspension point against the type components of the generator
      .               /// which type checking knows are live across a suspension point. We need to
      .               /// flag drop flags to avoid triggering this check as they are introduced
      .               /// after typeck.
      .               ///
      .               /// This should be sound because the drop flags are fully algebraic, and
      .               /// therefore don't affect the auto-trait or outlives properties of the
      .               /// generator.
  1,781 ( 0.00%)      pub internal: bool,
      .           
      .               /// If this local is a temporary and `is_block_tail` is `Some`,
      .               /// then it is a temporary created for evaluation of some
      .               /// subexpression of some block's tail expression (with no
      .               /// intervening statement context).
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub is_block_tail: Option<BlockTailInfo>,
      .           
      .               /// The type of this local.
  1,781 ( 0.00%)      pub ty: Ty<'tcx>,
      .           
      .               /// If the user manually ascribed a type to this variable,
      .               /// e.g., via `let x: T`, then we carry that type here. The MIR
      .               /// borrow checker needs this information since it can affect
      .               /// region inference.
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub user_ty: Option<Box<UserTypeProjections>>,
      .           
-- line 920 ----------------------------------------
-- line 1005 ----------------------------------------
      .           static_assert_size!(LocalDecl<'_>, 56);
      .           
      .           /// Extra information about a some locals that's used for diagnostics and for
      .           /// classifying variables into local variables, statics, etc, which is needed e.g.
      .           /// for unsafety checking.
      .           ///
      .           /// Not used for non-StaticRef temporaries, the return place, or anonymous
      .           /// function parameters.
  3,570 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub enum LocalInfo<'tcx> {
      .               /// A user-defined local variable or function parameter
      .               ///
      .               /// The `BindingForm` is solely used for local diagnostics when generating
      .               /// warnings/errors when compiling the current crate, and therefore it need
      .               /// not be visible across crates.
      .               User(ClearCrossCrate<BindingForm<'tcx>>),
      .               /// A temporary created that references the static with the given `DefId`.
-- line 1021 ----------------------------------------
-- line 1064 ----------------------------------------
      .                       )))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this variable is a named variable or function
      .               /// parameter declared by the user.
      .               #[inline]
      .               pub fn is_user_variable(&self) -> bool {
  7,510 ( 0.01%)          matches!(self.local_info, Some(box LocalInfo::User(_)))
      .               }
      .           
      .               /// Returns `true` if this is a reference to a variable bound in a `match`
      .               /// expression that is used to access said variable for the guard of the
      .               /// match arm.
      .               pub fn is_ref_for_guard(&self) -> bool {
      .                   matches!(
      .                       self.local_info,
      .                       Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)))
      .                   )
      .               }
      .           
      .               /// Returns `Some` if this is a reference to a static item that is used to
      .               /// access that static.
      .               pub fn is_ref_to_static(&self) -> bool {
    534 ( 0.00%)          matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))
    178 ( 0.00%)      }
      .           
      .               /// Returns `Some` if this is a reference to a thread-local static item that is used to
      .               /// access that static.
      .               pub fn is_ref_to_thread_local(&self) -> bool {
     18 ( 0.00%)          match self.local_info {
      .                       Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,
      .                       _ => false,
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` is the local is from a compiler desugaring, e.g.,
      .               /// `__next` from a `for` loop.
      .               #[inline]
      .               pub fn from_compiler_desugaring(&self) -> bool {
      .                   self.source_info.span.desugaring_kind().is_some()
      .               }
      .           
-- line 1106 ----------------------------------------
-- line 1108 ----------------------------------------
      .               #[inline]
      .               pub fn new(ty: Ty<'tcx>, span: Span) -> Self {
      .                   Self::with_source_info(ty, SourceInfo::outermost(span))
      .               }
      .           
      .               /// Like `LocalDecl::new`, but takes a `SourceInfo` instead of a `Span`.
      .               #[inline]
      .               pub fn with_source_info(ty: Ty<'tcx>, source_info: SourceInfo) -> Self {
  3,116 ( 0.00%)          LocalDecl {
      .                       mutability: Mutability::Mut,
      .                       local_info: None,
      .                       internal: false,
      .                       is_block_tail: None,
      .                       ty,
      .                       user_ty: None,
      .                       source_info,
      .                   }
-- line 1124 ----------------------------------------
-- line 1216 ----------------------------------------
      .                   Location { block: self, statement_index: 0 }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // BasicBlockData and Terminator
      .           
      .           /// See [`BasicBlock`] for documentation on what basic blocks are at a high level.
     80 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct BasicBlockData<'tcx> {
      .               /// List of statements in this block.
      1 ( 0.00%)      pub statements: Vec<Statement<'tcx>>,
      .           
      .               /// Terminator for this block.
      .               ///
      .               /// N.B., this should generally ONLY be `None` during construction.
      .               /// Therefore, you should generally access it via the
      .               /// `terminator()` or `terminator_mut()` methods. The only
      .               /// exception is that certain passes, such as `simplify_cfg`, swap
      .               /// out the terminator temporarily with `None` while they continue
-- line 1235 ----------------------------------------
-- line 1287 ----------------------------------------
      .           pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;
      .           
      .           pub type Successors<'a> =
      .               iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;
      .           pub type SuccessorsMut<'a> =
      .               iter::Chain<option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;
      .           
      .           impl<'tcx> BasicBlockData<'tcx> {
      1 ( 0.00%)      pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> {
     16 ( 0.00%)          BasicBlockData { statements: vec![], terminator, is_cleanup: false }
      1 ( 0.00%)      }
      .           
      .               /// Accessor for terminator.
      .               ///
      .               /// Terminator may not be None after construction of the basic block is complete. This accessor
      .               /// provides a convenience way to reach the terminator.
      .               #[inline]
      .               pub fn terminator(&self) -> &Terminator<'tcx> {
     30 ( 0.00%)          self.terminator.as_ref().expect("invalid terminator state")
      .               }
      .           
      .               #[inline]
      .               pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {
     12 ( 0.00%)          self.terminator.as_mut().expect("invalid terminator state")
      .               }
      .           
      .               pub fn retain_statements<F>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&mut Statement<'_>) -> bool,
      .               {
      .                   for s in &mut self.statements {
      .                       if !f(s) {
      .                           s.make_nop();
      .                       }
      .                   }
      .               }
      .           
     20 ( 0.00%)      pub fn expand_statements<F, I>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&mut Statement<'tcx>) -> Option<I>,
      .                   I: iter::TrustedLen<Item = Statement<'tcx>>,
      .               {
      .                   // Gather all the iterators we'll need to splice in, and their positions.
      .                   let mut splices: Vec<(usize, I)> = vec![];
      .                   let mut extra_stmts = 0;
      .                   for (i, s) in self.statements.iter_mut().enumerate() {
    952 ( 0.00%)              if let Some(mut new_stmts) = f(s) {
      .                           if let Some(first) = new_stmts.next() {
      .                               // We can already store the first new statement.
    204 ( 0.00%)                      *s = first;
      .           
      .                               // Save the other statements for optimized splicing.
      .                               let remaining = new_stmts.size_hint().0;
     68 ( 0.00%)                      if remaining > 0 {
    238 ( 0.00%)                          splices.push((i + 1 + extra_stmts, new_stmts));
     68 ( 0.00%)                          extra_stmts += remaining;
      .                               }
      .                           } else {
      .                               s.make_nop();
      .                           }
      .                       }
      .                   }
      .           
      .                   // Splice in the new statements, from the end of the block.
      .                   // FIXME(eddyb) This could be more efficient with a "gap buffer"
      .                   // where a range of elements ("gap") is left uninitialized, with
      .                   // splicing adding new elements to the end of that gap and moving
      .                   // existing elements from before the gap to the end of the gap.
      .                   // For now, this is safe code, emulating a gap but initializing it.
      6 ( 0.00%)          let mut gap = self.statements.len()..self.statements.len() + extra_stmts;
      6 ( 0.00%)          self.statements.resize(
      .                       gap.end,
      8 ( 0.00%)              Statement { source_info: SourceInfo::outermost(DUMMY_SP), kind: StatementKind::Nop },
      .                   );
    952 ( 0.00%)          for (splice_start, new_stmts) in splices.into_iter().rev() {
     68 ( 0.00%)              let splice_end = splice_start + new_stmts.size_hint().0;
  2,228 ( 0.00%)              while gap.end > splice_end {
  1,398 ( 0.00%)                  gap.start -= 1;
      .                           gap.end -= 1;
      .                           self.statements.swap(gap.start, gap.end);
      .                       }
    136 ( 0.00%)              self.statements.splice(splice_start..splice_end, new_stmts);
      .                       gap.end = splice_start;
      .                   }
     16 ( 0.00%)      }
      .           
      .               pub fn visitable(&self, index: usize) -> &dyn MirVisitable<'tcx> {
      .                   if index < self.statements.len() { &self.statements[index] } else { &self.terminator }
      .               }
      .           }
      .           
      .           impl<O> AssertKind<O> {
      .               /// Getting a description does not require `O` to be printable, and does not
-- line 1379 ----------------------------------------
-- line 1501 ----------------------------------------
      .                       _ => write!(f, "{}", self.description()),
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Statements
      .           
  9,575 ( 0.01%)  #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct Statement<'tcx> {
      .               pub source_info: SourceInfo,
      .               pub kind: StatementKind<'tcx>,
      .           }
      .           
      .           // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Statement<'_>, 32);
-- line 1517 ----------------------------------------
-- line 1520 ----------------------------------------
      .               /// Changes a statement to a nop. This is both faster than deleting instructions and avoids
      .               /// invalidating statement indices in `Location`s.
      .               pub fn make_nop(&mut self) {
      .                   self.kind = StatementKind::Nop
      .               }
      .           
      .               /// Changes a statement to a nop and returns the original statement.
      .               #[must_use = "If you don't need the statement, use `make_nop` instead"]
     34 ( 0.00%)      pub fn replace_nop(&mut self) -> Self {
     34 ( 0.00%)          Statement {
    136 ( 0.00%)              source_info: self.source_info,
      .                       kind: mem::replace(&mut self.kind, StatementKind::Nop),
      .                   }
     34 ( 0.00%)      }
      .           }
      .           
 20,938 ( 0.01%)  #[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]
      .           pub enum StatementKind<'tcx> {
      .               /// Write the RHS Rvalue to the LHS Place.
    451 ( 0.00%)      Assign(Box<(Place<'tcx>, Rvalue<'tcx>)>),
      .           
      .               /// This represents all the reading that a pattern match may do
      .               /// (e.g., inspecting constants and discriminant values), and the
      .               /// kind of pattern it comes from. This is in order to adapt potential
      .               /// error messages to these specific patterns.
      .               ///
      .               /// Note that this also is emitted for regular `let` bindings to ensure that locals that are
      .               /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`
      .               FakeRead(Box<(FakeReadCause, Place<'tcx>)>),
      .           
      .               /// Write the discriminant for a variant to the enum Place.
      .               SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },
      .           
      .               /// Start a live range for the storage of the local.
     12 ( 0.00%)      StorageLive(Local),
      .           
      .               /// End the current live range for the storage of the local.
     12 ( 0.00%)      StorageDead(Local),
      .           
      .               /// Retag references in the given place, ensuring they got fresh tags. This is
      .               /// part of the Stacked Borrows model. These statements are currently only interpreted
      .               /// by miri and only generated when "-Z mir-emit-retag" is passed.
      .               /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>
      .               /// for more details.
      .               Retag(RetagKind, Box<Place<'tcx>>),
      .           
-- line 1565 ----------------------------------------
-- line 1732 ----------------------------------------
      .               pub count: Operand<'tcx>,
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Places
      .           
      .           /// A path to a value; something that can be evaluated without
      .           /// changing or disturbing program state.
  2,225 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, HashStable)]
      .           pub struct Place<'tcx> {
      .               pub local: Local,
      .           
      .               /// projection out of a place (access a field, deref a pointer, etc)
      .               pub projection: &'tcx List<PlaceElem<'tcx>>,
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Place<'_>, 16);
      .           
  8,216 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
  8,652 ( 0.01%)  #[derive(TyEncodable, TyDecodable, HashStable)]
      .           pub enum ProjectionElem<V, T> {
      .               Deref,
  1,618 ( 0.00%)      Field(Field, T),
      .               Index(V),
      .           
      .               /// These indices are generated by slice patterns. Easiest to explain
      .               /// by example:
      .               ///
      .               /// ```
      .               /// [X, _, .._, _, _] => { offset: 0, min_length: 4, from_end: false },
      .               /// [_, X, .._, _, _] => { offset: 1, min_length: 4, from_end: false },
-- line 1763 ----------------------------------------
-- line 1795 ----------------------------------------
      .               /// The included Symbol is the name of the variant, used for printing MIR.
      .               Downcast(Option<Symbol>, VariantIdx),
      .           }
      .           
      .           impl<V, T> ProjectionElem<V, T> {
      .               /// Returns `true` if the target of this projection may refer to a different region of memory
      .               /// than the base.
      .               fn is_indirect(&self) -> bool {
    340 ( 0.00%)          match self {
      .                       Self::Deref => true,
      .           
      .                       Self::Field(_, _)
      .                       | Self::Index(_)
      .                       | Self::ConstantIndex { .. }
      .                       | Self::Subslice { .. }
      .                       | Self::Downcast(_, _) => false,
      .                   }
-- line 1811 ----------------------------------------
-- line 1846 ----------------------------------------
      .               pub local: Local,
      .               pub projection: &'tcx [PlaceElem<'tcx>],
      .           }
      .           
      .           impl<'tcx> Place<'tcx> {
      .               // FIXME change this to a const fn by also making List::empty a const fn.
      .               pub fn return_place() -> Place<'tcx> {
      .                   Place { local: RETURN_PLACE, projection: List::empty() }
      3 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `Place` contains a `Deref` projection.
      .               ///
      .               /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the
      .               /// same region of memory as its base.
      .               pub fn is_indirect(&self) -> bool {
  1,300 ( 0.00%)          self.projection.iter().any(|elem| elem.is_indirect())
  1,300 ( 0.00%)      }
      .           
      .               /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or
      .               /// a single deref of a local.
      .               #[inline(always)]
      .               pub fn local_or_deref_local(&self) -> Option<Local> {
      .                   self.as_ref().local_or_deref_local()
      .               }
      .           
-- line 1870 ----------------------------------------
-- line 1872 ----------------------------------------
      .               /// projections, return `Some(_X)`.
      .               #[inline(always)]
      .               pub fn as_local(&self) -> Option<Local> {
      .                   self.as_ref().as_local()
      .               }
      .           
      .               #[inline]
      .               pub fn as_ref(&self) -> PlaceRef<'tcx> {
 22,169 ( 0.02%)          PlaceRef { local: self.local, projection: &self.projection }
      .               }
      .           
      .               /// Iterate over the projections in evaluation order, i.e., the first element is the base with
      .               /// its projection and then subsequently more projections are added.
      .               /// As a concrete example, given the place a.b.c, this would yield:
      .               /// - (a, .b)
      .               /// - (a.b, .c)
      .               ///
-- line 1888 ----------------------------------------
-- line 1896 ----------------------------------------
      .                       (base, proj)
      .                   })
      .               }
      .           }
      .           
      .           impl From<Local> for Place<'_> {
      .               fn from(local: Local) -> Self {
      .                   Place { local, projection: List::empty() }
  8,745 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> PlaceRef<'tcx> {
      .               /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or
      .               /// a single deref of a local.
      .               pub fn local_or_deref_local(&self) -> Option<Local> {
      .                   match *self {
      .                       PlaceRef { local, projection: [] }
-- line 1912 ----------------------------------------
-- line 1915 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If this place represents a local variable like `_X` with no
      .               /// projections, return `Some(_X)`.
      .               #[inline]
      .               pub fn as_local(&self) -> Option<Local> {
      .                   match *self {
  3,613 ( 0.00%)              PlaceRef { local, projection: [] } => Some(local),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn last_projection(&self) -> Option<(PlaceRef<'tcx>, PlaceElem<'tcx>)> {
 29,315 ( 0.02%)          if let &[ref proj_base @ .., elem] = self.projection {
      .                       Some((PlaceRef { local: self.local, projection: proj_base }, elem))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           }
      .           
      .           impl Debug for Place<'_> {
-- line 1938 ----------------------------------------
-- line 2024 ----------------------------------------
      .                   trace!(?data);
      .                   match &data.local_data {
      .                       ClearCrossCrate::Set(data) => Some(data.lint_root),
      .                       ClearCrossCrate::Clear => None,
      .                   }
      .               }
      .           }
      .           
     35 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct SourceScopeData<'tcx> {
      1 ( 0.00%)      pub span: Span,
      .               pub parent_scope: Option<SourceScope>,
      .           
      .               /// Whether this scope is the root of a scope tree of another body,
      .               /// inlined into this body by the MIR inliner.
      .               /// `ty::Instance` is the callee, and the `Span` is the call site.
      .               pub inlined: Option<(ty::Instance<'tcx>, Span)>,
      .           
      .               /// Nearest (transitive) parent scope (if any) which is inlined.
      .               /// This is an optimization over walking up `parent_scope`
      .               /// until a scope with `inlined: Some(...)` is found.
      3 ( 0.00%)      pub inlined_parent_scope: Option<SourceScope>,
      .           
      .               /// Crate-local information for this source scope, that can't (and
      .               /// needn't) be tracked across crates.
      .               pub local_data: ClearCrossCrate<SourceScopeLocalData>,
      .           }
      .           
     11 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
      .           pub struct SourceScopeLocalData {
      .               /// An `HirId` with lint levels equivalent to this scope's lint levels.
      .               pub lint_root: hir::HirId,
      .               /// The unsafe block that contains this node.
      .               pub safety: Safety,
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Operands
      .           
      .           /// These are values that can appear inside an rvalue. They are intentionally
      .           /// limited to prevent rvalues from being nested in one another.
 37,349 ( 0.03%)  #[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum Operand<'tcx> {
      .               /// Copy: The value must be available for use afterwards.
      .               ///
      .               /// This implies that the type of the place must be `Copy`; this is true
      .               /// by construction during build, but also checked by the MIR type checker.
      .               Copy(Place<'tcx>),
      .           
      .               /// Move: The value (including old borrows of it) will not be used again.
      .               ///
      .               /// Safe for values of all types (modulo future developments towards `?Move`).
      .               /// Correct usage patterns are enforced by the borrow checker for safe code.
      .               /// `Copy` may be converted to `Move` to enable "last-use" optimizations.
  1,676 ( 0.00%)      Move(Place<'tcx>),
      .           
      .               /// Synthesizes a constant value.
  1,294 ( 0.00%)      Constant(Box<Constant<'tcx>>),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Operand<'_>, 24);
      .           
      .           impl<'tcx> Debug for Operand<'tcx> {
      .               fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {
      .                   use self::Operand::*;
-- line 2089 ----------------------------------------
-- line 2168 ----------------------------------------
      .                       Operand::Copy(_) | Operand::Move(_) => None,
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           /// Rvalues
      .           
 17,471 ( 0.01%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
      .           pub enum Rvalue<'tcx> {
      .               /// x (either a move or copy, depending on type of x)
      .               Use(Operand<'tcx>),
      .           
      .               /// [x; 32]
      .               Repeat(Operand<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// &x or &mut x
  1,042 ( 0.00%)      Ref(Region<'tcx>, BorrowKind, Place<'tcx>),
      .           
      .               /// Accessing a thread local static. This is inherently a runtime operation, even if llvm
      .               /// treats it as an access to a static. This `Rvalue` yields a reference to the thread local
      .               /// static.
      .               ThreadLocalRef(DefId),
      .           
      .               /// Create a raw pointer to the given place
      .               /// Can be generated by raw address of expressions (`&raw const x`),
      .               /// or when casting a reference to a raw pointer.
      .               AddressOf(Mutability, Place<'tcx>),
      .           
      .               /// length of a `[X]` or `[X;n]` value
      .               Len(Place<'tcx>),
      .           
    108 ( 0.00%)      Cast(CastKind, Operand<'tcx>, Ty<'tcx>),
      .           
      .               BinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),
      .               CheckedBinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),
      .           
      .               NullaryOp(NullOp, Ty<'tcx>),
      .               UnaryOp(UnOp, Operand<'tcx>),
      .           
      .               /// Read the discriminant of an ADT.
-- line 2208 ----------------------------------------
-- line 2211 ----------------------------------------
      .               /// be defined to return, say, a 0) if ADT is not an enum.
      .               Discriminant(Place<'tcx>),
      .           
      .               /// Creates an aggregate value, like a tuple or struct. This is
      .               /// only needed because we want to distinguish `dest = Foo { x:
      .               /// ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case
      .               /// that `Foo` has a destructor. These rvalues can be optimized
      .               /// away after type-checking and before lowering.
    276 ( 0.00%)      Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),
      .           
      .               /// Transmutes a `*mut u8` into shallow-initialized `Box<T>`.
      .               ///
      .               /// This is different a normal transmute because dataflow analysis will treat the box
      .               /// as initialized but its content as uninitialized.
      .               ShallowInitBox(Operand<'tcx>, Ty<'tcx>),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Rvalue<'_>, 40);
      .           
    420 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum CastKind {
      .               Misc,
      .               Pointer(PointerCast),
      .           }
      .           
    760 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum AggregateKind<'tcx> {
      .               /// The type is of the element
    105 ( 0.00%)      Array(Ty<'tcx>),
      .               Tuple,
      .           
      .               /// The second field is the variant index. It's equal to 0 for struct
      .               /// and union expressions. The fourth field is
      .               /// active field number and is present only for union expressions
      .               /// -- e.g., for a union expression `SomeUnion { c: .. }`, the
      .               /// active field index would identity the field `c`
    136 ( 0.00%)      Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),
      .           
      .               Closure(DefId, SubstsRef<'tcx>),
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(AggregateKind<'_>, 48);
      .           
-- line 2256 ----------------------------------------
-- line 2485 ----------------------------------------
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           /// Constants
      .           ///
      .           /// Two constants are equal if they are the same constant. Note that
      .           /// this does not necessarily mean that they are `==` in Rust. In
      .           /// particular, one must be wary of `NaN`!
      .           
  5,036 ( 0.00%)  #[derive(Clone, Copy, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub struct Constant<'tcx> {
      .               pub span: Span,
      .           
      .               /// Optional user-given type: for something like
      .               /// `collect::<Vec<_>>`, this would be present and would
      .               /// indicate that `Vec<_>` was explicitly specified.
      .               ///
      .               /// Needed for NLL to impose user-given type constraints.
      .               pub user_ty: Option<UserTypeAnnotationIndex>,
      .           
      .               pub literal: ConstantKind<'tcx>,
      .           }
      .           
 15,128 ( 0.01%)  #[derive(Clone, Copy, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable, Debug)]
      .           #[derive(Lift)]
      .           pub enum ConstantKind<'tcx> {
      .               /// This constant came from the type system
     14 ( 0.00%)      Ty(&'tcx ty::Const<'tcx>),
      .               /// This constant cannot go back into the type system, as it represents
      .               /// something the type system cannot handle (e.g. pointers).
      .               Val(interpret::ConstValue<'tcx>, Ty<'tcx>),
      .           }
      .           
      .           impl<'tcx> Constant<'tcx> {
 38,235 ( 0.03%)      pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {
 36,813 ( 0.03%)          match self.literal.const_for_ty()?.val.try_to_scalar() {
      .                       Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {
      .                           GlobalAlloc::Static(def_id) => {
      .                               assert!(!tcx.is_thread_local_static(def_id));
      .                               Some(def_id)
      .                           }
      .                           _ => None,
      .                       },
      .                       _ => None,
      .                   }
 61,176 ( 0.04%)      }
      .               #[inline]
      .               pub fn ty(&self) -> Ty<'tcx> {
      .                   self.literal.ty()
      .               }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {
      .               #[inline]
-- line 2537 ----------------------------------------
-- line 2538 ----------------------------------------
      .               fn from(ct: &'tcx ty::Const<'tcx>) -> Self {
      .                   Self::Ty(ct)
      .               }
      .           }
      .           
      .           impl<'tcx> ConstantKind<'tcx> {
      .               /// Returns `None` if the constant is not trivially safe for use in the type system.
      .               pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {
 53,954 ( 0.04%)          match self {
      .                       ConstantKind::Ty(c) => Some(c),
      .                       ConstantKind::Val(..) => None,
      .                   }
 19,330 ( 0.01%)      }
      .           
      .               pub fn ty(&self) -> Ty<'tcx> {
 44,040 ( 0.03%)          match self {
      .                       ConstantKind::Ty(c) => c.ty,
      .                       ConstantKind::Val(_, ty) => ty,
      .                   }
 22,020 ( 0.02%)      }
      .           
      .               #[inline]
      .               pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {
      .                   match self {
      .                       ConstantKind::Ty(c) => c.val.try_to_value(),
      .                       ConstantKind::Val(val, _) => Some(val),
      .                   }
      .               }
-- line 2565 ----------------------------------------
-- line 2870 ----------------------------------------
      .               fn start_node(&self) -> Self::Node {
      .                   START_BLOCK
      .               }
      .           }
      .           
      .           impl<'tcx> graph::WithSuccessors for Body<'tcx> {
      .               #[inline]
      .               fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {
      1 ( 0.00%)          self.basic_blocks[node].terminator().successors().cloned()
      .               }
      .           }
      .           
      .           impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {
      .               type Item = BasicBlock;
      .               type Iter = iter::Cloned<Successors<'b>>;
      .           }
      .           
-- line 2886 ----------------------------------------

111,952 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
   30,611 ( 0.02%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   50,147 ( 0.03%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       26 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
    7,517 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   23,100 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
   11,776 ( 0.01%)                          assume(!self.end.is_null());
        .                               }
3,268,486 ( 2.24%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   11,626 ( 0.01%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
      810 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      411 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      102 ( 0.00%)                  while let Some(x) = self.next() {
    2,854 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   28,938 ( 0.02%)                  while let Some(x) = self.next() {
  101,255 ( 0.07%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
        3 ( 0.00%)                  while let Some(x) = self.next() {
    6,142 ( 0.00%)                      if predicate(&x) {
        2 ( 0.00%)                          return Some(x);
        .                               }
        .                           }
        .                           None
    1,672 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
      162 ( 0.00%)                  while let Some(x) = self.next() {
    5,104 ( 0.00%)                      if let Some(y) = f(x) {
      683 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
       15 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   13,103 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      606 ( 0.00%)                  while let Some(x) = self.next_back() {
    9,540 ( 0.01%)                      i -= 1;
    9,076 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
      998 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        2 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       28 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   37,811 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  195,075 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
    14 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
     9 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 3,602 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
23,205 ( 0.02%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
 6,630 ( 0.00%)          let start_src_index = self.src_index(self.pos);
 9,945 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 3,315 ( 0.00%)          if is_beginning_of_file {
     4 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
 6,757 ( 0.00%)              let start_src_index = self.src_index(self.pos);
15,108 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
 5,036 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
     5 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
15,105 ( 0.01%)              let token = rustc_lexer::first_token(text);
     .           
10,070 ( 0.01%)              let start = self.pos;
 5,035 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
40,308 ( 0.03%)              match self.cook_lexer_token(token.kind, start) {
26,512 ( 0.02%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
19,884 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
29,835 ( 0.02%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
   238 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
   272 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
25,175 ( 0.02%)          Some(match token {
     7 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
    35 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
    35 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
    68 ( 0.00%)              rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
    34 ( 0.00%)                  if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, last_bpos),
     .                                   msg,
     .                                   error_code!(E0758),
     .                               );
     .                           }
     .           
     .                           // Skip non-doc comments
    34 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 and closing delimiter of the length 2
     .                           // are not included into the symbol.
-- line 196 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
 1,144 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
 1,430 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
   572 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
   858 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
 1,430 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
 1,144 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   572 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
 2,002 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
20,128 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
 3,774 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
     .                                       .emit();
     .                                   None
     .                               } else {
     .                                   Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
10,064 ( 0.01%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
     .                       rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
     .                           if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
-- line 280 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
    84 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
     7 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
    21 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   105 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
   102 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
   102 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
    34 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
    34 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated double quote byte string",
     .                                   error_code!(E0766),
     .                               )
     .                           }
     .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
     .                       }
-- line 407 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
 2,244 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
 1,122 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
 3,366 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
     .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
     .                           if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
     .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
     .                           }
     .           
     .                           let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
   408 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
 2,173 ( 0.00%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
 9,486 ( 0.01%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 1,721 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
 6,884 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
   816 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
37,000 ( 0.03%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
 8,502 ( 0.01%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
38,259 ( 0.03%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
 4,488 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
 2,574 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   572 ( 0.00%)      match is_nfc_quick(string.chars()) {
 2,860 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

19,219 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
  1,300 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
 12,773 ( 0.01%)      Spanned { node: t, span: sp }
     90 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      1 ( 0.00%)      respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
      .           
      .           /// An abstraction over the fs operations used by the Parser.
      .           pub trait FileLoader {
-- line 99 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      2 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      3 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     46 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,054 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  2,640 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    528 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,168 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      5 ( 0.00%)          &self.path_mapping
      5 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
      4 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     12 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
      5 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    528 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    528 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,584 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
      8 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     12 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
      9 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     13 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      2 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
      6 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
      6 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
      9 ( 0.00%)                      filename,
      3 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,216 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
353,478 ( 0.24%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    797 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,581 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,216 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  4,743 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
      .               pub fn is_multiline(&self, sp: Span) -> bool {
      .                   let lo = self.lookup_source_file_idx(sp.lo());
      .                   let hi = self.lookup_source_file_idx(sp.hi());
-- line 469 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
      7 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
      7 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
      2 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
      1 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
      4 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
      3 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
     12 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
      9 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
     11 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
      4 ( 0.00%)          match self.span_to_snippet(sp) {
      4 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
      2 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
      .                               sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
      9 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
      2 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  4,908 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
  1,636 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  4,090 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
     22 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
      2 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
      8 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
      4 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
      4 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
     18 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  4,932 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    411 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  2,863 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  3,681 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    818 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
  1,636 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    409 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
  1,636 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
  1,227 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  2,454 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
  1,636 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
  1,636 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  3,699 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  4,100 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
    820 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
  1,640 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  4,100 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  2,463 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  1,640 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  3,284 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
      7 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
     16 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      8 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      4 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     72 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     40 ( 0.00%)          (path, false)
     72 ( 0.00%)      }
      .           
      8 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      2 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

  6,351 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 36 ----------------------------------------
     .           use rustc_session::parse::ParseSess;
     .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
     .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
     .           use tracing::debug;
     .           
     .           use std::ops::Range;
     .           use std::{cmp, mem, slice};
     .           
 4,050 ( 0.00%)  bitflags::bitflags! {
     .               struct Restrictions: u8 {
     .                   const STMT_EXPR         = 1 << 0;
     .                   const NO_STRUCT_LITERAL = 1 << 1;
     .                   const CONST_EXPR        = 1 << 2;
     .               }
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
     .                               $self.bump();
     .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
     .                           }
     .                       }
     .                   }
     .               };
     .           }
     .           
    56 ( 0.00%)  #[derive(Clone)]
     .           pub struct Parser<'a> {
     2 ( 0.00%)      pub sess: &'a ParseSess,
     .               /// The current token.
     2 ( 0.00%)      pub token: Token,
     .               /// The spacing for the current token
     1 ( 0.00%)      pub token_spacing: Spacing,
     .               /// The previous token.
     3 ( 0.00%)      pub prev_token: Token,
     1 ( 0.00%)      pub capture_cfg: bool,
     2 ( 0.00%)      restrictions: Restrictions,
     2 ( 0.00%)      expected_tokens: Vec<TokenType>,
     .               // Important: This must only be advanced from `next_tok`
     .               // to ensure that `token_cursor.num_next_calls` is updated properly
     .               token_cursor: TokenCursor,
     2 ( 0.00%)      desugar_doc_comments: bool,
     .               /// This field is used to keep track of how many left angle brackets we have seen. This is
     .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
     .               /// appropriately.
     .               ///
     .               /// See the comments in the `parse_path_segment` function for more details.
     2 ( 0.00%)      unmatched_angle_bracket_count: u32,
     3 ( 0.00%)      max_angle_bracket_count: u32,
     .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
     .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
     .               /// error.
     1 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
     .               last_unexpected_token_span: Option<Span>,
     .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
     .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
     .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
     .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
     .               subparser_name: Option<&'static str>,
     .               capture_state: CaptureState,
     .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
     .           /// the first macro inner attribute to invoke a proc-macro).
     .           /// When create a `TokenStream`, the inner attributes get inserted
     .           /// into the proper place in the token stream.
     .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
     .           
     .           /// Controls how we capture tokens. Capturing can be expensive,
     .           /// so we try to avoid performing capturing in cases where
     .           /// we will never need an `AttrAnnotatedTokenStream`
     1 ( 0.00%)  #[derive(Copy, Clone)]
     .           pub enum Capturing {
     .               /// We aren't performing any capturing - this is the default mode.
     .               No,
     .               /// We are capturing tokens
     .               Yes,
     .           }
     .           
     4 ( 0.00%)  #[derive(Clone)]
     .           struct CaptureState {
     4 ( 0.00%)      capturing: Capturing,
     1 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
     .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
     .           }
     .           
     .           impl<'a> Drop for Parser<'a> {
     .               fn drop(&mut self) {
    18 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
     .               }
     .           }
     .           
   137 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursor {
     .               frame: TokenCursorFrame,
    29 ( 0.00%)      stack: Vec<TokenCursorFrame>,
     .               desugar_doc_comments: bool,
     .               // Counts the number of calls to `next` or `next_desugared`,
     .               // depending on whether `desugar_doc_comments` is set.
    10 ( 0.00%)      num_next_calls: usize,
     .               // During parsing, we may sometimes need to 'unglue' a
     .               // glued token into two component tokens
     .               // (e.g. '>>' into '>' and '>), so that the parser
     .               // can consume them one at a time. This process
     .               // bypasses the normal capturing mechanism
     .               // (e.g. `num_next_calls` will not be incremented),
     .               // since the 'unglued' tokens due not exist in
     .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
     .               // in `Option<Vec<u8>>` requires us to unglue
     .               // the trailing `>>` token. The `break_last_token`
     .               // field is used to track this token - it gets
     .               // appended to the captured stream when
     .               // we evaluate a `LazyTokenStream`
     .               break_last_token: bool,
     .           }
     .           
    65 ( 0.00%)  #[derive(Clone)]
     .           struct TokenCursorFrame {
    11 ( 0.00%)      delim: token::DelimToken,
     .               span: DelimSpan,
     .               open_delim: bool,
    22 ( 0.00%)      tree_cursor: tokenstream::Cursor,
     .               close_delim: bool,
     .           }
     .           
     .           impl TokenCursorFrame {
     .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    20 ( 0.00%)          TokenCursorFrame {
     .                       delim,
     .                       span,
     .                       open_delim: false,
    86 ( 0.00%)              tree_cursor: tts.into_trees(),
     .                       close_delim: false,
     .                   }
     .               }
     .           }
     .           
     .           impl TokenCursor {
39,780 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
     .                   loop {
17,119 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
    78 ( 0.00%)                  self.frame.open_delim = true;
   390 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
39,584 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
     .                           tree
   320 ( 0.00%)              } else if !self.frame.close_delim {
    77 ( 0.00%)                  self.frame.close_delim = true;
   385 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   154 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 1,001 ( 0.00%)                  self.frame = frame;
     .                           continue;
     .                       } else {
   108 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
     .                       };
     .           
 6,786 ( 0.00%)              match tree {
     .                           TokenTree::Token(token) => {
26,520 ( 0.02%)                      return (token, spacing);
     .                           }
     .                           TokenTree::Delimited(sp, delim, tts) => {
     .                               let frame = TokenCursorFrame::new(sp, delim, tts);
     .                               self.stack.push(mem::replace(&mut self.frame, frame));
     .                           }
     .                       }
     .                   }
26,520 ( 0.02%)      }
     .           
   150 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
    45 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
     .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
     .                           (data, attr_style, span)
     .                       }
    75 ( 0.00%)              tok => return tok,
     .                   };
     .           
     .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
     .                   // required to wrap the text.
     .                   let mut num_of_hashes = 0;
     .                   let mut count = 0;
     .                   for ch in data.as_str().chars() {
     .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
     .                                   .iter()
     .                                   .cloned()
     .                                   .collect::<TokenStream>()
     .                           },
     .                       ),
     .                   ));
     .           
     .                   self.next()
   135 ( 0.00%)      }
     .           }
     .           
    20 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
     .           enum TokenType {
    16 ( 0.00%)      Token(TokenKind),
     .               Keyword(Symbol),
     .               Operator,
     .               Lifetime,
     .               Ident,
     .               Path,
     .               Type,
     .               Const,
     .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
     .           }
     .           
     .           pub enum FollowedByType {
     .               Yes,
     .               No,
     .           }
     .           
     .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    14 ( 0.00%)      Some(match token.kind {
    28 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    28 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    28 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
     .                   token::DocComment(..) => "doc comment",
     .                   _ => return None,
     .               })
     .           }
     .           
    49 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    14 ( 0.00%)      let token_str = pprust::token_to_string(token);
     .               match token_descr_opt(token) {
     .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    49 ( 0.00%)          _ => format!("`{}`", token_str),
     .               }
    35 ( 0.00%)  }
     .           
     .           impl<'a> Parser<'a> {
    56 ( 0.00%)      pub fn new(
     .                   sess: &'a ParseSess,
     .                   tokens: TokenStream,
     .                   desugar_doc_comments: bool,
     .                   subparser_name: Option<&'static str>,
     .               ) -> Self {
     4 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
     8 ( 0.00%)          start_frame.open_delim = true;
     .                   start_frame.close_delim = true;
     .           
   124 ( 0.00%)          let mut parser = Parser {
     .                       sess,
     4 ( 0.00%)              token: Token::dummy(),
     .                       token_spacing: Spacing::Alone,
     4 ( 0.00%)              prev_token: Token::dummy(),
     .                       capture_cfg: false,
     .                       restrictions: Restrictions::empty(),
     .                       expected_tokens: Vec::new(),
     .                       token_cursor: TokenCursor {
    24 ( 0.00%)                  frame: start_frame,
     .                           stack: Vec::new(),
     .                           num_next_calls: 0,
     .                           desugar_doc_comments,
     .                           break_last_token: false,
     .                       },
     .                       desugar_doc_comments,
     .                       unmatched_angle_bracket_count: 0,
     .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
     .                           capturing: Capturing::No,
     .                           replace_ranges: Vec::new(),
     .                           inner_attr_ranges: Default::default(),
     .                       },
     .                       current_closure: None,
     .                   };
     .           
     .                   // Make parser point to the first token.
     8 ( 0.00%)          parser.bump();
     .           
     .                   parser
    36 ( 0.00%)      }
     .           
     .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
     .                   loop {
19,860 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
    60 ( 0.00%)                  self.token_cursor.next_desugared()
     .                       } else {
 9,885 ( 0.01%)                  self.token_cursor.next()
     .                       };
13,240 ( 0.01%)              self.token_cursor.num_next_calls += 1;
     .                       // We've retrieved an token from the underlying
     .                       // cursor, so we no longer need to worry about
     .                       // an unglued token. See `break_and_eat` for more details
 3,310 ( 0.00%)              self.token_cursor.break_last_token = false;
13,240 ( 0.01%)              if next.span.is_dummy() {
     .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    20 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
     .                       }
10,161 ( 0.01%)              if matches!(
 6,620 ( 0.00%)                  next.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
13,240 ( 0.01%)              return (next, spacing);
     .                   }
     .               }
     .           
     .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
     .                   match self.expect_one_of(&[], &[]) {
     .                       Err(e) => Err(e),
     .                       // We can get `Ok(true)` from `recover_closing_delimiter`
     .                       // which is called in `expected_one_of_not_found`.
     .                       Ok(_) => FatalError.raise(),
     .                   }
     .               }
     .           
     .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
10,134 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
 1,126 ( 0.00%)          if self.expected_tokens.is_empty() {
   228 ( 0.00%)              if self.token == *t {
   190 ( 0.00%)                  self.bump();
     .                           Ok(false)
     .                       } else {
     .                           self.unexpected_try_recover(t)
     .                       }
     .                   } else {
13,056 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
     .                   }
16,890 ( 0.01%)      }
     .           
     .               /// Expect next token to be edible or inedible token.  If edible,
     .               /// then consume it; if inedible, then return without consuming
     .               /// anything.  Signal a fatal error if next token is unexpected.
15,504 ( 0.01%)      pub fn expect_one_of(
     .                   &mut self,
     .                   edible: &[TokenKind],
     .                   inedible: &[TokenKind],
     .               ) -> PResult<'a, bool /* recovered */> {
 2,584 ( 0.00%)          if edible.contains(&self.token.kind) {
 3,876 ( 0.00%)              self.bump();
     .                       Ok(false)
     .                   } else if inedible.contains(&self.token.kind) {
     .                       // leave it in the input
     .                       Ok(false)
     .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
     .                       FatalError.raise();
     .                   } else {
     .                       self.expected_one_of_not_found(edible, inedible)
     .                   }
19,380 ( 0.01%)      }
     .           
     .               // Public for rustfmt usage.
     .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   321 ( 0.00%)          self.parse_ident_common(true)
     .               }
     .           
     .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   852 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
     .                       TokenKind::DocComment(..) => {
     .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
     .                       }
     .                       _ => self.expected_ident_found(),
     .                   })
     .               }
     .           
 1,988 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   284 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 1,704 ( 0.00%)          if !is_raw && ident.is_reserved() {
     .                       let mut err = self.expected_ident_found();
     .                       if recover {
     .                           err.emit();
     .                       } else {
     .                           return Err(err);
     .                       }
     .                   }
 1,136 ( 0.00%)          self.bump();
     .                   Ok(ident)
 2,840 ( 0.00%)      }
     .           
     .               /// Checks if the next token is `tok`, and returns `true` if so.
     .               ///
     .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
     .               /// encountered.
52,675 ( 0.04%)      fn check(&mut self, tok: &TokenKind) -> bool {
22,575 ( 0.02%)          let is_present = self.token == *tok;
15,050 ( 0.01%)          if !is_present {
36,130 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
     .                   }
     .                   is_present
52,675 ( 0.04%)      }
     .           
     .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
 9,300 ( 0.01%)          let is_present = self.check(tok);
 6,383 ( 0.00%)          if is_present {
   245 ( 0.00%)              self.bump()
     .                   }
     .                   is_present
     .               }
     .           
     .               /// If the next token is the given keyword, returns `true` without eating it.
     .               /// An expectation is also added for diagnostics purposes.
    30 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    41 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
   405 ( 0.00%)          self.token.is_keyword(kw)
     .               }
     .           
     .               /// If the next token is the given keyword, eats it and returns `true`.
     .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
     .               // Public for rustfmt usage.
    30 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   102 ( 0.00%)          if self.check_keyword(kw) {
     2 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
    30 ( 0.00%)      }
     .           
     .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
     4 ( 0.00%)          if self.token.is_keyword(kw) {
     1 ( 0.00%)              self.bump();
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
     .               /// If the given word is not a keyword, signals an error.
     .               /// If the next token is not the given word, signals an error.
     .               /// Otherwise, eats it.
     .               fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
     .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     .               }
     .           
     .               /// Is the given keyword `kw` followed by a non-reserved identifier?
     8 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
     4 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
     9 ( 0.00%)      }
     .           
   216 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
    72 ( 0.00%)          if ok {
     .                       true
     .                   } else {
     4 ( 0.00%)              self.expected_tokens.push(typ);
     .                       false
     .                   }
   216 ( 0.00%)      }
     .           
     .               fn check_ident(&mut self) -> bool {
     .                   self.check_or_expected(self.token.is_ident(), TokenType::Ident)
     .               }
     .           
   144 ( 0.00%)      fn check_path(&mut self) -> bool {
   288 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   180 ( 0.00%)      }
     .           
     .               fn check_type(&mut self) -> bool {
     .                   self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
     .               }
     .           
     .               fn check_const_arg(&mut self) -> bool {
     .                   self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
     .               }
-- line 646 ----------------------------------------
-- line 661 ----------------------------------------
     .                       self.token.is_like_plus(),
     .                       TokenType::Token(token::BinOp(token::Plus)),
     .                   )
     .               }
     .           
     .               /// Eats the expected token if it's present possibly breaking
     .               /// compound tokens like multi-character operators in process.
     .               /// Returns `true` if the token was eaten.
   864 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   504 ( 0.00%)          if self.token.kind == expected {
    74 ( 0.00%)              self.bump();
     .                       return true;
     .                   }
   175 ( 0.00%)          match self.token.kind.break_two_token_op() {
     .                       Some((first, second)) if first == expected => {
     .                           let first_span = self.sess.source_map().start_point(self.token.span);
     .                           let second_span = self.token.span.with_lo(first_span.hi());
     .                           self.token = Token::new(first, first_span);
     .                           // Keep track of this token - if we end token capturing now,
     .                           // we'll want to append this token to the captured stream.
     .                           //
     .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
     .                           // and `next_tok` will set this field to `None`
     .                           self.token_cursor.break_last_token = true;
     .                           // Use the spacing of the glued token as the spacing
     .                           // of the unglued second token.
     .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
     .                           true
     .                       }
     .                       _ => {
   105 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
     .                           false
     .                       }
     .                   }
   788 ( 0.00%)      }
     .           
     .               /// Eats `+` possibly breaking tokens like `+=` in process.
     .               fn eat_plus(&mut self) -> bool {
     .                   self.break_and_eat(token::BinOp(token::Plus))
     .               }
     .           
     .               /// Eats `&` possibly breaking tokens like `&&` in process.
     .               /// Signals an error if `&` is not eaten.
     .               fn expect_and(&mut self) -> PResult<'a, ()> {
   222 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `|` possibly breaking tokens like `||` in process.
     .               /// Signals an error if `|` was not eaten.
     .               fn expect_or(&mut self) -> PResult<'a, ()> {
     .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
     2 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   105 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    70 ( 0.00%)          if ate {
     .                       // See doc comment for `unmatched_angle_bracket_count`.
     .                       self.unmatched_angle_bracket_count += 1;
     .                       self.max_angle_bracket_count += 1;
     .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
     .                   }
     .                   ate
     2 ( 0.00%)      }
     .           
     .               /// Eats `<` possibly breaking tokens like `<<` in process.
     .               /// Signals an error if `<` was not eaten.
     .               fn expect_lt(&mut self) -> PResult<'a, ()> {
     .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
     .               }
     .           
     .               /// Eats `>` possibly breaking tokens like `>>` in process.
-- line 733 ----------------------------------------
-- line 742 ----------------------------------------
     .                       Ok(())
     .                   } else {
     .                       self.unexpected()
     .                   }
     .               }
     .           
     .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
     .                   kets.iter().any(|k| match expect {
 6,630 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     .                       TokenExpectType::NoExpect => self.token == **k,
     .                   })
     .               }
     .           
     .               fn parse_seq_to_before_tokens<T>(
     .                   &mut self,
     .                   kets: &[&TokenKind],
     .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
     .                   let mut first = true;
     .                   let mut recovered = false;
     .                   let mut trailing = false;
     .                   let mut v = vec![];
     .                   let unclosed_delims = !self.unclosed_delims.is_empty();
     .           
     .                   while !self.expect_any_with_type(kets, expect) {
 5,440 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
     .                           break;
     .                       }
 2,246 ( 0.00%)              if let Some(ref t) = sep.sep {
 3,366 ( 0.00%)                  if first {
     .                               first = false;
     .                           } else {
 8,424 ( 0.01%)                      match self.expect(t) {
     .                                   Ok(false) => {
     .                                       self.current_closure.take();
     .                                   }
     .                                   Ok(true) => {
     .                                       self.current_closure.take();
     .                                       recovered = true;
     .                                       break;
     .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
     .                                               e.cancel();
     .                                               break;
     .                                           }
     .                                       }
     .                                   }
     .                               }
     .                           }
     .                       }
 2,176 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
     .                           trailing = true;
     .                           break;
     .                       }
     .           
 1,087 ( 0.00%)              let t = f(self)?;
     .                       v.push(t);
     .                   }
     .           
   140 ( 0.00%)          Ok((v, trailing, recovered))
     .               }
     .           
     .               fn recover_missing_braces_around_closure_body(
     .                   &mut self,
     .                   closure_spans: ClosureSpans,
     .                   mut expect_err: DiagnosticBuilder<'_>,
     .               ) -> PResult<'a, ()> {
     .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_seq_to_before_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   105 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
     .               }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_seq_to_end<T>(
     .                   &mut self,
     .                   ket: &TokenKind,
     .                   sep: SeqSep,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    70 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    70 ( 0.00%)          if !recovered {
     .                       self.eat(ket);
     .                   }
    70 ( 0.00%)          Ok((val, trailing))
     .               }
     .           
     .               /// Parses a sequence, including the closing delimiter. The function
     .               /// `f` must consume tokens until reaching the next separator or
     .               /// closing bracket.
     .               fn parse_unspanned_seq<T>(
     .                   &mut self,
     .                   bra: &TokenKind,
-- line 969 ----------------------------------------
-- line 991 ----------------------------------------
     .               fn parse_paren_comma_seq<T>(
     .                   &mut self,
     .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
     .               ) -> PResult<'a, (Vec<T>, bool)> {
     .                   self.parse_delim_comma_seq(token::Paren, f)
     .               }
     .           
     .               /// Advance the parser by one token using provided token as the next one.
43,030 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
     .                   // Bumping after EOF is a bad sign, usually an infinite loop.
19,860 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
     .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
     .                       self.span_bug(self.token.span, msg);
     .                   }
     .           
     .                   // Update the current and previous tokens.
13,240 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 3,310 ( 0.00%)          self.token_spacing = next_spacing;
     .           
     .                   // Diagnostics.
 3,310 ( 0.00%)          self.expected_tokens.clear();
     .               }
     .           
     .               /// Advance the parser by one token.
26,480 ( 0.02%)      pub fn bump(&mut self) {
13,240 ( 0.01%)          let next_token = self.next_tok(self.token.span);
19,860 ( 0.01%)          self.bump_with(next_token);
26,480 ( 0.02%)      }
     .           
     .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
     .               /// When `dist == 0` then the current token is looked at.
     .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
     .                   if dist == 0 {
     .                       return looker(&self.token);
     .                   }
     .           
 1,606 ( 0.00%)          let frame = &self.token_cursor.frame;
 1,813 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
     .                       let all_normal = (0..dist).all(|i| {
 5,220 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 7,164 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
     .                       });
     .                       if all_normal {
 9,040 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 3,548 ( 0.00%)                      Some(tree) => match tree {
 1,774 ( 0.00%)                          TokenTree::Token(token) => looker(token),
     .                                   TokenTree::Delimited(dspan, delim, _) => {
     .                                       looker(&Token::new(token::OpenDelim(*delim), dspan.open))
     .                                   }
     .                               },
   238 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
     .                           };
     .                       }
     .                   }
     .           
     .                   let mut cursor = self.token_cursor.clone();
     .                   let mut i = 0;
    11 ( 0.00%)          let mut token = Token::dummy();
     .                   while i < dist {
    35 ( 0.00%)              token = cursor.next().0;
    17 ( 0.00%)              if matches!(
    10 ( 0.00%)                  token.kind,
     .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
     .                       ) {
     .                           continue;
     .                       }
     .                       i += 1;
     .                   }
     .                   return looker(&token);
     .               }
-- line 1060 ----------------------------------------
-- line 1079 ----------------------------------------
     .                   if self.eat_keyword(kw::Unsafe) {
     .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Unsafe::No
     .                   }
     .               }
     .           
     .               /// Parses constness: `const` or nothing.
     8 ( 0.00%)      fn parse_constness(&mut self) -> Const {
     .                   // Avoid const blocks to be parsed as const items
     3 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
     .                       && self.eat_keyword(kw::Const)
     .                   {
     .                       Const::Yes(self.prev_token.uninterpolated_span())
     .                   } else {
     .                       Const::No
     .                   }
    14 ( 0.00%)      }
     .           
     .               /// Parses inline const expressions.
     .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
     .                   if pat {
     .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
     .                   } else {
     .                       self.sess.gated_spans.gate(sym::inline_const, span);
     .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
     .                   };
     .                   let blk_span = anon_const.value.span;
     .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
     .               }
     .           
     .               /// Parses mutability (`mut` or nothing).
     .               fn parse_mutability(&mut self) -> Mutability {
     .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    75 ( 0.00%)      }
     .           
     .               /// Possibly parses mutability (`const` or `mut`).
     .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
     .                   if self.eat_keyword(kw::Mut) {
     .                       Some(Mutability::Mut)
     .                   } else if self.eat_keyword(kw::Const) {
     .                       Some(Mutability::Not)
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
   408 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
     .                   {
     .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
     .                       self.bump();
     .                       Ok(Ident::new(symbol, self.prev_token.span))
     .                   } else {
   612 ( 0.00%)              self.parse_ident_common(true)
     .                   }
     .               }
     .           
     .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
     .                   self.parse_mac_args_common(true).map(P)
     .               }
     .           
     .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
     6 ( 0.00%)          self.parse_mac_args_common(false)
     .               }
     .           
    18 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
    16 ( 0.00%)          Ok(
    10 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
     .                           || self.check(&token::OpenDelim(DelimToken::Bracket))
     .                           || self.check(&token::OpenDelim(DelimToken::Brace))
     .                       {
     8 ( 0.00%)                  match self.parse_token_tree() {
    10 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
     .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
     .                               {
     4 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
     .                               }
     .                               _ => unreachable!(),
     .                           }
     .                       } else if !delimited_only {
     .                           if self.eat(&token::Eq) {
     .                               let eq_span = self.prev_token.span;
     .           
     .                               // Collect tokens because they are used during lowering to HIR.
-- line 1168 ----------------------------------------
-- line 1173 ----------------------------------------
     .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
     .                           } else {
     .                               MacArgs::Empty
     .                           }
     .                       } else {
     .                           return self.unexpected();
     .                       },
     .                   )
    14 ( 0.00%)      }
     .           
     .               fn parse_or_use_outer_attributes(
     .                   &mut self,
     .                   already_parsed_attrs: Option<AttrWrapper>,
     .               ) -> PResult<'a, AttrWrapper> {
 4,086 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
     .                       Ok(attrs)
     .                   } else {
 2,724 ( 0.00%)              self.parse_outer_attributes()
     .                   }
     .               }
     .           
     .               /// Parses a single token tree from the input.
    32 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    12 ( 0.00%)          match self.token.kind {
     .                       token::OpenDelim(..) => {
     .                           let depth = self.token_cursor.stack.len();
     .           
     .                           // We keep advancing the token cursor until we hit
     .                           // the matching `CloseDelim` token.
    92 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
     .                               && matches!(self.token.kind, token::CloseDelim(_)))
     .                           {
     .                               // Advance one token at a time, so `TokenCursor::next()`
     .                               // can capture these tokens if necessary.
    48 ( 0.00%)                      self.bump();
     .                           }
     .                           // We are still inside the frame corresponding
     .                           // to the delimited stream we captured, so grab
     .                           // the tokens from this frame.
     .                           let frame = &self.token_cursor.frame;
     8 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
     8 ( 0.00%)                  let span = frame.span;
     4 ( 0.00%)                  let delim = frame.delim;
     .                           // Consume close delimiter
     8 ( 0.00%)                  self.bump();
    20 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
     .                       }
     .                       token::CloseDelim(_) | token::Eof => unreachable!(),
     .                       _ => {
     .                           self.bump();
     .                           TokenTree::Token(self.prev_token.clone())
     .                       }
     .                   }
    28 ( 0.00%)      }
     .           
     .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
     .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
     .                   let mut tts = Vec::new();
     .                   while self.token != token::Eof {
     .                       tts.push(self.parse_token_tree());
     .                   }
     .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
     .                   }
     .                   TokenStream::new(result)
     .               }
     .           
     .               /// Evaluates the closure with restrictions in place.
     .               ///
     .               /// Afters the closure is evaluated, restrictions are reset.
     .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
 1,327 ( 0.00%)          let old = self.restrictions;
 1,327 ( 0.00%)          self.restrictions = res;
     .                   let res = f(self);
 1,327 ( 0.00%)          self.restrictions = old;
     .                   res
     .               }
     .           
    16 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    10 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
    18 ( 0.00%)      }
     .           
     .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
     .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
     .               /// If the following element can't be a tuple (i.e., it's a function definition), then
     .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
     .               /// so emit a proper diagnostic.
     .               // Public for rustfmt usage.
    20 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
     4 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
     .           
     2 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
     8 ( 0.00%)          if self.is_crate_vis() {
     .                       self.bump(); // `crate`
     .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
     .                       return Ok(Visibility {
     .                           span: self.prev_token.span,
     .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
     .                           tokens: None,
     .                       });
     .                   }
     .           
     .                   if !self.eat_keyword(kw::Pub) {
     .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
     .                       // keyword to grab a span from for inherited visibility; an empty span at the
     .                       // beginning of the current token would seem to be the "Schelling span".
     1 ( 0.00%)              return Ok(Visibility {
     3 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
     .                           kind: VisibilityKind::Inherited,
     .                           tokens: None,
     .                       });
     .                   }
     1 ( 0.00%)          let lo = self.prev_token.span;
     .           
     5 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
     .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
     .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
     .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
     .                       // by the following tokens.
     .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
     .                       // account for `pub(crate::foo)`
     .                       {
     .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
     .                       } else if let FollowedByType::No = fbt {
     .                           // Provide this diagnostic if a type cannot follow;
     .                           // in particular, if this is not a tuple struct.
     .                           self.recover_incorrect_vis_restriction()?;
     .                           // Emit diagnostic, but continue with public visibility.
     .                       }
     .                   }
     .           
     3 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    18 ( 0.00%)      }
     .           
     .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
     .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
     .                   self.bump(); // `(`
     .                   let path = self.parse_path(PathStyle::Mod)?;
     .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
     .           
     .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1409 ----------------------------------------
     .                   self.collect_tokens_trailing_token(
     .                       AttrWrapper::empty(),
     .                       ForceCollect::Yes,
     .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
     .                   )
     .               }
     .           
     .               /// `::{` or `::*`
   632 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   316 ( 0.00%)          self.check(&token::ModSep)
     .                       && self.look_ahead(1, |t| {
   560 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
     .                       })
   396 ( 0.00%)      }
     .           
     .               pub fn clear_expected_tokens(&mut self) {
     .                   self.expected_tokens.clear();
     .               }
     .           }
     .           
     .           crate fn make_unclosed_delims_error(
     .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
     .                   err.span_label(sp, "closing delimiter possibly meant for this");
     .               }
     .               if let Some(sp) = unmatched.unclosed_span {
     .                   err.span_label(sp, "unclosed delimiter");
     .               }
     .               Some(err)
     .           }
     .           
    40 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    20 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
     .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    20 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
     .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
     .                       e.emit();
     .                   }
     .               }
    40 ( 0.00%)  }
     .           
     .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
     .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
     .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
     .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
     .           /// `AttrAnnotatedTokenTree::Delimited` tokens
     .           #[derive(Debug, Clone)]
     .           pub enum FlatToken {
-- line 1474 ----------------------------------------

18,575 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 18,185 ( 0.01%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
     46 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    224 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 26,863 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 19,679 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 21,922 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      1 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    864 ( 0.00%)          let _ = &self[a];
    898 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
     31 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     54 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  1,006 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
     21 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
    410 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  8,287 ( 0.01%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  4,726 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
101,326 ( 0.07%)          while left < right {
 96,448 ( 0.07%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 14,413 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 28,504 ( 0.02%)              if cmp == Less {
 30,139 ( 0.02%)                  left = mid + 1;
 16,620 ( 0.01%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
 84,013 ( 0.06%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
     84 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
     44 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
     44 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
     44 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

 92,454 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::cmp::Ordering;
      .           use std::marker::PhantomData;
      .           use std::ops::Range;
      .           use ty::util::IntTypeExt;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct TypeAndMut<'tcx> {
      1 ( 0.00%)      pub ty: Ty<'tcx>,
      5 ( 0.00%)      pub mutbl: hir::Mutability,
      .           }
      .           
      .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           /// A "free" region `fr` can be interpreted as "some region
      .           /// at least as big as the scope `fr.scope`".
      .           pub struct FreeRegion {
      .               pub scope: DefId,
      .               pub bound_region: BoundRegionKind,
      .           }
      .           
    729 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
      .           #[derive(HashStable)]
      .           pub enum BoundRegionKind {
      .               /// An anonymous region parameter for a given fn (&T)
      .               BrAnon(u32),
      .           
      .               /// Named region parameters for functions (a in &'a T)
      .               ///
      .               /// The `DefId` is needed to distinguish free regions in
-- line 52 ----------------------------------------
-- line 56 ----------------------------------------
      .               /// Anonymous region for the implicit env pointer parameter
      .               /// to a closure
      .               BrEnv,
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub struct BoundRegion {
    243 ( 0.00%)      pub var: BoundVar,
    243 ( 0.00%)      pub kind: BoundRegionKind,
      .           }
      .           
      .           impl BoundRegionKind {
      .               pub fn is_named(&self) -> bool {
      .                   match *self {
      .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
      .                       _ => false,
      .                   }
      .               }
      .           }
      .           
      .           /// Defines the kinds of types.
      .           ///
      .           /// N.B., if you change this, you'll probably want to change the corresponding
      .           /// AST structure in `rustc_ast/src/ast.rs` as well.
274,730 ( 0.19%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
     64 ( 0.00%)  #[derive(HashStable)]
      .           #[rustc_diagnostic_item = "TyKind"]
      .           pub enum TyKind<'tcx> {
      .               /// The primitive boolean type. Written as `bool`.
      .               Bool,
      .           
      .               /// The primitive character type; holds a Unicode scalar value
      .               /// (a non-surrogate code point). Written as `char`.
      .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
      .               Float(ty::FloatTy),
      .           
      .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
      .               ///
      .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
      .               /// That is, even after substitution it is possible that there are type
      .               /// variables. This happens when the `Adt` corresponds to an ADT
      .               /// definition and not a concrete use of it.
 16,499 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
      .           
      .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
      .               Foreign(DefId),
      .           
      .               /// The pointee of a string slice. Written as `str`.
      .               Str,
      .           
      .               /// An array with the given length. Written as `[T; n]`.
  3,000 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// The pointee of an array slice. Written as `[T]`.
      .               Slice(Ty<'tcx>),
      .           
      .               /// A raw pointer. Written as `*mut T` or `*const T`
      .               RawPtr(TypeAndMut<'tcx>),
      .           
      .               /// A reference; a pointer with an associated lifetime. Written as
      .               /// `&'a mut T` or `&'a T`.
 50,350 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
      .           
      .               /// The anonymous type of a function declaration/definition. Each
      .               /// function has a unique type, which is output (for a function
      .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
      .               ///
      .               /// For example the type of `bar` here:
      .               ///
      .               /// ```rust
-- line 134 ----------------------------------------
-- line 886 ----------------------------------------
      .           ///     T: Foo<U>
      .           ///
      .           /// This would be represented by a trait-reference where the `DefId` is the
      .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
      .           /// and `U` as parameter 1.
      .           ///
      .           /// Trait references also appear in object types like `Foo<U>`, but in
      .           /// that case the `Self` parameter is absent from the substitutions.
    333 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  6,288 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitRef<'tcx> {
      .               pub def_id: DefId,
  5,441 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      .           }
      .           
      .           impl<'tcx> TraitRef<'tcx> {
      .               pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
      .                   TraitRef { def_id, substs }
      .               }
      .           
      .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
      .               /// are the parameters defined on trait.
     18 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      8 ( 0.00%)          ty::Binder::dummy(TraitRef {
      .                       def_id,
     12 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
      .                   })
     16 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn self_ty(&self) -> Ty<'tcx> {
      .                   self.substs.type_at(0)
      .               }
      .           
      .               pub fn from_method(
      .                   tcx: TyCtxt<'tcx>,
-- line 921 ----------------------------------------
-- line 1016 ----------------------------------------
      .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
      .           /// (which would be represented by the type `PolyTraitRef ==
      .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
      .           /// erase, or otherwise "discharge" these bound vars, we change the
      .           /// type from `Binder<'tcx, T>` to just `T` (see
      .           /// e.g., `liberate_late_bound_regions`).
      .           ///
      .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
      4 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  5,279 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
      .           
      .           impl<'tcx, T> Binder<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               /// Wraps `value` in a binder, asserting that `value` does not
      .               /// contain any bound vars that would be bound by the
      .               /// binder. This is commonly used to 'inject' a value T into a
      .               /// different binding level.
     20 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
  1,948 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  4,164 ( 0.00%)          Binder(value, ty::List::empty())
     20 ( 0.00%)      }
      .           
      .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(vars);
      .                       value.visit_with(&mut validator);
      .                   }
     18 ( 0.00%)          Binder(value, vars)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Binder<'tcx, T> {
      .               /// Skips the binder and returns the "bound" value. This is a
      .               /// risky thing to do because it's easy to get confused about
      .               /// De Bruijn indices and the like. It is usually better to
      .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
      .               /// accounting.
      .               ///
      .               /// Some examples where `skip_binder` is reasonable:
      .               ///
      .               /// - extracting the `DefId` from a PolyTraitRef;
      .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
      .               ///   a type parameter `X`, since the type `X` does not reference any regions
      .               pub fn skip_binder(self) -> T {
  5,452 ( 0.00%)          self.0
      .               }
      .           
      .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      .                   self.1
      .               }
      .           
      .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     15 ( 0.00%)          Binder(&self.0, self.1)
      .               }
      .           
      .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(&T) -> U,
      .               {
      .                   let value = f(&self.0);
      .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
      .               {
      .                   self.as_ref().map_bound(f)
      .               }
      .           
      .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
    315 ( 0.00%)          let value = f(self.0);
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.1);
      .                       value.visit_with(&mut validator);
      .                   }
  4,485 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
      .               where
      .                   F: FnOnce(T) -> Result<U, E>,
      .               {
      .                   let value = f(self.0)?;
      .                   if cfg!(debug_assertions) {
-- line 1110 ----------------------------------------
-- line 1126 ----------------------------------------
      .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
      .               where
      .                   U: TypeFoldable<'tcx>,
      .               {
      .                   if cfg!(debug_assertions) {
      .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
      .                       value.visit_with(&mut validator);
      .                   }
     21 ( 0.00%)          Binder(value, self.1)
      .               }
      .           
      .               /// Unwraps and returns the value within, but only if it contains
      .               /// no bound vars at all. (In other words, if this binder --
      .               /// and indeed any enclosing binder -- doesn't bind anything at
      .               /// all.) Otherwise, returns `None`.
      .               ///
      .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
      .               /// binder, but permits late-bound vars bound by enclosing
      .               /// binders, but that would require adjusting the debruijn
      .               /// indices, and given the shallow binding structure we often use,
      .               /// would not be that useful.)
      .               pub fn no_bound_vars(self) -> Option<T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    420 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      .               }
      .           
      .               /// Splits the contents into two things that share the same binder
      .               /// level as the original, returning two distinct binders.
      .               ///
      .               /// `f` should consider bound regions at depth 1 to be free, and
      .               /// anything it produces with bound regions at depth 1 will be
      .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1171 ----------------------------------------
      .                   let bound_vars = self.1;
      .                   self.0.map(|v| Binder(v, bound_vars))
      .               }
      .           }
      .           
      .           /// Represents the projection of an associated type. In explicit UFCS
      .           /// form this would be written `<T as Trait<..>>::N`.
      .           #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     20 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionTy<'tcx> {
      .               /// The parameters of the associated item.
      .               pub substs: SubstsRef<'tcx>,
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type `N`.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
-- line 1187 ----------------------------------------
-- line 1235 ----------------------------------------
      .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
      .           
      .           /// Signature of a function type, which we have arbitrarily
      .           /// decided to use to refer to the input/output types.
      .           ///
      .           /// - `inputs`: is the list of arguments and their modes.
      .           /// - `output`: is the return type.
      .           /// - `c_variadic`: indicates whether this is a C-variadic function.
      8 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      1 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct FnSig<'tcx> {
      .               pub inputs_and_output: &'tcx List<Ty<'tcx>>,
      .               pub c_variadic: bool,
      .               pub unsafety: hir::Unsafety,
      .               pub abi: abi::Abi,
      .           }
      .           
      .           impl<'tcx> FnSig<'tcx> {
-- line 1252 ----------------------------------------
-- line 1290 ----------------------------------------
      .               }
      .               pub fn c_variadic(&self) -> bool {
      .                   self.skip_binder().c_variadic
      .               }
      .               pub fn unsafety(&self) -> hir::Unsafety {
      .                   self.skip_binder().unsafety
      .               }
      .               pub fn abi(&self) -> abi::Abi {
      8 ( 0.00%)          self.skip_binder().abi
      2 ( 0.00%)      }
      .           }
      .           
      .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           #[derive(HashStable)]
      .           pub struct ParamTy {
      .               pub index: u32,
-- line 1307 ----------------------------------------
-- line 1440 ----------------------------------------
      .           /// the inference variable is supposed to satisfy the relation
      .           /// *for every value of the placeholder region*. To ensure that doesn't
      .           /// happen, you can use `leak_check`. This is more clearly explained
      .           /// by the [rustc dev guide].
      .           ///
      .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
      .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
      .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
138,093 ( 0.09%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      .           pub enum RegionKind {
      .               /// Region bound in a type or fn declaration which will be
      .               /// substituted 'early' -- that is, at the same time when type
      .               /// parameters are substituted.
      .               ReEarlyBound(EarlyBoundRegion),
      .           
      .               /// Region bound in a function scope, which will be substituted when the
      .               /// function is called.
    486 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
      .           
      .               /// When checking a function body, the types of all arguments and so forth
      .               /// that refer to bound region parameters are modified to refer to free
      .               /// region parameters.
      .               ReFree(FreeRegion),
      .           
      .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
      .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
      .               /// regions visible from `U`, but not less than regions not visible
      .               /// from `U`.
      .               ReEmpty(ty::UniverseIndex),
      .           
      .               /// Erased region, used by trait selection, in MIR and during codegen.
      .               ReErased,
      .           }
      .           
    426 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
      .           pub struct EarlyBoundRegion {
      .               pub def_id: DefId,
    274 ( 0.00%)      pub index: u32,
     30 ( 0.00%)      pub name: Symbol,
      .           }
      .           
      .           /// A **`const`** **v**ariable **ID**.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      .           pub struct ConstVid<'tcx> {
     34 ( 0.00%)      pub index: u32,
      .               pub phantom: PhantomData<&'tcx ()>,
      .           }
      .           
      .           rustc_index::newtype_index! {
      .               /// A **region** (lifetime) **v**ariable **ID**.
      .               pub struct RegionVid {
      .                   DEBUG_FORMAT = custom,
      .               }
-- line 1504 ----------------------------------------
-- line 1616 ----------------------------------------
      .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
      .                       RegionKind::ReEmpty(_) => false,
      .                       RegionKind::ReErased => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_late_bound(&self) -> bool {
     75 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_placeholder(&self) -> bool {
      .                   matches!(*self, ty::RePlaceholder(..))
      .               }
      .           
      .               #[inline]
      .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
  1,151 ( 0.00%)          match *self {
      .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               pub fn type_flags(&self) -> TypeFlags {
      .                   let mut flags = TypeFlags::empty();
      .           
 10,953 ( 0.01%)          match *self {
      .                       ty::ReVar(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
      .                           flags = flags | TypeFlags::HAS_RE_INFER;
      .                       }
      .                       ty::RePlaceholder(..) => {
      .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
      .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
      .                       ty::ReErased => {
      .                           flags = flags | TypeFlags::HAS_RE_ERASED;
      .                       }
      .                   }
      .           
      .                   debug!("type_flags({:?}) = {:?}", self, flags);
      .           
      .                   flags
     72 ( 0.00%)      }
      .           
      .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
      .               /// For example, consider the regions in this snippet of code:
      .               ///
      .               /// ```
      .               /// impl<'a> Foo {
      .               ///      ^^ -- early bound, declared on an impl
      .               ///
-- line 1685 ----------------------------------------
-- line 1721 ----------------------------------------
      .                   match self.kind() {
      .                       Tuple(ref tys) => tys.is_empty(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_never(&self) -> bool {
  2,454 ( 0.00%)          matches!(self.kind(), Never)
      .               }
      .           
      .               #[inline]
      .               pub fn is_primitive(&self) -> bool {
      .                   self.kind().is_primitive()
      .               }
      .           
      .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_ref(&self) -> bool {
      .                   matches!(self.kind(), Ref(..))
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_var(&self) -> bool {
  3,510 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
     82 ( 0.00%)          match self.kind() {
      .                       &Infer(TyVar(vid)) => Some(vid),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_ty_infer(&self) -> bool {
      .                   matches!(self.kind(), Infer(_))
-- line 1762 ----------------------------------------
-- line 1802 ----------------------------------------
      .               #[inline]
      .               pub fn is_simd(&self) -> bool {
      .                   match self.kind() {
      .                       Adt(def, _) => def.repr.simd(),
      .                       _ => false,
      .                   }
      .               }
      .           
     70 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    140 ( 0.00%)          match self.kind() {
      .                       Array(ty, _) | Slice(ty) => ty,
      .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
      .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
      .                   }
     70 ( 0.00%)      }
      .           
      .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
      .                   match self.kind() {
      .                       Adt(def, substs) => {
      .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
      .                           let variant = def.non_enum_variant();
      .                           let f0_ty = variant.fields[0].ty(tcx, substs);
      .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
      .                   match self.kind() {
      .                       Ref(_, _, mutability) => Some(*mutability),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn is_unsafe_ptr(&self) -> bool {
    206 ( 0.00%)          matches!(self.kind(), RawPtr(_))
      .               }
      .           
      .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
      .               #[inline]
      .               pub fn is_any_ptr(&self) -> bool {
      .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
      .               }
      .           
      .               #[inline]
      .               pub fn is_box(&self) -> bool {
  3,350 ( 0.00%)          match self.kind() {
     70 ( 0.00%)              Adt(def, _) => def.is_box(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Panics if called on any type other than `Box<T>`.
      .               pub fn boxed_ty(&self) -> Ty<'tcx> {
      .                   match self.kind() {
      .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1947 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_fresh_ty(&self) -> bool {
      .                   matches!(self.kind(), Infer(FreshTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fresh(&self) -> bool {
     26 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
      .               }
      .           
      .               #[inline]
      .               pub fn is_char(&self) -> bool {
      .                   matches!(self.kind(), Char)
      .               }
      .           
      .               #[inline]
-- line 1963 ----------------------------------------
-- line 1979 ----------------------------------------
      .               pub fn has_concrete_skeleton(&self) -> bool {
      .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
      .               }
      .           
      .               /// Returns the type and mutability of `*ty`.
      .               ///
      .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
      .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
  1,572 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
  7,382 ( 0.01%)          match self.kind() {
    136 ( 0.00%)              Adt(def, _) if def.is_box() => {
      .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
      .                       }
  3,008 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      .                       RawPtr(mt) if explicit => Some(*mt),
      .                       _ => None,
      .                   }
  3,144 ( 0.00%)      }
      .           
      .               /// Returns the type of `ty[i]`.
      .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      .                   match self.kind() {
      .                       Array(ty, _) | Slice(ty) => Some(ty),
      .                       _ => None,
      .                   }
      .               }
      .           
      8 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
      4 ( 0.00%)          match self.kind() {
      3 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      .                       FnPtr(f) => *f,
      .                       Error(_) => {
      .                           // ignore errors (#54954)
      .                           ty::Binder::dummy(FnSig::fake())
      .                       }
      .                       Closure(..) => bug!(
      .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
      .                       ),
      .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
      .                   }
      9 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_fn(&self) -> bool {
      .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
      .               }
      .           
      .               #[inline]
      .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_impl_trait(&self) -> bool {
      .                   matches!(self.kind(), Opaque(..))
      .               }
      .           
      .               #[inline]
      .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    547 ( 0.00%)          match self.kind() {
      .                       Adt(adt, _) => Some(adt),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Iterates over tuple fields.
      .               /// Panics when called on anything but a tuple.
      .               pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
-- line 2046 ----------------------------------------
-- line 2229 ----------------------------------------
      .               /// Returning true means the type is known to be sized. Returning
      .               /// `false` means nothing -- could be sized, might not be.
      .               ///
      .               /// Note that we could never rely on the fact that a type such as `[_]` is
      .               /// trivially `!Sized` because we could be in a type environment with a
      .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
      .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
      .               /// this method doesn't return `Option<bool>`.
 12,123 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
  8,082 ( 0.01%)          match self.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => true,
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
      .           
      1 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
      .           
    312 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
      .           
      .                       ty::Infer(ty::TyVar(_)) => false,
      .           
      .                       ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
      .                       }
      .                   }
 12,123 ( 0.01%)      }
      .           }
      .           
      .           /// Extra information about why we ended up with a particular variance.
      .           /// This is only used to add more information to error messages, and
      .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
      .           /// may lead to confusing notes in error messages, it will never cause
      .           /// a miscompilation or unsoundness.
      .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
      .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
      .                   param_index: u32,
      .               },
      .           }
      .           
      .           impl<'tcx> VarianceDiagInfo<'tcx> {
      .               /// Mirrors `Variance::xform` - used to 'combine' the existing
      .               /// and new `VarianceDiagInfo`s when our variance changes.
  2,518 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
      .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
  3,777 ( 0.00%)          match self {
      .                       VarianceDiagInfo::None => other,
      .                       VarianceDiagInfo::Invariant { .. } => self,
      .                   }
  1,259 ( 0.00%)      }
      .           }

393,914 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir              

-- line 118 ----------------------------------------
     .               stability: InternedSet<'tcx, attr::Stability>,
     .           
     .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
     .               const_stability: InternedSet<'tcx, attr::ConstStability>,
     .           }
     .           
     .           impl<'tcx> CtxtInterners<'tcx> {
     .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
    17 ( 0.00%)          CtxtInterners {
     .                       arena,
     .                       type_: Default::default(),
     .                       type_list: Default::default(),
     .                       substs: Default::default(),
     .                       region: Default::default(),
     .                       poly_existential_predicates: Default::default(),
     .                       canonical_var_infos: Default::default(),
     .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
     .                       stability: Default::default(),
     .                       const_stability: Default::default(),
     .                   }
     .               }
     .           
     .               /// Interns a type.
     .               #[allow(rustc::usage_of_ty_tykind)]
     .               #[inline(never)]
72,920 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
     .                   self.type_
45,575 ( 0.03%)              .intern(kind, |kind| {
 4,802 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
     .           
     .                           let ty_struct = TyS {
 9,604 ( 0.01%)                      kind,
     .                               flags: flags.flags,
     .                               outer_exclusive_binder: flags.outer_exclusive_binder,
     .                           };
     .           
     .                           Interned(self.arena.alloc(ty_struct))
     .                       })
     .                       .0
82,035 ( 0.06%)      }
     .           
     .               #[inline(never)]
11,320 ( 0.01%)      fn intern_predicate(
     .                   &self,
     .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
     .               ) -> &'tcx PredicateInner<'tcx> {
     .                   self.predicate
 9,905 ( 0.01%)              .intern(kind, |kind| {
 5,232 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
     .           
     .                           let predicate_struct = PredicateInner {
     .                               kind,
     .                               flags: flags.flags,
     .                               outer_exclusive_binder: flags.outer_exclusive_binder,
     .                           };
     .           
     .                           Interned(self.arena.alloc(predicate_struct))
     .                       })
     .                       .0
12,735 ( 0.01%)      }
     .           }
     .           
     .           pub struct CommonTypes<'tcx> {
     .               pub unit: Ty<'tcx>,
     .               pub bool: Ty<'tcx>,
     .               pub char: Ty<'tcx>,
     .               pub isize: Ty<'tcx>,
     .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
     .           /// safely used as a key in the maps of a TypeckResults. For that to be
     .           /// the case, the HirId must have the same `owner` as all the other IDs in
     .           /// this table (signified by `hir_owner`). Otherwise the HirId
     .           /// would be in a different frame of reference and using its `local_id`
     .           /// would result in lookup errors, or worse, in silently wrong data being
     .           /// stored/returned.
     .           #[inline]
     .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
21,933 ( 0.02%)      if hir_id.owner != hir_owner {
     .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
     .               }
     .           }
     .           
     .           #[cold]
     .           #[inline(never)]
     .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
     .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
     .           }
     .           
     .           impl<'a, V> LocalTableInContext<'a, V> {
     .               pub fn contains_key(&self, id: hir::HirId) -> bool {
     .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
     .                   self.data.contains_key(&id.local_id)
     .               }
     .           
13,970 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
 2,794 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
 2,794 ( 0.00%)          self.data.get(&id.local_id)
11,176 ( 0.01%)      }
     .           
     .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
     .                   self.data.iter()
     .               }
     .           }
     .           
     .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
     .               type Output = V;
-- line 280 ----------------------------------------
-- line 507 ----------------------------------------
     .               pub treat_byte_string_as_slice: ItemLocalSet,
     .           
     .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
     .               /// on closure size.
     .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
     .           }
     .           
     .           impl<'tcx> TypeckResults<'tcx> {
    18 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   213 ( 0.00%)          TypeckResults {
     .                       hir_owner,
     .                       type_dependent_defs: Default::default(),
     .                       field_indices: Default::default(),
     .                       user_provided_types: Default::default(),
     .                       user_provided_sigs: Default::default(),
     .                       node_types: Default::default(),
     .                       node_substs: Default::default(),
     .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
     .                       tainted_by_errors: None,
     .                       concrete_opaque_types: Default::default(),
     .                       closure_min_captures: Default::default(),
     .                       closure_fake_reads: Default::default(),
     .                       generator_interior_types: ty::Binder::dummy(Default::default()),
     .                       treat_byte_string_as_slice: Default::default(),
     .                       closure_size_eval: Default::default(),
     .                   }
    18 ( 0.00%)      }
     .           
     .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   204 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   136 ( 0.00%)          match *qpath {
   408 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
     .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
     .                           .type_dependent_def(id)
     .                           .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
     .                   }
   340 ( 0.00%)      }
     .           
     .               pub fn type_dependent_defs(
     .                   &self,
     .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     .                   LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     .               }
     .           
     .               pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
-- line 558 ----------------------------------------
-- line 559 ----------------------------------------
     .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
     .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
     .               }
     .           
     .               pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
     .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
     .               }
     .           
 1,363 ( 0.00%)      pub fn type_dependent_defs_mut(
     .                   &mut self,
     .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
 1,363 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
 1,363 ( 0.00%)      }
     .           
     .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
   408 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     .               }
     .           
     .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
 1,224 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
   612 ( 0.00%)      }
     .           
     .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    70 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    35 ( 0.00%)      }
     .           
     .               pub fn user_provided_types_mut(
     .                   &mut self,
     .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     .               }
     .           
     .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
 2,796 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
 1,398 ( 0.00%)      }
     .           
     .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 5,452 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
 2,726 ( 0.00%)      }
     .           
32,478 ( 0.02%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
 5,413 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
     .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
     .                   })
27,065 ( 0.02%)      }
     .           
 6,810 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
 6,810 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
     .                   self.node_types.get(&id.local_id).cloned()
13,620 ( 0.01%)      }
     .           
     .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     .               }
     .           
 1,362 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
 1,362 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
     .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
 2,724 ( 0.00%)      }
     .           
 1,363 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
 1,363 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
     .                   self.node_substs.get(&id.local_id).cloned()
 2,726 ( 0.00%)      }
     .           
     .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
     .               // doesn't provide type parameter substitutions.
     .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
     .                   self.node_type(pat.hir_id)
     .               }
     .           
     .               // Returns the type of an expression as a monotype.
-- line 630 ----------------------------------------
-- line 633 ----------------------------------------
     .               // some cases, we insert `Adjustment` annotations such as auto-deref or
     .               // auto-ref.  The type returned by this function does not consider such
     .               // adjustments.  See `expr_ty_adjusted()` instead.
     .               //
     .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
     .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
     .               // instead of "fn(ty) -> T with T = isize".
     .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
 5,720 ( 0.00%)          self.node_type(expr.hir_id)
     .               }
     .           
     .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
 5,588 ( 0.00%)          self.node_type_opt(expr.hir_id)
     .               }
     .           
     .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 2,790 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
 1,395 ( 0.00%)      }
     .           
     .               pub fn adjustments_mut(
     .                   &mut self,
     .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 3,406 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
 1,703 ( 0.00%)      }
     .           
 2,759 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
 5,518 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
     .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
 5,518 ( 0.00%)      }
     .           
     .               /// Returns the type of `expr`, considering any `Adjustment`
     .               /// entry recorded for that expression.
     .               pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     .                   self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     .               }
     .           
     .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
-- line 669 ----------------------------------------
-- line 700 ----------------------------------------
     .               }
     .           
     .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     .               }
     .           
     .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
     .               /// by the closure.
     4 ( 0.00%)      pub fn closure_min_captures_flattened(
     .                   &self,
     .                   closure_def_id: DefId,
     .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
     .                   self.closure_min_captures
     .                       .get(&closure_def_id)
     .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
     .                       .into_iter()
     .                       .flatten()
     5 ( 0.00%)      }
     .           
     .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     2 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     1 ( 0.00%)      }
     .           
     .               pub fn closure_kind_origins_mut(
     .                   &mut self,
     .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
     .               }
     .           
     .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     2 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     1 ( 0.00%)      }
     .           
     .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     .               }
     .           
     .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     2 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     1 ( 0.00%)      }
     .           
     .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
     .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
     .               }
     .           
     .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
     .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
     .                   self.coercion_casts.contains(&hir_id.local_id)
     .               }
     .           
     .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
     .                   self.coercion_casts.insert(id);
     .               }
     .           
     .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     1 ( 0.00%)          &self.coercion_casts
     1 ( 0.00%)      }
     .           }
     .           
     .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
     .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
     .                   let ty::TypeckResults {
     .                       hir_owner,
     .                       ref type_dependent_defs,
     .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 832 ----------------------------------------
     .           }
     .           
     .           /// Canonicalized user type annotation.
     .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
     .           
     .           impl<'tcx> CanonicalUserType<'tcx> {
     .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
     .               /// i.e., each thing is mapped to a canonical variable with the same index.
    34 ( 0.00%)      pub fn is_identity(&self) -> bool {
    68 ( 0.00%)          match self.value {
     .                       UserType::Ty(_) => false,
     .                       UserType::TypeOf(_, user_substs) => {
    34 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
     .                               return false;
     .                           }
     .           
     .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
     .                               match kind.unpack() {
     .                                   GenericArgKind::Type(ty) => match ty.kind() {
     .                                       ty::Bound(debruijn, b) => {
     .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     .                                           assert_eq!(*debruijn, ty::INNERMOST);
     .                                           cvar == b.var
     .                                       }
     .                                       _ => false,
     .                                   },
     .           
    68 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
     .                                       ty::ReLateBound(debruijn, br) => {
     .                                           // We only allow a `ty::INNERMOST` index in substitutions.
     .                                           assert_eq!(*debruijn, ty::INNERMOST);
     .                                           cvar == br.var
     .                                       }
     .                                       _ => false,
     .                                   },
     .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
     .                                           cvar == b
     .                                       }
     .                                       _ => false,
     .                                   },
     .                               }
     .                           })
     .                       }
     .                   }
    68 ( 0.00%)      }
     .           }
     .           
     .           /// A user-given type annotation attached to a constant. These arise
     .           /// from constants that are named via paths, like `Foo::<A>::new` and
     .           /// so forth.
     .           #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   306 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
     .           pub enum UserType<'tcx> {
     .               Ty(Ty<'tcx>),
     .           
     .               /// The canonical type is the result of `type_of(def_id)` with the
     .               /// given substitutions applied.
     .               TypeOf(DefId, UserSubsts<'tcx>),
     .           }
     .           
     .           impl<'tcx> CommonTypes<'tcx> {
     .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
   111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
     .           
     .                   CommonTypes {
     .                       unit: mk(Tuple(List::empty())),
     .                       bool: mk(Bool),
     .                       char: mk(Char),
     .                       never: mk(Never),
     .                       isize: mk(Int(ty::IntTy::Isize)),
     .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
     .           
     .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
     .                   }
     .               }
     .           }
     .           
     .           impl<'tcx> CommonLifetimes<'tcx> {
     .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
    67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
     .           
     .                   CommonLifetimes {
     5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
     5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
     5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
     .                   }
     .               }
     .           }
     .           
     .           impl<'tcx> CommonConsts<'tcx> {
     .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
     6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
     .           
     .                   CommonConsts {
     .                       unit: mk_const(ty::Const {
     .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
     .                           ty: types.unit,
     .                       }),
     .                   }
     .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
     .           
     .               /// Stores memory for globals (statics/consts).
     .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
     .           
     .               output_filenames: Arc<OutputFilenames>,
     .           }
     .           
     .           impl<'tcx> TyCtxt<'tcx> {
    80 ( 0.00%)      pub fn typeck_opt_const_arg(
     .                   self,
     .                   def: ty::WithOptConstParam<LocalDefId>,
     .               ) -> &'tcx TypeckResults<'tcx> {
    32 ( 0.00%)          if let Some(param_did) = def.const_param_did {
     .                       self.typeck_const_arg((def.did, param_did))
     .                   } else {
     .                       self.typeck(def.did)
     .                   }
    64 ( 0.00%)      }
     .           
     3 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     1 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     4 ( 0.00%)      }
     .           
    20 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     4 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    28 ( 0.00%)      }
     .           
     4 ( 0.00%)      pub fn alloc_steal_promoted(
     .                   self,
     .                   promoted: IndexVec<Promoted, Body<'tcx>>,
     .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     1 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     5 ( 0.00%)      }
     .           
     9 ( 0.00%)      pub fn alloc_adt_def(
     .                   self,
     .                   did: DefId,
     .                   kind: AdtKind,
     .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
     .                   repr: ReprOptions,
     .               ) -> &'tcx ty::AdtDef {
    16 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     4 ( 0.00%)      }
     .           
     .               /// Allocates a read-only byte or string literal for `mir::interpret`.
   170 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
     .                   // Create an allocation that just contains these bytes.
    34 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
   442 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
     .                   self.create_memory_alloc(alloc)
   170 ( 0.00%)      }
     .           
     .               /// Returns a range of the start/end indices specified with the
     .               /// `rustc_layout_scalar_valid_range` attribute.
     .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
   288 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
   144 ( 0.00%)          let attrs = self.get_attrs(def_id);
   612 ( 0.00%)          let get = |name| {
   144 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
     .                           Some(attr) => attr,
     .                           None => return Bound::Unbounded,
     .                       };
     .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
     .                       if let Some(
     .                           &[
     .                               ast::NestedMetaItem::Literal(ast::Lit {
     .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
     .                       ) = attr.meta_item_list().as_deref()
     .                       {
     .                           Bound::Included(a)
     .                       } else {
     .                           self.sess
     .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
     .                           Bound::Unbounded
     .                       }
   720 ( 0.00%)          };
   216 ( 0.00%)          (
   216 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
   108 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
     .                   )
   288 ( 0.00%)      }
     .           
     .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
     .                   value.lift_to_tcx(self)
     .               }
     .           
     .               /// Creates a type context and call the closure with a `TyCtxt` reference
     .               /// to the context. The closure enforces that the type context and any interned
     .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
     .               /// reference to the context, to allow formatting values that need it.
    23 ( 0.00%)      pub fn create_global_ctxt(
     .                   s: &'tcx Session,
     .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
     .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
     .                   resolutions: ty::ResolverOutputs,
     .                   krate: &'tcx hir::Crate<'tcx>,
     .                   dep_graph: DepGraph,
     .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
     .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
     .                   query_kinds: &'tcx [DepKindStruct],
     .                   crate_name: &str,
     .                   output_filenames: OutputFilenames,
     .               ) -> GlobalCtxt<'tcx> {
     1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
     .                       s.fatal(&err);
     .                   });
     .                   let interners = CtxtInterners::new(arena);
     .                   let common_types = CommonTypes::new(&interners);
     .                   let common_lifetimes = CommonLifetimes::new(&interners);
     .                   let common_consts = CommonConsts::new(&interners, &common_types);
     .           
   127 ( 0.00%)          GlobalCtxt {
     .                       sess: s,
     6 ( 0.00%)              lint_store,
     .                       arena,
     2 ( 0.00%)              interners,
     5 ( 0.00%)              dep_graph,
     4 ( 0.00%)              untracked_resolutions: resolutions,
     2 ( 0.00%)              prof: s.prof.clone(),
     .                       types: common_types,
     .                       lifetimes: common_lifetimes,
     .                       consts: common_consts,
     .                       untracked_crate: krate,
     .                       on_disk_cache,
     .                       queries,
     .                       query_caches: query::QueryCaches::default(),
     .                       query_kinds,
     .                       ty_rcache: Default::default(),
     .                       pred_rcache: Default::default(),
     .                       selection_cache: Default::default(),
     .                       evaluation_cache: Default::default(),
     1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
     .                       data_layout,
     .                       alloc_map: Lock::new(interpret::AllocMap::new()),
     .                       output_filenames: Arc::new(output_filenames),
     .                   }
     9 ( 0.00%)      }
     .           
     .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
     .                   &self.query_kinds[k as usize]
     .               }
     .           
     .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
     .               #[track_caller]
     .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1223 ----------------------------------------
     .               }
     .           
     .               pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     .                   let cname = self.crate_name(LOCAL_CRATE);
     .                   self.sess.consider_optimizing(cname.as_str(), msg)
     .               }
     .           
     .               /// Obtain all lang items of this crate and all dependencies (recursively)
19,299 ( 0.01%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
     .                   self.get_lang_items(())
24,813 ( 0.02%)      }
     .           
     .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
     .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
     .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     .               }
     .           
     .               /// Obtain the diagnostic item's name
-- line 1241 ----------------------------------------
-- line 1243 ----------------------------------------
     .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
     .               }
     .           
     .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
     .               pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
     .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
     .               }
     .           
    21 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
     .                   self.stability_index(())
    27 ( 0.00%)      }
     .           
 9,856 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
     .                   self.features_query(())
11,264 ( 0.01%)      }
     .           
     3 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
     .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
    52 ( 0.00%)          if let Some(id) = id.as_local() {
     .                       self.untracked_resolutions.definitions.def_key(id)
     .                   } else {
    30 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
     .                   }
     6 ( 0.00%)      }
     .           
     .               /// Converts a `DefId` into its fully expanded `DefPath` (every
     .               /// `DefId` is really just an interned `DefPath`).
     .               ///
     .               /// Note that if `id` is not local to this crate, the result will
     .               ///  be a non-local `DefPath`.
     2 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
     .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
     3 ( 0.00%)          if let Some(id) = id.as_local() {
     3 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
     .                   } else {
     .                       self.untracked_resolutions.cstore.def_path(id)
     .                   }
     3 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
     .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
     7 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
     .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
     .                   } else {
     8 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
     .                   if crate_num == LOCAL_CRATE {
     .                       self.sess.local_stable_crate_id()
     .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
     .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
     .                       self.def_path(def_id).to_string_no_crate_verbose()
     .                   )
     .               }
     .           
     .               /// Note that this is *untracked* and should only be used within the query
     .               /// system if the result is otherwise tracked through queries
     .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 1,488 ( 0.00%)          &*self.untracked_resolutions.cstore
   744 ( 0.00%)      }
     .           
     .               /// Note that this is *untracked* and should only be used within the query
     .               /// system if the result is otherwise tracked through queries
     .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
     .                   &self.untracked_resolutions.definitions
     .               }
     .           
     .               #[inline(always)]
     .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     4 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    17 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
     .               }
     .           
     .               #[inline(always)]
     .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     .                   let resolutions = &self.gcx.untracked_resolutions;
     .                   StableHashingContext::ignore_spans(
     .                       self.sess,
     .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
     .               /// If `true`, we should use the MIR-based borrowck, but also
     .               /// fall back on the AST borrowck if the MIR-based one errors.
     .               pub fn migrate_borrowck(self) -> bool {
     .                   self.borrowck_mode().migrate()
     .               }
     .           
     .               /// What mode(s) of borrowck should we run? AST? MIR? both?
     .               /// (Also considers the `#![feature(nll)]` setting.)
     2 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
     .                   // Here are the main constraints we need to deal with:
     .                   //
     .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
     .                   //    synonymous with no `-Z borrowck=...` flag at all.
     .                   //
     .                   // 2. We want to allow developers on the Nightly channel
     .                   //    to opt back into the "hard error" mode for NLL,
     .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
     .                   //   errors. (To simplify the code here, it now even overrides
     .                   //   a user's attempt to specify `-Z borrowck=compare`, which
     .                   //   we arguably do not need anymore and should remove.)
     .                   //
     .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
     .                   //
     .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
     .           
     3 ( 0.00%)          if self.features().nll {
     .                       return BorrowckMode::Mir;
     .                   }
     .           
     1 ( 0.00%)          self.sess.opts.borrowck_mode
     4 ( 0.00%)      }
     .           
     .               /// If `true`, we should use lazy normalization for constants, otherwise
     .               /// we still evaluate them eagerly.
     .               #[inline]
     .               pub fn lazy_normalization(self) -> bool {
     .                   let features = self.features();
     .                   // Note: We only use lazy normalization for generic const expressions.
     .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
     .                   self.mk_imm_ref(
     .                       self.lifetimes.re_static,
     .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
     .                   )
     .               }
     .           
     .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    11 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     8 ( 0.00%)          match self.def_kind(def_id) {
     .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
     .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
     .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
     .                       },
    18 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
     .                   }
     9 ( 0.00%)      }
     .           
    14 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
     .                   self.limits(()).type_length_limit
    16 ( 0.00%)      }
     .           
 8,533 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
     .                   self.limits(()).recursion_limit
 9,752 ( 0.01%)      }
     .           
     .               pub fn move_size_limit(self) -> Limit {
     .                   self.limits(()).move_size_limit
     .               }
     .           
    21 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
     .                   self.limits(()).const_eval_limit
    24 ( 0.00%)      }
     .           
     .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
     .                   iter::once(LOCAL_CRATE)
     .                       .chain(self.crates(()).iter().copied())
     .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
     .               }
     .           }
     .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
     .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
     .           }
     .           
     .           macro_rules! nop_lift {
     .               ($set:ident; $ty:ty => $lifted:ty) => {
     .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
     .                       type Lifted = $lifted;
     .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     8 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
     .                               Some(unsafe { mem::transmute(self) })
     .                           } else {
     .                               None
     .                           }
     .                       }
     .                   }
     .               };
     .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
     .               /// This is the implicit state of rustc. It contains the current
     .               /// `TyCtxt` and query. It is updated when creating a local interner or
     .               /// executing a new query. Whenever there's a `TyCtxt` value available
     .               /// you should also have access to an `ImplicitCtxt` through the functions
     .               /// in this module.
     .               #[derive(Clone)]
     .               pub struct ImplicitCtxt<'a, 'tcx> {
     .                   /// The current `TyCtxt`.
     2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
     .           
     .                   /// The current query job, if any. This is updated by `JobOwner::start` in
     .                   /// `ty::query::plumbing` when executing a query.
     .                   pub query: Option<query::QueryJobId<DepKind>>,
     .           
     .                   /// Where to store diagnostics for the current query job, if any.
     .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
     .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
     .                   pub layout_depth: usize,
     .           
     .                   /// The current dep graph task. This is used to add dependencies to queries
     .                   /// when executing them.
     .                   pub task_deps: TaskDepsRef<'a>,
     .               }
     .           
     .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
     5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
     .                       let tcx = TyCtxt { gcx };
    25 ( 0.00%)              ImplicitCtxt {
     .                           tcx,
     .                           query: None,
     .                           diagnostics: None,
     .                           layout_depth: 0,
     .                           task_deps: TaskDepsRef::Ignore,
     .                       }
     5 ( 0.00%)          }
     .               }
     .           
     .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
     .               /// to `value` during the call to `f`. It is restored to its previous value after.
     .               /// This is used to set the pointer to the new `ImplicitCtxt`.
     .               #[cfg(parallel_compiler)]
     .               #[inline]
     .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
     .           
     .               /// Sets TLV to `value` during the call to `f`.
     .               /// It is restored to its previous value after.
     .               /// This is used to set the pointer to the new `ImplicitCtxt`.
     .               #[cfg(not(parallel_compiler))]
     .               #[inline]
     .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
     .                   let old = get_tlv();
   891 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
     .                   TLV.with(|tlv| tlv.set(value));
     .                   f()
     .               }
     .           
     .               /// Gets the pointer to the current `ImplicitCtxt`.
     .               #[cfg(not(parallel_compiler))]
     .               #[inline]
     .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
     .               }
     .           
     .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
     .               #[inline]
     .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
     .               where
     .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
     .               {
     1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
     .               }
     .           
     .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
     .               #[inline]
     .               pub fn with_context_opt<F, R>(f: F) -> R
     .               where
     .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
     .               {
     .                   let context = get_tlv();
 5,524 ( 0.00%)          if context == 0 {
     .                       f(None)
     .                   } else {
     .                       // We could get an `ImplicitCtxt` pointer from another thread.
     .                       // Ensure that `ImplicitCtxt` is `Sync`.
     .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
     .           
     .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
     .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
     .           
     .               /// Allows access to the current `ImplicitCtxt`.
     .               /// Panics if there is no `ImplicitCtxt` available.
     .               #[inline]
     .               pub fn with_context<F, R>(f: F) -> R
     .               where
     .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
     .               {
     2 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
     .               }
     .           
     .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
     .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
     .               /// as the `TyCtxt` passed in.
     .               /// This will panic if you pass it a `TyCtxt` which is different from the current
     .               /// `ImplicitCtxt`'s `tcx` field.
     .               #[inline]
     .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
     .               where
     .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
     .               {
     .                   with_context(|context| unsafe {
 2,748 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
     .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 2,718 ( 0.00%)              f(context)
     .                   })
     .               }
     .           
     .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
     .               /// Panics if there is no `ImplicitCtxt` available.
     .               #[inline]
     .               pub fn with<F, R>(f: F) -> R
     .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
     .               fn into_pointer(&self) -> *const () {
     .                   self.0 as *const _ as *const ()
     .               }
     .           }
     .           
     .           #[allow(rustc::usage_of_ty_tykind)]
     .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
     .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 6,971 ( 0.00%)          &self.0.kind()
     .               }
     .           }
     .           
     .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
     .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
     .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
     .                   // `x == y`.
     .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
     .               }
     .           }
     .           
     .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
     .           
     .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
     .               fn hash<H: Hasher>(&self, s: &mut H) {
     .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
10,748 ( 0.01%)          self.0.kind().hash(s)
     .               }
     .           }
     .           
     .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
     .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   619 ( 0.00%)          &self.0.kind
     .               }
     .           }
     .           
     .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
     .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
     .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
     .                   // `x == y`.
     .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
     .               }
     .           }
     .           
     .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
     .           
     .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
     .               fn hash<H: Hasher>(&self, s: &mut H) {
     .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   892 ( 0.00%)          self.0.kind.hash(s)
     .               }
     .           }
     .           
     .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
     .               fn borrow<'a>(&'a self) -> &'a [T] {
 3,353 ( 0.00%)          &self.0[..]
     .               }
     .           }
     .           
     .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
     .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
     .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
     .                   // `x == y`.
     .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
     .               }
     .           }
     .           
     .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
     .           
     .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
     .               fn hash<H: Hasher>(&self, s: &mut H) {
     .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 1,794 ( 0.00%)          self.0[..].hash(s)
     .               }
     .           }
     .           
     .           macro_rules! direct_interners {
     .               ($($name:ident: $method:ident($ty:ty),)+) => {
     .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
     .                       fn borrow<'a>(&'a self) -> &'a $ty {
 2,111 ( 0.00%)                  &self.0
     .                       }
     .                   }
     .           
     .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
     .                       fn eq(&self, other: &Self) -> bool {
     .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
     .                           // equals `x == y`.
     .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
     .                   }
     .           
     .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
     .           
     .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
     .                       fn hash<H: Hasher>(&self, s: &mut H) {
     .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
     .                           // x.hash(s)`.
 8,730 ( 0.01%)                  self.0.hash(s)
     .                       }
     .                   }
     .           
     .                   impl<'tcx> TyCtxt<'tcx> {
33,503 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
19,752 ( 0.01%)                  self.interners.$name.intern(v, |v| {
 2,135 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
     .                           }).0
37,656 ( 0.03%)              }
     .                   })+
     .               }
     .           }
     .           
     .           direct_interners! {
     .               region: mk_region(RegionKind),
     .               const_: mk_const(Const<'tcx>),
     .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
     .               adt_def: intern_adt_def(AdtDef),
     .               stability: intern_stability(attr::Stability),
     .               const_stability: intern_const_stability(attr::ConstStability),
     .           }
     .           
     .           macro_rules! slice_interners {
     .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
     .                   impl<'tcx> TyCtxt<'tcx> {
48,133 ( 0.03%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
     .                           self.interners.$field.intern_ref(v, || {
     .                               Interned(List::from_arena(&*self.arena, v))
     .                           }).0
42,885 ( 0.03%)              })+
     .                   }
     .               );
     .           }
     .           
     .           slice_interners!(
     .               type_list: _intern_type_list(Ty<'tcx>),
     .               substs: _intern_substs(GenericArg<'tcx>),
     .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
     .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
     .                   })
     .               }
     .           
     .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
     .               /// `*r == kind`.
     .               #[inline]
     .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   892 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
     .               }
     .           
     .               #[allow(rustc::usage_of_ty_tykind)]
     .               #[inline]
     .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
64,018 ( 0.04%)          self.interners.intern_ty(st)
     .               }
     .           
     .               #[inline]
     .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
16,926 ( 0.01%)          let inner = self.interners.intern_predicate(binder);
     .                   Predicate { inner }
     .               }
     .           
     .               #[inline]
 6,576 ( 0.00%)      pub fn reuse_or_mk_predicate(
     .                   self,
     .                   pred: Predicate<'tcx>,
     .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
     .               ) -> Predicate<'tcx> {
   251 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 6,576 ( 0.00%)      }
     .           
     .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     .                   match tm {
     .                       IntTy::Isize => self.types.isize,
     .                       IntTy::I8 => self.types.i8,
     .                       IntTy::I16 => self.types.i16,
     .                       IntTy::I32 => self.types.i32,
     .                       IntTy::I64 => self.types.i64,
-- line 2226 ----------------------------------------
-- line 2243 ----------------------------------------
     .                   match tm {
     .                       FloatTy::F32 => self.types.f32,
     .                       FloatTy::F64 => self.types.f64,
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub fn mk_static_str(self) -> Ty<'tcx> {
   204 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
     .               }
     .           
     .               #[inline]
     .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
     .                   // Take a copy of substs so that we own the vectors inside.
     .                   self.mk_ty(Adt(def, substs))
     .               }
     .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
     .               }
     .           
     .               #[inline]
     .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
     .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
     .               }
     .           
     .               #[inline]
 1,043 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
     .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
 1,112 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
     .                   self.mk_ty(Slice(ty))
     .               }
     .           
     .               #[inline]
     .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
-- line 2347 ----------------------------------------
-- line 2353 ----------------------------------------
     .                   iter.intern_with(|ts| {
     .                       let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     .                       self.mk_ty(Tuple(self.intern_substs(&kinds)))
     .                   })
     .               }
     .           
     .               #[inline]
     .               pub fn mk_unit(self) -> Ty<'tcx> {
     3 ( 0.00%)          self.types.unit
     .               }
     .           
     .               #[inline]
     .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
     .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
     .               }
     .           
     .               #[inline]
-- line 2369 ----------------------------------------
-- line 2445 ----------------------------------------
     .                   self.mk_ty(Param(ParamTy { index, name }))
     .               }
     .           
     .               #[inline]
     .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
     .               }
     .           
    14 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    10 ( 0.00%)          match param.kind {
     .                       GenericParamDefKind::Lifetime => {
     .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
     .                       }
     4 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
     .                       GenericParamDefKind::Const { .. } => {
     .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
     .                       }
     .                   }
    14 ( 0.00%)      }
     .           
     .               #[inline]
     .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
     .                   self.mk_ty(Opaque(def_id, substs))
     .               }
     .           
   204 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
   204 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
   408 ( 0.00%)      }
     .           
     .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
     .                   self.mk_place_elem(place, PlaceElem::Deref)
     .               }
     .           
     .               pub fn mk_place_downcast(
     .                   self,
     .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
     .           
     .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
     .                   self.mk_place_elem(place, PlaceElem::Index(index))
     .               }
     .           
     .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
     .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
     .               /// flight.
 1,836 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
     .                   let mut projection = place.projection.to_vec();
     .                   projection.push(elem);
     .           
     .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
 2,040 ( 0.00%)      }
     .           
     .               pub fn intern_poly_existential_predicates(
     .                   self,
     .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
     .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     .                   assert!(!eps.is_empty());
     .                   assert!(
     .                       eps.array_windows()
-- line 2518 ----------------------------------------
-- line 2521 ----------------------------------------
     .                   );
     .                   self._intern_poly_existential_predicates(eps)
     .               }
     .           
     .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
     .                   // FIXME consider asking the input slice to be sorted to avoid
     .                   // re-interning permutations, in which case that would be asserted
     .                   // here.
    16 ( 0.00%)          if preds.is_empty() {
     .                       // The macro-generated method below asserts we don't intern an empty slice.
     .                       List::empty()
     .                   } else {
     .                       self._intern_predicates(preds)
     .                   }
    32 ( 0.00%)      }
     .           
     .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
     7 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     2 ( 0.00%)      }
     .           
     .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 8,083 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    40 ( 0.00%)      }
     .           
     .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
     .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
     .               }
     .           
     .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   785 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    70 ( 0.00%)      }
     .           
     .               pub fn intern_canonical_var_infos(
     .                   self,
     .                   ts: &[CanonicalVarInfo<'tcx>],
     .               ) -> CanonicalVarInfos<'tcx> {
   220 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     8 ( 0.00%)      }
     .           
     .               pub fn intern_bound_variable_kinds(
     .                   self,
     .                   ts: &[ty::BoundVariableKind],
     .               ) -> &'tcx List<ty::BoundVariableKind> {
     3 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
     6 ( 0.00%)      }
     .           
     .               pub fn mk_fn_sig<I>(
     .                   self,
     .                   inputs: I,
     .                   output: I::Item,
     .                   c_variadic: bool,
     .                   unsafety: hir::Unsafety,
     .                   abi: abi::Abi,
-- line 2573 ----------------------------------------
-- line 2598 ----------------------------------------
     .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
     .                   self,
     .                   iter: I,
     .               ) -> I::Output {
     .                   iter.intern_with(|xs| self.intern_predicates(xs))
     .               }
     .           
     .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
     6 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
     .               }
     .           
     .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
     .                   self,
     .                   iter: I,
     .               ) -> I::Output {
 6,055 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
     .               }
     .           
     .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
     .                   self,
     .                   iter: I,
     .               ) -> I::Output {
     .                   iter.intern_with(|xs| self.intern_place_elems(xs))
     .               }
     .           
   820 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
     .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
 1,640 ( 0.00%)      }
     .           
     .               pub fn mk_bound_variable_kinds<
     .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
     .               >(
     .                   self,
     .                   iter: I,
     .               ) -> I::Output {
    33 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
     .               }
     .           
     .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
     .               /// It stops at `bound` and just returns it if reached.
19,068 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
19,068 ( 0.01%)          let hir = self.hir();
     .                   loop {
31,539 ( 0.02%)              if id == bound {
     .                           return bound;
     .                       }
     .           
38,945 ( 0.03%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
     .                           return id;
     .                       }
     .                       let next = hir.get_parent_node(id);
23,367 ( 0.02%)              if next == id {
     .                           bug!("lint traversal reached the root of the crate");
     .                       }
     .                       id = next;
     .                   }
27,240 ( 0.02%)      }
     .           
    40 ( 0.00%)      pub fn lint_level_at_node(
     .                   self,
     .                   lint: &'static Lint,
     .                   mut id: hir::HirId,
     .               ) -> (Level, LintLevelSource) {
     .                   let sets = self.lint_levels(());
     .                   loop {
   160 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
     .                           return pair;
     .                       }
    10 ( 0.00%)              let next = self.hir().get_parent_node(id);
    30 ( 0.00%)              if next == id {
     .                           bug!("lint traversal reached the root of the crate");
     .                       }
     .                       id = next;
     .                   }
    40 ( 0.00%)      }
     .           
    14 ( 0.00%)      pub fn struct_span_lint_hir(
     .                   self,
     .                   lint: &'static Lint,
     .                   hir_id: HirId,
     .                   span: impl Into<MultiSpan>,
     .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
     .               ) {
    16 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     9 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     8 ( 0.00%)      }
     .           
     .               pub fn struct_lint_node(
     .                   self,
     .                   lint: &'static Lint,
     .                   id: HirId,
     .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
     .               ) {
     .                   let (level, src) = self.lint_level_at_node(lint, id);
-- line 2691 ----------------------------------------
-- line 2693 ----------------------------------------
     .               }
     .           
     .               pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     .                   let map = self.in_scope_traits_map(id.owner)?;
     .                   let candidates = map.get(&id.local_id)?;
     .                   Some(&*candidates)
     .               }
     .           
   315 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
     .                   debug!(?id, "named_region");
     .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   405 ( 0.00%)      }
     .           
     .               pub fn is_late_bound(self, id: HirId) -> bool {
     .                   self.is_late_bound_map(id.owner)
     .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
     .               }
     .           
    21 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
     .                   self.object_lifetime_defaults_map(id.owner)
    27 ( 0.00%)      }
     .           
     .               pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
     .                   self.mk_bound_variable_kinds(
     .                       self.late_bound_vars_map(id.owner)
     .                           .and_then(|map| map.get(&id.local_id).cloned())
     .                           .unwrap_or_else(|| {
     .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
     .                           })
-- line 2721 ----------------------------------------
-- line 2774 ----------------------------------------
     .           }
     .           
     .           impl<I, T, R, E> InternAs<[T], R> for I
     .           where
     .               E: InternIteratorElement<T, R>,
     .               I: Iterator<Item = E>,
     .           {
     .               type Output = E::Output;
 1,784 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
     .               where
     .                   F: FnOnce(&[T]) -> R,
     .               {
17,826 ( 0.01%)          E::intern_with(self, f)
 1,836 ( 0.00%)      }
     .           }
     .           
     .           pub trait InternIteratorElement<T, R>: Sized {
     .               type Output;
     .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
     .           }
     .           
     .           impl<T, R> InternIteratorElement<T, R> for T {
     .               type Output = R;
 2,505 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
     .                   mut iter: I,
     .                   f: F,
     .               ) -> Self::Output {
     .                   // This code is hot enough that it's worth specializing for the most
     .                   // common length lists, to avoid the overhead of `SmallVec` creation.
     .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
     .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
     .                   // `assert`.
 4,874 ( 0.00%)          match iter.size_hint() {
     .                       (0, Some(0)) => {
     .                           assert!(iter.next().is_none());
     .                           f(&[])
     .                       }
     .                       (1, Some(1)) => {
     .                           let t0 = iter.next().unwrap();
     .                           assert!(iter.next().is_none());
   662 ( 0.00%)                  f(&[t0])
     .                       }
     .                       (2, Some(2)) => {
     .                           let t0 = iter.next().unwrap();
     .                           let t1 = iter.next().unwrap();
     .                           assert!(iter.next().is_none());
   681 ( 0.00%)                  f(&[t0, t1])
     .                       }
     .                       _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
     .                   }
 3,298 ( 0.00%)      }
     .           }
     .           
     .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
     .           where
     .               T: Clone + 'a,
     .           {
     .               type Output = R;
     .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
     .                   // This code isn't hot.
     .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
     .               }
     .           }
     .           
     .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
     .               type Output = Result<R, E>;
 4,848 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
     .                   mut iter: I,
     .                   f: F,
     .               ) -> Self::Output {
     .                   // This code is hot enough that it's worth specializing for the most
     .                   // common length lists, to avoid the overhead of `SmallVec` creation.
     .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
     .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
     .                   // `assert`, unless a failure happens first, in which case the result
     .                   // will be an error anyway.
 3,990 ( 0.00%)          Ok(match iter.size_hint() {
     .                       (0, Some(0)) => {
     .                           assert!(iter.next().is_none());
     .                           f(&[])
     .                       }
     .                       (1, Some(1)) => {
     .                           let t0 = iter.next().unwrap()?;
     .                           assert!(iter.next().is_none());
   429 ( 0.00%)                  f(&[t0])
     .                       }
     .                       (2, Some(2)) => {
     .                           let t0 = iter.next().unwrap()?;
     .                           let t1 = iter.next().unwrap()?;
     .                           assert!(iter.next().is_none());
   354 ( 0.00%)                  f(&[t0, t1])
     .                       }
     .                       _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
     .                   })
 5,454 ( 0.00%)      }
     .           }
     .           
     .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
     .           // won't work for us.
     .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 2,748 ( 0.00%)      t as *const () == u as *const ()
     .           }
     .           
     .           pub fn provide(providers: &mut ty::query::Providers) {
     2 ( 0.00%)      providers.in_scope_traits_map =
     .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
     3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
     2 ( 0.00%)      providers.module_reexports =
     .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
     2 ( 0.00%)      providers.crate_name = |tcx, id| {
     1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
     1 ( 0.00%)          tcx.crate_name
     .               };
     2 ( 0.00%)      providers.maybe_unused_trait_import =
     .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
     2 ( 0.00%)      providers.maybe_unused_extern_crates =
     .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
     2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
     .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
     .               };
     .           
     2 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
     2 ( 0.00%)      providers.lookup_const_stability =
     .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
     2 ( 0.00%)      providers.lookup_deprecation_entry =
    16 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
     2 ( 0.00%)      providers.extern_mod_stmt_cnum =
     .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
     3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
     3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
     2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
     1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
     7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
     .               };
     2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
     1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
     7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
     .               };
     2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
     1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
     .                   // We want to check if the panic handler was defined in this crate
     3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
     .               };
     .           }

44,270 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
   88,626 ( 0.06%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
    2,040 ( 0.00%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
1,365,997 ( 0.94%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
    6,594 ( 0.00%)          self.stride += Group::WIDTH;
    6,594 ( 0.00%)          self.pos += self.stride;
    5,389 ( 0.00%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
    2,348 ( 0.00%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
    4,265 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    1,926 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    5,935 ( 0.00%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
    2,442 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
    5,242 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    6,598 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      408 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
        3 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       10 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
      163 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
       84 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
       84 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
      168 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
        .                   self.erase_no_drop(&item);
-- line 546 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
      168 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   21,053 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      410 ( 0.00%)          match self.find(hash, eq) {
      204 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   10,111 ( 0.01%)              None => None,
        .                   }
   33,410 ( 0.02%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      214 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    4,709 ( 0.00%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    3,932 ( 0.00%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
    9,318 ( 0.01%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
    5,720 ( 0.00%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  115,940 ( 0.08%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
       69 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  100,544 ( 0.07%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        4 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
   86,266 ( 0.06%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   56,152 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        .                   unsafe { self.insert(hash, value, hasher).as_mut() }
   42,114 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
        7 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
    6,346 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      416 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
   12,566 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
    9,382 ( 0.01%)          self.table.items += 1;
        .                   bucket
        9 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
       21 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    5,297 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,947 ( 0.00%)              eq(self.bucket(index).as_ref())
    3,700 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      896 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,870 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        7 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       14 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   59,487 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    9,369 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
      444 ( 0.00%)          let allocation = self.into_allocation();
      333 ( 0.00%)          RawIntoIter {
      555 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      112 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
       79 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   54,042 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    6,991 ( 0.00%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
    2,268 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    4,476 ( 0.00%)          Ok(Self {
        .                       ctrl,
    1,922 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
    5,158 ( 0.00%)      }
        .           
        .               #[inline]
    1,893 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
      474 ( 0.00%)          if capacity == 0 {
        4 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
    3,315 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    1,416 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    1,893 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
    2,038 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
    2,038 ( 0.00%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
    4,076 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
   57,065 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  167,529 ( 0.11%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
   80,877 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
       12 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  161,004 ( 0.11%)              for bit in group.match_byte(h2_hash) {
  297,204 ( 0.20%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  170,924 ( 0.12%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
   53,936 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  224,000 ( 0.15%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
  926,688 ( 0.63%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  125,170 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  100,136 ( 0.07%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  165,224 ( 0.11%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
   55,074 ( 0.04%)          *self.ctrl(index) = ctrl;
   55,179 ( 0.04%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   16,679 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
    3,759 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
   88,336 ( 0.06%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      588 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
    2,596 ( 0.00%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    1,134 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    2,268 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
    2,268 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    4,763 ( 0.00%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    1,134 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,474 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
   32,783 ( 0.02%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    1,134 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
      621 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
      487 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
      974 ( 0.00%)          self.items = 0;
      487 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
    2,058 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
    8,232 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   10,290 ( 0.01%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
    8,232 ( 0.01%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       24 ( 0.00%)      fn clone(&self) -> Self {
        3 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
       27 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   64,207 ( 0.04%)      fn drop(&mut self) {
   40,020 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   72,998 ( 0.05%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      444 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
      555 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   11,049 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    1,945 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    3,581 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   11,233 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      245 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      284 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
      342 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      282 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,968 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    3,976 ( 0.00%)          if let Some(b) = self.iter.next() {
   12,884 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    3,936 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      522 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
      501 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      166 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       11 ( 0.00%)      fn next(&mut self) -> Option<T> {
        6 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       24 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
        1 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

  504,661 ( 0.35%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir              

-- line 73 ----------------------------------------
     .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
     .                   )
     .               }
     .           }
     .           
     .           /// Takes a contents of a literal (without quotes) and produces a
     .           /// sequence of escaped characters or errors.
     .           /// Values are returned through invoking of the provided callback.
 2,448 ( 0.00%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
     .           where
     .               F: FnMut(Range<usize>, Result<char, EscapeError>),
     .           {
     .               match mode {
     .                   Mode::Char | Mode::Byte => {
     .                       let mut chars = literal_text.chars();
     .                       let result = unescape_char_or_byte(&mut chars, mode);
     .                       // The Chars iterator moved forward.
-- line 89 ----------------------------------------
-- line 91 ----------------------------------------
     .                   }
     .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
     .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
     .                   // only translate CRLF to LF and produce errors on bare CR.
     .                   Mode::RawStr | Mode::RawByteStr => {
     .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
     .                   }
     .               }
 1,088 ( 0.00%)  }
     .           
     .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
     .           /// and produces a sequence of bytes or errors.
     .           /// Values are returned through invoking of the provided callback.
   374 ( 0.00%)  pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
     .           where
     .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
     .           {
   136 ( 0.00%)      assert!(mode.is_bytes());
     .               unescape_literal(literal_text, mode, &mut |range, result| {
     .                   callback(range, result.map(byte_from_char));
     .               })
   272 ( 0.00%)  }
     .           
     .           /// Takes a contents of a char literal (without quotes), and returns an
     .           /// unescaped char or an error
     .           pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {
     .               let mut chars = literal_text.chars();
     .               unescape_char_or_byte(&mut chars, Mode::Char)
     .                   .map_err(|err| (literal_text.len() - chars.as_str().len(), err))
     .           }
-- line 120 ----------------------------------------
-- line 136 ----------------------------------------
     .               Byte,
     .               ByteStr,
     .               RawStr,
     .               RawByteStr,
     .           }
     .           
     .           impl Mode {
     .               pub fn in_single_quotes(self) -> bool {
   340 ( 0.00%)          match self {
     .                       Mode::Char | Mode::Byte => true,
     .                       Mode::Str | Mode::ByteStr | Mode::RawStr | Mode::RawByteStr => false,
     .                   }
     .               }
     .           
   340 ( 0.00%)      pub fn in_double_quotes(self) -> bool {
     .                   !self.in_single_quotes()
   170 ( 0.00%)      }
     .           
    68 ( 0.00%)      pub fn is_bytes(self) -> bool {
    68 ( 0.00%)          match self {
     .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
     .                       Mode::Char | Mode::Str | Mode::RawStr => false,
     .                   }
    34 ( 0.00%)      }
     .           }
     .           
64,610 ( 0.04%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
32,041 ( 0.02%)      if first_char != '\\' {
     .                   // Previous character was not a slash, and we don't expect it to be
     .                   // an escape-only character.
     .                   return match first_char {
     .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
     .                       '\r' => Err(EscapeError::BareCarriageReturn),
     .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
     .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
     .                       _ => {
 1,987 ( 0.00%)                  if mode.is_bytes() && !first_char.is_ascii() {
     .                               // Byte literal can't be a non-ascii character.
     .                               return Err(EscapeError::NonAsciiCharInByte);
     .                           }
     .                           Ok(first_char)
     .                       }
     .                   };
     .               }
     .           
     .               // Previous character is '\\', try to unescape it.
     .           
13,260 ( 0.01%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
     .           
     .               let res = match second_char {
     .                   '"' => '"',
     .                   'n' => '\n',
     .                   'r' => '\r',
     .                   't' => '\t',
     .                   '\\' => '\\',
     .                   '\'' => '\'',
     .                   '0' => '\0',
     .           
     .                   'x' => {
     .                       // Parse hexadecimal character code.
     .           
22,100 ( 0.02%)              let hi = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
 1,600 ( 0.00%)              let hi = hi.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
     .           
13,260 ( 0.01%)              let lo = chars.next().ok_or(EscapeError::TooShortHexEscape)?;
 1,644 ( 0.00%)              let lo = lo.to_digit(16).ok_or(EscapeError::InvalidCharInHexEscape)?;
     .           
30,940 ( 0.02%)              let value = hi * 16 + lo;
     .           
     .                       // For a byte literal verify that it is within ASCII range.
 4,420 ( 0.00%)              if !mode.is_bytes() && !is_ascii(value) {
     .                           return Err(EscapeError::OutOfRangeHexEscape);
     .                       }
     .                       let value = value as u8;
     .           
     .                       value as char
     .                   }
     .           
     .                   'u' => {
-- line 214 ----------------------------------------
-- line 263 ----------------------------------------
     .                                   value = value * 16 + digit;
     .                               }
     .                           };
     .                       }
     .                   }
     .                   _ => return Err(EscapeError::InvalidEscape),
     .               };
     .               Ok(res)
77,532 ( 0.05%)  }
     .           
     .           fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
     .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
     .               let res = scan_escape(first_char, chars, mode)?;
     .               if chars.next().is_some() {
     .                   return Err(EscapeError::MoreThanOneChar);
     .               }
     .               Ok(res)
-- line 279 ----------------------------------------
-- line 280 ----------------------------------------
     .           }
     .           
     .           /// Takes a contents of a string literal (without quotes) and produces a
     .           /// sequence of escaped characters or errors.
     .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
     .           where
     .               F: FnMut(Range<usize>, Result<char, EscapeError>),
     .           {
   510 ( 0.00%)      assert!(mode.in_double_quotes());
     .               let initial_len = src.len();
   170 ( 0.00%)      let mut chars = src.chars();
     .               while let Some(first_char) = chars.next() {
32,305 ( 0.02%)          let start = initial_len - chars.as_str().len() - first_char.len_utf8();
     .           
21,086 ( 0.01%)          let unescaped_char = match first_char {
     .                       '\\' => {
     .                           let second_char = chars.clone().next();
 8,840 ( 0.01%)                  match second_char {
     .                               Some('\n') => {
     .                                   // Rust language specification requires us to skip whitespaces
     .                                   // if unescaped '\' character is followed by '\n'.
     .                                   // For details see [Rust language reference]
     .                                   // (https://doc.rust-lang.org/reference/tokens.html#string-literals).
     .                                   skip_ascii_whitespace(&mut chars, start, callback);
     .                                   continue;
     .                               }
 4,420 ( 0.00%)                      _ => scan_escape(first_char, &mut chars, mode),
     .                           }
     .                       }
     .                       '\n' => Ok('\n'),
     .                       '\t' => Ok('\t'),
     .                       _ => scan_escape(first_char, &mut chars, mode),
     .                   };
17,173 ( 0.01%)          let end = initial_len - chars.as_str().len();
61,893 ( 0.04%)          callback(start..end, unescaped_char);
     .               }
     .           
     .               fn skip_ascii_whitespace<F>(chars: &mut Chars<'_>, start: usize, callback: &mut F)
     .               where
     .                   F: FnMut(Range<usize>, Result<char, EscapeError>),
     .               {
     .                   let tail = chars.as_str();
     .                   let first_non_space = tail
-- line 322 ----------------------------------------
-- line 344 ----------------------------------------
     .           /// Takes a contents of a string literal (without quotes) and produces a
     .           /// sequence of characters or errors.
     .           /// NOTE: Raw strings do not perform any explicit character escaping, here we
     .           /// only translate CRLF to LF and produce errors on bare CR.
     .           fn unescape_raw_str_or_byte_str<F>(literal_text: &str, mode: Mode, callback: &mut F)
     .           where
     .               F: FnMut(Range<usize>, Result<char, EscapeError>),
     .           {
   340 ( 0.00%)      assert!(mode.in_double_quotes());
     .               let initial_len = literal_text.len();
     .           
     .               let mut chars = literal_text.chars();
     .               while let Some(curr) = chars.next() {
     .                   let start = initial_len - chars.as_str().len() - curr.len_utf8();
     .           
     .                   let result = match curr {
     .                       '\r' => Err(EscapeError::BareCarriageReturnInRawString),
-- line 360 ----------------------------------------
-- line 364 ----------------------------------------
     .                   let end = initial_len - chars.as_str().len();
     .           
     .                   callback(start..end, result);
     .               }
     .           }
     .           
     .           fn byte_from_char(c: char) -> u8 {
     .               let res = c as u32;
 4,420 ( 0.00%)      assert!(res <= u8::MAX as u32, "guaranteed because of Mode::ByteStr");
     .               res as u8
 4,420 ( 0.00%)  }
     .           
     .           fn is_ascii(x: u32) -> bool {
 4,420 ( 0.00%)      x <= 0x7F
     .           }

85,783 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
     42 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
     14 ( 0.00%)          let tcx = self.tcx();
 23,107 ( 0.02%)          DecodeContext {
  2,350 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
     14 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
    250 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
  1,969 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
     42 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  1,317 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
    452 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
  6,653 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  2,741 ( 0.00%)          T::decode(&mut dcx)
  1,680 ( 0.00%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
      .                   let mut dcx = metadata.decoder(self.position.get());
      .                   dcx.lazy_state = LazyState::NodeStart(self.position);
  2,334 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
  8,027 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 19,292 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 19,094 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
    328 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
    656 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 10,866 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
  7,900 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 19,292 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
  2,045 ( 0.00%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
  1,687 ( 0.00%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
    241 ( 0.00%)          let tcx = self.tcx();
      .           
    241 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
    340 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    156 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
  2,169 ( 0.00%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
    785 ( 0.00%)          self.opaque = old_opaque;
    157 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
  4,962 ( 0.00%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     20 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
  8,996 ( 0.01%)          DefIndex::from_u32(d.read_u32())
     40 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
  3,996 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
    999 ( 0.00%)          let cdata = decoder.cdata();
    999 ( 0.00%)          let sess = decoder.sess.unwrap();
  1,998 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
      .                       cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
  4,995 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  1,365 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    195 ( 0.00%)          let local_cdata = decoder.cdata();
    195 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
      6 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
     30 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
     30 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
     60 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  1,560 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
  7,992 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
    999 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
  1,998 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
  2,997 ( 0.00%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
  2,425 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      5 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     10 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
      5 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
  2,997 ( 0.00%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
  3,914 ( 0.00%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
    854 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
    427 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
    423 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
    854 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
  3,996 ( 0.00%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
  8,991 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
    543 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
  9,487 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,844 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    228 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     76 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    380 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    152 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    304 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    228 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    380 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     50 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      4 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     25 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     50 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     50 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
  2,838 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  2,124 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  1,092 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     72 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
  3,636 ( 0.00%)      }
      .           
     18 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
     42 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
     36 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
    640 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
  2,560 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  1,920 ( 0.00%)      }
      .           
  2,184 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  1,303 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  1,248 ( 0.00%)      }
      .           
    162 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  1,066 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
     90 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
     91 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     28 ( 0.00%)          match self.kind(item_id) {
      7 ( 0.00%)              EntryKind::Trait(data) => {
     42 ( 0.00%)                  let data = data.decode((self, sess));
    112 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     14 ( 0.00%)                      data.unsafety,
     14 ( 0.00%)                      data.paren_sugar,
     14 ( 0.00%)                      data.has_auto_impl,
     14 ( 0.00%)                      data.is_marker,
      7 ( 0.00%)                      data.skip_array_during_method_dispatch,
      7 ( 0.00%)                      data.specialization_kind,
     28 ( 0.00%)                      self.def_path_hash(item_id),
      7 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
     63 ( 0.00%)      }
      .           
      9 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
      4 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
      5 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
      4 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
      2 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
     22 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
      4 ( 0.00%)              data.discr,
      6 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
      6 ( 0.00%)                      did: self.local_def_id(index),
     12 ( 0.00%)                      name: self.item_ident(index, sess).name,
     12 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
      1 ( 0.00%)              data.is_non_exhaustive,
      .                   )
      9 ( 0.00%)      }
      .           
     15 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
      4 ( 0.00%)          let kind = self.kind(item_id);
      2 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
      5 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
      .                       self.root
-- line 896 ----------------------------------------
-- line 897 ----------------------------------------
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
      8 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
     14 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
      7 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
     25 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     25 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
-- line 932 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    165 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     40 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
     10 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
     40 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     12 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
    284 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      8 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
    660 ( 0.00%)          match self.kind(id) {
    550 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    324 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
      2 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      .                   self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
-- line 1002 ----------------------------------------
-- line 1006 ----------------------------------------
      .                   self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  1,332 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
    945 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     75 ( 0.00%)          tcx.arena.alloc_from_iter(
     50 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
      .                   let name_to_id = self
      .                       .root
-- line 1048 ----------------------------------------
-- line 1062 ----------------------------------------
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
     16 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
     32 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
     64 ( 0.00%)              for child_index in children.decode((self, sess)) {
  1,392 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
    348 ( 0.00%)                      let kind = self.def_kind(child_index);
    232 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
    464 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
      2 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
-- line 1121 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
     36 ( 0.00%)          match self.kind(id) {
      8 ( 0.00%)              EntryKind::Mod(exports) => {
    420 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,316 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1286 ----------------------------------------
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
      .               }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
      5 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
     60 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
     26 ( 0.00%)                  let vdata = data.decode(self);
     12 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
     30 ( 0.00%)      }
      .           
     12 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
      9 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
      9 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
     30 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    180 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      4 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
      .                   tcx.arena.alloc_from_iter(
-- line 1361 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  1,350 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    150 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
    264 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    164 ( 0.00%)              tcx.arena.alloc_from_iter(
     82 ( 0.00%)                  impls
      .                               .decode(self)
    880 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  1,200 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
      4 ( 0.00%)          let def_key = self.def_key(id);
      5 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
      9 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     50 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    125 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
      6 ( 0.00%)          match self.kind(id) {
      1 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
      .                   let constness = match self.kind(id) {
-- line 1496 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
      5 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
  3,213 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
    918 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  1,690 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
  3,672 ( 0.00%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
    190 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
     95 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
    665 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
    760 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  1,998 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
  1,998 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,635 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
  1,993 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     21 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 11,067 ( 0.01%)                          mut name,
  3,162 ( 0.00%)                          src_hash,
    527 ( 0.00%)                          start_pos,
  1,054 ( 0.00%)                          end_pos,
  2,635 ( 0.00%)                          mut lines,
  2,635 ( 0.00%)                          mut multibyte_chars,
  3,162 ( 0.00%)                          mut non_narrow_chars,
  2,635 ( 0.00%)                          mut normalized_pos,
  3,162 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,054 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
706,956 ( 0.48%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,594 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  9,486 ( 0.01%)                      let local_version = sess.source_map().new_imported_source_file(
  6,851 ( 0.00%)                          name,
  3,689 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,054 ( 0.00%)                          self.cnum,
  2,635 ( 0.00%)                          lines,
  3,162 ( 0.00%)                          multibyte_chars,
  2,635 ( 0.00%)                          non_narrow_chars,
  2,108 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,581 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    300 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     75 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     75 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     25 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    575 ( 0.00%)          CrateMetadata {
     25 ( 0.00%)              blob,
     75 ( 0.00%)              root,
    100 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    100 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    175 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    100 ( 0.00%)              cnum_map,
    125 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    300 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    225 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    125 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    136 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    172 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    699 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
  1,623 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    510 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

 31,703 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
 93,102 ( 0.06%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  2,425 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 12,962 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
183,992 ( 0.13%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 26,532 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 26,532 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
 28,670 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
  5,374 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  3,953 ( 0.00%)          self.hash = hash.hash;
  2,425 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
  1,260 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
      1 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
119,201 ( 0.08%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      9 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 223 ----------------------------------------
      .               fn eq(&self, other: &Rhs) -> bool;
      .           
      .               /// This method tests for `!=`.
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ne(&self, other: &Rhs) -> bool {
    975 ( 0.00%)          !self.eq(other)
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialEq`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics, structural_match)]
      .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// assert_eq!(Ordering::Less, result);
      .           ///
      .           /// let result = 1.cmp(&1);
      .           /// assert_eq!(Ordering::Equal, result);
      .           ///
      .           /// let result = 2.cmp(&1);
      .           /// assert_eq!(Ordering::Greater, result);
      .           /// ```
      2 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[repr(i8)]
      .           pub enum Ordering {
      .               /// An ordering where a compared value is less than another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Less = -1,
      .               /// An ordering where a compared value is equal to another.
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
      .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
      .               ///
      .               /// assert_eq!(result, Ordering::Less);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
      .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      3 ( 0.00%)          match self {
      .                       Equal => f(),
      .                       _ => self,
      .                   }
      .               }
      .           }
      .           
      .           /// A helper struct for reverse ordering.
      .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "ord_max_min", since = "1.21.0")]
      .               #[inline]
      .               #[must_use]
      .               fn max(self, other: Self) -> Self
      .               where
      .                   Self: Sized,
      .               {
 10,896 ( 0.01%)          max_by(self, other, Ord::cmp)
      .               }
      .           
      .               /// Compares and returns the minimum of two values.
      .               ///
      .               /// Returns the first argument if the comparison determines them to be equal.
      .               ///
      .               /// # Examples
      .               ///
-- line 808 ----------------------------------------
-- line 1097 ----------------------------------------
      .               /// let result = 2.0 < 1.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn lt(&self, other: &Rhs) -> bool {
    289 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
      .               }
      .           
      .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn le(&self, other: &Rhs) -> bool {
      .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
      .                   // FIXME: The root cause was fixed upstream in LLVM with:
      .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
      .                   // Revert this workaround once support for LLVM 12 gets dropped.
 18,160 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
      .               }
      .           
      .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .               /// let result = 2.0 > 2.0;
      .               /// assert_eq!(result, false);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn gt(&self, other: &Rhs) -> bool {
 23,910 ( 0.02%)          matches!(self.partial_cmp(other), Some(Greater))
      .               }
      .           
      .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
      .               /// operator.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
      .               /// let result = 2.0 >= 2.0;
      .               /// assert_eq!(result, true);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[default_method_body_is_const]
      .               fn ge(&self, other: &Rhs) -> bool {
      3 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
      .               }
      .           }
      .           
      .           /// Derive macro generating an impl of the trait `PartialOrd`.
      .           #[rustc_builtin_macro]
      .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
      .           #[allow_internal_unstable(core_intrinsics)]
      .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
      .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 15,676 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v1,
      .                   Ordering::Greater => v2,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the minimum value from the specified function.
      .           ///
      .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
      .           ///
      .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
      .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
      .           /// ```
      .           #[inline]
      .           #[must_use]
      .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 17,679 ( 0.01%)      match compare(&v1, &v2) {
      .                   Ordering::Less | Ordering::Equal => v2,
      .                   Ordering::Greater => v1,
      .               }
      .           }
      .           
      .           /// Returns the element that gives the maximum value from the specified function.
      .           ///
      .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
      .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
      .               use crate::hint::unreachable_unchecked;
      .           
      .               macro_rules! partial_eq_impl {
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialEq for $t {
      .                           #[inline]
    235 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
      .                           #[inline]
    776 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl PartialEq for () {
      .                   #[inline]
      .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
      .                   ($($t:ty)*) => ($(
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl PartialOrd for $t {
      .                           #[inline]
      .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
      .                               Some(self.cmp(other))
      .                           }
      .                           #[inline]
651,944 ( 0.45%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
      .                           #[inline]
    390 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
      .                           #[inline]
      .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
      .                           #[inline]
      .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
      .                       }
      .           
      .                       #[stable(feature = "rust1", since = "1.0.0")]
      .                       impl Ord for $t {
      .                           #[inline]
      .                           fn cmp(&self, other: &$t) -> Ordering {
      .                               // The order here is important to generate more optimal assembly.
      .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
230,350 ( 0.16%)                      if *self < *other { Less }
      .                               else if *self == *other { Equal }
      .                               else { Greater }
      .                           }
      .                       }
      .                   )*)
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl Ord for bool {
      .                   #[inline]
      .                   fn cmp(&self, other: &bool) -> Ordering {
      .                       // Casting to i8's and converting the difference to an Ordering generates
      .                       // more optimal assembly.
      .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
  1,172 ( 0.00%)              match (*self as i8) - (*other as i8) {
      .                           -1 => Less,
      .                           0 => Equal,
      .                           1 => Greater,
      .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
      .                           _ => unsafe { unreachable_unchecked() },
      .                       }
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
      .               // & pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
      .               where
      .                   A: PartialEq<B>,
      .               {
      .                   #[inline]
    852 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
 57,798 ( 0.04%)              PartialEq::eq(*self, *other)
  6,641 ( 0.00%)          }
      .                   #[inline]
    510 ( 0.00%)          fn ne(&self, other: &&B) -> bool {
     75 ( 0.00%)              PartialEq::ne(*self, *other)
  1,776 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
      .               where
      .                   A: PartialOrd<B>,
      .               {
      .                   #[inline]
      .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Ord for &A
      .               where
      .                   A: Ord,
      .               {
      .                   #[inline]
      .                   fn cmp(&self, other: &Self) -> Ordering {
      .                       Ord::cmp(*self, *other)
    121 ( 0.00%)          }
      .               }
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized> Eq for &A where A: Eq {}
      .           
      .               // &mut pointers
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

 70,787 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,008,390 ( 0.69%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       13 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   16,060 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  112,552 ( 0.08%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
1,385,945 ( 0.95%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
       22 ( 0.00%)          return wrapping_sub(
      408 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   27,700 ( 0.02%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  150,833 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/cxa_finalize.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  ./string/../sysdeps/x86_64/strcmp.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
39,989,988 (27.37%)  events annotated

