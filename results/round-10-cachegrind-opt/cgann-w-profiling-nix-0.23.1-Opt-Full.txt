--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name nix --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C metadata=df277144fcc51ae0 -C extra-filename=-df277144fcc51ae0 --out-dir /usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps --extern bitflags=/usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps/libbitflags-923cad7af34a271a.rmeta --extern cfg_if=/usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps/libcfg_if-19e7cc0b6f708960.rmeta --extern libc=/usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps/liblibc-0a7e2b6e6f69d29f.rmeta --extern memoffset=/usr/home/liquid/tmp/.tmpCv6lM8/target/release/deps/libmemoffset-49177b1c5b547b08.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-nix-0.23.1-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
32,149,862,490 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
1,238,375,784 ( 3.85%)  ./malloc/malloc.c:_int_free
  988,978,720 ( 3.08%)  ./malloc/malloc.c:_int_malloc
  745,852,159 ( 2.32%)  ./malloc/malloc.c:malloc
  676,431,936 ( 2.10%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  393,389,448 ( 1.22%)  ./malloc/malloc.c:free
  348,713,312 ( 1.08%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  303,778,952 ( 0.94%)  ???:llvm::InstCombinerImpl::run()
  277,480,138 ( 0.86%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
  277,362,727 ( 0.86%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  250,181,822 ( 0.78%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
  222,985,982 ( 0.69%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
  197,376,748 ( 0.61%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
  176,536,963 ( 0.55%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
  167,899,106 ( 0.52%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  167,092,958 ( 0.52%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  164,028,238 ( 0.51%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  154,923,667 ( 0.48%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  151,374,548 ( 0.47%)  ./malloc/malloc.c:malloc_consolidate
  147,887,146 ( 0.46%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
  143,888,905 ( 0.45%)  ???:llvm::MachineInstr::isIdenticalTo(llvm::MachineInstr const&, llvm::MachineInstr::MICheckType) const
  121,977,440 ( 0.38%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  117,328,402 ( 0.36%)  ???:llvm::ValueHandleBase::AddToUseList()
  110,300,933 ( 0.34%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  104,087,703 ( 0.32%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
  103,930,365 ( 0.32%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
  102,139,898 ( 0.32%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  101,407,780 ( 0.32%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   99,478,393 ( 0.31%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
   96,377,962 ( 0.30%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   95,469,459 ( 0.30%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
   92,858,734 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   91,173,476 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
   90,733,174 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   85,062,866 ( 0.26%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
   84,383,365 ( 0.26%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   84,015,596 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   83,447,446 ( 0.26%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   82,355,588 ( 0.26%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   80,968,876 ( 0.25%)  ???:llvm::InstCombinerImpl::SimplifyDemandedUseBits(llvm::Value*, llvm::APInt, llvm::KnownBits&, unsigned int, llvm::Instruction*)
   80,868,817 ( 0.25%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
   80,310,342 ( 0.25%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
   76,843,544 ( 0.24%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
   76,304,666 ( 0.24%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   76,277,019 ( 0.24%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   75,060,805 ( 0.23%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
   74,459,445 ( 0.23%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
   74,217,125 ( 0.23%)  ???:llvm::MD5::final(llvm::MD5::MD5Result&)
   73,734,389 ( 0.23%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
   73,364,168 ( 0.23%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   73,239,846 ( 0.23%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
   72,765,229 ( 0.23%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   70,183,267 ( 0.22%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
   68,844,213 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
   68,394,947 ( 0.21%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
   67,901,193 ( 0.21%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
   67,121,189 ( 0.21%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
   66,753,797 ( 0.21%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
   66,748,449 ( 0.21%)  ???:llvm::BranchFolder::TryTailMergeBlocks(llvm::MachineBasicBlock*, llvm::MachineBasicBlock*, unsigned int)
   65,882,595 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   65,453,500 ( 0.20%)  ./malloc/malloc.c:realloc
   64,966,137 ( 0.20%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
   64,683,245 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   63,203,606 ( 0.20%)  ./malloc/malloc.c:calloc
   61,987,579 ( 0.19%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
   59,969,016 ( 0.19%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
   59,871,920 ( 0.19%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   59,105,776 ( 0.18%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
   58,499,703 ( 0.18%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
   57,794,938 ( 0.18%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
   56,756,200 ( 0.18%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
   56,358,288 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   55,770,922 ( 0.17%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
   55,471,075 ( 0.17%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
   54,495,277 ( 0.17%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
   53,917,136 ( 0.17%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
   53,882,298 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   51,636,634 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   49,254,540 ( 0.15%)  ???:(anonymous namespace)::BitcodeReader::parseModule(unsigned long, bool, llvm::function_ref<llvm::Optional<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > (llvm::StringRef)>)
   48,992,686 ( 0.15%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
   48,831,421 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   47,804,535 ( 0.15%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
   45,404,647 ( 0.14%)  ./malloc/malloc.c:_int_realloc
   44,569,842 ( 0.14%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   44,567,515 ( 0.14%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
   44,258,061 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
   44,042,149 ( 0.14%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
   43,824,954 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   42,629,517 ( 0.13%)  ???:llvm::AttributeList::addAttribute(llvm::LLVMContext&, unsigned int, llvm::Attribute::AttrKind) const
   41,979,941 ( 0.13%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   41,620,203 ( 0.13%)  ???:???
   41,233,525 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
   39,935,631 ( 0.12%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::initializeRPOT()
   39,432,798 ( 0.12%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
   39,082,133 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   38,037,733 ( 0.12%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
   38,010,877 ( 0.12%)  ???:llvm::SCCPInstVisitor::visitPHINode(llvm::PHINode&)
   38,000,400 ( 0.12%)  ???:llvm::DAGTypeLegalizer::run()
   37,898,856 ( 0.12%)  ???:llvm::PopulateLoopsDFS<llvm::BasicBlock, llvm::Loop>::traverse(llvm::BasicBlock*)
   37,618,624 ( 0.12%)  ???:llvm::TryToSimplifyUncondBranchFromEmptyBlock(llvm::BasicBlock*, llvm::DomTreeUpdater*)
   37,558,336 ( 0.12%)  ???:llvm::SelectionDAG::Legalize()
   37,432,021 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   36,807,099 ( 0.11%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
   36,565,726 ( 0.11%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::tryToComputeMassInFunction()
   36,550,747 ( 0.11%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
   36,535,302 ( 0.11%)  ???:llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>::analyze(llvm::DominatorTreeBase<llvm::BasicBlock, false> const&)
   35,862,139 ( 0.11%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
   35,160,629 ( 0.11%)  ???:llvm::BlockFrequencyInfoImplBase::finalizeMetrics()
   35,042,656 ( 0.11%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
   33,833,739 ( 0.11%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
   33,500,759 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   33,430,484 ( 0.10%)  ???:llvm::ReassociatePass::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
   33,334,203 ( 0.10%)  ???:llvm::JumpThreadingPass::processBlock(llvm::BasicBlock*)
   32,859,739 ( 0.10%)  ???:llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::TargetLibraryInfo const*, llvm::DomTreeUpdater*)
   32,787,845 ( 0.10%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   32,676,651 ( 0.10%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
   32,420,419 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
   32,275,465 ( 0.10%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
   32,215,783 ( 0.10%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   32,186,634 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   32,164,730 ( 0.10%)  ???:llvm::Value::~Value()

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
     6,403 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
     6,403 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
    12,806 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
   528,680 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 3,595,024 ( 0.01%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
   317,208 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
   634,416 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    33,633 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 3,231,149 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    17,593 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    13,512 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   330,340 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
   374,289 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
   566,952 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   467,745 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    25,270 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
     4,725 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     4,441 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
     5,068 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   105,736 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   317,208 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   105,736 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
   140,895 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   172,205 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    78,275 ( 0.00%)          self.with_opaque_type_inference(table_owner)
   109,585 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
    13,110 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     6,555 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    44,420 ( 0.00%)          self
    19,665 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
   104,394 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
   152,454 ( 0.00%)              let (value, subst) =
     8,581 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   217,746 ( 0.00%)              f(infcx, value, subst)
         .                   })
   113,685 ( 0.00%)      }
         .           
   706,885 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   291,207 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 4,622,493 ( 0.01%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
   105,736 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
   105,736 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
   752,029 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
     5,845 ( 0.00%)          let InferOk { value, obligations } = self;
    22,490 ( 0.00%)          for obligation in obligations {
         .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
    95,195 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   380,780 ( 0.00%)          self.obligations
    95,195 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
   154,088 ( 0.00%)      }
         .           
   834,072 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
   938,331 ( 0.00%)          t.fold_with(&mut self.freshener())
   938,331 ( 0.00%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     1,866 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     3,732 ( 0.00%)          match *ty.kind() {
       898 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     3,592 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
        35 ( 0.00%)              _ => None,
         .                   }
     3,732 ( 0.00%)      }
         .           
   104,259 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   104,259 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   580,058 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   580,058 ( 0.00%)      }
         .           
    26,544 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    13,272 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    13,272 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     1,792 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
       588 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        35 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
    46,452 ( 0.00%)      }
         .           
   249,111 ( 0.00%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
   997,656 ( 0.00%)          CombineFields {
         .                       infcx: self,
 2,494,140 ( 0.01%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
   249,111 ( 0.00%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
         .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
         .               ///
         .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
         .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
         .               /// obligations. As long as this fulfillment cx is fully drained
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
       136 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
    63,447 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
       153 ( 0.00%)      }
         .           
 1,298,374 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
 3,895,122 ( 0.01%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
   649,187 ( 0.00%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
 2,596,748 ( 0.01%)      }
         .           
 1,846,086 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   167,826 ( 0.00%)              undo_snapshot,
   167,826 ( 0.00%)              region_constraints_snapshot,
   167,826 ( 0.00%)              universe,
   167,826 ( 0.00%)              was_in_snapshot,
   335,652 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
   167,826 ( 0.00%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
 7,220,415 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   481,361 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
   481,361 ( 0.00%)              was_in_snapshot,
   962,722 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
   222,446 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   275,044 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    25,004 ( 0.00%)          let snapshot = self.start_snapshot();
    88,641 ( 0.00%)          let r = f(&snapshot);
   175,028 ( 0.00%)          self.commit_from(snapshot);
   148,910 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 2,831,079 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 3,496,169 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
   578,766 ( 0.00%)          let snapshot = self.start_snapshot();
 1,603,871 ( 0.00%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   590,056 ( 0.00%)          match r {
         .                       Ok(_) => {
 3,233,069 ( 0.01%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
   689,935 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
 3,279,059 ( 0.01%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
   638,898 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   740,669 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
   181,311 ( 0.00%)          let snapshot = self.start_snapshot();
   278,985 ( 0.00%)          let r = f(&snapshot);
   892,747 ( 0.00%)          self.rollback_to("probe", snapshot);
   241,270 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
       387 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
       516 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
        86 ( 0.00%)          let snapshot = self.start_snapshot();
        43 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
        86 ( 0.00%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
       172 ( 0.00%)          let r = f(&snapshot);
       387 ( 0.00%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
       516 ( 0.00%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    52,502 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
   105,004 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    78,753 ( 0.00%)      }
         .           
         .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         .               }
         .           
     1,536 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
     1,152 ( 0.00%)      }
         .           
    84,012 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
    63,009 ( 0.00%)      }
         .           
   250,020 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
   225,018 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
       129 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
        86 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
       215 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       172 ( 0.00%)      }
         .           
    42,024 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
     3,502 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     3,502 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    26,624 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     6,484 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     6,484 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       260 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
       520 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
    31,518 ( 0.00%)      }
         .           
    62,664 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    52,220 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    41,776 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       233 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
       466 ( 0.00%)      }
         .           
   143,880 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   719,400 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   215,820 ( 0.00%)      }
         .           
   126,396 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   494,846 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   189,594 ( 0.00%)      }
         .           
     3,384 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
    18,612 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     1,692 ( 0.00%)          self.tcx.mk_ty_var(vid)
     5,076 ( 0.00%)      }
         .           
         .               pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
         .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
         .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                       origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
         .               }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
     1,050 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
       630 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
       840 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
    45,364 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   859,421 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    90,728 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
   318,560 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
 2,070,640 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   796,400 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
   477,840 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
    37,104 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    55,656 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
    52,744 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    79,116 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    73,635 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   147,270 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       328 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
     2,464 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       656 ( 0.00%)      }
         .           
   521,048 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   287,067 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    19,294 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
   181,728 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
   227,160 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    45,432 ( 0.00%)                              param.name,
    45,432 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
    45,432 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
     4,455 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
       405 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
     3,240 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
   128,334 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
   551,813 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
    85,556 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
    14,672 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
   346,648 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    22,008 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   344,512 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   935,104 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    49,216 ( 0.00%)              assert!(
   147,648 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    49,216 ( 0.00%)          };
         .           
         .                   let region_rels =
    49,216 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
   442,944 ( 0.00%)          let (lexical_region_resolutions, errors) =
 1,181,184 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
   196,864 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    49,216 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
   442,944 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   492,160 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    98,432 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
   147,648 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    98,432 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
   246,080 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
         .               }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
    41,980 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
    32,775 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
   124,545 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
     6,555 ( 0.00%)              .into_infos_and_data();
     6,555 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
    52,440 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
    42,350 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   127,050 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   148,225 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,062,364 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
    83,394 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
   125,091 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
     6,344 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,027,808 ( 0.00%)          if !value.needs_infer() {
   960,937 ( 0.00%)              return value; // Avoid duplicated subst-folding.
         .                   }
   889,214 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 1,196,282 ( 0.00%)          value.fold_with(&mut r)
     7,629 ( 0.00%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
   116,874 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
   518,794 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
   666,292 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    77,916 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    13,248 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
     4,968 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
    28,152 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    11,592 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
     3,064 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     6,128 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     4,596 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 1,735,667 ( 0.01%)          self.universe.get()
   657,272 ( 0.00%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
       866 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
     1,070 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
       866 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
         .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
         .               /// returned.
         .               ///
         .               /// This handles inferences variables within both `param_env` and `substs` by
         .               /// performing the operation on their respective canonical forms.
     7,072 ( 0.00%)      pub fn const_eval_resolve(
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   unevaluated: ty::Unevaluated<'tcx>,
         .                   span: Option<Span>,
         .               ) -> EvalToConstValueResult<'tcx> {
       544 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
         .           
         .                   // Postpone the evaluation of constants whose substs depend on inference
         .                   // variables
         .                   if substs.has_infer_types_or_consts() {
         .                       return Err(ErrorHandled::TooGeneric);
         .                   }
         .           
       544 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
         3 ( 0.00%)          let substs_erased = self.tcx.erase_regions(substs);
         .           
         .                   let unevaluated = ty::Unevaluated {
         .                       def: unevaluated.def,
         .                       substs: substs_erased,
     1,088 ( 0.00%)              promoted: unevaluated.promoted,
         .                   };
         .           
         .                   // The return value is the evaluated value which doesn't contain any reference to inference
         .                   // variables, thus we don't need to substitute back the original values.
     6,528 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
     4,896 ( 0.00%)      }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
10,406,176 ( 0.03%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 5,610,777 ( 0.02%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
 3,060,272 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
    14,884 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
     4,761 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
11,706,948 ( 0.04%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 7,646,713 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
     7,364 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    43,228 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
    43,228 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     6,468 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   446,968 ( 0.00%)          match *ty.kind() {
    99,126 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       254 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
     6,468 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 1,959,789 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
     3,152 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     2,546 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     2,425 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
     1,455 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
     3,940 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
        46 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
       115 ( 0.00%)          match *self {
        23 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
    98,042 ( 0.00%)          match *cause.code() {
    19,047 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    95,235 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

12,733,580 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 36 ----------------------------------------
         .           use rustc_session::parse::ParseSess;
         .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
         .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
         .           use tracing::debug;
         .           
         .           use std::ops::Range;
         .           use std::{cmp, mem, slice};
         .           
   103,500 ( 0.00%)  bitflags::bitflags! {
         .               struct Restrictions: u8 {
         .                   const STMT_EXPR         = 1 << 0;
         .                   const NO_STRUCT_LITERAL = 1 << 1;
         .                   const CONST_EXPR        = 1 << 2;
         .               }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
         .                               $self.bump();
         .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
         .                           }
         .                       }
         .                   }
         .               };
         .           }
         .           
   983,059 ( 0.00%)  #[derive(Clone)]
         .           pub struct Parser<'a> {
    36,763 ( 0.00%)      pub sess: &'a ParseSess,
         .               /// The current token.
    32,488 ( 0.00%)      pub token: Token,
         .               /// The spacing for the current token
    17,204 ( 0.00%)      pub token_spacing: Spacing,
         .               /// The previous token.
    48,732 ( 0.00%)      pub prev_token: Token,
    18,164 ( 0.00%)      pub capture_cfg: bool,
    37,288 ( 0.00%)      restrictions: Restrictions,
    34,408 ( 0.00%)      expected_tokens: Vec<TokenType>,
         .               // Important: This must only be advanced from `next_tok`
         .               // to ensure that `token_cursor.num_next_calls` is updated properly
         .               token_cursor: TokenCursor,
    34,408 ( 0.00%)      desugar_doc_comments: bool,
         .               /// This field is used to keep track of how many left angle brackets we have seen. This is
         .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
         .               /// appropriately.
         .               ///
         .               /// See the comments in the `parse_path_segment` function for more details.
    34,408 ( 0.00%)      unmatched_angle_bracket_count: u32,
    51,612 ( 0.00%)      max_angle_bracket_count: u32,
         .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
         .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
         .               /// error.
    17,204 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
         .               last_unexpected_token_span: Option<Span>,
         .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
         .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
         .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
         .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
         .               subparser_name: Option<&'static str>,
         .               capture_state: CaptureState,
         .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
         .           /// the first macro inner attribute to invoke a proc-macro).
         .           /// When create a `TokenStream`, the inner attributes get inserted
         .           /// into the proper place in the token stream.
         .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
         .           
         .           /// Controls how we capture tokens. Capturing can be expensive,
         .           /// so we try to avoid performing capturing in cases where
         .           /// we will never need an `AttrAnnotatedTokenStream`
    17,204 ( 0.00%)  #[derive(Copy, Clone)]
         .           pub enum Capturing {
         .               /// We aren't performing any capturing - this is the default mode.
         .               No,
         .               /// We are capturing tokens
         .               Yes,
         .           }
         .           
    72,131 ( 0.00%)  #[derive(Clone)]
         .           struct CaptureState {
    68,816 ( 0.00%)      capturing: Capturing,
    17,204 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
         .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
         .           }
         .           
         .           impl<'a> Drop for Parser<'a> {
         .               fn drop(&mut self) {
    96,674 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
         .               }
         .           }
         .           
 1,196,045 ( 0.00%)  #[derive(Clone)]
         .           struct TokenCursor {
         .               frame: TokenCursorFrame,
   271,540 ( 0.00%)      stack: Vec<TokenCursorFrame>,
         .               desugar_doc_comments: bool,
         .               // Counts the number of calls to `next` or `next_desugared`,
         .               // depending on whether `desugar_doc_comments` is set.
    88,956 ( 0.00%)      num_next_calls: usize,
         .               // During parsing, we may sometimes need to 'unglue' a
         .               // glued token into two component tokens
         .               // (e.g. '>>' into '>' and '>), so that the parser
         .               // can consume them one at a time. This process
         .               // bypasses the normal capturing mechanism
         .               // (e.g. `num_next_calls` will not be incremented),
         .               // since the 'unglued' tokens due not exist in
         .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
         .               // in `Option<Vec<u8>>` requires us to unglue
         .               // the trailing `>>` token. The `break_last_token`
         .               // field is used to track this token - it gets
         .               // appended to the captured stream when
         .               // we evaluate a `LazyTokenStream`
         .               break_last_token: bool,
         .           }
         .           
   547,154 ( 0.00%)  #[derive(Clone)]
         .           struct TokenCursorFrame {
   148,103 ( 0.00%)      delim: token::DelimToken,
         .               span: DelimSpan,
         .               open_delim: bool,
   296,206 ( 0.00%)      tree_cursor: tokenstream::Cursor,
         .               close_delim: bool,
         .           }
         .           
         .           impl TokenCursorFrame {
         .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    63,675 ( 0.00%)          TokenCursorFrame {
         .                       delim,
         .                       span,
         .                       open_delim: false,
   250,608 ( 0.00%)              tree_cursor: tts.into_trees(),
         .                       close_delim: false,
         .                   }
         .               }
         .           }
         .           
         .           impl TokenCursor {
20,473,716 ( 0.06%)      fn next(&mut self) -> (Token, Spacing) {
         .                   loop {
10,082,241 ( 0.03%)              let (tree, spacing) = if !self.frame.open_delim {
   223,722 ( 0.00%)                  self.frame.open_delim = true;
 1,118,610 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
19,897,917 ( 0.06%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
         .                           tree
   913,938 ( 0.00%)              } else if !self.frame.close_delim {
   220,745 ( 0.00%)                  self.frame.close_delim = true;
 1,103,725 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   439,996 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 2,859,974 ( 0.01%)                  self.frame = frame;
         .                           continue;
         .                       } else {
   292,068 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
         .                       };
         .           
 3,856,898 ( 0.01%)              match tree {
         .                           TokenTree::Token(token) => {
13,649,144 ( 0.04%)                      return (token, spacing);
         .                           }
         .                           TokenTree::Delimited(sp, delim, tts) => {
         .                               let frame = TokenCursorFrame::new(sp, delim, tts);
         .                               self.stack.push(mem::replace(&mut self.frame, frame));
         .                           }
         .                       }
         .                   }
13,649,144 ( 0.04%)      }
         .           
 8,575,910 ( 0.03%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 2,575,605 ( 0.01%)          let (data, attr_style, sp) = match self.next() {
     4,248 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
         .                           (data, attr_style, span)
         .                       }
 4,280,875 ( 0.01%)              tok => return tok,
         .                   };
         .           
         .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
         .                   // required to wrap the text.
         .                   let mut num_of_hashes = 0;
         .                   let mut count = 0;
   364,994 ( 0.00%)          for ch in data.as_str().chars() {
         .                       count = match ch {
         .                           '"' => 1,
        30 ( 0.00%)                  '#' if count > 0 => count + 1,
         .                           _ => 0,
         .                       };
         .                       num_of_hashes = cmp::max(num_of_hashes, count);
         .                   }
         .           
     5,664 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
     7,080 ( 0.00%)          let body = TokenTree::Delimited(
         .                       delim_span,
         .                       token::Bracket,
    16,992 ( 0.00%)              [
     9,912 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
     5,664 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    11,328 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
         .                       ]
         .                       .iter()
         .                       .cloned()
         .                       .collect::<TokenStream>(),
     1,416 ( 0.00%)          );
         .           
         .                   self.stack.push(mem::replace(
         .                       &mut self.frame,
         .                       TokenCursorFrame::new(
         .                           delim_span,
         .                           token::NoDelim,
     1,416 ( 0.00%)                  if attr_style == AttrStyle::Inner {
         .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect::<TokenStream>()
         .                           } else {
    16,992 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect::<TokenStream>()
         .                           },
         .                       ),
         .                   ));
         .           
     4,248 ( 0.00%)          self.next()
 7,718,319 ( 0.02%)      }
         .           }
         .           
   177,740 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
         .           enum TokenType {
   142,260 ( 0.00%)      Token(TokenKind),
         .               Keyword(Symbol),
         .               Operator,
         .               Lifetime,
         .               Ident,
         .               Path,
         .               Type,
         .               Const,
         .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
         .               /// The separator token.
         .               sep: Option<TokenKind>,
         .               /// `true` if a trailing separator is allowed.
         .               trailing_sep_allowed: bool,
         .           }
         .           
         .           impl SeqSep {
         .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       441 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
         .               }
         .           
         .               fn none() -> SeqSep {
         .                   SeqSep { sep: None, trailing_sep_allowed: false }
         .               }
         .           }
         .           
         .           pub enum FollowedByType {
         .               Yes,
         .               No,
         .           }
         .           
         .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    36,354 ( 0.00%)      Some(match token.kind {
    72,708 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    72,708 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    72,708 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
         .                   token::DocComment(..) => "doc comment",
         .                   _ => return None,
         .               })
         .           }
         .           
   127,239 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    36,354 ( 0.00%)      let token_str = pprust::token_to_string(token);
         .               match token_descr_opt(token) {
         .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
   127,239 ( 0.00%)          _ => format!("`{}`", token_str),
         .               }
    90,885 ( 0.00%)  }
         .           
         .           impl<'a> Parser<'a> {
   178,290 ( 0.00%)      pub fn new(
         .                   sess: &'a ParseSess,
         .                   tokens: TokenStream,
         .                   desugar_doc_comments: bool,
         .                   subparser_name: Option<&'static str>,
         .               ) -> Self {
    12,735 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    25,470 ( 0.00%)          start_frame.open_delim = true;
         .                   start_frame.close_delim = true;
         .           
   394,785 ( 0.00%)          let mut parser = Parser {
         .                       sess,
    12,735 ( 0.00%)              token: Token::dummy(),
         .                       token_spacing: Spacing::Alone,
    12,735 ( 0.00%)              prev_token: Token::dummy(),
         .                       capture_cfg: false,
         .                       restrictions: Restrictions::empty(),
         .                       expected_tokens: Vec::new(),
         .                       token_cursor: TokenCursor {
    76,410 ( 0.00%)                  frame: start_frame,
         .                           stack: Vec::new(),
         .                           num_next_calls: 0,
         .                           desugar_doc_comments,
         .                           break_last_token: false,
         .                       },
         .                       desugar_doc_comments,
         .                       unmatched_angle_bracket_count: 0,
         .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
         .                           capturing: Capturing::No,
         .                           replace_ranges: Vec::new(),
         .                           inner_attr_ranges: Default::default(),
         .                       },
         .                       current_closure: None,
         .                   };
         .           
         .                   // Make parser point to the first token.
    25,470 ( 0.00%)          parser.bump();
         .           
         .                   parser
   114,615 ( 0.00%)      }
         .           
         .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
         .                   loop {
 9,921,330 ( 0.03%)              let (mut next, spacing) = if self.desugar_doc_comments {
 3,423,452 ( 0.01%)                  self.token_cursor.next_desugared()
         .                       } else {
 2,393,076 ( 0.01%)                  self.token_cursor.next()
         .                       };
 6,614,220 ( 0.02%)              self.token_cursor.num_next_calls += 1;
         .                       // We've retrieved an token from the underlying
         .                       // cursor, so we no longer need to worry about
         .                       // an unglued token. See `break_and_eat` for more details
 1,653,555 ( 0.01%)              self.token_cursor.break_last_token = false;
 6,614,220 ( 0.02%)              if next.span.is_dummy() {
         .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    51,256 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
         .                       }
 5,613,486 ( 0.02%)              if matches!(
 3,307,110 ( 0.01%)                  next.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
 6,596,680 ( 0.02%)              return (next, spacing);
         .                   }
         .               }
         .           
         .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
         .                   match self.expect_one_of(&[], &[]) {
         .                       Err(e) => Err(e),
         .                       // We can get `Ok(true)` from `recover_closing_delimiter`
         .                       // which is called in `expected_one_of_not_found`.
         .                       Ok(_) => FatalError.raise(),
         .                   }
         .               }
         .           
         .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
   483,291 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    53,699 ( 0.00%)          if self.expected_tokens.is_empty() {
    36,762 ( 0.00%)              if self.token == *t {
    30,635 ( 0.00%)                  self.bump();
         .                           Ok(false)
         .                       } else {
         .                           self.unexpected_try_recover(t)
         .                       }
         .                   } else {
   570,864 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
         .                   }
   805,485 ( 0.00%)      }
         .           
         .               /// Expect next token to be edible or inedible token.  If edible,
         .               /// then consume it; if inedible, then return without consuming
         .               /// anything.  Signal a fatal error if next token is unexpected.
   682,920 ( 0.00%)      pub fn expect_one_of(
         .                   &mut self,
         .                   edible: &[TokenKind],
         .                   inedible: &[TokenKind],
         .               ) -> PResult<'a, bool /* recovered */> {
   113,820 ( 0.00%)          if edible.contains(&self.token.kind) {
   147,522 ( 0.00%)              self.bump();
         .                       Ok(false)
         .                   } else if inedible.contains(&self.token.kind) {
         .                       // leave it in the input
         .                       Ok(false)
         .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
         .                       FatalError.raise();
         .                   } else {
         .                       self.expected_one_of_not_found(edible, inedible)
         .                   }
   853,650 ( 0.00%)      }
         .           
         .               // Public for rustfmt usage.
         .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   375,581 ( 0.00%)          self.parse_ident_common(true)
         .               }
         .           
         .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   292,104 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
         .                       TokenKind::DocComment(..) => {
         .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
         .                       }
         .                       _ => self.expected_ident_found(),
         .                   })
         .               }
         .           
   666,365 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
    95,195 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
   571,170 ( 0.00%)          if !is_raw && ident.is_reserved() {
         .                       let mut err = self.expected_ident_found();
         .                       if recover {
         .                           err.emit();
         .                       } else {
         .                           return Err(err);
         .                       }
         .                   }
   380,780 ( 0.00%)          self.bump();
         .                   Ok(ident)
   951,950 ( 0.00%)      }
         .           
         .               /// Checks if the next token is `tok`, and returns `true` if so.
         .               ///
         .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
         .               /// encountered.
 7,271,110 ( 0.02%)      fn check(&mut self, tok: &TokenKind) -> bool {
 3,148,595 ( 0.01%)          let is_present = self.token == *tok;
 2,116,766 ( 0.01%)          if !is_present {
 4,367,047 ( 0.01%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
         .                   }
         .                   is_present
 7,271,110 ( 0.02%)      }
         .           
         .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
       316 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 1,484,833 ( 0.00%)          let is_present = self.check(tok);
   980,812 ( 0.00%)          if is_present {
   219,631 ( 0.00%)              self.bump()
         .                   }
         .                   is_present
       395 ( 0.00%)      }
         .           
         .               /// If the next token is the given keyword, returns `true` without eating it.
         .               /// An expectation is also added for diagnostics purposes.
   394,430 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    75,587 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 2,243,170 ( 0.01%)          self.token.is_keyword(kw)
         .               }
         .           
         .               /// If the next token is the given keyword, eats it and returns `true`.
         .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
         .               // Public for rustfmt usage.
   553,230 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   448,236 ( 0.00%)          if self.check_keyword(kw) {
    41,163 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
   553,230 ( 0.00%)      }
         .           
         .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    48,582 ( 0.00%)          if self.token.is_keyword(kw) {
    11,673 ( 0.00%)              self.bump();
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// If the given word is not a keyword, signals an error.
         .               /// If the next token is not the given word, signals an error.
         .               /// Otherwise, eats it.
     6,935 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
         .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     5,548 ( 0.00%)      }
         .           
         .               /// Is the given keyword `kw` followed by a non-reserved identifier?
   345,072 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
   172,536 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
   388,206 ( 0.00%)      }
         .           
   354,510 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   136,634 ( 0.00%)          if ok {
         .                       true
         .                   } else {
    76,392 ( 0.00%)              self.expected_tokens.push(typ);
         .                       false
         .                   }
   354,510 ( 0.00%)      }
         .           
         .               fn check_ident(&mut self) -> bool {
    49,855 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
         .               }
         .           
   156,096 ( 0.00%)      fn check_path(&mut self) -> bool {
   337,473 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   195,120 ( 0.00%)      }
         .           
         .               fn check_type(&mut self) -> bool {
    10,130 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
         .               }
         .           
         .               fn check_const_arg(&mut self) -> bool {
     9,872 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
         .               }
         .           
    62,838 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    34,910 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
         .                       && self.look_ahead(dist + 1, |t| match t.kind {
         .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
         .                           token::OpenDelim(DelimToken::Brace) => true,
         .                           _ => false,
         .                       })
    62,838 ( 0.00%)      }
         .           
         .               /// Checks to see if the next token is either `+` or `+=`.
         .               /// Otherwise returns `false`.
         .               fn check_plus(&mut self) -> bool {
    41,276 ( 0.00%)          self.check_or_expected(
    20,638 ( 0.00%)              self.token.is_like_plus(),
    20,638 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
         .                   )
         .               }
         .           
         .               /// Eats the expected token if it's present possibly breaking
         .               /// compound tokens like multi-character operators in process.
         .               /// Returns `true` if the token was eaten.
   459,804 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   268,219 ( 0.00%)          if self.token.kind == expected {
    10,050 ( 0.00%)              self.bump();
         .                       return true;
         .                   }
   166,460 ( 0.00%)          match self.token.kind.break_two_token_op() {
     1,239 ( 0.00%)              Some((first, second)) if first == expected => {
       684 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
       855 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     1,539 ( 0.00%)                  self.token = Token::new(first, first_span);
         .                           // Keep track of this token - if we end token capturing now,
         .                           // we'll want to append this token to the captured stream.
         .                           //
         .                           // If we consume any additional tokens, then this token
         .                           // is not needed (we'll capture the entire 'glued' token),
         .                           // and `next_tok` will set this field to `None`
       171 ( 0.00%)                  self.token_cursor.break_last_token = true;
         .                           // Use the spacing of the glued token as the spacing
         .                           // of the unglued second token.
     2,394 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
         .                           true
         .                       }
         .                       _ => {
    99,363 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
         .                           false
         .                       }
         .                   }
   477,351 ( 0.00%)      }
         .           
         .               /// Eats `+` possibly breaking tokens like `+=` in process.
         .               fn eat_plus(&mut self) -> bool {
     1,236 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
         .               }
         .           
         .               /// Eats `&` possibly breaking tokens like `&&` in process.
         .               /// Signals an error if `&` is not eaten.
         .               fn expect_and(&mut self) -> PResult<'a, ()> {
     6,804 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `|` possibly breaking tokens like `||` in process.
         .               /// Signals an error if `|` was not eaten.
         .               fn expect_or(&mut self) -> PResult<'a, ()> {
       882 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
    25,726 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   111,392 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
    71,768 ( 0.00%)          if ate {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
     9,624 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    10,853 ( 0.00%)              self.max_angle_bracket_count += 1;
         .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
         .                   }
         .                   ate
    25,726 ( 0.00%)      }
         .           
         .               /// Eats `<` possibly breaking tokens like `<<` in process.
         .               /// Signals an error if `<` was not eaten.
         .               fn expect_lt(&mut self) -> PResult<'a, ()> {
         .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
         .               }
         .           
         .               /// Eats `>` possibly breaking tokens like `>>` in process.
         .               /// Signals an error if `>` was not eaten.
         .               fn expect_gt(&mut self) -> PResult<'a, ()> {
     8,622 ( 0.00%)          if self.break_and_eat(token::Gt) {
         .                       // See doc comment for `unmatched_angle_bracket_count`.
     4,311 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
     2,874 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
         .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
         .                       }
         .                       Ok(())
         .                   } else {
         .                       self.unexpected()
         .                   }
         .               }
         .           
         .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
         .                   kets.iter().any(|k| match expect {
   163,494 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     2,349 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
         .                   })
         .               }
         .           
         .               fn parse_seq_to_before_tokens<T>(
         .                   &mut self,
         .                   kets: &[&TokenKind],
         .                   sep: SeqSep,
         .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
         .                   let mut first = true;
         .                   let mut recovered = false;
         .                   let mut trailing = false;
         .                   let mut v = vec![];
         .                   let unclosed_delims = !self.unclosed_delims.is_empty();
         .           
         .                   while !self.expect_any_with_type(kets, expect) {
   137,535 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
         .                           break;
         .                       }
    88,732 ( 0.00%)              if let Some(ref t) = sep.sep {
   126,840 ( 0.00%)                  if first {
         .                               first = false;
         .                           } else {
    91,664 ( 0.00%)                      match self.expect(t) {
         .                                   Ok(false) => {
         .                                       self.current_closure.take();
         .                                   }
         .                                   Ok(true) => {
         .                                       self.current_closure.take();
         .                                       recovered = true;
         .                                       break;
         .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
         .                                               e.cancel();
         .                                               break;
         .                                           }
         .                                       }
         .                                   }
         .                               }
         .                           }
         .                       }
    52,204 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
         .                           trailing = true;
         .                           break;
         .                       }
         .           
    27,991 ( 0.00%)              let t = f(self)?;
   123,313 ( 0.00%)              v.push(t);
         .                   }
         .           
    62,728 ( 0.00%)          Ok((v, trailing, recovered))
         .               }
         .           
         .               fn recover_missing_braces_around_closure_body(
         .                   &mut self,
         .                   closure_spans: ClosureSpans,
         .                   mut expect_err: DiagnosticBuilder<'_>,
         .               ) -> PResult<'a, ()> {
         .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_seq_to_before_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
    67,642 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
         .               }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
    66,970 ( 0.00%)      fn parse_seq_to_end<T>(
         .                   &mut self,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    38,032 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    24,108 ( 0.00%)          if !recovered {
         .                       self.eat(ket);
         .                   }
    94,134 ( 0.00%)          Ok((val, trailing))
    53,576 ( 0.00%)      }
         .           
         .               /// Parses a sequence, including the closing delimiter. The function
         .               /// `f` must consume tokens until reaching the next separator or
         .               /// closing bracket.
         .               fn parse_unspanned_seq<T>(
         .                   &mut self,
         .                   bra: &TokenKind,
         .                   ket: &TokenKind,
         .                   sep: SeqSep,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
    33,268 ( 0.00%)          self.expect(bra)?;
    53,576 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
         .               }
         .           
         .               fn parse_delim_comma_seq<T>(
         .                   &mut self,
         .                   delim: DelimToken,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_unspanned_seq(
    15,078 ( 0.00%)              &token::OpenDelim(delim),
    23,537 ( 0.00%)              &token::CloseDelim(delim),
         .                       SeqSep::trailing_allowed(token::Comma),
         .                       f,
         .                   )
         .               }
         .           
         .               fn parse_paren_comma_seq<T>(
         .                   &mut self,
         .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
         .               ) -> PResult<'a, (Vec<T>, bool)> {
         .                   self.parse_delim_comma_seq(token::Paren, f)
         .               }
         .           
         .               /// Advance the parser by one token using provided token as the next one.
21,441,433 ( 0.07%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
         .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 9,896,046 ( 0.03%)          if self.prev_token.kind == TokenKind::Eof {
         .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
         .                       self.span_bug(self.token.span, msg);
         .                   }
         .           
         .                   // Update the current and previous tokens.
 6,597,364 ( 0.02%)          self.prev_token = mem::replace(&mut self.token, next_token);
 1,649,341 ( 0.01%)          self.token_spacing = next_spacing;
         .           
         .                   // Diagnostics.
 1,649,341 ( 0.01%)          self.expected_tokens.clear();
         .               }
         .           
         .               /// Advance the parser by one token.
13,193,360 ( 0.04%)      pub fn bump(&mut self) {
 6,596,680 ( 0.02%)          let next_token = self.next_tok(self.token.span);
 9,895,020 ( 0.03%)          self.bump_with(next_token);
13,193,360 ( 0.04%)      }
         .           
         .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
         .               /// When `dist == 0` then the current token is looked at.
       352 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    30,828 ( 0.00%)          if dist == 0 {
    11,062 ( 0.00%)              return looker(&self.token);
         .                   }
         .           
   130,931 ( 0.00%)          let frame = &self.token_cursor.frame;
   139,596 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
         .                       let all_normal = (0..dist).all(|i| {
   362,766 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
   476,554 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
         .                       });
         .                       if all_normal {
   590,251 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   206,035 ( 0.00%)                      Some(tree) => match tree {
    93,831 ( 0.00%)                          TokenTree::Token(token) => looker(token),
         .                                   TokenTree::Delimited(dspan, delim, _) => {
    63,343 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
         .                                   }
         .                               },
   105,294 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
         .                           };
         .                       }
         .                   }
         .           
         .                   let mut cursor = self.token_cursor.clone();
         .                   let mut i = 0;
    23,531 ( 0.00%)          let mut token = Token::dummy();
     1,825 ( 0.00%)          while i < dist {
   168,736 ( 0.00%)              token = cursor.next().0;
    77,256 ( 0.00%)              if matches!(
    48,146 ( 0.00%)                  token.kind,
         .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
         .                       ) {
         .                           continue;
         .                       }
       875 ( 0.00%)              i += 1;
         .                   }
     3,356 ( 0.00%)          return looker(&token);
       396 ( 0.00%)      }
         .           
         .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
   126,351 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    35,764 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
   126,351 ( 0.00%)      }
         .           
         .               /// Parses asyncness: `async` or nothing.
         .               fn parse_asyncness(&mut self) -> Async {
         .                   if self.eat_keyword(kw::Async) {
         .                       let span = self.prev_token.uninterpolated_span();
         .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
         .                   } else {
         .                       Async::No
         .                   }
         .               }
         .           
         .               /// Parses unsafety: `unsafe` or nothing.
     9,890 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
         .                   if self.eat_keyword(kw::Unsafe) {
       445 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Unsafe::No
         .                   }
    39,560 ( 0.00%)      }
         .           
         .               /// Parses constness: `const` or nothing.
   145,344 ( 0.00%)      fn parse_constness(&mut self) -> Const {
         .                   // Avoid const blocks to be parsed as const items
    45,833 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
         .                       && self.eat_keyword(kw::Const)
         .                   {
    11,610 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
         .                   } else {
         .                       Const::No
         .                   }
   254,352 ( 0.00%)      }
         .           
         .               /// Parses inline const expressions.
         .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
         .                   if pat {
         .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
         .                   } else {
         .                       self.sess.gated_spans.gate(sym::inline_const, span);
         .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
         .                       id: DUMMY_NODE_ID,
         .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
         .                   };
         .                   let blk_span = anon_const.value.span;
         .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
         .               }
         .           
         .               /// Parses mutability (`mut` or nothing).
       128 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
         .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
     2,460 ( 0.00%)      }
         .           
         .               /// Possibly parses mutability (`const` or `mut`).
     2,244 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
         .                   if self.eat_keyword(kw::Mut) {
         .                       Some(Mutability::Mut)
         .                   } else if self.eat_keyword(kw::Const) {
         .                       Some(Mutability::Not)
         .                   } else {
         .                       None
         .                   }
     2,244 ( 0.00%)      }
         .           
         .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     2,600 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
         .                   {
         .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
         .                       self.bump();
         .                       Ok(Ident::new(symbol, self.prev_token.span))
         .                   } else {
     3,900 ( 0.00%)              self.parse_ident_common(true)
         .                   }
         .               }
         .           
         .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    11,817 ( 0.00%)          self.parse_mac_args_common(true).map(P)
         .               }
         .           
         .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    37,809 ( 0.00%)          self.parse_mac_args_common(false)
         .               }
         .           
   149,751 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   133,112 ( 0.00%)          Ok(
   114,815 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    23,721 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    23,709 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
         .                       {
    47,280 ( 0.00%)                  match self.parse_token_tree() {
    59,100 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
         .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
         .                               {
    23,640 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
         .                               }
         .                               _ => unreachable!(),
         .                           }
     9,638 ( 0.00%)              } else if !delimited_only {
         .                           if self.eat(&token::Eq) {
     1,586 ( 0.00%)                      let eq_span = self.prev_token.span;
         .           
         .                               // Collect tokens because they are used during lowering to HIR.
     1,586 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     1,586 ( 0.00%)                      let span = expr.span;
         .           
     7,930 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    14,274 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
         .                           } else {
         .                               MacArgs::Empty
         .                           }
         .                       } else {
         .                           return self.unexpected();
         .                       },
         .                   )
   116,473 ( 0.00%)      }
         .           
         .               fn parse_or_use_outer_attributes(
         .                   &mut self,
         .                   already_parsed_attrs: Option<AttrWrapper>,
         .               ) -> PResult<'a, AttrWrapper> {
   100,569 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
         .                       Ok(attrs)
         .                   } else {
    53,446 ( 0.00%)              self.parse_outer_attributes()
         .                   }
         .               }
         .           
         .               /// Parses a single token tree from the input.
 1,978,352 ( 0.01%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
 1,501,142 ( 0.00%)          match self.token.kind {
         .                       token::OpenDelim(..) => {
         .                           let depth = self.token_cursor.stack.len();
         .           
         .                           // We keep advancing the token cursor until we hit
         .                           // the matching `CloseDelim` token.
 2,570,430 ( 0.01%)                  while !(depth == self.token_cursor.stack.len()
         .                               && matches!(self.token.kind, token::CloseDelim(_)))
         .                           {
         .                               // Advance one token at a time, so `TokenCursor::next()`
         .                               // can capture these tokens if necessary.
 1,851,370 ( 0.01%)                      self.bump();
         .                           }
         .                           // We are still inside the frame corresponding
         .                           // to the delimited stream we captured, so grab
         .                           // the tokens from this frame.
         .                           let frame = &self.token_cursor.frame;
   114,958 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   114,958 ( 0.00%)                  let span = frame.span;
    57,479 ( 0.00%)                  let delim = frame.delim;
         .                           // Consume close delimiter
   114,958 ( 0.00%)                  self.bump();
   287,395 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
         .                       }
         .                       token::CloseDelim(_) | token::Eof => unreachable!(),
         .                       _ => {
   379,630 ( 0.00%)                  self.bump();
   949,075 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
         .                       }
         .                   }
 1,731,058 ( 0.01%)      }
         .           
         .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
         .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
         .                   let mut tts = Vec::new();
         .                   while self.token != token::Eof {
         .                       tts.push(self.parse_token_tree());
         .                   }
         .                   Ok(tts)
         .               }
         .           
        80 ( 0.00%)      pub fn parse_tokens(&mut self) -> TokenStream {
         .                   let mut result = Vec::new();
         .                   loop {
       145 ( 0.00%)              match self.token.kind {
         .                           token::Eof | token::CloseDelim(..) => break,
        45 ( 0.00%)                  _ => result.push(self.parse_token_tree().into()),
         .                       }
         .                   }
        60 ( 0.00%)          TokenStream::new(result)
        80 ( 0.00%)      }
         .           
         .               /// Evaluates the closure with restrictions in place.
         .               ///
         .               /// Afters the closure is evaluated, restrictions are reset.
         .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    39,005 ( 0.00%)          let old = self.restrictions;
    52,930 ( 0.00%)          self.restrictions = res;
         .                   let res = f(self);
    49,360 ( 0.00%)          self.restrictions = old;
         .                   res
         .               }
         .           
   203,000 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   126,875 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   228,375 ( 0.00%)      }
         .           
         .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
         .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
         .               /// If the following element can't be a tuple (i.e., it's a function definition), then
         .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
         .               /// so emit a proper diagnostic.
         .               // Public for rustfmt usage.
   207,610 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    52,130 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
         .           
    19,768 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    79,072 ( 0.00%)          if self.is_crate_vis() {
         .                       self.bump(); // `crate`
         .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
         .                       return Ok(Visibility {
         .                           span: self.prev_token.span,
         .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
         .                           tokens: None,
         .                       });
         .                   }
         .           
         .                   if !self.eat_keyword(kw::Pub) {
         .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
         .                       // keyword to grab a span from for inherited visibility; an empty span at the
         .                       // beginning of the current token would seem to be the "Schelling span".
    17,257 ( 0.00%)              return Ok(Visibility {
    51,771 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
         .                           kind: VisibilityKind::Inherited,
         .                           tokens: None,
         .                       });
         .                   }
     2,511 ( 0.00%)          let lo = self.prev_token.span;
         .           
    12,555 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
         .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
         .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
         .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
         .                       // by the following tokens.
        72 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
         .                       // account for `pub(crate::foo)`
         .                       {
         .                           // Parse `pub(crate)`.
        24 ( 0.00%)                  self.bump(); // `(`
        16 ( 0.00%)                  self.bump(); // `crate`
        24 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
         8 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
         .                           return Ok(Visibility {
        24 ( 0.00%)                      span: lo.to(self.prev_token.span),
         .                               kind: vis,
         .                               tokens: None,
         .                           });
         .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
         .                           // Parse `pub(in path)`.
         .                           self.bump(); // `(`
         .                           self.bump(); // `in`
         .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       } else if let FollowedByType::No = fbt {
         .                           // Provide this diagnostic if a type cannot follow;
         .                           // in particular, if this is not a tuple struct.
         .                           self.recover_incorrect_vis_restriction()?;
         .                           // Emit diagnostic, but continue with public visibility.
         .                       }
         .                   }
         .           
     7,509 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   186,849 ( 0.00%)      }
         .           
         .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
         .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
         .                   self.bump(); // `(`
         .                   let path = self.parse_path(PathStyle::Mod)?;
         .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
         .           
         .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
         .                       )
         .                       .emit();
         .           
         .                   Ok(())
         .               }
         .           
         .               /// Parses `extern string_literal?`.
         .               fn parse_extern(&mut self) -> Extern {
     3,661 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
         .               }
         .           
         .               /// Parses a string literal as an ABI spec.
       190 ( 0.00%)      fn parse_abi(&mut self) -> Option<StrLit> {
         .                   match self.parse_str_lit() {
        12 ( 0.00%)              Ok(str_lit) => Some(str_lit),
         .                       Err(Some(lit)) => match lit.kind {
         .                           ast::LitKind::Err(_) => None,
         .                           _ => {
         .                               self.struct_span_err(lit.span, "non-string ABI literal")
         .                                   .span_suggestion(
         .                                       lit.span,
         .                                       "specify the ABI with a string literal",
         .                                       "\"C\"".to_string(),
-- line 1392 ----------------------------------------
-- line 1393 ----------------------------------------
         .                                       Applicability::MaybeIncorrect,
         .                                   )
         .                                   .emit();
         .                               None
         .                           }
         .                       },
         .                       Err(None) => None,
         .                   }
       152 ( 0.00%)      }
         .           
    36,390 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
         .                   &mut self,
         .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
         .               ) -> PResult<'a, R> {
         .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
         .                   // `ForceCollect::Yes`
         .                   self.collect_tokens_trailing_token(
         .                       AttrWrapper::empty(),
         .                       ForceCollect::Yes,
     4,213 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
         .                   )
    36,390 ( 0.00%)      }
         .           
         .               /// `::{` or `::*`
   704,728 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   352,364 ( 0.00%)          self.check(&token::ModSep)
         .                       && self.look_ahead(1, |t| {
   224,291 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
         .                       })
   684,936 ( 0.00%)      }
         .           
         .               pub fn clear_expected_tokens(&mut self) {
         .                   self.expected_tokens.clear();
         .               }
         .           }
         .           
         .           crate fn make_unclosed_delims_error(
         .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
         .                   err.span_label(sp, "closing delimiter possibly meant for this");
         .               }
         .               if let Some(sp) = unmatched.unclosed_span {
         .                   err.span_label(sp, "unclosed delimiter");
         .               }
         .               Some(err)
         .           }
         .           
   239,512 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   119,756 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
         .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   119,756 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
         .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
         .                       e.emit();
         .                   }
         .               }
   239,512 ( 0.00%)  }
         .           
         .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
         .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
         .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
         .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
         .           /// `AttrAnnotatedTokenTree::Delimited` tokens
    43,774 ( 0.00%)  #[derive(Debug, Clone)]
         .           pub enum FlatToken {
         .               /// A token - this holds both delimiter (e.g. '{' and '}')
         .               /// and non-delimiter tokens
         .               Token(Token),
         .               /// Holds the `AttributesData` for an AST node. The
         .               /// `AttributesData` is inserted directly into the
         .               /// constructed `AttrAnnotatedTokenStream` as
         .               /// an `AttrAnnotatedTokenTree::Attributes`
-- line 1481 ----------------------------------------

 7,173,075 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir                  

-- line 90 ----------------------------------------
         .           use std::collections::hash_map::Entry::{Occupied, Vacant};
         .           use std::mem;
         .           use std::ops::{Deref, DerefMut};
         .           
         .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
         .           
         .           /// Either a sequence of token trees or a single one. This is used as the representation of the
         .           /// sequence of tokens that make up a matcher.
 3,203,177 ( 0.01%)  #[derive(Clone)]
         .           enum TokenTreeOrTokenTreeSlice<'tt> {
    47,511 ( 0.00%)      Tt(TokenTree),
   687,326 ( 0.00%)      TtSeq(&'tt [TokenTree]),
         .           }
         .           
         .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
         .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
         .               /// will not recursively descend into subtrees).
         .               fn len(&self) -> usize {
 6,364,239 ( 0.02%)          match *self {
   252,158 ( 0.00%)              TtSeq(ref v) => v.len(),
         .                       Tt(ref tt) => tt.len(),
         .                   }
         .               }
         .           
         .               /// The `index`-th token tree of `self`.
         .               fn get_tt(&self, index: usize) -> TokenTree {
 1,125,608 ( 0.00%)          match *self {
   359,896 ( 0.00%)              TtSeq(ref v) => v[index].clone(),
 3,149,584 ( 0.01%)              Tt(ref tt) => tt.get_tt(index),
         .                   }
         .               }
         .           }
         .           
         .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
         .           ///
         .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
         .           /// descended into.
   439,438 ( 0.00%)  #[derive(Clone)]
         .           struct MatcherTtFrame<'tt> {
         .               /// The "parent" matcher that we are descending into.
         .               elts: TokenTreeOrTokenTreeSlice<'tt>,
         .               /// The position of the "dot" in `elts` at the time we descended.
   219,719 ( 0.00%)      idx: usize,
         .           }
         .           
         .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
         .           
         .           /// Represents a single "position" (aka "matcher position", aka "item"), as
         .           /// described in the module documentation.
         .           ///
         .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
         .           ///   position refers to.
         .           ///
         .           /// It is important to distinguish these two lifetimes because we have a
         .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
         .           /// that is considered to possibly access the data from its elements (it lacks
         .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
         .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
         .           /// lifetime. By separating `'tt` from `'root`, we can show that.
14,247,016 ( 0.04%)  #[derive(Clone)]
         .           struct MatcherPos<'root, 'tt> {
         .               /// The token or sequence of tokens that make up the matcher
         .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
         .           
         .               /// The position of the "dot" in this matcher
   303,128 ( 0.00%)      idx: usize,
         .           
         .               /// For each named metavar in the matcher, we keep track of token trees matched against the
         .               /// metavar by the black box parser. In particular, there may be more than one match per
         .               /// metavar if we are in a repetition (each repetition matches each of the variables).
         .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
         .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
         .               /// the current position of the `self` matcher position in the shared `matches` list.
         .               ///
         .               /// Also, note that while we are descending into a sequence, matchers are given their own
         .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
         .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
         .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
         .               /// wants the shared `matches`, one should use `up.matches`.
 1,212,512 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
         .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
         .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
         .               /// to `matches[match_lo]`.
   303,128 ( 0.00%)      match_lo: usize,
         .               /// The position in `matches` corresponding to the metavar we are currently trying to match
         .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
         .               match_cur: usize,
         .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
         .               /// in this matcher.
   303,128 ( 0.00%)      match_hi: usize,
         .           
         .               // The following fields are used if we are matching a repetition. If we aren't, they should be
         .               // `None`.
         .               /// The KleeneOp of this sequence if we are in a repetition.
   303,128 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
         .           
         .               /// The separator if we are in a repetition.
         .               sep: Option<Token>,
         .           
         .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
         .               /// before we enter the sequence.
   606,256 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
         .           
         .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
         .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
         .               /// comment...
         .               ///
         .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
         .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
         .               /// that where the bottom of the stack is the outermost matcher.
         .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
         .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
         .           }
         .           
         .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
         .               /// Adds `m` as a named match for the `idx`-th metavar.
         .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
 2,240,624 ( 0.01%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
         .                   matches.push(m);
         .               }
         .           }
         .           
         .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
         .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
         .           // on the stack is also slow, because MatcherPos is quite a large type and
         .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
         .           // and this type is used to encapsulate both cases.
         .           enum MatcherPosHandle<'root, 'tt> {
         .               Ref(&'root mut MatcherPos<'root, 'tt>),
         .               Box(Box<MatcherPos<'root, 'tt>>),
         .           }
         .           
         .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
         .               // This always produces a new Box.
 1,212,512 ( 0.00%)      fn clone(&self) -> Self {
   606,256 ( 0.00%)          MatcherPosHandle::Box(match *self {
   332,388 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
         .                       MatcherPosHandle::Box(ref b) => b.clone(),
         .                   })
 1,818,768 ( 0.01%)      }
         .           }
         .           
         .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
         .               type Target = MatcherPos<'root, 'tt>;
         .               fn deref(&self) -> &Self::Target {
         .                   match *self {
         .                       MatcherPosHandle::Ref(ref r) => r,
         .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
         .           
         .           /// A `ParseResult` where the `Success` variant contains a mapping of
         .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
         .           /// of metavars to the token trees they bind to.
         .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
         .           
         .           /// Count how many metavars are named in the given matcher `ms`.
         .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
   594,820 ( 0.00%)      ms.iter().fold(0, |count, elt| {
   297,410 ( 0.00%)          count
   892,230 ( 0.00%)              + match *elt {
    78,338 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
    16,370 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
         .                           TokenTree::MetaVar(..) => 0,
         .                           TokenTree::MetaVarDecl(..) => 1,
         .                           TokenTree::Token(..) => 0,
         .                       }
   743,525 ( 0.00%)      })
         .           }
         .           
         .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
         .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
    98,554 ( 0.00%)      if len == 0 {
         .                   vec![]
         .               } else {
         .                   let empty_matches = Lrc::new(SmallVec::new());
         .                   vec![empty_matches; len]
         .               }
         .               .into_boxed_slice()
         .           }
         .           
         .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
         .           /// matcher `ms`.
         .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
         .               let match_idx_hi = count_names(ms);
         .               let matches = create_matches(match_idx_hi);
   234,015 ( 0.00%)      MatcherPos {
         .                   // Start with the top level matcher given to us
         .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
         .                   // The "dot" is before the first token of the matcher
         .                   idx: 0,
         .           
         .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
         .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
         .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
         .           /// particular token tree.
         .           ///
         .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
         .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
         .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
         .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
         .           /// only on the nesting depth of `ast::TTSeq`s in the originating
         .           /// token tree it was derived from.
   294,686 ( 0.00%)  #[derive(Debug, Clone)]
         .           crate enum NamedMatch {
         .               MatchedSeq(Lrc<NamedMatchVec>),
         .               MatchedNonterminal(Lrc<Nonterminal>),
         .           }
         .           
         .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
         .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
         .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
         .               sess: &ParseSess,
         .               ms: &[TokenTree],
         .               mut res: I,
         .           ) -> NamedParseResult {
         .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
         .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
         .               // binding, then there is an error. If it does, then we insert the binding into the
         .               // `NamedParseResult`.
   543,114 ( 0.00%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
         .                   sess: &ParseSess,
         .                   m: &TokenTree,
         .                   res: &mut I,
         .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
         .               ) -> Result<(), (rustc_span::Span, String)> {
   276,338 ( 0.00%)          match *m {
         .                       TokenTree::Sequence(_, ref seq) => {
    10,872 ( 0.00%)                  for next_m in &seq.tts {
   101,976 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
         .                           }
         .                       }
         .                       TokenTree::Delimited(_, ref delim) => {
     6,773 ( 0.00%)                  for next_m in &delim.tts {
    58,680 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
         .                           }
         .                       }
         .                       TokenTree::MetaVarDecl(span, _, None) => {
         .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
         .                               return Err((span, "missing fragment specifier".to_string()));
         .                           }
         .                       }
    88,404 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
    58,936 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
         .                       {
         .                           Vacant(spot) => {
         .                               spot.insert(res.next().unwrap());
         .                           }
         .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
         .                       },
         .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
         .                   }
         .           
    49,374 ( 0.00%)          Ok(())
   394,992 ( 0.00%)      }
         .           
         .               let mut ret_val = FxHashMap::default();
         .               for m in ms {
   197,469 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
         .                       Ok(_) => {}
         .                       Err((sp, msg)) => return Error(sp, msg),
         .                   }
         .               }
         .           
    30,447 ( 0.00%)      Success(ret_val)
         .           }
         .           
         .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
         .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
 1,780,433 ( 0.01%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
    31,336 ( 0.00%)          ident1.name == ident2.name && is_raw1 == is_raw2
 2,289,959 ( 0.01%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
         .                   ident1.name == ident2.name
         .               } else {
   981,242 ( 0.00%)          t1.kind == t2.kind
         .               }
         .           }
         .           
         .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
         .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
         .           ///
         .           /// For more info about the how this happens, see the module-level doc comments and the inline
         .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
         .               sess: &ParseSess,
         .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
         .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
         .               token: &Token,
         .           ) -> ParseResult<()> {
         .               // Pop items from `cur_items` until it is empty.
 3,892,680 ( 0.01%)      while let Some(mut item) = cur_items.pop() {
         .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
         .                   // delimited submatcher into which we already descended. In backtracking out again, we need
         .                   // to advance the "dot" past the delimiters in the outer matcher.
12,319,452 ( 0.04%)          while item.idx >= item.top_elts.len() {
    48,176 ( 0.00%)              match item.stack.pop() {
         .                           Some(MatcherTtFrame { elts, idx }) => {
   216,792 ( 0.00%)                      item.top_elts = elts;
    96,352 ( 0.00%)                      item.idx = idx + 1;
         .                           }
         .                           None => break,
         .                       }
         .                   }
         .           
         .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
         .                   // the matcher (`len`).
         .                   let idx = item.idx;
         .                   let len = item.top_elts.len();
         .           
         .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
 2,282,863 ( 0.01%)          if idx >= len {
         .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
         .                       // then we could be at the end of a sequence or at the beginning of the next
         .                       // repetition.
   297,266 ( 0.00%)              if item.up.is_some() {
         .                           // At this point, regardless of whether there is a separator, we should add all
         .                           // matches from the complete repetition of the sequence to the shared, top-level
         .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
         .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
         .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
         .                           // matcher is also advanced sufficiently.
         .                           //
         .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   507,710 ( 0.00%)                  if idx == len {
         .                               // Get the `up` matcher
         .                               let mut new_pos = item.up.clone().unwrap();
         .           
         .                               // Add matches from this repetition to the `matches` of `up`
   507,484 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
 1,318,680 ( 0.00%)                          let sub = item.matches[idx].clone();
   791,208 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
         .                               }
         .           
         .                               // Move the "dot" past the repetition in `up`
   507,394 ( 0.00%)                      new_pos.match_cur = item.match_hi;
 1,522,452 ( 0.00%)                      new_pos.idx += 1;
         .                               cur_items.push(new_pos);
         .                           }
         .           
         .                           // Check if we need a separator.
   253,742 ( 0.00%)                  if idx == len && item.sep.is_some() {
         .                               // We have a separator, and it is the current token. We can advance past the
         .                               // separator token.
       378 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
       791 ( 0.00%)                          item.idx += 1;
         .                                   next_items.push(item);
         .                               }
         .                           }
         .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
         .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
   253,666 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   507,310 ( 0.00%)                      item.match_cur = item.match_lo;
 1,014,620 ( 0.00%)                      item.idx = 0;
         .                               cur_items.push(item);
         .                           }
         .                       }
         .                       // If we are not in a repetition, then being at the end of a matcher means that we have
         .                       // reached the potential end of the input.
         .                       else {
         .                           eof_items.push(item);
         .                       }
         .                   }
         .                   // We are in the middle of a matcher.
         .                   else {
         .                       // Look at what token in the matcher we are trying to match the current token (`token`)
         .                       // against. Depending on that, we may generate new items.
 6,266,112 ( 0.02%)              match item.top_elts.get_tt(idx) {
         .                           // Need to descend into a sequence
   115,040 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
         .                               // Examine the case where there are 0 matches of this sequence. We are
         .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
         .                               // result in a "no rules expected token" error by virtue of this matcher not
         .                               // working.
    51,976 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
         .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
         .                               {
    51,640 ( 0.00%)                          let mut new_item = item.clone();
   103,280 ( 0.00%)                          new_item.match_cur += seq.num_captures;
   129,100 ( 0.00%)                          new_item.idx += 1;
   154,920 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
    90,702 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
         .                                   }
         .                                   cur_items.push(new_item);
         .                               }
         .           
    25,988 ( 0.00%)                      let matches = create_matches(item.matches.len());
   311,856 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    25,988 ( 0.00%)                          stack: smallvec![],
         .                                   sep: seq.separator.clone(),
    25,988 ( 0.00%)                          seq_op: Some(seq.kleene.op),
         .                                   idx: 0,
   129,940 ( 0.00%)                          matches,
    51,976 ( 0.00%)                          match_lo: item.match_cur,
         .                                   match_cur: item.match_cur,
    51,976 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
         .                                   up: Some(item),
   181,916 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
         .                               })));
         .                           }
         .           
         .                           // We need to match a metavar (but the identifier is invalid)... this is an error
         .                           TokenTree::MetaVarDecl(span, _, None) => {
         .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
         .                                   return Error(span, "missing fragment specifier".to_string());
         .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
         .                           // We need to match a metavar with a valid ident... call out to the black-box
         .                           // parser by adding an item to `bb_items`.
         .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
         .                               // Built-in nonterminals never start with these tokens, so we can eliminate
         .                               // them from consideration.
         .                               //
         .                               // We use the span of the metavariable declaration to determine any
         .                               // edition-specific matching behavior for non-terminals.
 1,418,375 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
         .                                   bb_items.push(item);
         .                               }
         .                           }
         .           
         .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
         .                           // push the current matcher onto a stack and push a new item containing the
         .                           // submatcher onto `cur_items`.
         .                           //
         .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
         .                           // we pop the stack to backtrack out of the descent.
   129,035 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
         .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
         .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
    25,807 ( 0.00%)                      let idx = item.idx;
   180,649 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
   103,228 ( 0.00%)                      item.idx = 0;
         .                               cur_items.push(item);
         .                           }
         .           
         .                           // We just matched a normal token. We can just advance the parser.
 1,185,226 ( 0.00%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
   743,806 ( 0.00%)                      item.idx += 1;
         .                               next_items.push(item);
         .                           }
         .           
         .                           // There was another token that was not `token`... This means we can't add any
         .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
         .                           // `cur_items` end up doing this. There may still be some other matchers that do
         .                           // end up working out.
         .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
         .                       }
 3,590,919 ( 0.01%)          }
 1,300,194 ( 0.00%)      }
         .           
         .               // Yay a successful parse (so far)!
         .               Success(())
         .           }
         .           
         .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
         .           /// stream from the given `parser` against it and return the match.
   156,010 ( 0.00%)  pub(super) fn parse_tt(
         .               parser: &mut Cow<'_, Parser<'_>>,
         .               ms: &[TokenTree],
         .               macro_name: Ident,
         .           ) -> NamedParseResult {
         .               // A queue of possible matcher positions. We initialize it with the matcher position in which
         .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
         .               // processes all of these possible matcher positions and produces possible next positions into
         .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
         .               // and we start over again.
         .               //
         .               // This MatcherPos instance is allocated on the stack. All others -- and
         .               // there are frequently *no* others! -- are allocated on the heap.
         .               let mut initial = initial_matcher_pos(ms);
    78,005 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
         .               let mut next_items = Vec::new();
         .           
         .               loop {
         .                   // Matcher positions black-box parsed by parser.rs (`parser`)
         .                   let mut bb_items = SmallVec::new();
         .           
         .                   // Matcher positions that would be valid if the macro invocation was over now
         .                   let mut eof_items = SmallVec::new();
   388,059 ( 0.00%)          assert!(next_items.is_empty());
         .           
         .                   // Process `cur_items` until either we have finished the input or we need to get some
         .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
         .                   // bunch of possible next matcher positions in `next_items`.
         .                   match inner_parse_loop(
         .                       parser.sess,
         .                       &mut cur_items,
         .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
         .                   ) {
         .                       Success(_) => {}
         .                       Failure(token, msg) => return Failure(token, msg),
         .                       Error(sp, msg) => return Error(sp, msg),
         .                       ErrorReported => return ErrorReported,
         .                   }
         .           
         .                   // inner parse loop handled all cur_items, so it's empty
   388,059 ( 0.00%)          assert!(cur_items.is_empty());
         .           
         .                   // We need to do some post processing after the `inner_parser_loop`.
         .                   //
         .                   // Error messages here could be improved with links to original rules.
         .           
         .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
         .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
 1,940,295 ( 0.01%)          if parser.token == token::Eof {
    13,664 ( 0.00%)              if eof_items.len() == 1 {
         .                           let matches =
    21,500 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
    10,149 ( 0.00%)                  return nameize(parser.sess, ms, matches);
         .                       } else if eof_items.len() > 1 {
         .                           return Error(
         .                               parser.token.span,
         .                               "ambiguity: multiple successful parses".to_string(),
         .                           );
         .                       } else {
       594 ( 0.00%)                  return Failure(
       198 ( 0.00%)                      Token::new(
         .                                   token::Eof,
       264 ( 0.00%)                          if parser.token.span.is_dummy() {
         .                                       parser.token.span
         .                                   } else {
         .                                       parser.token.span.shrink_to_hi()
         .                                   },
         .                               ),
         .                               "missing tokens in macro arguments",
         .                           );
         .                       }
         .                   }
         .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
         .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
         .                   // unnecessary implicit clone later in Rc::make_mut.
 1,538,440 ( 0.00%)          drop(eof_items);
         .           
         .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
         .                   // then there is a syntax error.
 1,272,254 ( 0.00%)          if bb_items.is_empty() && next_items.is_empty() {
   157,976 ( 0.00%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
         .                   }
         .                   // Another possibility is that we need to call out to parse some rust nonterminal
         .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
 1,064,744 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
         .                       let nts = bb_items
         .                           .iter()
         .                           .map(|item| match item.top_elts.get_tt(item.idx) {
         .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
         .                               _ => panic!(),
         .                           })
         .                           .collect::<Vec<String>>()
         .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
         .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
         .                               }
         .                           ),
         .                       );
         .                   }
         .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
         .                   else if !next_items.is_empty() {
         .                       // Now process the next token
   318,816 ( 0.00%)              cur_items.extend(next_items.drain(..));
   106,272 ( 0.00%)              parser.to_mut().bump();
         .                   }
         .                   // Finally, we have the case where we need to call the black-box parser to get some
         .                   // nonterminal.
         .                   else {
         .                       assert_eq!(bb_items.len(), 1);
         .           
   532,372 ( 0.00%)              let mut item = bb_items.pop().unwrap();
 2,107,570 ( 0.01%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
   266,186 ( 0.00%)                  let match_cur = item.match_cur;
         .                           // We use the span of the metavariable declaration to determine any
         .                           // edition-specific matching behavior for non-terminals.
 1,597,465 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
         .                               Err(mut err) => {
         .                                   err.span_label(
         .                                       span,
         .                                       format!("while parsing argument for this `{}` macro fragment", kind),
         .                                   )
         .                                   .emit();
         .                                   return ErrorReported;
         .                               }
 1,597,116 ( 0.00%)                      Ok(nt) => nt,
         .                           };
 1,064,744 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
 1,064,744 ( 0.00%)                  item.idx += 1;
 1,597,116 ( 0.00%)                  item.match_cur += 1;
         .                       } else {
         .                           unreachable!()
         .                       }
         .                       cur_items.push(item);
         .                   }
         .           
   744,916 ( 0.00%)          assert!(!cur_items.is_empty());
         .               }
   140,409 ( 0.00%)  }

12,717,610 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 294 ----------------------------------------
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
         .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 3,801,118 ( 0.01%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
         .           }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   391,140 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
   596,684 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 4,657,537 ( 0.01%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
     1,714 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
     2,847 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
    66,892 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    70,152 ( 0.00%)          assert!(len <= A::size());
   210,456 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    35,076 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   623,810 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
        44 ( 0.00%)              A::size()
         .                   } else {
         .                       // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
         .                       // Therefore all items are at the same address,
         .                       // and any array size has capacity for infinitely many items.
         .                       // The capacity is limited by the bit width of the length field.
         .                       //
         .                       // `Vec` also does this:
         .                       // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
-- line 710 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,588,286 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
25,973,849 ( 0.08%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
69,622,924 ( 0.22%)              if self.spilled() {
   132,263 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
57,344,275 ( 0.18%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   486,025 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 9,614,293 ( 0.03%)              if *len == cap {
     2,870 ( 0.00%)                  self.reserve(1);
    73,832 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    99,786 ( 0.00%)              ptr::write(ptr.add(*len), value);
14,258,548 ( 0.04%)              *len += 1;
         .                   }
   388,820 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 5,155,900 ( 0.02%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
 1,445,098 ( 0.00%)              let last_index = *len_ptr - 1;
 1,711,284 ( 0.01%)              *len_ptr = last_index;
   374,280 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
        51 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
    48,821 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
     2,643 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
   174,796 ( 0.00%)              assert!(new_cap >= len);
   174,796 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
   174,796 ( 0.00%)              } else if new_cap != cap {
   163,366 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    87,398 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    42,560 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
   174,796 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
   248,836 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
    51,464 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
 1,252,047 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 4,039,886 ( 0.01%)          infallible(self.try_reserve(additional))
 1,415,104 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
15,506,407 ( 0.05%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
    34,632 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
12,493,328 ( 0.04%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
     6,837 ( 0.00%)          self.try_grow(new_cap)
17,078,808 ( 0.05%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
   566,711 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
     3,515 ( 0.00%)          self.try_grow(new_cap)
     3,515 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   236,932 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
     1,184 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     6,453 ( 0.00%)              let len = *len_ptr;
    32,895 ( 0.00%)              assert!(index < len);
   109,830 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
    21,930 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
     1,480 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
   121,229 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    28,631 ( 0.00%)              let len = *len_ptr;
    39,652 ( 0.00%)              assert!(index <= len);
    79,304 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
    39,652 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
    77,148 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   446,049 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
   132,480 ( 0.00%)              if !f(&mut self[i]) {
        82 ( 0.00%)                  del += 1;
    37,078 ( 0.00%)              } else if del > 0 {
       120 ( 0.00%)                  self.swap(i - del, i);
         .                       }
         .                   }
    99,122 ( 0.00%)          self.truncate(len - del);
   396,488 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
        28 ( 0.00%)      pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
        32 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements using the given equality relation.
         .               pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut A::Item, &mut A::Item) -> bool,
         .               {
         .                   // See the implementation of Vec::dedup_by in the
         .                   // standard library for an explanation of this algorithm.
         .                   let len = self.len();
         8 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   let ptr = self.as_mut_ptr();
         .                   let mut w: usize = 1;
         .           
         .                   unsafe {
         .                       for r in 1..len {
         .                           let p_r = ptr.add(r);
        32 ( 0.00%)                  let p_wm1 = ptr.add(w - 1);
         .                           if !same_bucket(&mut *p_r, &mut *p_wm1) {
         8 ( 0.00%)                      if r != w {
         .                                   let p_w = p_wm1.add(1);
         .                                   mem::swap(&mut *p_r, &mut *p_w);
         .                               }
         8 ( 0.00%)                      w += 1;
         .                           }
         .                       }
         .                   }
         .           
         .                   self.truncate(w);
         .               }
         .           
         .               /// Removes consecutive elements that map to the same key.
-- line 1262 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
     2,204 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
 2,391,985 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
   698,280 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   465,520 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
 1,862,080 ( 0.01%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
   565,233 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
    11,142 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
    16,437 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   705,484 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
 4,734,622 ( 0.01%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
19,987,281 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 1,634,921 ( 0.01%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
   246,724 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 8,596,137 ( 0.03%)              while len.get() < cap {
 2,190,881 ( 0.01%)                  if let Some(out) = iter.next() {
       996 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   938,570 ( 0.00%)          for elem in iter {
   145,996 ( 0.00%)              self.push(elem);
         .                   }
16,741,023 ( 0.05%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
13,298,503 ( 0.04%)      fn drop(&mut self) {
         .                   unsafe {
11,079,543 ( 0.03%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
13,676,892 ( 0.04%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
     8,873 ( 0.00%)      fn drop(&mut self) {
   470,723 ( 0.00%)          for _ in self {}
     8,072 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
 2,431,453 ( 0.01%)          if self.current == self.end {
    37,329 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
 1,311,235 ( 0.00%)                  self.current += 1;
    22,940 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    90,322 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
   178,261 ( 0.00%)              IntoIter {
 1,483,997 ( 0.00%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
 2,162,569 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
 1,099,231 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
 2,708,013 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

33,429,240 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
   118,516 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
     1,436 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
   475,259 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
    44,389 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
   322,229 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         4 ( 0.00%)      pub kind: LitKind,
         4 ( 0.00%)      pub symbol: Symbol,
         4 ( 0.00%)      pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
     2,645 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     4,761 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         3 ( 0.00%)              Byte => write!(f, "b'{}'", symbol)?,
         .                       Char => write!(f, "'{}'", symbol)?,
        12 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
         .                       StrRaw(n) => write!(
         .                           f,
         .                           "r{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
         .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
         .                       ByteStrRaw(n) => write!(
         .                           f,
         .                           "br{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
     1,572 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
         .                   }
         .           
     1,058 ( 0.00%)          if let Some(suffix) = suffix {
         .                       write!(f, "{}", suffix)?;
         .                   }
         .           
         .                   Ok(())
     2,645 ( 0.00%)      }
         .           }
         .           
         .           impl LitKind {
         .               /// An English article for the literal token kind.
         .               pub fn article(self) -> &'static str {
         .                   match self {
         .                       Integer | Err => "an",
         .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
         .                       Float => "float",
         .                       Str | StrRaw(..) => "string",
         .                       ByteStr | ByteStrRaw(..) => "byte string",
         .                       Err => "error",
         .                   }
         .               }
         .           
         .               crate fn may_have_suffix(self) -> bool {
        22 ( 0.00%)          matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
    29,214 ( 0.00%)      }
         .           }
         .           
     3,024 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
     5,292 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
     1,544 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
     3,780 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
     6,696 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
     2,580 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
67,762,243 ( 0.21%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
   242,157 ( 0.00%)      BinOp(BinOpToken),
     1,977 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
   533,193 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
   201,627 ( 0.00%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
   316,586 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
   656,451 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
     1,647 ( 0.00%)      Lifetime(Symbol),
         .           
   303,632 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
    57,924 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
 7,094,421 ( 0.02%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
   553,050 ( 0.00%)      pub kind: TokenKind,
        71 ( 0.00%)      pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
     7,080 ( 0.00%)      }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
    33,292 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
   134,761 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
    33,107 ( 0.00%)              _ => return None,
         .                   })
    33,292 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
     5,724 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
     1,176 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   418,137 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
 1,408,836 ( 0.00%)          Token { kind, span }
   418,137 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
    48,979 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
    48,979 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
    31,184 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
   103,812 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
   103,812 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
    26,014 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
    13,007 ( 0.00%)              _ => self.span,
         .                   }
    13,007 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
   311,436 ( 0.00%)          !matches!(
   103,812 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
   103,812 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
   109,162 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    21,706 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
     2,124 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
    10,620 ( 0.00%)          match self.uninterpolate().kind {
     6,804 ( 0.00%)              Ident(name, is_raw)              =>
     2,268 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
         .                       // DotDotDot is no longer supported, but we need some way to display the error
         .                       DotDot | DotDotDot | DotDotEq     | // range notation
         .                       Lt | BinOp(Shl)                   | // associated path
         .                       ModSep                            | // global path
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
    10,392 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
     4,248 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
     8,624 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    12,909 ( 0.00%)          match self.uninterpolate().kind {
    10,044 ( 0.00%)              Ident(name, is_raw)        =>
     1,116 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
     4,686 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
    12,936 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
     6,170 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
     1,402 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
     1,058 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
       176 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
         .                       || self == &Question
         .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
     1,072 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
     9,495 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
     3,036 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
     2,144 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
    49,805 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
 6,368,274 ( 0.02%)          match &self.kind {
   810,330 ( 0.00%)              Interpolated(nt) => match **nt {
   250,966 ( 0.00%)                  NtIdent(ident, is_raw) => {
   627,466 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
    49,805 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
 1,024,905 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
 3,925,971 ( 0.01%)          match token.kind {
13,630,846 ( 0.04%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 6,847,741 ( 0.02%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
   656,765 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
 1,321,256 ( 0.00%)          match token.kind {
     3,408 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
 4,597,355 ( 0.01%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
    17,572 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
     3,863 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
     7,726 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
    20,055 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    40,110 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
   195,498 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
     2,380 ( 0.00%)              if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
         .               /// That is, is this a pre-parsed expression dropped into the token stream
         .               /// (which happens while parsing the result of macro expansion)?
         .               pub fn is_whole_expr(&self) -> bool {
        22 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtExpr(_) | NtLiteral(_) | NtPath(_) | NtIdent(..) | NtBlock(_) = **nt {
         .                           return true;
         .                       }
         .                   }
         .           
         .                   false
        11 ( 0.00%)      }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
     1,374 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
       687 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         9 ( 0.00%)      pub fn is_mutability(&self) -> bool {
         9 ( 0.00%)          self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        18 ( 0.00%)      }
         .           
    11,214 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
   110,904 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
   199,616 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   289,326 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
    35,166 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
   249,520 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
   734,019 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
 1,468,038 ( 0.00%)      }
         .           
     5,291 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
    18,177 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
       261 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
    18,177 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
       261 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
    18,177 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
       261 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
     5,291 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
    10,582 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
     5,304 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
 5,119,308 ( 0.02%)          match self.ident() {
    36,026 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
     6,630 ( 0.00%)      }
         .           
   309,070 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   154,535 ( 0.00%)          let kind = match self.kind {
     7,678 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
       617 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
     1,661 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
        24 ( 0.00%)              Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
     6,867 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
        43 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        18 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       915 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
       150 ( 0.00%)              Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
         3 ( 0.00%)              DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
    11,878 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
   112,489 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   278,163 ( 0.00%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
 2,227,739 ( 0.01%)          self.kind == *rhs
         .               }
         .           }
         .           
     2,443 ( 0.00%)  #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
         .               NtStmt(ast::Stmt),
         .               NtPat(P<ast::Pat>),
       734 ( 0.00%)      NtExpr(P<ast::Expr>),
         .               NtTy(P<ast::Ty>),
         .               NtIdent(Ident, /* is_raw */ bool),
         .               NtLifetime(Ident),
         .               NtLiteral(P<ast::Expr>),
         .               /// Stuff inside brackets for attributes
         .               NtMeta(P<ast::AttrItem>),
         .               NtPath(ast::Path),
         .               NtVis(ast::Visibility),
-- line 686 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
     1,412 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
     3,254 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
     1,412 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

24,802,743 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 3,727,111 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    48,043 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    18,052 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
        22 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   157,732 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 2,458,267 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 6,285,067 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 4,495,340 ( 0.01%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        55 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
        11 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   151,644 ( 0.00%)          let _ = &self[a];
   354,994 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
         4 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    12,188 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       414 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   312,510 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    34,167 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     4,122 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
    29,005 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
    15,270 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
15,929,537 ( 0.05%)          while left < right {
21,577,745 ( 0.07%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 2,003,062 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 6,256,234 ( 0.02%)              if cmp == Less {
11,300,111 ( 0.04%)                  left = mid + 1;
 2,822,985 ( 0.01%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
17,803,510 ( 0.06%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
   875,596 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
   336,770 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   336,770 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   336,770 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
         7 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
        14 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

15,614,989 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     4,330 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     2,165 ( 0.00%)              from_str_radix(src, radix)
     6,495 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
 2,485,545 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 3,519,715 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 3,016,445 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
89,022,946 ( 0.28%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        26 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 6,192,421 ( 0.02%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   520,435 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     1,888 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,947,473 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    86,191 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
49,552,791 ( 0.15%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
13,222,912 ( 0.04%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
46,739,270 ( 0.15%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
        45 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        35 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 6,507,017 ( 0.02%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        70 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         6 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 1,125,993 ( 0.00%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        12 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
         .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         2 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
14,647,635 ( 0.05%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         1 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 1701 ----------------------------------------
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_div(2), (2, false));")]
         .                   /// ```
         .                   #[inline(always)]
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_overflowing_int_methods", since = "1.52.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         1 ( 0.00%)          pub const fn overflowing_div(self, rhs: Self) -> (Self, bool) {
         4 ( 0.00%)              (self / rhs, false)
         3 ( 0.00%)          }
         .           
         .                   /// Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   /// Since, for the positive integers, all common
-- line 1719 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
        15 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       204 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
   167,822 ( 0.00%)              if self <= 1 { return 0; }
         .           
   230,127 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   686,236 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   233,928 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   292,260 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   962,284 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   341,883 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   360,374 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   796,549 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    80,787 ( 0.00%)          i += 2
         .               }
         .           
   360,374 ( 0.00%)      if i < count {
   217,586 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 5,518,590 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
38,087,412 ( 0.12%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
11,900,076 ( 0.04%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
 1,988,110 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   597,907 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   597,907 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 5,979,070 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 4,783,256 ( 0.01%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 5,381,163 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 2,844,379 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 2,391,628 ( 0.01%)          self.processed += BUFFER_SIZE;
 1,195,814 ( 0.00%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    39,618 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
 1,148,614 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   416,302 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
   211,125 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
   146,497 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    86,930 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    17,386 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    52,158 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    17,386 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    34,772 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
   133,482 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   150,868 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
   266,964 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    34,772 ( 0.00%)          let input_left = length - processed;
    18,654 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
    10,592 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    10,592 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
    10,592 ( 0.00%)              self.state.v0 ^= elem;
    21,184 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
    17,386 ( 0.00%)          self.nbuf = extra_bytes_left;
    86,930 ( 0.00%)          self.processed += nbuf + processed;
   104,316 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   264,963 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   353,284 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
   276,037 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   276,037 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
   276,037 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
   176,642 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    80,864 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
   253,695 ( 0.00%)          let length = self.processed + self.nbuf;
   169,002 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    84,501 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    84,501 ( 0.00%)          state.v0 ^= b;
         .           
    84,501 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   280,402 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
   111,396 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
   111,396 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
21,801,537 ( 0.07%)          compress!(state);
23,345,639 ( 0.07%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   560,796 ( 0.00%)          compress!(state);
   560,796 ( 0.00%)          compress!(state);
   560,796 ( 0.00%)          compress!(state);
   476,297 ( 0.00%)          compress!(state);
         .               }
         .           }

 4,131,437 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
30,789,882 ( 0.10%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
23,092,410 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
 2,227,600 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 3,341,400 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 8,254,360 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 2,610,168 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 5,220,336 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                  

-- line 32 ----------------------------------------
         .           ///
         .           /// If the syntax extension is an MBE macro, it will attempt to match its
         .           /// LHS token tree against the provided token tree, and if it finds a
         .           /// match, will transcribe the RHS token tree, splicing in any captured
         .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
         .           ///
         .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
         .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
15,331,810 ( 0.05%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
         .           pub enum TokenTree {
         .               /// A single token.
 5,742,850 ( 0.02%)      Token(Token),
         .               /// A delimited sequence of token trees.
   529,638 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
         .           }
         .           
         .           #[derive(Copy, Clone)]
         .           pub enum CanSynthesizeMissingTokens {
         .               Yes,
         .               No,
         .           }
         .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
         .                           delim == delim2 && tts.eq_unspanned(&tts2)
         .                       }
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Retrieves the `TokenTree`'s span.
         .               pub fn span(&self) -> Span {
    32,130 ( 0.00%)          match self {
    14,271 ( 0.00%)              TokenTree::Token(token) => token.span,
    12,820 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
         .                   }
    12,871 ( 0.00%)      }
         .           
         .               /// Modify the `TokenTree`'s span in-place.
         .               pub fn set_span(&mut self, span: Span) {
    32,130 ( 0.00%)          match self {
    12,871 ( 0.00%)              TokenTree::Token(token) => token.span = span,
     6,388 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
         .                   }
    16,065 ( 0.00%)      }
         .           
    30,290 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 1,899,028 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
    30,290 ( 0.00%)      }
         .           
         .               /// Returns the opening delimiter as a token tree.
   223,722 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   671,166 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   223,722 ( 0.00%)      }
         .           
         .               /// Returns the closing delimiter as a token tree.
   220,745 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   662,235 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   220,745 ( 0.00%)      }
         .           
    48,834 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    32,556 ( 0.00%)          match self {
   146,502 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
         .                       tt => tt,
         .                   }
    65,112 ( 0.00%)      }
         .           }
         .           
         .           impl<CTX> HashStable<CTX> for TokenStream
         .           where
         .               CTX: crate::HashStableContext,
         .           {
    57,114 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   205,276 ( 0.00%)          for sub_tt in self.trees() {
         .                       sub_tt.hash_stable(hcx, hasher);
         .                   }
    50,768 ( 0.00%)      }
         .           }
         .           
         .           pub trait CreateTokenStream: sync::Send + sync::Sync {
         .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
         .           }
         .           
         .           impl CreateTokenStream for AttrAnnotatedTokenStream {
         .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
         3 ( 0.00%)          self.clone()
         3 ( 0.00%)      }
         .           }
         .           
         .           /// A lazy version of [`TokenStream`], which defers creation
         .           /// of an actual `TokenStream` until it is needed.
         .           /// `Box` is here only to reduce the structure size.
         .           #[derive(Clone)]
         .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
         .           
         .           impl LazyTokenStream {
       940 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
         .                   LazyTokenStream(Lrc::new(Box::new(inner)))
       940 ( 0.00%)      }
         .           
         .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
     6,147 ( 0.00%)          self.0.create_token_stream()
         .               }
         .           }
         .           
         .           impl fmt::Debug for LazyTokenStream {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
         .               }
         .           }
-- line 156 ----------------------------------------
-- line 177 ----------------------------------------
         .           /// A `AttrAnnotatedTokenStream` is similar to a `TokenStream`, but with extra
         .           /// information about the tokens for attribute targets. This is used
         .           /// during expansion to perform early cfg-expansion, and to process attributes
         .           /// during proc-macro invocations.
         .           #[derive(Clone, Debug, Default, Encodable, Decodable)]
         .           pub struct AttrAnnotatedTokenStream(pub Lrc<Vec<(AttrAnnotatedTokenTree, Spacing)>>);
         .           
         .           /// Like `TokenTree`, but for `AttrAnnotatedTokenStream`
    13,996 ( 0.00%)  #[derive(Clone, Debug, Encodable, Decodable)]
         .           pub enum AttrAnnotatedTokenTree {
     5,040 ( 0.00%)      Token(Token),
       554 ( 0.00%)      Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
         .               /// Stores the attributes for an attribute target,
         .               /// along with the tokens for that attribute target.
         .               /// See `AttributesData` for more information
         .               Attributes(AttributesData),
         .           }
         .           
         .           impl AttrAnnotatedTokenStream {
   114,544 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
         .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   114,544 ( 0.00%)      }
         .           
         .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
         .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
         .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
         .               /// If there are inner attributes, they are inserted into the proper
         .               /// place in the attribute target tokens.
       982 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
     2,289 ( 0.00%)          let trees: Vec<_> = self
         .                       .0
         .                       .iter()
    40,001 ( 0.00%)              .flat_map(|tree| match &tree.0 {
    22,214 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
    55,535 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
         .                           }
    26,140 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
     3,921 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
     1,307 ( 0.00%)                      tree.1,
         .                           )]
         .                           .into_iter(),
         .                           AttrAnnotatedTokenTree::Attributes(data) => {
         .                               let mut outer_attrs = Vec::new();
         .                               let mut inner_attrs = Vec::new();
         .                               for attr in &data.attrs {
       284 ( 0.00%)                          match attr.style {
         .                                       crate::AttrStyle::Outer => {
         .                                           outer_attrs.push(attr);
         .                                       }
         .                                       crate::AttrStyle::Inner => {
         .                                           inner_attrs.push(attr);
         .                                       }
         .                                   }
         .                               }
         .           
        58 ( 0.00%)                      let mut target_tokens: Vec<_> = data
         .                                   .tokens
         .                                   .create_token_stream()
         .                                   .to_tokenstream()
         .                                   .0
         .                                   .iter()
         .                                   .cloned()
         .                                   .collect();
        29 ( 0.00%)                      if !inner_attrs.is_empty() {
         .                                   let mut found = false;
         .                                   // Check the last two trees (to account for a trailing semi)
         .                                   for (tree, _) in target_tokens.iter_mut().rev().take(2) {
         .                                       if let TokenTree::Delimited(span, delim, delim_tokens) = tree {
         .                                           // Inner attributes are only supported on extern blocks, functions, impls,
         .                                           // and modules. All of these have their inner attributes placed at
         .                                           // the beginning of the rightmost outermost braced group:
         .                                           // e.g. fn foo() { #![my_attr} }
-- line 248 ----------------------------------------
-- line 269 ----------------------------------------
         .           
         .                                   assert!(
         .                                       found,
         .                                       "Failed to find trailing delimited group in: {:?}",
         .                                       target_tokens
         .                                   );
         .                               }
         .                               let mut flat: SmallVec<[_; 1]> = SmallVec::new();
       661 ( 0.00%)                      for attr in outer_attrs {
         .                                   // FIXME: Make this more efficient
       852 ( 0.00%)                          flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
         .                               }
       232 ( 0.00%)                      flat.extend(target_tokens);
       290 ( 0.00%)                      flat.into_iter()
        29 ( 0.00%)                  }
         .                       })
         .                       .collect();
         .                   TokenStream::new(trees)
     1,964 ( 0.00%)      }
         .           }
         .           
         .           /// Stores the tokens for an attribute target, along
         .           /// with its attributes.
         .           ///
         .           /// This is constructed during parsing when we need to capture
         .           /// tokens.
         .           ///
-- line 295 ----------------------------------------
-- line 298 ----------------------------------------
         .           /// and a `tokens` field storing the (unparesd) tokens `struct Foo {}`
         .           #[derive(Clone, Debug, Encodable, Decodable)]
         .           pub struct AttributesData {
         .               /// Attributes, both outer and inner.
         .               /// These are stored in the original order that they were parsed in.
         .               pub attrs: AttrVec,
         .               /// The underlying tokens for the attribute target that `attrs`
         .               /// are applied to
     1,256 ( 0.00%)      pub tokens: LazyTokenStream,
         .           }
         .           
         .           /// A `TokenStream` is an abstract sequence of tokens, organized into [`TokenTree`]s.
         .           ///
         .           /// The goal is for procedural macros to work with `TokenStream`s and `TokenTree`s
         .           /// instead of a representation of the abstract syntax tree.
         .           /// Today's `TokenTree`s can still contain AST via `token::Interpolated` for
         .           /// backwards compatibility.
-- line 314 ----------------------------------------
-- line 316 ----------------------------------------
         .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
         .           
         .           pub type TreeAndSpacing = (TokenTree, Spacing);
         .           
         .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenStream, 8);
         .           
 1,612,134 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
         .           pub enum Spacing {
         .               Alone,
         .               Joint,
         .           }
         .           
         .           impl TokenStream {
         .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
         .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 365 ----------------------------------------
         .                       return Some((TokenStream::new(new_stream), sp));
         .                   }
         .                   None
         .               }
         .           }
         .           
         .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
         .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
       390 ( 0.00%)          AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
         .               }
         .           }
         .           
         .           impl From<TokenTree> for TokenStream {
         .               fn from(tree: TokenTree) -> TokenStream {
    18,725 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
         .               }
         .           }
         .           
         .           impl From<TokenTree> for TreeAndSpacing {
         .               fn from(tree: TokenTree) -> TreeAndSpacing {
   828,597 ( 0.00%)          (tree, Spacing::Alone)
         .               }
         .           }
         .           
         .           impl iter::FromIterator<TokenTree> for TokenStream {
         .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
     3,276 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
         .               }
         .           }
         .           
         .           impl Eq for TokenStream {}
         .           
         .           impl PartialEq<TokenStream> for TokenStream {
         .               fn eq(&self, other: &TokenStream) -> bool {
         .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
         .           }
         .           
         .           impl TokenStream {
         .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
         .                   TokenStream(Lrc::new(streams))
         .               }
         .           
         .               pub fn is_empty(&self) -> bool {
    13,893 ( 0.00%)          self.0.is_empty()
    13,893 ( 0.00%)      }
         .           
         .               pub fn len(&self) -> usize {
 2,086,580 ( 0.01%)          self.0.len()
     4,767 ( 0.00%)      }
         .           
         .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
         .                   match streams.len() {
         .                       0 => TokenStream::default(),
         .                       1 => streams.pop().unwrap(),
         .                       _ => {
         .                           // We are going to extend the first stream in `streams` with
         .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
         .           
         .                           // Create the final `TokenStream`.
         .                           TokenStream(first_stream_lrc)
         .                       }
         .                   }
         .               }
         .           
         .               pub fn trees(&self) -> Cursor {
    19,077 ( 0.00%)          self.clone().into_trees()
    38,154 ( 0.00%)      }
         .           
   242,429 ( 0.00%)      pub fn into_trees(self) -> Cursor {
         .                   Cursor::new(self)
   484,858 ( 0.00%)      }
         .           
         .               /// Compares two `TokenStream`s, checking equality without regarding span information.
         .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
         .                   let mut t1 = self.trees();
         .                   let mut t2 = other.trees();
         .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
         .                       if !t1.eq_unspanned(&t2) {
         .                           return false;
         .                       }
         .                   }
         .                   t1.next().is_none() && t2.next().is_none()
         .               }
         .           
         .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     2,215 ( 0.00%)          TokenStream(Lrc::new(
         .                       self.0
         .                           .iter()
         .                           .enumerate()
    96,390 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
         .                           .collect(),
         .                   ))
         .               }
         .           }
         .           
         .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
         .           #[derive(Clone)]
         .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
         .           pub struct Cursor {
         .               pub stream: TokenStream,
         .               index: usize,
         .           }
         .           
         .           impl Iterator for Cursor {
         .               type Item = TokenTree;
         .           
   311,766 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
   685,725 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
   415,688 ( 0.00%)      }
         .           }
         .           
         .           impl Cursor {
         .               fn new(stream: TokenStream) -> Self {
         .                   Cursor { stream, index: 0 }
         .               }
         .           
 9,865,620 ( 0.03%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 6,231,138 ( 0.02%)          if self.index < self.stream.len() {
 3,133,534 ( 0.01%)              self.index += 1;
10,403,386 ( 0.03%)              Some(self.stream.0[self.index - 1].clone())
         .                   } else {
   973,852 ( 0.00%)              None
         .                   }
11,838,744 ( 0.04%)      }
         .           
         .               pub fn index(&self) -> usize {
         .                   self.index
         .               }
         .           
         .               pub fn append(&mut self, new_stream: TokenStream) {
         .                   if new_stream.is_empty() {
         .                       return;
         .                   }
         .                   let index = self.index;
         .                   let stream = mem::take(&mut self.stream);
         .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
         .                   self.index = index;
         .               }
         .           
   240,204 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   480,408 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   480,408 ( 0.00%)      }
         .           }
         .           
 1,134,241 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
         .           pub struct DelimSpan {
         .               pub open: Span,
         .               pub close: Span,
         .           }
         .           
         .           impl DelimSpan {
     2,754 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
         .                   DelimSpan { open: sp, close: sp }
     5,508 ( 0.00%)      }
         .           
    31,148 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
         .                   DelimSpan { open, close }
    15,574 ( 0.00%)      }
         .           
         .               pub fn dummy() -> Self {
         .                   Self::from_single(DUMMY_SP)
    48,363 ( 0.00%)      }
         .           
   131,432 ( 0.00%)      pub fn entire(self) -> Span {
         .                   self.open.with_hi(self.close.hi())
    98,574 ( 0.00%)      }
         .           }

   242,241 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
  112,524 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   79,997 ( 0.00%)              self.file = file;
  120,997 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   32,179 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
  198,354 ( 0.00%)          self.line_number = line_index + 1;
  297,357 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
1,104,412 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   50,972 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
   25,486 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
  127,430 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
  178,402 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
  101,944 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
4,169,893 ( 0.01%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
2,382,796 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  595,699 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  595,699 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
1,022,342 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
1,019,042 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
3,057,126 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
1,018,234 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  509,117 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  509,117 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  509,117 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
2,036,468 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
  169,056 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  674,832 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  269,995 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  323,994 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
  215,996 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   96,537 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   96,537 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  430,890 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
  214,065 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    3,300 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    4,950 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
   13,173 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   26,346 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   52,692 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
  172,356 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   86,178 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  172,356 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   86,178 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  430,890 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  258,534 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  258,534 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
  258,534 ( 0.00%)          Some((
   86,178 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   86,178 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
5,361,291 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
5,876,153 ( 0.02%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  428,130 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
  165,881 ( 0.00%)              if idx != avoid_idx
   92,219 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
  269,995 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   53,999 ( 0.00%)          if !self.source_map.files().is_empty() {
  107,998 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  431,992 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
  269,995 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

8,150,529 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 84 ----------------------------------------
         .           pub struct SessionGlobals {
         .               symbol_interner: symbol::Interner,
         .               span_interner: Lock<span_encoding::SpanInterner>,
         .               hygiene_data: Lock<hygiene::HygieneData>,
         .               source_map: Lock<Option<Lrc<SourceMap>>>,
         .           }
         .           
         .           impl SessionGlobals {
        12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
        50 ( 0.00%)          SessionGlobals {
         2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
         .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
         6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
         .                       source_map: Lock::new(None),
         .                   }
        10 ( 0.00%)      }
         .           }
         .           
         .           #[inline]
         .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
         1 ( 0.00%)      assert!(
         .                   !SESSION_GLOBALS.is_set(),
         .                   "SESSION_GLOBALS should never be overwritten! \
         .                    Use another thread if you need another SessionGlobals"
         .               );
         3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
         7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
         1 ( 0.00%)  }
         .           
         .           #[inline]
         .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
         .               assert!(
         .                   !SESSION_GLOBALS.is_set(),
         .                   "SESSION_GLOBALS should never be overwritten! \
         .                    Use another thread if you need another SessionGlobals"
         .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
         .               SESSION_GLOBALS.set(session_globals, f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
         4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
         1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
         3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
        11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
         1 ( 0.00%)      } else {
         .                   SESSION_GLOBALS.with(f)
         .               }
         .           }
         .           
         .           #[inline]
         .           pub fn with_session_globals<R, F>(f: F) -> R
         .           where
         .               F: FnOnce(&SessionGlobals) -> R,
         .           {
 9,073,359 ( 0.03%)      SESSION_GLOBALS.with(f)
         .           }
         .           
         .           #[inline]
         .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
         .               create_session_globals_then(edition::DEFAULT_EDITION, f)
         .           }
         .           
         .           // If this ever becomes non thread-local, `decode_syntax_context`
         .           // and `decode_expn_id` will need to be updated to handle concurrent
         .           // deserialization.
         .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
         .           
         .           // FIXME: We should use this enum or something like it to get rid of the
         .           // use of magic `/rust/1.x/...` paths across the board.
       117 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
     1,174 ( 0.00%)  #[derive(Decodable)]
         .           pub enum RealFileName {
         .               LocalPath(PathBuf),
         .               /// For remapped paths (namely paths into libstd that have been mapped
         .               /// to the appropriate spot on the local host's file system, and local file
         .               /// system paths that have been remapped with `FilePathMapping`),
         .               Remapped {
         .                   /// `local_path` is the (host-dependent) local path to the file. This is
         .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
         .           }
         .           
         .           impl Hash for RealFileName {
         .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
         .                   // To prevent #70924 from happening again we should only hash the
         .                   // remapped (virtualized) path if that exists. This is because
         .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
         .                   // remain stable even if the corresponding local_path changes
     3,948 ( 0.00%)          self.remapped_path_if_available().hash(state)
         .               }
         .           }
         .           
         .           // This is functionally identical to #[derive(Encodable)], with the exception of
         .           // an added assert statement
         .           impl<S: Encoder> Encodable<S> for RealFileName {
         .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       106 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
         .                       RealFileName::LocalPath(ref local_path) => {
       424 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
         .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
         .                               Ok(())
         .                           })
         .                       }
         .           
         .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
         .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
         .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
         .               }
         .           }
         .           
         .           impl RealFileName {
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         .               pub fn local_path(&self) -> Option<&Path> {
         4 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p) => Some(p),
         .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
         .                           p.as_ref().map(PathBuf::as_path)
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
         2 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p) => Some(p),
         .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
         .                   }
         3 ( 0.00%)      }
         .           
         .               /// Returns the path suitable for embedding into build artifacts. This would still
         .               /// be a local path if it has not been remapped. A remapped path will not correspond
         .               /// to a valid file system path: see `local_path_if_available()` for something that
         .               /// is more likely to return paths into the local host file system.
         .               pub fn remapped_path_if_available(&self) -> &Path {
     6,116 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(p)
         .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
         .                   }
        54 ( 0.00%)      }
         .           
         .               /// Returns the path suitable for reading from the file system on the local host,
         .               /// if this information exists. Otherwise returns the remapped name.
         .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
         .               pub fn local_path_if_available(&self) -> &Path {
        53 ( 0.00%)          match self {
         .                       RealFileName::LocalPath(path)
         .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
         .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
         .                   }
         .               }
         .           
         .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
     1,617 ( 0.00%)          match display_pref {
         .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
         .                       FileNameDisplayPreference::Remapped => {
         .                           self.remapped_path_if_available().to_string_lossy()
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           /// Differentiates between real files and common virtual files.
     8,319 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
     7,783 ( 0.00%)  #[derive(Decodable, Encodable)]
         .           pub enum FileName {
         .               Real(RealFileName),
         .               /// Call to `quote!`.
         .               QuoteExpansion(u64),
         .               /// Command line.
         .               Anon(u64),
         .               /// Hack in `src/librustc_ast/parse.rs`.
         .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
         .               /// Custom sources for explicit parser calls from plugins and drivers.
         .               Custom(String),
         .               DocTest(PathBuf, isize),
         .               /// Post-substitution inline assembly from LLVM.
         .               InlineAsm(u64),
         .           }
         .           
         .           impl From<PathBuf> for FileName {
       371 ( 0.00%)      fn from(p: PathBuf) -> Self {
       106 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       318 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       371 ( 0.00%)      }
         .           }
         .           
        34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
         .           pub enum FileNameDisplayPreference {
         .               Remapped,
         .               Local,
         .           }
         .           
         .           pub struct FileNameDisplay<'a> {
         .               inner: &'a FileName,
         .               display_pref: FileNameDisplayPreference,
         .           }
         .           
         .           impl fmt::Display for FileNameDisplay<'_> {
       432 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
         .                   use FileName::*;
       648 ( 0.00%)          match *self.inner {
         .                       Real(ref name) => {
       648 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
         .                       }
         .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
         .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
         .                       Anon(_) => write!(fmt, "<anon>"),
         .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
         .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
         .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
         .                       Custom(ref s) => write!(fmt, "<{}>", s),
         .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
         .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
         .                   }
       540 ( 0.00%)      }
         .           }
         .           
         .           impl FileNameDisplay<'_> {
     6,036 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
     4,527 ( 0.00%)          match self.inner {
     1,509 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
         .                       _ => Cow::from(format!("{}", self)),
         .                   }
     6,036 ( 0.00%)      }
         .           }
         .           
         .           impl FileName {
         .               pub fn is_real(&self) -> bool {
         .                   use FileName::*;
     1,268 ( 0.00%)          match *self {
         .                       Real(_) => true,
         .                       Anon(_)
         .                       | MacroExpansion(_)
         .                       | ProcMacroSourceCode(_)
         .                       | CfgSpec(_)
         .                       | CliCrateAttr(_)
         .                       | Custom(_)
         .                       | QuoteExpansion(_)
         .                       | DocTest(_, _)
         .                       | InlineAsm(_) => false,
         .                   }
         .               }
         .           
     1,509 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
     3,018 ( 0.00%)      }
         .           
         .               // This may include transient local filesystem information.
         .               // Must not be embedded in build outputs.
        53 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       106 ( 0.00%)      }
         .           
         .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
         .                   FileNameDisplay { inner: self, display_pref }
         .               }
         .           
         .               pub fn macro_expansion_source_code(src: &str) -> FileName {
         .                   let mut hasher = StableHasher::new();
         .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
         .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
         .           /// [`BytePos`] range between files.
         .           ///
         .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
         .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
         .           /// Using `Span` is generally preferred.
         .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
         .           pub struct SpanData {
       539 ( 0.00%)      pub lo: BytePos,
       539 ( 0.00%)      pub hi: BytePos,
         .               /// Information about where the macro came from, if this piece of
         .               /// code was created by a macro expansion.
     1,369 ( 0.00%)      pub ctxt: SyntaxContext,
       446 ( 0.00%)      pub parent: Option<LocalDefId>,
         .           }
         .           
         .           // Order spans by position in the file.
         .           impl Ord for SpanData {
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   let SpanData {
         .                       lo: s_lo,
         .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
         .               }
         .               #[inline]
         .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
         .                   Span::new(self.lo, self.hi, self.ctxt, parent)
         .               }
         .               /// Returns `true` if this is a dummy span with any hygienic context.
         .               #[inline]
         .               pub fn is_dummy(self) -> bool {
 3,456,677 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
         .               }
         .               /// Returns `true` if `self` fully encloses `other`.
         .               pub fn contains(self, other: Self) -> bool {
     9,615 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
         .               }
         .           }
         .           
         .           // The interner is pointed to by a thread local value which is only set on the main thread
         .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
         .           // to avoid panics and other errors, even though it would be memory safe to do so.
         .           #[cfg(not(parallel_compiler))]
         .           impl !Send for Span {}
         .           #[cfg(not(parallel_compiler))]
         .           impl !Sync for Span {}
         .           
         .           impl PartialOrd for Span {
   331,112 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   248,334 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   331,112 ( 0.00%)      }
         .           }
         .           impl Ord for Span {
         .               fn cmp(&self, rhs: &Self) -> Ordering {
         .                   Ord::cmp(&self.data(), &rhs.data())
         .               }
         .           }
         .           
         .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
         .           }
         .           
         .           impl Span {
         .               #[inline]
         .               pub fn lo(self) -> BytePos {
         .                   self.data().lo
         .               }
         .               #[inline]
   445,446 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
         .                   self.data().with_lo(lo)
   296,964 ( 0.00%)      }
         .               #[inline]
    65,112 ( 0.00%)      pub fn hi(self) -> BytePos {
         .                   self.data().hi
    65,112 ( 0.00%)      }
         .               #[inline]
   224,469 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
         .                   self.data().with_hi(hi)
   149,646 ( 0.00%)      }
         .               #[inline]
         .               pub fn ctxt(self) -> SyntaxContext {
         .                   self.data_untracked().ctxt
         .               }
         .               #[inline]
    96,170 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
         .                   self.data_untracked().with_ctxt(ctxt)
    57,702 ( 0.00%)      }
         .               #[inline]
         .               pub fn parent(self) -> Option<LocalDefId> {
         .                   self.data().parent
         .               }
         .               #[inline]
        18 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
         .                   self.data().with_parent(ctxt)
        12 ( 0.00%)      }
         .           
         .               /// Returns `true` if this is a dummy span with any hygienic context.
         .               #[inline]
         .               pub fn is_dummy(self) -> bool {
         .                   self.data_untracked().is_dummy()
         .               }
         .           
         .               /// Returns `true` if this span comes from a macro or desugaring.
         .               #[inline]
       264 ( 0.00%)      pub fn from_expansion(self) -> bool {
         .                   self.ctxt() != SyntaxContext::root()
       176 ( 0.00%)      }
         .           
         .               /// Returns `true` if `span` originates in a derive-macro's expansion.
         .               pub fn in_derive_expansion(self) -> bool {
         .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
         .               }
         .           
         .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
         .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
         .               /// Returns a new span representing an empty span at the beginning of this span.
         .               #[inline]
         .               pub fn shrink_to_lo(self) -> Span {
         .                   let span = self.data_untracked();
         .                   span.with_hi(span.lo)
         .               }
         .               /// Returns a new span representing an empty span at the end of this span.
         .               #[inline]
     3,519 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
         .                   let span = self.data_untracked();
         .                   span.with_lo(span.hi)
     2,346 ( 0.00%)      }
         .           
         .               #[inline]
         .               /// Returns `true` if `hi == lo`.
         .               pub fn is_empty(self) -> bool {
         .                   let span = self.data_untracked();
         .                   span.hi == span.lo
         .               }
         .           
         .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
         .               pub fn substitute_dummy(self, other: Span) -> Span {
         .                   if self.is_dummy() { other } else { self }
         .               }
         .           
         .               /// Returns `true` if `self` fully encloses `other`.
    28,845 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
         .                   let span = self.data();
         .                   let other = other.data();
         .                   span.contains(other)
    19,230 ( 0.00%)      }
         .           
         .               /// Returns `true` if `self` touches `other`.
         .               pub fn overlaps(self, other: Span) -> bool {
         .                   let span = self.data();
         .                   let other = other.data();
         .                   span.lo < other.hi && other.lo < span.hi
         .               }
         .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
         .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
         .               /// if any.
         .               pub fn parent_callsite(self) -> Option<Span> {
         .                   let expn_data = self.ctxt().outer_expn_data();
         .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
         .               }
         .           
         .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    15,750 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
     7,875 ( 0.00%)          while !outer.contains(self) {
         .                       self = self.parent_callsite()?;
         .                   }
         .                   Some(self)
    17,325 ( 0.00%)      }
         .           
         .               /// Edition of the crate from which this span came.
   146,262 ( 0.00%)      pub fn edition(self) -> edition::Edition {
         .                   self.ctxt().edition()
    97,508 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn rust_2015(self) -> bool {
    29,012 ( 0.00%)          self.edition() == edition::Edition::Edition2015
         .               }
         .           
         .               #[inline]
         .               pub fn rust_2018(self) -> bool {
    21,289 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
         .               }
         .           
         .               #[inline]
         .               pub fn rust_2021(self) -> bool {
    17,074 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
         .               }
         .           
         .               /// Returns the source callee.
         .               ///
         .               /// Returns `None` if the supplied span has no expansion trace,
         .               /// else returns the `ExpnData` for the macro definition
         .               /// corresponding to the source callsite.
         .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
         .                   }
         .                   let expn_data = self.ctxt().outer_expn_data();
         .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
         .               }
         .           
         .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
         .               /// items can be used (that is, a macro marked with
         .               /// `#[allow_internal_unstable]`).
     8,390 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
     1,678 ( 0.00%)          self.ctxt()
         .                       .outer_expn_data()
         .                       .allow_internal_unstable
         .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
     6,712 ( 0.00%)      }
         .           
         .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   109,634 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    93,972 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
         .                       ExpnKind::Desugaring(k) => k == kind,
         .                       _ => false,
         .                   }
    78,310 ( 0.00%)      }
         .           
         .               /// Returns the compiler desugaring that created this span, or `None`
         .               /// if this span is not from a desugaring.
     3,355 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
     4,026 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
         .                       ExpnKind::Desugaring(k) => Some(k),
         .                       _ => None,
         .                   }
     2,684 ( 0.00%)      }
         .           
         .               /// Checks if a span is "internal" to a macro in which `unsafe`
         .               /// can be used without triggering the `unsafe_code` lint.
         .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
     2,292 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       573 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
     2,292 ( 0.00%)      }
         .           
         .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
         .                   let mut prev_span = DUMMY_SP;
         .                   std::iter::from_fn(move || {
         .                       loop {
         .                           let expn_data = self.ctxt().outer_expn_data();
         .                           if expn_data.is_root() {
         .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
         .           
         .               /// Returns a `Span` that would enclose both `self` and `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///     ^^^^^^^^^^^^^^^^^^^^
         .               /// ```
 3,350,039 ( 0.01%)      pub fn to(self, end: Span) -> Span {
         .                   let span_data = self.data();
         .                   let end_data = end.data();
         .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
         .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
         .                   // have an incomplete span than a completely nonsensical one.
   593,858 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    15,240 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
         .                           return end;
    14,723 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
         .                           return self;
         .                       }
         .                       // Both spans fall within a macro.
         .                       // FIXME(estebank): check if it is the *same* macro.
         .                   }
         .                   Span::new(
         .                       cmp::min(span_data.lo, end_data.lo),
         .                       cmp::max(span_data.hi, end_data.hi),
         .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
 2,048,235 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
         .                   )
 2,740,941 ( 0.01%)      }
         .           
         .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///         ^^^^^^^^^^^^^
         .               /// ```
    12,826 ( 0.00%)      pub fn between(self, end: Span) -> Span {
         .                   let span = self.data();
         .                   let end = end.data();
         .                   Span::new(
         .                       span.hi,
         .                       end.lo,
         .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
     8,162 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
         .                   )
     9,328 ( 0.00%)      }
         .           
         .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
         .               ///
         .               /// ```text
         .               ///     ____             ___
         .               ///     self lorem ipsum end
         .               ///     ^^^^^^^^^^^^^^^^^
         .               /// ```
    26,499 ( 0.00%)      pub fn until(self, end: Span) -> Span {
         .                   // Most of this function's body is copied from `to`.
         .                   // We can't just do `self.to(end.shrink_to_lo())`,
         .                   // because to also does some magic where it uses min/max so
         .                   // it can handle overlapping spans. Some advanced mis-use of
         .                   // `until` with different ctxts makes this visible.
         .                   let span_data = self.data();
         .                   let end_data = end.data();
         .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
         .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
         .                   // have an incomplete span than a completely nonsensical one.
     4,818 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
         .                       if span_data.ctxt == SyntaxContext::root() {
         .                           return end;
         .                       } else if end_data.ctxt == SyntaxContext::root() {
         .                           return self;
         .                       }
         .                       // Both spans fall within a macro.
         .                       // FIXME(estebank): check if it is the *same* macro.
         .                   }
         .                   Span::new(
         .                       span_data.lo,
         .                       end_data.lo,
         .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    16,863 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
         .                   )
    21,681 ( 0.00%)      }
         .           
       484 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
         .                   let span = self.data();
         .                   Span::new(
         .                       span.lo + BytePos::from_usize(inner.start),
         .                       span.lo + BytePos::from_usize(inner.end),
         .                       span.ctxt,
         .                       span.parent,
         .                   )
       308 ( 0.00%)      }
         .           
         .               /// Equivalent of `Span::def_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    16,694 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
         .               }
         .           
         .               /// Equivalent of `Span::call_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        82 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
         .               }
         .           
         .               /// Equivalent of `Span::mixed_site` from the proc macro API,
         .               /// except that the location is taken from the `self` span.
         .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
         .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
         .               }
         .           
         .               /// Produces a span with the same location as `self` and context produced by a macro with the
         .               /// given ID and transparency, assuming that macro was defined directly and not produced by
         .               /// some other macro (which is the case for built-in and procedural macros).
   100,656 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
         .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    58,716 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
         .                   let span = self.data();
 2,168,802 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
         .               }
         .           
         .               #[inline]
         .               pub fn remove_mark(&mut self) -> ExpnId {
         .                   let mut span = self.data();
         .                   let mark = span.ctxt.remove_mark();
         .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
         .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
         .                   let mut span = self.data();
         .                   let mark = span.ctxt.adjust(expn_id);
         .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
         .               }
         .           
         .               #[inline]
   579,321 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   386,214 ( 0.00%)          let mut span = self.data();
   315,303 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   579,321 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
   637,148 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       460 ( 0.00%)          let mut span = self.data();
       690 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
     1,840 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
         .               }
         .           
         .               #[inline]
     1,458 ( 0.00%)      pub fn reverse_glob_adjust(
         .                   &mut self,
         .                   expn_id: ExpnId,
         .                   glob_span: Span,
         .               ) -> Option<Option<ExpnId>> {
     2,592 ( 0.00%)          let mut span = self.data();
     4,050 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
     7,938 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
         .                   mark
     1,620 ( 0.00%)      }
         .           
         .               #[inline]
   419,024 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
         .                   let span = self.data();
         .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   366,646 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn normalize_to_macro_rules(self) -> Span {
         .                   let span = self.data();
         .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
         .               }
         .           }
         .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
         .           
         .               /// What label should we attach to this span (if any)?
         .               pub label: Option<String>,
         .           }
         .           
         .           impl Default for Span {
         .               fn default() -> Self {
         .                   DUMMY_SP
         2 ( 0.00%)      }
         .           }
         .           
         .           impl<E: Encoder> Encodable<E> for Span {
         .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
         .                   let span = self.data();
         .                   s.emit_struct(false, |s| {
         .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
         .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
         .           /// any spans that are debug-printed during the closure's execution.
         .           ///
         .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
         .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
         .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
         .           /// a `TyCtxt` is available. In this case, we fall back to
         .           /// the `SourceMap` provided to this function. If that is not available,
         .           /// we fall back to printing the raw `Span` field values.
         9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
         .               with_session_globals(|session_globals| {
         2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
         .               });
         .               struct ClearSourceMap;
         .               impl Drop for ClearSourceMap {
         .                   fn drop(&mut self) {
         .                       with_session_globals(|session_globals| {
         1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
         .                       });
         .                   }
         .               }
         .           
         .               let _guard = ClearSourceMap;
         4 ( 0.00%)      f()
         8 ( 0.00%)  }
         .           
         .           pub fn debug_with_source_map(
         .               span: Span,
         .               f: &mut fmt::Formatter<'_>,
         .               source_map: &SourceMap,
         .           ) -> fmt::Result {
         .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
         .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
         .           
         .           impl MultiSpan {
         .               #[inline]
         .               pub fn new() -> MultiSpan {
         .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
         .               }
         .           
         .               pub fn from_span(primary_span: Span) -> MultiSpan {
   105,325 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
         .               }
         .           
         .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
         .                   vec.sort();
     2,220 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
         .               }
         .           
         .               pub fn push_span_label(&mut self, span: Span, label: String) {
         .                   self.span_labels.push((span, label));
         .               }
         .           
         .               /// Selects the first primary span (if any).
         .               pub fn primary_span(&self) -> Option<Span> {
         .                   self.primary_spans.first().cloned()
    18,177 ( 0.00%)      }
         .           
         .               /// Returns all primary spans.
         .               pub fn primary_spans(&self) -> &[Span] {
         .                   &self.primary_spans
         .               }
         .           
         .               /// Returns `true` if any of the primary spans are displayable.
         .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
         .           
         .               /// Returns `true` if any of the span labels is displayable.
         .               pub fn has_span_labels(&self) -> bool {
         .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
         .               }
         .           }
         .           
         .           impl From<Span> for MultiSpan {
   105,325 ( 0.00%)      fn from(span: Span) -> MultiSpan {
         .                   MultiSpan::from_span(span)
   105,325 ( 0.00%)      }
         .           }
         .           
         .           impl From<Vec<Span>> for MultiSpan {
     2,220 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
     1,776 ( 0.00%)          MultiSpan::from_spans(spans)
     2,220 ( 0.00%)      }
         .           }
         .           
         .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        55 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub struct MultiByteChar {
         .               /// The absolute offset of the character in the `SourceMap`.
         .               pub pos: BytePos,
         .               /// The number of bytes, `>= 2`.
         .               pub bytes: u8,
         .           }
         .           
         .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
       312 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub enum NonNarrowChar {
         .               /// Represents a zero-width character.
         .               ZeroWidth(BytePos),
         .               /// Represents a wide (full-width) character.
         .               Wide(BytePos),
         .               /// Represents a tab character, represented visually with a width of 4 characters.
         .               Tab(BytePos),
         .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl Add<BytePos> for NonNarrowChar {
         .               type Output = Self;
         .           
         .               fn add(self, rhs: BytePos) -> Self {
       540 ( 0.00%)          match self {
         .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
         .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
         .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
         .                   }
         .               }
         .           }
         .           
         .           impl Sub<BytePos> for NonNarrowChar {
         .               type Output = Self;
         .           
       156 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
       540 ( 0.00%)          match self {
         .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
         .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
         .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
         .                   }
       468 ( 0.00%)      }
         .           }
         .           
         .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
         .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
         .           pub struct NormalizedPos {
         .               /// The absolute offset of the character in the `SourceMap`.
         .               pub pos: BytePos,
         .               /// The difference between original and normalized string at position.
         .               pub diff: u32,
         .           }
         .           
       159 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
         .           pub enum ExternalSource {
         .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
         .               Unneeded,
         .               Foreign {
         .                   kind: ExternalSourceKind,
         .                   /// This SourceFile's byte-offset within the source_map of its original crate.
         .                   original_start_pos: BytePos,
         .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
         .               AbsentOk,
         .               /// A failed attempt has been made to load the external source.
         .               AbsentErr,
         .               Unneeded,
         .           }
         .           
         .           impl ExternalSource {
         .               pub fn get_source(&self) -> Option<&Lrc<String>> {
    37,155 ( 0.00%)          match self {
         .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
         .                       _ => None,
         .                   }
         .               }
         .           }
         .           
         .           #[derive(Debug)]
         .           pub struct OffsetOverflowError;
         .           
     1,194 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
         .           pub enum SourceFileHashAlgorithm {
         .               Md5,
         .               Sha1,
         .               Sha256,
         .           }
         .           
         .           impl FromStr for SourceFileHashAlgorithm {
         .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
         .                       _ => Err(()),
         .                   }
         .               }
         .           }
         .           
         .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
         .           
         .           /// The hash of the on-disk source file used for debug info.
       318 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     2,388 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
         .           pub struct SourceFileHash {
         .               pub kind: SourceFileHashAlgorithm,
         .               value: [u8; 32],
         .           }
         .           
         .           impl SourceFileHash {
         .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
         2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
         .                   let len = hash.hash_len();
         .                   let value = &mut hash.value[..len];
         .                   let data = src.as_bytes();
         .                   match kind {
         .                       SourceFileHashAlgorithm::Md5 => {
       165 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
         .                       }
         .                       SourceFileHashAlgorithm::Sha1 => {
         .                           value.copy_from_slice(&Sha1::digest(data));
         .                       }
         .                       SourceFileHashAlgorithm::Sha256 => {
         .                           value.copy_from_slice(&Sha256::digest(data));
         .                       }
         .                   }
         .                   hash
         .               }
         .           
         .               /// Check if the stored hash matches the hash of the string.
         .               pub fn matches(&self, src: &str) -> bool {
         2 ( 0.00%)          Self::new(self.kind, src) == *self
         .               }
         .           
         .               /// The bytes of the hash.
         .               pub fn hash_bytes(&self) -> &[u8] {
         .                   let len = self.hash_len();
         .                   &self.value[..len]
         .               }
         .           
         .               fn hash_len(&self) -> usize {
       163 ( 0.00%)          match self.kind {
         .                       SourceFileHashAlgorithm::Md5 => 16,
         .                       SourceFileHashAlgorithm::Sha1 => 20,
         .                       SourceFileHashAlgorithm::Sha256 => 32,
         .                   }
         .               }
         .           }
         .           
         .           /// A single source in the [`SourceMap`].
     3,074 ( 0.00%)  #[derive(Clone)]
         .           pub struct SourceFile {
         .               /// The name of the file that the source came from. Source that doesn't
         .               /// originate from files has names between angle brackets by convention
         .               /// (e.g., `<anon>`).
         .               pub name: FileName,
         .               /// The complete source code.
        53 ( 0.00%)      pub src: Option<Lrc<String>>,
         .               /// The source code's hash.
         .               pub src_hash: SourceFileHash,
         .               /// The external source code (used for external crates, which will have a `None`
         .               /// value as `self.src`.
         .               pub external_src: Lock<ExternalSource>,
         .               /// The start position of this source in the `SourceMap`.
         .               pub start_pos: BytePos,
         .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
         .               pub lines: Vec<BytePos>,
         .               /// Locations of multi-byte characters in the source code.
         .               pub multibyte_chars: Vec<MultiByteChar>,
         .               /// Width of characters that are not narrow in the source code.
         .               pub non_narrow_chars: Vec<NonNarrowChar>,
         .               /// Locations of characters removed during normalization.
         .               pub normalized_pos: Vec<NormalizedPos>,
         .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        53 ( 0.00%)      pub name_hash: u128,
         .               /// Indicates which crate this `SourceFile` was imported from.
        53 ( 0.00%)      pub cnum: CrateNum,
         .           }
         .           
         .           impl<S: Encoder> Encodable<S> for SourceFile {
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_struct(false, |s| {
         .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
         .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
         .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
         .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
         .                       s.emit_struct_field("lines", false, |s| {
         .                           let lines = &self.lines[..];
         .                           // Store the length.
         .                           s.emit_u32(lines.len() as u32)?;
         .           
       212 ( 0.00%)                  if !lines.is_empty() {
         .                               // In order to preserve some space, we exploit the fact that
         .                               // the lines list is sorted and individual lines are
         .                               // probably not that long. Because of that we can store lines
         .                               // as a difference list, using as little space as possible
         .                               // for the differences.
         .                               let max_line_length = if lines.len() == 1 {
         .                                   0
         .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
         .                                       .array_windows()
         .                                       .map(|&[fst, snd]| snd - fst)
         .                                       .map(|bp| bp.to_usize())
         .                                       .max()
         .                                       .unwrap()
         .                               };
         .           
         .                               let bytes_per_diff: u8 = match max_line_length {
       106 ( 0.00%)                          0..=0xFF => 1,
         .                                   0x100..=0xFFFF => 2,
         .                                   _ => 4,
         .                               };
         .           
         .                               // Encode the number of bytes used per diff.
         .                               bytes_per_diff.encode(s)?;
         .           
         .                               // Encode the first element.
         .                               lines[0].encode(s)?;
         .           
         .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
         .           
       106 ( 0.00%)                      match bytes_per_diff {
         .                                   1 => {
         .                                       for diff in diff_iter {
         .                                           (diff.0 as u8).encode(s)?
         .                                       }
         .                                   }
         .                                   2 => {
         .                                       for diff in diff_iter {
         .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
         .                                   _ => unreachable!(),
         .                               }
         .                           }
         .           
         .                           Ok(())
         .                       })?;
         .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
         .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       159 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
         .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       583 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
         .                   })
         .               }
         .           }
         .           
         .           impl<D: Decoder> Decodable<D> for SourceFile {
     5,373 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
         .                   d.read_struct(|d| {
         .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
         .                       let src_hash: SourceFileHash =
         .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
         .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
         .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
         .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
         .                           let num_lines: u32 = Decodable::decode(d);
       597 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
         .           
         .                           if num_lines > 0 {
         .                               // Read the number of bytes used per diff.
         .                               let bytes_per_diff: u8 = Decodable::decode(d);
         .           
         .                               // Read the first element.
         .                               let mut line_start: BytePos = Decodable::decode(d);
         .                               lines.push(line_start);
         .           
         .                               for _ in 1..num_lines {
   931,556 ( 0.00%)                          let diff = match bytes_per_diff {
         .                                       1 => d.read_u8() as u32,
         .                                       2 => d.read_u16() as u32,
         .                                       4 => d.read_u32(),
         .                                       _ => unreachable!(),
         .                                   };
         .           
         .                                   line_start = line_start + BytePos(diff);
         .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
         .                           }
         .           
         .                           lines
         .                       });
         .                       let multibyte_chars: Vec<MultiByteChar> =
         .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
         .                       let non_narrow_chars: Vec<NonNarrowChar> =
         .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
     1,194 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
         .                       let normalized_pos: Vec<NormalizedPos> =
         .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
         .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
     6,567 ( 0.00%)              SourceFile {
     4,776 ( 0.00%)                  name,
         .                           start_pos,
         .                           end_pos,
         .                           src: None,
     2,388 ( 0.00%)                  src_hash,
         .                           // Unused - the metadata decoder will construct
         .                           // a new SourceFile, filling in `external_src` properly
         .                           external_src: Lock::new(ExternalSource::Unneeded),
     2,388 ( 0.00%)                  lines,
     2,388 ( 0.00%)                  multibyte_chars,
     2,388 ( 0.00%)                  non_narrow_chars,
     2,388 ( 0.00%)                  normalized_pos,
         .                           name_hash,
         .                           cnum,
         .                       }
         .                   })
     5,373 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Debug for SourceFile {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   write!(fmt, "SourceFile({:?})", self.name)
         .               }
         .           }
         .           
         .           impl SourceFile {
       583 ( 0.00%)      pub fn new(
         .                   name: FileName,
         .                   mut src: String,
         .                   start_pos: BytePos,
         .                   hash_kind: SourceFileHashAlgorithm,
         .               ) -> Self {
         .                   // Compute the file hash before any normalization.
         .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       159 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
         .           
         .                   let name_hash = {
         .                       let mut hasher: StableHasher = StableHasher::new();
       106 ( 0.00%)              name.hash(&mut hasher);
         .                       hasher.finish::<u128>()
         .                   };
       106 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       159 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
         .           
       636 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       106 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
         .           
       901 ( 0.00%)          SourceFile {
         .                       name,
         .                       src: Some(Lrc::new(src)),
       583 ( 0.00%)              src_hash,
         .                       external_src: Lock::new(ExternalSource::Unneeded),
         .                       start_pos,
         .                       end_pos: Pos::from_usize(end_pos),
       212 ( 0.00%)              lines,
       212 ( 0.00%)              multibyte_chars,
       212 ( 0.00%)              non_narrow_chars,
       212 ( 0.00%)              normalized_pos,
         .                       name_hash,
         .                       cnum: LOCAL_CRATE,
         .                   }
       477 ( 0.00%)      }
         .           
         .               /// Returns the `BytePos` of the beginning of the current line.
         .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
         .                   let line_index = self.lookup_line(pos).unwrap();
         .                   self.lines[line_index]
         .               }
         .           
         .               /// Add externally loaded source.
         .               /// If the hash of the input doesn't match or no input is supplied via None,
         .               /// it is interpreted as an error and the corresponding enum variant is set.
         .               /// The return value signifies whether some kind of source is present.
    43,050 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
         .               where
         .                   F: FnOnce() -> Option<String>,
         .               {
    12,238 ( 0.00%)          if matches!(
    12,300 ( 0.00%)              *self.external_src.borrow(),
         .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
         .                   ) {
         2 ( 0.00%)              let src = get_src();
         .                       let mut external_src = self.external_src.borrow_mut();
         .                       // Check that no-one else have provided the source while we were getting it
         6 ( 0.00%)              if let ExternalSource::Foreign {
         .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
         .                       } = &mut *external_src
         .                       {
        10 ( 0.00%)                  if let Some(mut src) = src {
         .                               // The src_hash needs to be computed on the pre-normalized src.
         2 ( 0.00%)                      if self.src_hash.matches(&src) {
         6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
         .                                   return true;
         .                               }
         .                           } else {
         .                               *src_kind = ExternalSourceKind::AbsentErr;
         .                           }
         .           
         .                           false
         .                       } else {
         .                           self.src.is_some() || external_src.get_source().is_some()
         .                       }
         .                   } else {
     6,148 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
         .                   }
    55,350 ( 0.00%)      }
         .           
         .               /// Gets a line from the list of pre-computed line-beginnings.
         .               /// The line number here is 0-based.
         .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
         .                   fn get_until_newline(src: &str, begin: usize) -> &str {
         .                       // We can't use `lines.get(line_number+1)` because we might
         .                       // be parsing when we call this function and thus the current
         .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
         .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
         .                   } else {
         .                       None
         .                   }
         .               }
         .           
         .               pub fn is_real_file(&self) -> bool {
         .                   self.name.is_real()
       634 ( 0.00%)      }
         .           
         .               pub fn is_imported(&self) -> bool {
         .                   self.src.is_none()
   269,792 ( 0.00%)      }
         .           
         .               pub fn count_lines(&self) -> usize {
         .                   self.lines.len()
         .               }
         .           
         .               /// Finds the line containing the given position. The return value is the
         .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
         .               /// number. If the source_file is empty or the position is located before the
         .               /// first line, `None` is returned.
         .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   112,805 ( 0.00%)          match self.lines.binary_search(&pos) {
         .                       Ok(idx) => Some(idx),
         .                       Err(0) => None,
         .                       Err(idx) => Some(idx - 1),
         .                   }
         .               }
         .           
         .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   310,530 ( 0.00%)          if self.is_empty() {
         .                       return self.start_pos..self.end_pos;
         .                   }
         .           
   211,527 ( 0.00%)          assert!(line_index < self.lines.len());
   297,531 ( 0.00%)          if line_index == (self.lines.len() - 1) {
     1,828 ( 0.00%)              self.lines[line_index]..self.end_pos
         .                   } else {
   197,106 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
         .                   }
         .               }
         .           
         .               /// Returns whether or not the file contains the given `SourceMap` byte
         .               /// position. The position one past the end of the file is considered to be
         .               /// contained by the file. This implies that files for which `is_empty`
         .               /// returns true still contain one byte position according to this function.
         .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
         .                       Err(i) if i == 0 => 0,
         .                       Err(i) => self.normalized_pos[i - 1].diff,
         .                   };
         .           
         .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
         .               }
         .           
         .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
     3,240 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
         .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
         .                   let mut total_extra_bytes = 0;
         .           
     9,720 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
         .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
     1,192 ( 0.00%)              if mbc.pos < bpos {
         .                           // Every character is at least one byte, so we only
         .                           // count the actual extra bytes.
     2,424 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
         .                           // We should never see a byte position in the middle of a
         .                           // character.
     2,020 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
         .                       } else {
         .                           break;
         .                       }
         .                   }
         .           
    19,440 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    16,200 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
     6,480 ( 0.00%)      }
         .           
         .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
         .               /// given `BytePos`.
    11,340 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
     3,240 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       473 ( 0.00%)          match self.lookup_line(pos) {
         .                       Some(a) => {
         .                           let line = a + 1; // Line numbers start at 1
     1,620 ( 0.00%)                  let linebpos = self.lines[a];
     3,240 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
         .                           let col = chpos - linechpos;
         .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
         .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
         .                           debug!("byte is on line: {}", line);
     1,620 ( 0.00%)                  assert!(chpos >= linechpos);
         .                           (line, col)
         .                       }
         .                       None => (0, chpos),
         .                   }
    12,960 ( 0.00%)      }
         .           
         .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
         .               /// column offset when displayed, for a given `BytePos`.
    12,960 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
     4,860 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
     3,240 ( 0.00%)          if line > 0 {
         .                       let col = col_or_chpos;
     1,620 ( 0.00%)              let linebpos = self.lines[line - 1];
         .                       let col_display = {
         .                           let start_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&linebpos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
         .                           let end_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&pos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
         6 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
         .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
         .                               .iter()
         .                               .map(|x| x.width())
         .                               .sum();
     8,100 ( 0.00%)                  col.0 - special_chars + non_narrow
         .                       };
         .                       (line, col, col_display)
         .                   } else {
         .                       let chpos = col_or_chpos;
         .                       let col_display = {
         .                           let end_width_idx = self
         .                               .non_narrow_chars
         .                               .binary_search_by_key(&pos, |x| x.pos())
         .                               .unwrap_or_else(|x| x);
         .                           let non_narrow: usize =
         .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
         .                           chpos.0 - end_width_idx + non_narrow
         .                       };
         .                       (0, chpos, col_display)
         .                   }
    11,340 ( 0.00%)      }
         .           }
         .           
         .           /// Normalizes the source code and records the normalizations.
       550 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
         .               let mut normalized_pos = vec![];
         .               remove_bom(src, &mut normalized_pos);
         .               normalize_newlines(src, &mut normalized_pos);
         .           
         .               // Offset all the positions by start_pos to match the final file positions.
         .               for np in &mut normalized_pos {
         .                   np.pos.0 += start_pos.0;
         .               }
         .           
         .               normalized_pos
       495 ( 0.00%)  }
         .           
         .           /// Removes UTF-8 BOM, if any.
         .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        55 ( 0.00%)      if src.starts_with('\u{feff}') {
         .                   src.drain(..3);
         .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
         .               }
         .           }
         .           
         .           /// Replaces `\r\n` with `\n` in-place in `src`.
         .           ///
         .           /// Returns error if there's a lone `\r` in the string.
         .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        55 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
         .                   return;
         .               }
         .           
         .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
         .               // While we *can* call `as_mut_vec` and do surgery on the live string
         .               // directly, let's rather steal the contents of `src`. This makes the code
         .               // safe even if a panic occurs.
         .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
         .               (
         .                   $(
         .                       $(#[$attr:meta])*
         .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
         .                   )*
         .               ) => {
         .                   $(
         .                       $(#[$attr])*
   407,378 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
         .           
         .                       impl Pos for $ident {
         .                           #[inline(always)]
         .                           fn from_usize(n: usize) -> $ident {
    19,397 ( 0.00%)                      $ident(n as $inner_ty)
         .                           }
         .           
         .                           #[inline(always)]
         .                           fn to_usize(&self) -> usize {
   407,030 ( 0.00%)                      self.0 as usize
         .                           }
         .           
         .                           #[inline(always)]
         .                           fn from_u32(n: u32) -> $ident {
         .                               $ident(n as $inner_ty)
         .                           }
         .           
         .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
         .                           }
         .                       }
         .           
         .                       impl Add for $ident {
         .                           type Output = $ident;
         .           
         .                           #[inline(always)]
         .                           fn add(self, rhs: $ident) -> $ident {
 3,361,658 ( 0.01%)                      $ident(self.0 + rhs.0)
         .                           }
         .                       }
         .           
         .                       impl Sub for $ident {
         .                           type Output = $ident;
         .           
         .                           #[inline(always)]
         .                           fn sub(self, rhs: $ident) -> $ident {
 7,578,838 ( 0.02%)                      $ident(self.0 - rhs.0)
         .                           }
         .                       }
         .                   )*
         .               };
         .           }
         .           
         .           impl_pos! {
         .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
         .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
         .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
         .                   s.emit_u32(self.0)
         .               }
         .           }
         .           
         .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
         .               fn decode(d: &mut D) -> BytePos {
   723,866 ( 0.00%)          BytePos(d.read_u32())
         .               }
         .           }
         .           
         .           // _____________________________________________________________________________
         .           // Loc, SourceFileAndLine, SourceFileAndBytePos
         .           //
         .           
         .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
         .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
         .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
         .           pub struct InnerSpan {
         .               pub start: usize,
         .               pub end: usize,
         .           }
         .           
         .           impl InnerSpan {
       240 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
         .                   InnerSpan { start, end }
       120 ( 0.00%)      }
         .           }
         .           
         .           /// Requirements for a `StableHashingContext` to be used in this crate.
         .           ///
         .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
         .           /// instead of implementing everything in rustc_middle.
         .           pub trait HashStableContext {
         .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
         .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
         .               /// triple, which stays the same even if the containing `SourceFile` has moved
         .               /// within the `SourceMap`.
         .               ///
         .               /// Also note that we are hashing byte offsets for the column, not unicode
         .               /// codepoint offsets. For the purpose of the hash that's sufficient.
         .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
         .               /// span starts and ends in the same file, which is almost always the case.
 4,352,138 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
         .                   const TAG_VALID_SPAN: u8 = 0;
         .                   const TAG_INVALID_SPAN: u8 = 1;
         .                   const TAG_RELATIVE_SPAN: u8 = 2;
         .           
   819,346 ( 0.00%)          if !ctx.hash_spans() {
         .                       return;
         .                   }
         .           
 3,532,792 ( 0.01%)          let span = self.data_untracked();
 1,272,398 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
 1,865,202 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
         .           
 1,269,503 ( 0.00%)          if span.is_dummy() {
         .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
         .                       return;
         .                   }
         .           
 1,191,398 ( 0.00%)          if let Some(parent) = span.parent {
         .                       let def_span = ctx.def_span(parent).data_untracked();
         .                       if def_span.contains(span) {
         .                           // This span is enclosed in a definition: only hash the relative position.
         .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
         .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
         .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
         .                           return;
         .                       }
         .                   }
         .           
         .                   // If this is not an empty or invalid span, we want to hash the last
         .                   // position that belongs to it, as opposed to hashing the first
         .                   // position past it.
 2,382,392 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
         .                   {
 1,190,590 ( 0.00%)              Some(pos) => pos,
         .                       None => {
         .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
         .                           return;
         .                       }
         .                   };
         .           
         .                   Hash::hash(&TAG_VALID_SPAN, hasher);
         .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
         .                   // hash only the length, for example, then two otherwise equal spans with
         .                   // different end locations will have the same hash. This can cause a problem
         .                   // during incremental compilation wherein a previous result for a query that
         .                   // depends on the end location of a span will be incorrectly reused when the
         .                   // end location of the span it depends on has changed (see issue #74890). A
         .                   // similar analysis applies if some query depends specifically on the length
         .                   // of the span, but we only hash the end location. So hash both.
         .           
   595,295 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
         .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
         .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
         .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
         .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   595,295 ( 0.00%)          let len = (span.hi - span.lo).0;
         .                   Hash::hash(&col_line, hasher);
         .                   Hash::hash(&len, hasher);
 4,973,872 ( 0.02%)      }
         .           }

10,997,075 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        91 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    28,826 ( 0.00%)      pub ty: Ty<'tcx>,
   144,090 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
   291,803 ( 0.00%)      pub scope: DefId,
   435,666 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
 1,858,935 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       107 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    61,558 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       730 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     3,671 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   314,787 ( 0.00%)      pub var: BoundVar,
   254,411 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
39,182,301 ( 0.12%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   231,259 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 4,563,668 ( 0.01%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    23,960 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 4,728,421 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    49,420 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
    19,469 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
       152 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       304 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       608 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       304 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     3,287 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    24,326 ( 0.00%)              [
     6,671 ( 0.00%)                  ref parent_substs @ ..,
     7,044 ( 0.00%)                  closure_kind_ty,
     3,220 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     5,187 ( 0.00%)                  tupled_upvars_ty,
    13,148 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     9,861 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
         1 ( 0.00%)      pub fn is_valid(self) -> bool {
         2 ( 0.00%)          self.substs.len() >= 3
         2 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
         2 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       846 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     2,079 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       947 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       564 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    15,139 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,532 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     3,064 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        71 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       150 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       142 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     1,528 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     3,056 ( 0.00%)          match ty.kind() {
     6,112 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     4,584 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       446 ( 0.00%)          let tupled_tys = match self {
       598 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       973 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       821 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       750 ( 0.00%)          match self {
       907 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    41,398 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    43,125 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        82 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
     1,470 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
     1,952 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
     1,764 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     4,689 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,605 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     4,168 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       443 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     3,386 ( 0.00%)          self[0]
     2,057 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     1,772 ( 0.00%)              })
         .                       .transpose()
     1,329 ( 0.00%)      }
         .           
       528 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     1,056 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
        60 ( 0.00%)              predicate
       100 ( 0.00%)                  .map_bound(|pred| match pred {
        20 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
         4 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    46,543 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 3,464,641 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     4,739 ( 0.00%)      pub def_id: DefId,
 2,579,985 ( 0.01%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
    14,746 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    58,984 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     2,655 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
     1,180 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
     1,770 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     2,360 ( 0.00%)      }
         .           
         .               #[inline]
         3 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         2 ( 0.00%)      }
         .           
    19,616 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     2,452 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    26,972 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     7,011 ( 0.00%)          self.skip_binder().def_id
     2,337 ( 0.00%)      }
         .           
    11,040 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    22,080 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    11,040 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       108 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    20,073 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     2,832 ( 0.00%)      pub def_id: DefId,
    24,310 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       584 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       584 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
        44 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        22 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       110 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       657 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     1,165 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       876 ( 0.00%)      }
         .           }
         .           
   246,607 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       220 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    76,421 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 1,541,882 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
   148,844 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   681,894 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 1,619,641 ( 0.01%)          Binder(value, ty::List::empty())
   148,519 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    60,689 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 4,804,542 ( 0.01%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     2,234 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    18,964 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     1,292 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   124,288 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 1,220,816 ( 0.00%)          Binder(value, self.1)
     1,284 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    16,695 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    26,454 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   777,597 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       800 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,711 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   247,760 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   127,599 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   159,005 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    73,458 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    20,988 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    83,952 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    26,999 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    11,571 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
    19,285 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
    34,713 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    93,078 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    10,342 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    10,342 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   113,762 ( 0.00%)      }
         .           
    20,208 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    60,624 ( 0.00%)          self.substs.type_at(0)
    40,416 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   341,578 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   175,484 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
    15,680 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   165,637 ( 0.00%)      pub c_variadic: bool,
    35,969 ( 0.00%)      pub unsafety: hir::Unsafety,
   138,345 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
   161,834 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   683,564 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   323,668 ( 0.00%)      }
         .           
    98,802 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   737,852 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   197,604 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    36,870 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    51,936 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     4,618 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    38,617 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     9,236 ( 0.00%)          self.skip_binder().c_variadic
     4,618 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    21,526 ( 0.00%)          self.skip_binder().unsafety
    10,763 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
   204,084 ( 0.00%)          self.skip_binder().abi
    51,021 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       124 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       888 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
       656 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       858 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
       429 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        38 ( 0.00%)          ParamTy::new(def.index, def.name)
        19 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        22 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamConst {
       198 ( 0.00%)      pub index: u32,
       198 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
14,036,257 ( 0.04%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     1,700 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   508,424 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    32,062 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    16,578 ( 0.00%)      pub def_id: DefId,
    37,808 ( 0.00%)      pub index: u32,
    52,181 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
    10,160 ( 0.00%)      pub index: u32,
     1,384 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
    19,469 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   331,081 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        26 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     1,357 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
       140 ( 0.00%)      pub item_def_id: DefId,
     1,310 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       324 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       336 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
       144 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        96 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
        48 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
       432 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
         .                       projection_ty: ty::ProjectionTy {
         .                           item_def_id: self.item_def_id,
         .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
         .                       },
         .                       term: self.term,
         .                   }
         .               }
         .           
        20 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
         .               ) -> Self {
         .                   // Assert there is a Self.
        12 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
         .           
        16 ( 0.00%)          Self {
         8 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
         4 ( 0.00%)              term: projection_predicate.term,
         .                   }
        28 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
        50 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
        50 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
        60 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
        20 ( 0.00%)          self.skip_binder().item_def_id
        10 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
    12,304 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   337,146 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   528,288 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    31,765 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
    29,314 ( 0.00%)          match self.kind() {
     8,032 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   283,958 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   365,555 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   263,564 ( 0.00%)          match self.kind() {
    51,367 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       456 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         9 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
     7,380 ( 0.00%)          *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       183 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       605 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
        18 ( 0.00%)          match self.kind() {
         9 ( 0.00%)              Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       160 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       320 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       160 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       428 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
        39 ( 0.00%)          matches!(
        26 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    25,633 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
        72 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   280,362 ( 0.00%)          match self.kind() {
    58,390 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
       510 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
       510 ( 0.00%)          match self.kind() {
     1,275 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
       510 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
    13,936 ( 0.00%)          matches!(
    31,777 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
    11,124 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
       860 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
    10,908 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    74,506 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     4,680 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    17,244 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    92,466 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    13,253 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
     2,300 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
    11,532 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    60,031 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   364,671 ( 0.00%)          match self.kind() {
     6,734 ( 0.00%)              Adt(def, _) if def.is_box() => {
       258 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   220,998 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     4,288 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
   120,062 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
     2,011 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
       169 ( 0.00%)      }
         .           
   580,328 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   290,164 ( 0.00%)          match self.kind() {
   217,623 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   652,869 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
    18,789 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    21,212 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       875 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    10,468 ( 0.00%)          match self.kind() {
     7,212 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,750 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       451 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       902 ( 0.00%)          match self.kind() {
       902 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       902 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    30,300 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    46,860 ( 0.00%)          match self.kind() {
    16,676 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     8,338 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    24,240 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    79,720 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    39,860 ( 0.00%)          match self.kind() {
    63,776 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    63,776 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       234 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
       234 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       130 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
        52 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
       208 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     4,130 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     8,260 ( 0.00%)          match self.kind() {
     8,260 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     4,130 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 1,067,976 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   711,984 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
    12,346 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    87,795 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 1,067,976 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       435 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   157,160 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   235,740 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    78,580 ( 0.00%)      }
         .           }

55,027,540 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 11,932,670 ( 0.04%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    973,756 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
226,821,197 ( 0.71%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,887,194 ( 0.01%)          self.stride += Group::WIDTH;
  1,887,194 ( 0.01%)          self.pos += self.stride;
  1,709,912 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
  1,169,934 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  2,597,025 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    393,372 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  3,037,066 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    530,482 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  2,427,175 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  3,216,091 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
     20,308 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     51,582 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
      1,015 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     69,537 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    158,491 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    158,491 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    316,982 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
    110,128 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    206,854 ( 0.00%)          self.erase_no_drop(&item);
      2,500 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  5,023,630 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     19,814 ( 0.00%)          match self.find(hash, eq) {
     99,428 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  1,172,136 ( 0.00%)              None => None,
          .                   }
  7,135,060 ( 0.02%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    144,560 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,689,683 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  2,011,918 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  4,704,477 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  3,560,816 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 17,717,546 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     48,868 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 11,714,832 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          4 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 13,048,509 ( 0.04%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  2,652,848 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        198 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  1,989,636 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     19,646 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,710,478 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     97,358 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  5,678,479 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  4,545,149 ( 0.01%)          self.table.items += 1;
          .                   bucket
     38,167 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    228,321 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    123,113 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    229,226 ( 0.00%)              eq(self.bucket(index).as_ref())
     36,855 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
     13,129 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    255,144 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    579,568 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
      8,827 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    114,829 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     10,088 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  7,338,309 ( 0.02%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
         11 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
  1,084,476 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     92,612 ( 0.00%)          let allocation = self.into_allocation();
     69,459 ( 0.00%)          RawIntoIter {
    115,765 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     44,760 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      5,361 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  6,680,592 ( 0.02%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,425,254 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
  1,008,818 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  2,427,378 ( 0.01%)          Ok(Self {
          .                       ctrl,
    989,735 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  3,219,878 ( 0.01%)      }
          .           
          .               #[inline]
    273,575 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     73,196 ( 0.00%)          if capacity == 0 {
     54,833 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  2,012,110 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
    146,117 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    273,575 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    954,955 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    954,955 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,909,910 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  7,788,689 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 22,927,727 ( 0.07%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
 10,563,994 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    653,012 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 28,017,145 ( 0.09%)              for bit in group.match_byte(h2_hash) {
 54,288,672 ( 0.17%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 37,921,324 ( 0.12%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  8,447,549 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
          3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
          3 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 26,675,224 ( 0.08%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
154,889,953 ( 0.48%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 14,635,368 ( 0.05%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 11,708,244 ( 0.04%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         30 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
          .           
          .               #[inline]
          .               unsafe fn replace_ctrl_h2(&self, index: usize, hash: u64) -> u8 {
          1 ( 0.00%)          let prev_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   prev_ctrl
          .               }
          .           
          .               /// Sets a control byte, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl(&self, index: usize, ctrl: u8) {
-- line 1301 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 21,713,667 ( 0.07%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  7,235,221 ( 0.02%)          *self.ctrl(index) = ctrl;
  7,239,047 ( 0.02%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  3,091,986 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  2,420,602 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
 12,206,867 ( 0.04%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     52,839 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
  1,274,453 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    578,217 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,156,444 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
  1,156,436 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  2,433,323 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          2 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    578,217 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
    131,858 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  4,295,737 ( 0.01%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    578,217 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
         64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         10 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          2 ( 0.00%)                  if prev_ctrl == EMPTY {
          .                               guard.set_ctrl(i, EMPTY);
          .                               // If the target slot is empty, simply move the current
          .                               // element into the new slot and clear the old control
          .                               // byte.
          .                               ptr::copy_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'outer;
          .                           } else {
          .                               // If the target slot is occupied, swap the two elements
-- line 1539 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
          3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    407,313 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
    100,861 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
    137,864 ( 0.00%)          self.items = 0;
    100,950 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    858,766 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  3,435,064 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  4,234,620 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  3,435,064 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    137,648 ( 0.00%)      fn clone(&self) -> Self {
     17,439 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
    154,854 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        390 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1732 ----------------------------------------
          .                       // Update the index in case we need to unwind.
          .                       guard.0 = index;
          .                   }
          .           
          .                   // Successfully cloned all items, no need to clean up.
          .                   mem::forget(guard);
          .           
          .                   self.table.items = source.table.items;
         30 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           
          .               /// Variant of `clone_from` to use when a hasher is available.
          .               #[cfg(feature = "raw")]
          .               pub fn clone_from_with_hasher(&mut self, source: &Self, hasher: impl Fn(&T) -> u64) {
          .                   // If we have enough capacity in the table, just clear it and insert
          .                   // elements one by one. We don't do this if we have the same number of
          .                   // buckets as the source since we can just copy the contents directly
-- line 1748 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  6,805,097 ( 0.02%)      fn drop(&mut self) {
  5,286,767 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  7,310,126 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     92,612 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
    115,765 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  2,146,916 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    335,948 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    589,162 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  2,092,424 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     42,454 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     48,931 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     65,272 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
     20,135 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    414,094 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    930,142 ( 0.00%)          if let Some(b) = self.iter.next() {
  3,194,287 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    828,188 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     26,974 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
    213,668 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      1,126 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     18,318 ( 0.00%)      fn next(&mut self) -> Option<T> {
     14,550 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     41,126 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
         62 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     26,528 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      3,316 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     26,528 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 84,490,230 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,765,383,153 ( 8.60%)  events annotated

