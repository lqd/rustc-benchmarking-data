--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tonic_build --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --cfg feature="default" --cfg feature="prost" --cfg feature="prost-build" --cfg feature="rustfmt" --cfg feature="transport" -C metadata=0a0ef0c1fb2cd3a7 -C extra-filename=-0a0ef0c1fb2cd3a7 --out-dir /usr/home/liquid/tmp/.tmppgjIJH/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmppgjIJH/target/release/deps --extern proc_macro2=/usr/home/liquid/tmp/.tmppgjIJH/target/release/deps/libproc_macro2-4e3d2e7aa03cf1cd.rmeta --extern prost_build=/usr/home/liquid/tmp/.tmppgjIJH/target/release/deps/libprost_build-76f714fa2595227f.rmeta --extern quote=/usr/home/liquid/tmp/.tmppgjIJH/target/release/deps/libquote-89fea366a8a699dc.rmeta --extern syn=/usr/home/liquid/tmp/.tmppgjIJH/target/release/deps/libsyn-ee9f54437f205d3a.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tonic-build-0.6.2-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
32,913,373,276 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
2,519,482,861 ( 7.65%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::getExitBlocks(llvm::SmallVectorImpl<llvm::BasicBlock*>&) const
  817,483,777 ( 2.48%)  ./malloc/malloc.c:_int_free
  807,899,230 ( 2.45%)  ./malloc/malloc.c:_int_malloc
  623,245,881 ( 1.89%)  ???:llvm::LiveIntervals::extendSegmentsToUses(llvm::LiveRange&, llvm::SmallVector<std::pair<llvm::SlotIndex, llvm::VNInfo*>, 16u>&, llvm::Register, llvm::LaneBitmask)
  611,866,854 ( 1.86%)  ???:llvm::InstCombinerImpl::run()
  524,522,891 ( 1.59%)  ./malloc/malloc.c:malloc
  479,271,771 ( 1.46%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  476,852,065 ( 1.45%)  ???:combineInstructionsOverFunction(llvm::Function&, llvm::InstCombineWorklist&, llvm::AAResults*, llvm::AssumptionCache&, llvm::TargetLibraryInfo&, llvm::TargetTransformInfo&, llvm::DominatorTree&, llvm::OptimizationRemarkEmitter&, llvm::BlockFrequencyInfo*, llvm::ProfileSummaryInfo*, unsigned int, llvm::LoopInfo*)
  321,896,593 ( 0.98%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  279,683,044 ( 0.85%)  ???:llvm::ValueHandleBase::AddToUseList()
  276,166,949 ( 0.84%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  268,238,772 ( 0.81%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  263,623,414 ( 0.80%)  ./malloc/malloc.c:free
  256,318,197 ( 0.78%)  ???:(anonymous namespace)::LazyValueInfoImpl::solve() [clone .llvm.4316243980339171764]
  250,865,869 ( 0.76%)  ???:llvm::TargetLibraryInfoImpl::getLibFunc(llvm::Function const&, llvm::LibFunc&) const
  239,787,297 ( 0.73%)  ???:llvm::removeUnreachableBlocks(llvm::Function&, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*)
  234,481,833 ( 0.71%)  ???:llvm::AnalysisManager<llvm::Function>::invalidate(llvm::Function&, llvm::PreservedAnalyses const&)
  232,787,707 ( 0.71%)  ???:llvm::LiveVariables::runOnBlock(llvm::MachineBasicBlock*, unsigned int)
  231,193,711 ( 0.70%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
  211,453,116 ( 0.64%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  209,421,215 ( 0.64%)  ???:llvm::LiveIntervals::HMEditor::updateAllRanges(llvm::MachineInstr*)
  196,863,840 ( 0.60%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  189,166,460 ( 0.57%)  ???:llvm::FindFunctionBackedges(llvm::Function const&, llvm::SmallVectorImpl<std::pair<llvm::BasicBlock const*, llvm::BasicBlock const*> >&)
  188,805,812 ( 0.57%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  185,893,129 ( 0.56%)  ???:SimplifyICmpInst(unsigned int, llvm::Value*, llvm::Value*, llvm::SimplifyQuery const&, unsigned int) [clone .llvm.1619516508949622737]
  176,831,875 ( 0.54%)  ???:(anonymous namespace)::LazyValueInfoImpl::getEdgeValue(llvm::Value*, llvm::BasicBlock*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
  153,014,805 ( 0.46%)  ???:computeKnownBits(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  151,320,296 ( 0.46%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  150,454,443 ( 0.46%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  150,448,434 ( 0.46%)  ???:runCVP(llvm::Module&) [clone .llvm.11785992503873176614]
  146,900,995 ( 0.45%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >, (anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*, llvm::DenseMapInfo<(anonymous namespace)::SimpleValue>, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> >::LookupBucketFor<(anonymous namespace)::SimpleValue>((anonymous namespace)::SimpleValue const&, llvm::detail::DenseMapPair<(anonymous namespace)::SimpleValue, llvm::ScopedHashTableVal<(anonymous namespace)::SimpleValue, llvm::Value*>*> const*&) const
  145,212,311 ( 0.44%)  ???:llvm::MemorySSA::buildMemorySSA(llvm::BatchAAResults&)
  143,465,718 ( 0.44%)  ???:llvm::simplifyCFG(llvm::BasicBlock*, llvm::TargetTransformInfo const&, llvm::DomTreeUpdater*, llvm::SimplifyCFGOptions const&, llvm::ArrayRef<llvm::WeakVH>)
  143,291,475 ( 0.44%)  ???:(anonymous namespace)::MachineCopyPropagation::runOnMachineFunction(llvm::MachineFunction&)
  139,867,969 ( 0.42%)  ???:llvm::SimplifyInstruction(llvm::Instruction*, llvm::SimplifyQuery const&, llvm::OptimizationRemarkEmitter*)
  132,321,013 ( 0.40%)  ???:(anonymous namespace)::DeadMachineInstructionElim::eliminateDeadMI(llvm::MachineFunction&)
  132,121,264 ( 0.40%)  ???:llvm::ScalarEvolution::getAddExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::SCEV::NoWrapFlags, unsigned int)
  127,096,181 ( 0.39%)  ./malloc/malloc.c:malloc_consolidate
  122,082,200 ( 0.37%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::verifyLoop() const
  121,903,318 ( 0.37%)  ???:llvm::isNonEscapingLocalObject(llvm::Value const*, llvm::SmallDenseMap<llvm::Value const*, bool, 8u, llvm::DenseMapInfo<llvm::Value const*>, llvm::detail::DenseMapPair<llvm::Value const*, bool> >*)
  120,627,843 ( 0.37%)  ???:llvm::InstCombinerImpl::visitICmpInst(llvm::ICmpInst&)
  118,986,058 ( 0.36%)  ???:llvm::BitstreamCursor::readRecord(unsigned int, llvm::SmallVectorImpl<unsigned long>&, llvm::StringRef*)
  117,524,107 ( 0.36%)  ???:llvm::DataLayout::getTypeSizeInBits(llvm::Type*) const
  116,451,840 ( 0.35%)  ???:llvm::LiveVariables::HandleRegMask(llvm::MachineOperand const&)
  108,955,175 ( 0.33%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::FindRoots(llvm::DominatorTreeBase<llvm::BasicBlock, true> const&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
  107,159,164 ( 0.33%)  ???:llvm::LoopInfoBase<llvm::BasicBlock, llvm::Loop>::analyze(llvm::DominatorTreeBase<llvm::BasicBlock, false> const&)
  107,050,749 ( 0.33%)  ???:llvm::PopulateLoopsDFS<llvm::BasicBlock, llvm::Loop>::traverse(llvm::BasicBlock*)
  106,401,640 ( 0.32%)  ???:llvm::Optional<unsigned int> llvm::BranchProbabilityInfo::getMaxEstimatedEdgeWeight<llvm::BasicBlock**>(llvm::BranchProbabilityInfo::LoopBlock const&, llvm::iterator_range<llvm::BasicBlock**>) const
  106,365,832 ( 0.32%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  106,068,954 ( 0.32%)  ???:llvm::IDFCalculatorBase<llvm::BasicBlock, false>::calculate(llvm::SmallVectorImpl<llvm::BasicBlock*>&)
  105,475,537 ( 0.32%)  ???:llvm::InstCombinerImpl::visitCallInst(llvm::CallInst&)
  103,692,898 ( 0.32%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  103,640,357 ( 0.31%)  ???:isKnownNonZero(llvm::Value const*, llvm::APInt const&, unsigned int, (anonymous namespace)::Query const&) [clone .llvm.15619146473165121143]
  103,294,606 ( 0.31%)  ???:llvm::BasicAAResult::alias(llvm::MemoryLocation const&, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
  100,748,428 ( 0.31%)  ???:llvm::MemoryDependenceResults::getNonLocalPointerDepFromBB(llvm::Instruction*, llvm::PHITransAddr const&, llvm::MemoryLocation const&, bool, llvm::BasicBlock*, llvm::SmallVectorImpl<llvm::NonLocalDepResult>&, llvm::DenseMap<llvm::BasicBlock*, llvm::Value*, llvm::DenseMapInfo<llvm::BasicBlock*>, llvm::detail::DenseMapPair<llvm::BasicBlock*, llvm::Value*> >&, bool, bool)
   96,730,309 ( 0.29%)  ???:computeKnownBitsFromOperator(llvm::Operator const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   92,053,393 ( 0.28%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::BatchUpdateInfo*)
   89,058,560 ( 0.27%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
   88,979,605 ( 0.27%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   88,474,887 ( 0.27%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
   87,555,113 ( 0.27%)  ???:(anonymous namespace)::CallAnalyzer::analyze()
   86,816,874 ( 0.26%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   86,371,102 ( 0.26%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
   85,885,415 ( 0.26%)  ???:llvm::GVN::processBlock(llvm::BasicBlock*)
   84,135,302 ( 0.26%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, unsigned int)
   83,665,845 ( 0.25%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::initializeRPOT()
   83,538,677 ( 0.25%)  ???:llvm::LiveRangeCalc::findReachingDefs(llvm::LiveRange&, llvm::MachineBasicBlock&, llvm::SlotIndex, unsigned int, llvm::ArrayRef<llvm::SlotIndex>)
   83,129,488 ( 0.25%)  ???:llvm::SimplifyGEPInst(llvm::Type*, llvm::ArrayRef<llvm::Value*>, llvm::SimplifyQuery const&)
   82,839,169 ( 0.25%)  ???:llvm::LivePhysRegs::stepBackward(llvm::MachineInstr const&)
   82,242,027 ( 0.25%)  ???:(anonymous namespace)::EarlyCSE::run() [clone .llvm.7062997131228810369]
   81,702,127 ( 0.25%)  ???:llvm::InstCombinerImpl::visitLoadInst(llvm::LoadInst&)
   80,172,137 ( 0.24%)  ???:(anonymous namespace)::AggressiveDeadCodeElimination::performDeadCodeElimination()
   78,571,792 ( 0.24%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
   78,510,667 ( 0.24%)  ???:llvm::ScalarEvolution::getMulExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::SCEV::NoWrapFlags, unsigned int)
   76,936,799 ( 0.23%)  ???:llvm::JumpThreadingPass::processBlock(llvm::BasicBlock*)
   76,445,184 ( 0.23%)  ???:llvm::MemorySSA::OptimizeUses::optimizeUses()
   76,183,537 ( 0.23%)  ???:llvm::LiveIntervals::checkRegMaskInterference(llvm::LiveInterval&, llvm::BitVector&)
   76,175,657 ( 0.23%)  ???:llvm::BlockFrequencyInfoImpl<llvm::BasicBlock>::tryToComputeMassInFunction()
   74,395,613 ( 0.23%)  ./stdlib/msort.c:msort_with_tmp.part.0
   72,470,559 ( 0.22%)  ???:llvm::InterferenceCache::Entry::update(unsigned int)
   71,762,425 ( 0.22%)  ???:(anonymous namespace)::SimplifyCFGOpt::simplifyCondBranch(llvm::BranchInst*, llvm::IRBuilder<llvm::ConstantFolder, llvm::IRBuilderDefaultInserter>&)
   70,214,009 ( 0.21%)  ???:computeKnownBitsFromAssume(llvm::Value const*, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   70,079,911 ( 0.21%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   69,699,395 ( 0.21%)  ???:llvm::BasicAAResult::getModRefInfo(llvm::CallBase const*, llvm::MemoryLocation const&, llvm::AAQueryInfo&)
   69,567,755 ( 0.21%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > std::__copy_move_a2<false, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > >(llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, llvm::po_iterator<llvm::Function const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::Function const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > >)
   69,135,491 ( 0.21%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::MachineBasicBlock, false>&, unsigned int)
   68,948,851 ( 0.21%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
   67,984,518 ( 0.21%)  ???:llvm::BlockFrequencyInfoImplBase::finalizeMetrics()
   66,878,678 ( 0.20%)  ???:llvm::Value::stripAndAccumulateConstantOffsets(llvm::DataLayout const&, llvm::APInt&, bool, llvm::function_ref<bool (llvm::Value&, llvm::APInt&)>) const
   66,596,946 ( 0.20%)  ???:llvm::ScalarEvolution::getRangeRef(llvm::SCEV const*, llvm::ScalarEvolution::RangeSignHint)
   65,300,679 ( 0.20%)  ???:llvm::Type::isSizedDerivedType(llvm::SmallPtrSetImpl<llvm::Type*>*) const
   64,356,304 ( 0.20%)  ???:runImpl(llvm::Function&, llvm::LazyValueInfo*, llvm::DominatorTree*, llvm::SimplifyQuery const&) [clone .llvm.16011871802505272439]
   62,910,465 ( 0.19%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > > std::__copy_move_a<false, llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > > >(llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, llvm::po_iterator<llvm::Function*, llvm::SmallPtrSet<llvm::BasicBlock*, 8u>, false, llvm::GraphTraits<llvm::Function*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock*, std::allocator<llvm::BasicBlock*> > >)
   62,057,004 ( 0.19%)  ???:llvm::ScalarEvolution::getSCEV(llvm::Value*)
   61,609,035 ( 0.19%)  ???:llvm::isPotentiallyReachable(llvm::BasicBlock const*, llvm::BasicBlock const*, llvm::SmallPtrSetImpl<llvm::BasicBlock*> const*, llvm::DominatorTree const*, llvm::LoopInfo const*)
   60,727,165 ( 0.18%)  ???:llvm::LiveRange::extendInBlock(llvm::ArrayRef<llvm::SlotIndex>, llvm::SlotIndex, llvm::SlotIndex)
   60,501,862 ( 0.18%)  ???:llvm::BranchProbabilityInfo::SccInfo::SccInfo(llvm::Function const&)
   60,415,664 ( 0.18%)  ???:llvm::InstCombinerImpl::visitBitCast(llvm::BitCastInst&)
   60,210,404 ( 0.18%)  ???:llvm::DAGTypeLegalizer::run()
   59,992,078 ( 0.18%)  ???:llvm::ConstantFoldTerminator(llvm::BasicBlock*, bool, llvm::TargetLibraryInfo const*, llvm::DomTreeUpdater*)
   59,958,217 ( 0.18%)  ???:(anonymous namespace)::eliminateDeadStores(llvm::Function&, llvm::AAResults&, llvm::MemorySSA&, llvm::DominatorTree&, llvm::PostDominatorTree&, llvm::TargetLibraryInfo const&, llvm::LoopInfo const&) [clone .llvm.5769264623867638418]
   59,781,834 ( 0.18%)  ???:llvm::InstCombinerImpl::visitInvokeInst(llvm::InvokeInst&)
   59,745,252 ( 0.18%)  ???:(anonymous namespace)::PruningFunctionCloner::CloneBlock(llvm::BasicBlock const*, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, true, false, void>, false, true>, std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> >&)
   58,627,461 ( 0.18%)  ???:llvm::DemandedBits::isInstructionDead(llvm::Instruction*)
   58,561,554 ( 0.18%)  ???:llvm::SelectionDAG::Legalize()
   58,300,698 ( 0.18%)  ???:computeKnownBits(llvm::Value const*, llvm::APInt const&, llvm::KnownBits&, unsigned int, (anonymous namespace)::Query const&)
   58,185,885 ( 0.18%)  ???:llvm::BranchProbabilityInfo::setEdgeProbability(llvm::BasicBlock const*, llvm::SmallVectorImpl<llvm::BranchProbability> const&)
   56,548,716 ( 0.17%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
   56,033,777 ( 0.17%)  ???:llvm::LivePhysRegs::addPristines(llvm::MachineFunction const&)
   55,481,590 ( 0.17%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
   55,183,680 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   55,122,059 ( 0.17%)  ???:llvm::BranchProbabilityInfo::calcEstimatedHeuristics(llvm::BasicBlock const*)
   55,077,953 ( 0.17%)  ???:llvm::BranchProbabilityInfo::calculate(llvm::Function const&, llvm::LoopInfo const&, llvm::TargetLibraryInfo const*, llvm::DominatorTree*, llvm::PostDominatorTree*)
   55,071,187 ( 0.17%)  ???:llvm::ReachingDefAnalysis::enterBasicBlock(llvm::MachineBasicBlock*)
   54,948,041 ( 0.17%)  ???:llvm::X86InstrInfo::analyzeBranch(llvm::MachineBasicBlock&, llvm::MachineBasicBlock*&, llvm::MachineBasicBlock*&, llvm::SmallVectorImpl<llvm::MachineOperand>&, bool) const
   54,921,670 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs:rustc_expand::mbe::macro_parser::parse_tt
   54,777,659 ( 0.17%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   54,319,048 ( 0.17%)  ???:updateCGAndAnalysisManagerForPass(llvm::LazyCallGraph&, llvm::LazyCallGraph::SCC&, llvm::LazyCallGraph::Node&, llvm::AnalysisManager<llvm::LazyCallGraph::SCC, llvm::LazyCallGraph&>&, llvm::CGSCCUpdateResult&, llvm::AnalysisManager<llvm::Function>&, bool) [clone .llvm.5426518467876156712]
   54,204,893 ( 0.16%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::getModRefBehavior(llvm::CallBase const*)
   53,895,387 ( 0.16%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
   52,881,926 ( 0.16%)  ???:(anonymous namespace)::StackColoring::runOnMachineFunction(llvm::MachineFunction&)
   52,284,531 ( 0.16%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
   51,602,674 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
   51,001,497 ( 0.15%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::MachineBasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::MachineBasicBlock, false> >::BatchUpdateInfo*)
   50,883,683 ( 0.15%)  ???:llvm::BlockFrequencyInfoImplBase::distributeMass(llvm::BlockFrequencyInfoImplBase::BlockNode const&, llvm::BlockFrequencyInfoImplBase::LoopData*, llvm::BlockFrequencyInfoImplBase::Distribution&)
   50,679,376 ( 0.15%)  ???:llvm::ReassociatePass::BuildRankMap(llvm::Function&, llvm::ReversePostOrderTraversal<llvm::Function*, llvm::GraphTraits<llvm::Function*> >&)
   50,284,397 ( 0.15%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
   49,350,441 ( 0.15%)  ???:llvm::detail::PassModel<llvm::Function, llvm::PassManager<llvm::Function, llvm::AnalysisManager<llvm::Function>>, llvm::PreservedAnalyses, llvm::AnalysisManager<llvm::Function>>::run(llvm::Function&, llvm::AnalysisManager<llvm::Function>&)
   48,959,574 ( 0.15%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   48,454,016 ( 0.15%)  ???:llvm::ReachingDefAnalysis::traverse()
   46,740,401 ( 0.14%)  ???:llvm::AttributeList::get(llvm::LLVMContext&, llvm::ArrayRef<llvm::AttributeList>)
   46,691,446 ( 0.14%)  ???:llvm::ConstantRange::makeExactICmpRegion(llvm::CmpInst::Predicate, llvm::APInt const&)
   46,385,898 ( 0.14%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
   45,797,971 ( 0.14%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::hasDedicatedExits() const
   45,742,424 ( 0.14%)  ???:(anonymous namespace)::LazyValueInfoImpl::getValueInBlock(llvm::Value*, llvm::BasicBlock*, llvm::Instruction*) [clone .llvm.4316243980339171764]
   43,823,719 ( 0.13%)  ???:???
   43,235,337 ( 0.13%)  ???:llvm::FoldBranchToCommonDest(llvm::BranchInst*, llvm::DomTreeUpdater*, llvm::MemorySSAUpdater*, llvm::TargetTransformInfo const*, unsigned int)
   42,895,662 ( 0.13%)  ???:llvm::ScalarEvolution::getAddRecExpr(llvm::SmallVectorImpl<llvm::SCEV const*>&, llvm::Loop const*, llvm::SCEV::NoWrapFlags)
   41,848,615 ( 0.13%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   41,608,901 ( 0.13%)  ???:llvm::AAResults::getModRefInfo(llvm::Instruction const*, llvm::Optional<llvm::MemoryLocation> const&, llvm::AAQueryInfo&)
   41,488,011 ( 0.13%)  ???:llvm::SROA::runOnAlloca(llvm::AllocaInst&)
   41,423,636 ( 0.13%)  ???:llvm::ScalarEvolution::getLoopDisposition(llvm::SCEV const*, llvm::Loop const*)
   41,228,334 ( 0.13%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::getExitingBlock() const
   40,567,852 ( 0.12%)  ???:std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > std::__copy_move_a<false, llvm::po_iterator<llvm::BasicBlock const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::BasicBlock const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > > >(llvm::po_iterator<llvm::BasicBlock const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::BasicBlock const*> >, llvm::po_iterator<llvm::BasicBlock const*, llvm::SmallPtrSet<llvm::BasicBlock const*, 8u>, false, llvm::GraphTraits<llvm::BasicBlock const*> >, std::back_insert_iterator<std::vector<llvm::BasicBlock const*, std::allocator<llvm::BasicBlock const*> > >)
   40,173,384 ( 0.12%)  ???:llvm::BranchProbabilityInfo::computeEestimateBlockWeight(llvm::Function const&, llvm::DominatorTree*, llvm::PostDominatorTree*)
   40,012,026 ( 0.12%)  ???:llvm::MachineInstr::isIdenticalTo(llvm::MachineInstr const&, llvm::MachineInstr::MICheckType) const
   39,009,561 ( 0.12%)  ???:llvm::LiveRange::isLiveAtIndexes(llvm::ArrayRef<llvm::SlotIndex>) const
   38,997,437 ( 0.12%)  ???:llvm::SCCPInstVisitor::visitTerminator(llvm::Instruction&)
   38,947,974 ( 0.12%)  ???:(anonymous namespace)::CVPLatticeFunc::ComputeInstructionState(llvm::Instruction&, llvm::DenseMap<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::DenseMapInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > >, llvm::detail::DenseMapPair<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal> >&, llvm::SparseSolver<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > >, (anonymous namespace)::CVPLatticeVal, llvm::LatticeKeyInfo<llvm::PointerIntPair<llvm::Value*, 2u, (anonymous namespace)::IPOGrouping, llvm::PointerLikeTypeTraits<llvm::Value*>, llvm::PointerIntPairInfo<llvm::Value*, 2u, llvm::PointerLikeTypeTraits<llvm::Value*> > > > >&)
   38,777,404 ( 0.12%)  ???:llvm::X86TargetMachine::getSubtargetImpl(llvm::Function const&) const
   38,498,857 ( 0.12%)  ???:llvm::formLCSSAForInstructions(llvm::SmallVectorImpl<llvm::Instruction*>&, llvm::DominatorTree const&, llvm::LoopInfo const&, llvm::ScalarEvolution*, llvm::IRBuilderBase&, llvm::SmallVectorImpl<llvm::PHINode*>*)
   38,352,571 ( 0.12%)  ???:llvm::AAResults::Model<llvm::BasicAAResult>::pointsToConstantMemory(llvm::MemoryLocation const&, llvm::AAQueryInfo&, bool)
   37,432,929 ( 0.11%)  ???:llvm::ScalarEvolution::getOrCreateAddExpr(llvm::ArrayRef<llvm::SCEV const*>, llvm::SCEV::NoWrapFlags)
   37,377,689 ( 0.11%)  ???:(anonymous namespace)::MachineLICMBase::runOnMachineFunction(llvm::MachineFunction&)
   37,298,509 ( 0.11%)  ???:llvm::MergeBlockIntoPredecessor(llvm::BasicBlock*, llvm::DomTreeUpdater*, llvm::LoopInfo*, llvm::MemorySSAUpdater*, llvm::MemoryDependenceResults*, bool)
   36,703,330 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:rustc_expand::mbe::macro_parser::parse_tt
   36,399,232 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2
   36,306,682 ( 0.11%)  ???:llvm::SCCPInstVisitor::solve()
   35,816,957 ( 0.11%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, true> >::attachNewSubtree(llvm::DominatorTreeBase<llvm::BasicBlock, true>&, llvm::DomTreeNodeBase<llvm::BasicBlock>*)
   35,804,916 ( 0.11%)  ???:llvm::DenseMapBase<llvm::DenseMap<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >, llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> >, llvm::DenseMapInfo<llvm::PoisoningVH<llvm::BasicBlock> >, llvm::detail::DenseMapPair<llvm::PoisoningVH<llvm::BasicBlock>, std::unique_ptr<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry, std::default_delete<(anonymous namespace)::LazyValueInfoCache::BlockCacheEntry> > > >::destroyAll() [clone .llvm.4316243980339171764]
   35,417,657 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   35,374,801 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   34,984,121 ( 0.11%)  ???:llvm::JumpThreadingPass::runImpl(llvm::Function&, llvm::TargetLibraryInfo*, llvm::LazyValueInfo*, llvm::AAResults*, llvm::DomTreeUpdater*, bool, std::unique_ptr<llvm::BlockFrequencyInfo, std::default_delete<llvm::BlockFrequencyInfo> >, std::unique_ptr<llvm::BranchProbabilityInfo, std::default_delete<llvm::BranchProbabilityInfo> >)
   34,705,330 ( 0.11%)  ???:llvm::TargetTransformInfo::Model<llvm::X86TTIImpl>::getUserCost(llvm::User const*, llvm::ArrayRef<llvm::Value const*>, llvm::TargetTransformInfo::TargetCostKind)
   34,099,020 ( 0.10%)  ???:llvm::LiveIntervalUnion::Query::collectInterferingVRegs(unsigned int)
   33,586,044 ( 0.10%)  ???:(anonymous namespace)::MachineCSE::runOnMachineFunction(llvm::MachineFunction&)
   33,533,163 ( 0.10%)  ???:llvm::GVN::performPRE(llvm::Function&)
   33,327,839 ( 0.10%)  ???:(anonymous namespace)::ClobberWalker<llvm::BatchAAResults>::addSearches(llvm::MemoryPhi*, llvm::SmallVectorImpl<unsigned int>&, unsigned int)
   32,962,353 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs
--------------------------------------------------------------------------------
Ir                 

-- line 90 ----------------------------------------
        .           use std::collections::hash_map::Entry::{Occupied, Vacant};
        .           use std::mem;
        .           use std::ops::{Deref, DerefMut};
        .           
        .           // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.
        .           
        .           /// Either a sequence of token trees or a single one. This is used as the representation of the
        .           /// sequence of tokens that make up a matcher.
  419,271 ( 0.00%)  #[derive(Clone)]
        .           enum TokenTreeOrTokenTreeSlice<'tt> {
       36 ( 0.00%)      Tt(TokenTree),
  103,197 ( 0.00%)      TtSeq(&'tt [TokenTree]),
        .           }
        .           
        .           impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {
        .               /// Returns the number of constituent top-level token trees of `self` (top-level in that it
        .               /// will not recursively descend into subtrees).
        .               fn len(&self) -> usize {
2,560,814 ( 0.01%)          match *self {
  627,116 ( 0.00%)              TtSeq(ref v) => v.len(),
        .                       Tt(ref tt) => tt.len(),
        .                   }
        .               }
        .           
        .               /// The `index`-th token tree of `self`.
        .               fn get_tt(&self, index: usize) -> TokenTree {
  560,310 ( 0.00%)          match *self {
1,950,756 ( 0.01%)              TtSeq(ref v) => v[index].clone(),
  548,510 ( 0.00%)              Tt(ref tt) => tt.get_tt(index),
        .                   }
        .               }
        .           }
        .           
        .           /// An unzipping of `TokenTree`s... see the `stack` field of `MatcherPos`.
        .           ///
        .           /// This is used by `inner_parse_loop` to keep track of delimited submatchers that we have
        .           /// descended into.
   64,572 ( 0.00%)  #[derive(Clone)]
        .           struct MatcherTtFrame<'tt> {
        .               /// The "parent" matcher that we are descending into.
        .               elts: TokenTreeOrTokenTreeSlice<'tt>,
        .               /// The position of the "dot" in `elts` at the time we descended.
   32,286 ( 0.00%)      idx: usize,
        .           }
        .           
        .           type NamedMatchVec = SmallVec<[NamedMatch; 4]>;
        .           
        .           /// Represents a single "position" (aka "matcher position", aka "item"), as
        .           /// described in the module documentation.
        .           ///
        .           /// Here:
-- line 140 ----------------------------------------
-- line 147 ----------------------------------------
        .           ///   position refers to.
        .           ///
        .           /// It is important to distinguish these two lifetimes because we have a
        .           /// `SmallVec<TokenTreeOrTokenTreeSlice<'tt>>` below, and the destructor of
        .           /// that is considered to possibly access the data from its elements (it lacks
        .           /// a `#[may_dangle]` attribute). As a result, the compiler needs to know that
        .           /// all the elements in that `SmallVec` strictly outlive the root stack slot
        .           /// lifetime. By separating `'tt` from `'root`, we can show that.
1,816,503 ( 0.01%)  #[derive(Clone)]
        .           struct MatcherPos<'root, 'tt> {
        .               /// The token or sequence of tokens that make up the matcher
        .               top_elts: TokenTreeOrTokenTreeSlice<'tt>,
        .           
        .               /// The position of the "dot" in this matcher
   38,649 ( 0.00%)      idx: usize,
        .           
        .               /// For each named metavar in the matcher, we keep track of token trees matched against the
        .               /// metavar by the black box parser. In particular, there may be more than one match per
        .               /// metavar if we are in a repetition (each repetition matches each of the variables).
        .               /// Moreover, matchers and repetitions can be nested; the `matches` field is shared (hence the
        .               /// `Rc`) among all "nested" matchers. `match_lo`, `match_cur`, and `match_hi` keep track of
        .               /// the current position of the `self` matcher position in the shared `matches` list.
        .               ///
        .               /// Also, note that while we are descending into a sequence, matchers are given their own
        .               /// `matches` vector. Only once we reach the end of a full repetition of the sequence do we add
        .               /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`
        .               /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one
        .               /// wants the shared `matches`, one should use `up.matches`.
  154,596 ( 0.00%)      matches: Box<[Lrc<NamedMatchVec>]>,
        .               /// The position in `matches` corresponding to the first metavar in this matcher's sequence of
        .               /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds
        .               /// to `matches[match_lo]`.
   38,649 ( 0.00%)      match_lo: usize,
        .               /// The position in `matches` corresponding to the metavar we are currently trying to match
        .               /// against the source token stream. `match_lo <= match_cur <= match_hi`.
        .               match_cur: usize,
        .               /// Similar to `match_lo` except `match_hi` is the position in `matches` of the _last_ metavar
        .               /// in this matcher.
   38,649 ( 0.00%)      match_hi: usize,
        .           
        .               // The following fields are used if we are matching a repetition. If we aren't, they should be
        .               // `None`.
        .               /// The KleeneOp of this sequence if we are in a repetition.
   38,649 ( 0.00%)      seq_op: Option<mbe::KleeneOp>,
        .           
        .               /// The separator if we are in a repetition.
        .               sep: Option<Token>,
        .           
        .               /// The "parent" matcher position if we are in a repetition. That is, the matcher position just
        .               /// before we enter the sequence.
   77,298 ( 0.00%)      up: Option<MatcherPosHandle<'root, 'tt>>,
        .           
        .               /// Specifically used to "unzip" token trees. By "unzip", we mean to unwrap the delimiters from
        .               /// a delimited token tree (e.g., something wrapped in `(` `)`) or to get the contents of a doc
        .               /// comment...
        .               ///
        .               /// When matching against matchers with nested delimited submatchers (e.g., `pat ( pat ( .. )
        .               /// pat ) pat`), we need to keep track of the matchers we are descending into. This stack does
        .               /// that where the bottom of the stack is the outermost matcher.
        .               /// Also, throughout the comments, this "descent" is often referred to as "unzipping"...
        .               stack: SmallVec<[MatcherTtFrame<'tt>; 1]>,
        .           }
        .           
        .           impl<'root, 'tt> MatcherPos<'root, 'tt> {
        .               /// Adds `m` as a named match for the `idx`-th metavar.
        .               fn push_match(&mut self, idx: usize, m: NamedMatch) {
1,058,628 ( 0.00%)          let matches = Lrc::make_mut(&mut self.matches[idx]);
        .                   matches.push(m);
        .               }
        .           }
        .           
        .           // Lots of MatcherPos instances are created at runtime. Allocating them on the
        .           // heap is slow. Furthermore, using SmallVec<MatcherPos> to allocate them all
        .           // on the stack is also slow, because MatcherPos is quite a large type and
        .           // instances get moved around a lot between vectors, which requires lots of
-- line 221 ----------------------------------------
-- line 226 ----------------------------------------
        .           // and this type is used to encapsulate both cases.
        .           enum MatcherPosHandle<'root, 'tt> {
        .               Ref(&'root mut MatcherPos<'root, 'tt>),
        .               Box(Box<MatcherPos<'root, 'tt>>),
        .           }
        .           
        .           impl<'root, 'tt> Clone for MatcherPosHandle<'root, 'tt> {
        .               // This always produces a new Box.
  154,596 ( 0.00%)      fn clone(&self) -> Self {
   77,298 ( 0.00%)          MatcherPosHandle::Box(match *self {
   40,071 ( 0.00%)              MatcherPosHandle::Ref(ref r) => Box::new((**r).clone()),
        .                       MatcherPosHandle::Box(ref b) => b.clone(),
        .                   })
  231,894 ( 0.00%)      }
        .           }
        .           
        .           impl<'root, 'tt> Deref for MatcherPosHandle<'root, 'tt> {
        .               type Target = MatcherPos<'root, 'tt>;
        .               fn deref(&self) -> &Self::Target {
        .                   match *self {
        .                       MatcherPosHandle::Ref(ref r) => r,
        .                       MatcherPosHandle::Box(ref b) => b,
-- line 247 ----------------------------------------
-- line 272 ----------------------------------------
        .           
        .           /// A `ParseResult` where the `Success` variant contains a mapping of
        .           /// `MacroRulesNormalizedIdent`s to `NamedMatch`es. This represents the mapping
        .           /// of metavars to the token trees they bind to.
        .           crate type NamedParseResult = ParseResult<FxHashMap<MacroRulesNormalizedIdent, NamedMatch>>;
        .           
        .           /// Count how many metavars are named in the given matcher `ms`.
        .           pub(super) fn count_names(ms: &[TokenTree]) -> usize {
1,914,208 ( 0.01%)      ms.iter().fold(0, |count, elt| {
  957,104 ( 0.00%)          count
2,871,312 ( 0.01%)              + match *elt {
   61,042 ( 0.00%)                  TokenTree::Sequence(_, ref seq) => seq.num_captures,
   58,494 ( 0.00%)                  TokenTree::Delimited(_, ref delim) => count_names(&delim.tts),
        .                           TokenTree::MetaVar(..) => 0,
        .                           TokenTree::MetaVarDecl(..) => 1,
        .                           TokenTree::Token(..) => 0,
        .                       }
2,392,760 ( 0.01%)      })
        .           }
        .           
        .           /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.
        .           fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {
  338,417 ( 0.00%)      if len == 0 {
        .                   vec![]
        .               } else {
        .                   let empty_matches = Lrc::new(SmallVec::new());
        .                   vec![empty_matches; len]
        .               }
        .               .into_boxed_slice()
        .           }
        .           
        .           /// Generates the top-level matcher position in which the "dot" is before the first token of the
        .           /// matcher `ms`.
        .           fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {
        .               let match_idx_hi = count_names(ms);
        .               let matches = create_matches(match_idx_hi);
1,668,255 ( 0.01%)      MatcherPos {
        .                   // Start with the top level matcher given to us
        .                   top_elts: TtSeq(ms), // "elts" is an abbr. for "elements"
        .                   // The "dot" is before the first token of the matcher
        .                   idx: 0,
        .           
        .                   // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.
        .                   // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since
        .                   // we haven't actually matched anything yet.
-- line 316 ----------------------------------------
-- line 340 ----------------------------------------
        .           /// particular token tree.
        .           ///
        .           /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of
        .           /// the `MatchedNonterminal`s, will depend on the token tree it was applied
        .           /// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating
        .           /// token tree. The depth of the `NamedMatch` structure will therefore depend
        .           /// only on the nesting depth of `ast::TTSeq`s in the originating
        .           /// token tree it was derived from.
    1,850 ( 0.00%)  #[derive(Debug, Clone)]
        .           crate enum NamedMatch {
        .               MatchedSeq(Lrc<NamedMatchVec>),
        .               MatchedNonterminal(Lrc<Nonterminal>),
        .           }
        .           
        .           /// Takes a sequence of token trees `ms` representing a matcher which successfully matched input
        .           /// and an iterator of items that matched input and produces a `NamedParseResult`.
        .           fn nameize<I: Iterator<Item = NamedMatch>>(
-- line 356 ----------------------------------------
-- line 357 ----------------------------------------
        .               sess: &ParseSess,
        .               ms: &[TokenTree],
        .               mut res: I,
        .           ) -> NamedParseResult {
        .               // Recursively descend into each type of matcher (e.g., sequences, delimited, metavars) and make
        .               // sure that each metavar has _exactly one_ binding. If a metavar does not have exactly one
        .               // binding, then there is an error. If it does, then we insert the binding into the
        .               // `NamedParseResult`.
  512,171 ( 0.00%)      fn n_rec<I: Iterator<Item = NamedMatch>>(
        .                   sess: &ParseSess,
        .                   m: &TokenTree,
        .                   res: &mut I,
        .                   ret_val: &mut FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
        .               ) -> Result<(), (rustc_span::Span, String)> {
  306,363 ( 0.00%)          match *m {
        .                       TokenTree::Sequence(_, ref seq) => {
    2,448 ( 0.00%)                  for next_m in &seq.tts {
   14,952 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?
        .                           }
        .                       }
        .                       TokenTree::Delimited(_, ref delim) => {
    4,528 ( 0.00%)                  for next_m in &delim.tts {
   27,888 ( 0.00%)                      n_rec(sess, next_m, res.by_ref(), ret_val)?;
        .                           }
        .                       }
        .                       TokenTree::MetaVarDecl(span, _, None) => {
        .                           if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                               return Err((span, "missing fragment specifier".to_string()));
        .                           }
        .                       }
  220,674 ( 0.00%)              TokenTree::MetaVarDecl(sp, bind_name, _) => match ret_val
  147,116 ( 0.00%)                  .entry(MacroRulesNormalizedIdent::new(bind_name))
        .                       {
        .                           Vacant(spot) => {
        .                               spot.insert(res.next().unwrap());
        .                           }
        .                           Occupied(..) => return Err((sp, format!("duplicated bind name: {}", bind_name))),
        .                       },
        .                       TokenTree::MetaVar(..) | TokenTree::Token(..) => (),
        .                   }
        .           
   46,561 ( 0.00%)          Ok(())
  372,488 ( 0.00%)      }
        .           
        .               let mut ret_val = FxHashMap::default();
        .               for m in ms {
  351,383 ( 0.00%)          match n_rec(sess, m, res.by_ref(), &mut ret_val) {
        .                       Ok(_) => {}
        .                       Err((sp, msg)) => return Error(sp, msg),
        .                   }
        .               }
        .           
   65,250 ( 0.00%)      Success(ret_val)
        .           }
        .           
        .           /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)
        .           fn token_name_eq(t1: &Token, t2: &Token) -> bool {
  781,231 ( 0.00%)      if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {
       43 ( 0.00%)          ident1.name == ident2.name && is_raw1 == is_raw2
1,093,120 ( 0.00%)      } else if let (Some(ident1), Some(ident2)) = (t1.lifetime(), t2.lifetime()) {
        .                   ident1.name == ident2.name
        .               } else {
  468,382 ( 0.00%)          t1.kind == t2.kind
        .               }
        .           }
        .           
        .           /// Process the matcher positions of `cur_items` until it is empty. In the process, this will
        .           /// produce more items in `next_items`, `eof_items`, and `bb_items`.
        .           ///
        .           /// For more info about the how this happens, see the module-level doc comments and the inline
        .           /// comments of this function.
-- line 427 ----------------------------------------
-- line 443 ----------------------------------------
        .               sess: &ParseSess,
        .               cur_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               next_items: &mut Vec<MatcherPosHandle<'root, 'tt>>,
        .               eof_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               bb_items: &mut SmallVec<[MatcherPosHandle<'root, 'tt>; 1]>,
        .               token: &Token,
        .           ) -> ParseResult<()> {
        .               // Pop items from `cur_items` until it is empty.
1,830,620 ( 0.01%)      while let Some(mut item) = cur_items.pop() {
        .                   // When unzipped trees end, remove them. This corresponds to backtracking out of a
        .                   // delimited submatcher into which we already descended. In backtracking out again, we need
        .                   // to advance the "dot" past the delimiters in the outer matcher.
5,610,140 ( 0.02%)          while item.idx >= item.top_elts.len() {
   10,170 ( 0.00%)              match item.stack.pop() {
        .                           Some(MatcherTtFrame { elts, idx }) => {
   45,765 ( 0.00%)                      item.top_elts = elts;
   20,340 ( 0.00%)                      item.idx = idx + 1;
        .                           }
        .                           None => break,
        .                       }
        .                   }
        .           
        .                   // Get the current position of the "dot" (`idx`) in `item` and the number of token trees in
        .                   // the matcher (`len`).
        .                   let idx = item.idx;
        .                   let len = item.top_elts.len();
        .           
        .                   // If `idx >= len`, then we are at or past the end of the matcher of `item`.
1,251,576 ( 0.00%)          if idx >= len {
        .                       // We are repeating iff there is a parent. If the matcher is inside of a repetition,
        .                       // then we could be at the end of a sequence or at the beginning of the next
        .                       // repetition.
   49,266 ( 0.00%)              if item.up.is_some() {
        .                           // At this point, regardless of whether there is a separator, we should add all
        .                           // matches from the complete repetition of the sequence to the shared, top-level
        .                           // `matches` list (actually, `up.matches`, which could itself not be the top-level,
        .                           // but anyway...). Moreover, we add another item to `cur_items` in which the "dot"
        .                           // is at the end of the `up` matcher. This ensures that the "dot" in the `up`
        .                           // matcher is also advanced sufficiently.
        .                           //
        .                           // NOTE: removing the condition `idx == len` allows trailing separators.
   71,974 ( 0.00%)                  if idx == len {
        .                               // Get the `up` matcher
        .                               let mut new_pos = item.up.clone().unwrap();
        .           
        .                               // Add matches from this repetition to the `matches` of `up`
   71,790 ( 0.00%)                      for idx in item.match_lo..item.match_hi {
  179,505 ( 0.00%)                          let sub = item.matches[idx].clone();
  107,703 ( 0.00%)                          new_pos.push_match(idx, MatchedSeq(sub));
        .                               }
        .           
        .                               // Move the "dot" past the repetition in `up`
   71,698 ( 0.00%)                      new_pos.match_cur = item.match_hi;
  215,370 ( 0.00%)                      new_pos.idx += 1;
        .                               cur_items.push(new_pos);
        .                           }
        .           
        .                           // Check if we need a separator.
   35,895 ( 0.00%)                  if idx == len && item.sep.is_some() {
        .                               // We have a separator, and it is the current token. We can advance past the
        .                               // separator token.
      196 ( 0.00%)                      if item.sep.as_ref().map_or(false, |sep| token_name_eq(token, sep)) {
      644 ( 0.00%)                          item.idx += 1;
        .                                   next_items.push(item);
        .                               }
        .                           }
        .                           // We don't need a separator. Move the "dot" back to the beginning of the matcher
        .                           // and try to match again UNLESS we are only allowed to have _one_ repetition.
   35,889 ( 0.00%)                  else if item.seq_op != Some(mbe::KleeneOp::ZeroOrOne) {
   71,778 ( 0.00%)                      item.match_cur = item.match_lo;
  143,556 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .                       }
        .                       // If we are not in a repetition, then being at the end of a matcher means that we have
        .                       // reached the potential end of the input.
        .                       else {
        .                           eof_items.push(item);
        .                       }
        .                   }
        .                   // We are in the middle of a matcher.
        .                   else {
        .                       // Look at what token in the matcher we are trying to match the current token (`token`)
        .                       // against. Depending on that, we may generate new items.
1,676,309 ( 0.01%)              match item.top_elts.get_tt(idx) {
        .                           // Need to descend into a sequence
   13,239 ( 0.00%)                  TokenTree::Sequence(sp, seq) => {
        .                               // Examine the case where there are 0 matches of this sequence. We are
        .                               // implicitly disallowing OneOrMore from having 0 matches here. Thus, that will
        .                               // result in a "no rules expected token" error by virtue of this matcher not
        .                               // working.
    5,552 ( 0.00%)                      if seq.kleene.op == mbe::KleeneOp::ZeroOrMore
        .                                   || seq.kleene.op == mbe::KleeneOp::ZeroOrOne
        .                               {
    5,508 ( 0.00%)                          let mut new_item = item.clone();
   11,016 ( 0.00%)                          new_item.match_cur += seq.num_captures;
   13,770 ( 0.00%)                          new_item.idx += 1;
   16,524 ( 0.00%)                          for idx in item.match_cur..item.match_cur + seq.num_captures {
    7,968 ( 0.00%)                              new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));
        .                                   }
        .                                   cur_items.push(new_item);
        .                               }
        .           
    2,776 ( 0.00%)                      let matches = create_matches(item.matches.len());
   33,312 ( 0.00%)                      cur_items.push(MatcherPosHandle::Box(Box::new(MatcherPos {
    2,776 ( 0.00%)                          stack: smallvec![],
        .                                   sep: seq.separator.clone(),
    2,776 ( 0.00%)                          seq_op: Some(seq.kleene.op),
        .                                   idx: 0,
   13,880 ( 0.00%)                          matches,
    5,552 ( 0.00%)                          match_lo: item.match_cur,
        .                                   match_cur: item.match_cur,
    5,552 ( 0.00%)                          match_hi: item.match_cur + seq.num_captures,
        .                                   up: Some(item),
   19,432 ( 0.00%)                          top_elts: Tt(TokenTree::Sequence(sp, seq)),
        .                               })));
        .                           }
        .           
        .                           // We need to match a metavar (but the identifier is invalid)... this is an error
        .                           TokenTree::MetaVarDecl(span, _, None) => {
        .                               if sess.missing_fragment_specifiers.borrow_mut().remove(&span).is_some() {
        .                                   return Error(span, "missing fragment specifier".to_string());
        .                               }
-- line 565 ----------------------------------------
-- line 568 ----------------------------------------
        .                           // We need to match a metavar with a valid ident... call out to the black-box
        .                           // parser by adding an item to `bb_items`.
        .                           TokenTree::MetaVarDecl(_, _, Some(kind)) => {
        .                               // Built-in nonterminals never start with these tokens, so we can eliminate
        .                               // them from consideration.
        .                               //
        .                               // We use the span of the metavariable declaration to determine any
        .                               // edition-specific matching behavior for non-terminals.
1,144,605 ( 0.00%)                      if Parser::nonterminal_may_begin_with(kind, token) {
        .                                   bb_items.push(item);
        .                               }
        .                           }
        .           
        .                           // We need to descend into a delimited submatcher or a doc comment. To do this, we
        .                           // push the current matcher onto a stack and push a new item containing the
        .                           // submatcher onto `cur_items`.
        .                           //
        .                           // At the beginning of the loop, if we reach the end of the delimited submatcher,
        .                           // we pop the stack to backtrack out of the descent.
  102,945 ( 0.00%)                  seq @ (TokenTree::Delimited(..)
        .                           | TokenTree::Token(Token { kind: DocComment(..), .. })) => {
        .                               let lower_elts = mem::replace(&mut item.top_elts, Tt(seq));
   20,589 ( 0.00%)                      let idx = item.idx;
  144,123 ( 0.00%)                      item.stack.push(MatcherTtFrame { elts: lower_elts, idx });
   82,356 ( 0.00%)                      item.idx = 0;
        .                               cur_items.push(item);
        .                           }
        .           
        .                           // We just matched a normal token. We can just advance the parser.
  423,839 ( 0.00%)                  TokenTree::Token(t) if token_name_eq(&t, token) => {
  156,401 ( 0.00%)                      item.idx += 1;
        .                               next_items.push(item);
        .                           }
        .           
        .                           // There was another token that was not `token`... This means we can't add any
        .                           // rules. NOTE that this is not necessarily an error unless _all_ items in
        .                           // `cur_items` end up doing this. There may still be some other matchers that do
        .                           // end up working out.
        .                           TokenTree::Token(..) | TokenTree::MetaVar(..) => {}
        .                       }
2,095,103 ( 0.01%)          }
  775,600 ( 0.00%)      }
        .           
        .               // Yay a successful parse (so far)!
        .               Success(())
        .           }
        .           
        .           /// Use the given sequence of token trees (`ms`) as a matcher. Match the token
        .           /// stream from the given `parser` against it and return the match.
1,112,170 ( 0.00%)  pub(super) fn parse_tt(
        .               parser: &mut Cow<'_, Parser<'_>>,
        .               ms: &[TokenTree],
        .               macro_name: Ident,
        .           ) -> NamedParseResult {
        .               // A queue of possible matcher positions. We initialize it with the matcher position in which
        .               // the "dot" is before the first token of the first token tree in `ms`. `inner_parse_loop` then
        .               // processes all of these possible matcher positions and produces possible next positions into
        .               // `next_items`. After some post-processing, the contents of `next_items` replenish `cur_items`
        .               // and we start over again.
        .               //
        .               // This MatcherPos instance is allocated on the stack. All others -- and
        .               // there are frequently *no* others! -- are allocated on the heap.
        .               let mut initial = initial_matcher_pos(ms);
  556,085 ( 0.00%)      let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];
        .               let mut next_items = Vec::new();
        .           
        .               loop {
        .                   // Matcher positions black-box parsed by parser.rs (`parser`)
        .                   let mut bb_items = SmallVec::new();
        .           
        .                   // Matcher positions that would be valid if the macro invocation was over now
        .                   let mut eof_items = SmallVec::new();
  359,660 ( 0.00%)          assert!(next_items.is_empty());
        .           
        .                   // Process `cur_items` until either we have finished the input or we need to get some
        .                   // parsing from the black-box parser done. The result is that `next_items` will contain a
        .                   // bunch of possible next matcher positions in `next_items`.
        .                   match inner_parse_loop(
        .                       parser.sess,
        .                       &mut cur_items,
        .                       &mut next_items,
-- line 648 ----------------------------------------
-- line 652 ----------------------------------------
        .                   ) {
        .                       Success(_) => {}
        .                       Failure(token, msg) => return Failure(token, msg),
        .                       Error(sp, msg) => return Error(sp, msg),
        .                       ErrorReported => return ErrorReported,
        .                   }
        .           
        .                   // inner parse loop handled all cur_items, so it's empty
  359,660 ( 0.00%)          assert!(cur_items.is_empty());
        .           
        .                   // We need to do some post processing after the `inner_parser_loop`.
        .                   //
        .                   // Error messages here could be improved with links to original rules.
        .           
        .                   // If we reached the EOF, check that there is EXACTLY ONE possible matcher. Otherwise,
        .                   // either the parse is ambiguous (which should never happen) or there is a syntax error.
1,798,300 ( 0.01%)          if parser.token == token::Eof {
   29,000 ( 0.00%)              if eof_items.len() == 1 {
        .                           let matches =
   51,279 ( 0.00%)                      eof_items[0].matches.iter_mut().map(|dv| Lrc::make_mut(dv).pop().unwrap());
   21,750 ( 0.00%)                  return nameize(parser.sess, ms, matches);
        .                       } else if eof_items.len() > 1 {
        .                           return Error(
        .                               parser.token.span,
        .                               "ambiguity: multiple successful parses".to_string(),
        .                           );
        .                       } else {
        .                           return Failure(
        .                               Token::new(
-- line 680 ----------------------------------------
-- line 687 ----------------------------------------
        .                               ),
        .                               "missing tokens in macro arguments",
        .                           );
        .                       }
        .                   }
        .                   // Performance hack: eof_items may share matchers via Rc with other things that we want
        .                   // to modify. Dropping eof_items now may drop these refcounts to 1, preventing an
        .                   // unnecessary implicit clone later in Rc::make_mut.
1,409,640 ( 0.00%)          drop(eof_items);
        .           
        .                   // If there are no possible next positions AND we aren't waiting for the black-box parser,
        .                   // then there is a syntax error.
1,183,540 ( 0.00%)          if bb_items.is_empty() && next_items.is_empty() {
1,351,571 ( 0.00%)              return Failure(parser.token.clone(), "no rules expected this token in macro call");
        .                   }
        .                   // Another possibility is that we need to call out to parse some rust nonterminal
        .                   // (black-box) parser. However, if there is not EXACTLY ONE of these, something is wrong.
  904,400 ( 0.00%)          else if (!bb_items.is_empty() && !next_items.is_empty()) || bb_items.len() > 1 {
        .                       let nts = bb_items
        .                           .iter()
        .                           .map(|item| match item.top_elts.get_tt(item.idx) {
        .                               TokenTree::MetaVarDecl(_, bind, Some(kind)) => format!("{} ('{}')", kind, bind),
        .                               _ => panic!(),
        .                           })
        .                           .collect::<Vec<String>>()
        .                           .join(" or ");
-- line 712 ----------------------------------------
-- line 721 ----------------------------------------
        .                                   n => format!("built-in NTs {} or {} other options.", nts, n),
        .                               }
        .                           ),
        .                       );
        .                   }
        .                   // Dump all possible `next_items` into `cur_items` for the next iteration.
        .                   else if !next_items.is_empty() {
        .                       // Now process the next token
   67,029 ( 0.00%)              cur_items.extend(next_items.drain(..));
   22,343 ( 0.00%)              parser.to_mut().bump();
        .                   }
        .                   // Finally, we have the case where we need to call the black-box parser to get some
        .                   // nonterminal.
        .                   else {
        .                       assert_eq!(bb_items.len(), 1);
        .           
  452,200 ( 0.00%)              let mut item = bb_items.pop().unwrap();
1,246,570 ( 0.00%)              if let TokenTree::MetaVarDecl(span, _, Some(kind)) = item.top_elts.get_tt(item.idx) {
  226,100 ( 0.00%)                  let match_cur = item.match_cur;
        .                           // We use the span of the metavariable declaration to determine any
        .                           // edition-specific matching behavior for non-terminals.
1,467,275 ( 0.00%)                  let nt = match parser.to_mut().parse_nonterminal(kind) {
        .                               Err(mut err) => {
        .                                   err.span_label(
        .                                       span,
        .                                       format!("while parsing argument for this `{}` macro fragment", kind),
        .                                   )
        .                                   .emit();
        .                                   return ErrorReported;
        .                               }
1,356,600 ( 0.00%)                      Ok(nt) => nt,
        .                           };
  904,400 ( 0.00%)                  item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));
  904,400 ( 0.00%)                  item.idx += 1;
1,356,600 ( 0.00%)                  item.match_cur += 1;
        .                       } else {
        .                           unreachable!()
        .                       }
        .                       cur_items.push(item);
        .                   }
        .           
  496,886 ( 0.00%)          assert!(!cur_items.is_empty());
        .               }
1,000,953 ( 0.00%)  }

8,206,284 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/macro_parser.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   29,556 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
6,626,936 ( 0.02%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
  243,614 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
  236,366 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
  118,203 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
  354,549 ( 0.00%)      pub prev_token: Token,
  118,223 ( 0.00%)      pub capture_cfg: bool,
  236,466 ( 0.00%)      restrictions: Restrictions,
  236,406 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
  236,406 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
  236,406 ( 0.00%)      unmatched_angle_bracket_count: u32,
  354,609 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
  118,203 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
  118,203 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
  480,040 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
  472,812 ( 0.00%)      capturing: Capturing,
  118,203 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
  398,400 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
2,019,223 ( 0.01%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
  470,153 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
  153,362 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  920,317 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
  155,651 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
  311,302 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   72,865 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   97,525 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
8,022,192 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
3,794,205 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   68,188 ( 0.00%)                  self.frame.open_delim = true;
  340,940 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
7,805,808 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  252,552 ( 0.00%)              } else if !self.frame.close_delim {
   55,822 ( 0.00%)                  self.frame.close_delim = true;
  279,110 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  111,640 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  725,660 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
  263,412 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
1,473,026 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
5,348,128 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
5,348,128 ( 0.02%)      }
        .           
3,768,730 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
1,131,001 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      573 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
1,883,410 ( 0.01%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
   39,767 ( 0.00%)          for ch in data.as_str().chars() {
        .                       count = match ch {
        .                           '"' => 1,
        .                           '#' if count > 0 => count + 1,
        .                           _ => 0,
        .                       };
        .                       num_of_hashes = cmp::max(num_of_hashes, count);
        .                   }
        .           
      764 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
      955 ( 0.00%)          let body = TokenTree::Delimited(
        .                       delim_span,
        .                       token::Bracket,
    2,292 ( 0.00%)              [
    1,337 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
      764 ( 0.00%)                  TokenTree::token(token::Eq, sp),
    1,528 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
        .                       ]
        .                       .iter()
        .                       .cloned()
        .                       .collect::<TokenStream>(),
      191 ( 0.00%)          );
        .           
        .                   self.stack.push(mem::replace(
        .                       &mut self.frame,
        .                       TokenCursorFrame::new(
        .                           delim_span,
        .                           token::NoDelim,
      191 ( 0.00%)                  if attr_style == AttrStyle::Inner {
        .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           } else {
    2,292 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
      573 ( 0.00%)          self.next()
3,391,857 ( 0.01%)      }
        .           }
        .           
    4,030 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
    3,224 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       15 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      116 ( 0.00%)      Some(match token.kind {
      232 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
      232 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
      232 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
      406 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      116 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
      406 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
      290 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
  204,022 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
   14,573 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
   29,146 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
  451,763 ( 0.00%)          let mut parser = Parser {
        .                       sess,
   14,573 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
   14,573 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   87,438 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
   29,146 ( 0.00%)          parser.bump();
        .           
        .                   parser
  131,157 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
3,861,870 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
1,507,492 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  800,316 ( 0.00%)                  self.token_cursor.next()
        .                       };
2,574,580 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  643,645 ( 0.00%)              self.token_cursor.break_last_token = false;
2,574,580 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   58,312 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
2,110,603 ( 0.01%)              if matches!(
1,287,290 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
2,573,052 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
   53,379 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    5,931 ( 0.00%)          if self.expected_tokens.is_empty() {
      852 ( 0.00%)              if self.token == *t {
      710 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
   69,468 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
   88,965 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  104,748 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   17,458 ( 0.00%)          if edible.contains(&self.token.kind) {
   17,523 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  130,935 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   83,062 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   62,124 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  144,711 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   20,673 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  124,038 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   82,692 ( 0.00%)          self.bump();
        .                   Ok(ident)
  206,730 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
1,701,707 ( 0.01%)      fn check(&mut self, tok: &TokenKind) -> bool {
  737,962 ( 0.00%)          let is_present = self.token == *tok;
  502,426 ( 0.00%)          if !is_present {
  852,541 ( 0.00%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
1,701,707 ( 0.01%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      188 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  344,758 ( 0.00%)          let is_present = self.check(tok);
  230,934 ( 0.00%)          if is_present {
   77,507 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      235 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
    5,885 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   13,788 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
  153,201 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   21,700 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
   20,312 ( 0.00%)          if self.check_keyword(kw) {
    6,953 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   21,700 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    1,512 ( 0.00%)          if self.token.is_keyword(kw) {
      333 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
       60 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
       48 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  314,984 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  157,492 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  354,357 ( 0.00%)      }
        .           
   40,926 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   33,328 ( 0.00%)          if ok {
        .                       true
        .                   } else {
    1,796 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   40,926 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
    5,432 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   22,940 ( 0.00%)      fn check_path(&mut self) -> bool {
   56,505 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   28,675 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
      592 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
      592 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
    5,472 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    3,040 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
    5,472 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
      980 ( 0.00%)          self.check_or_expected(
      490 ( 0.00%)              self.token.is_like_plus(),
      490 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  105,024 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   61,264 ( 0.00%)          if self.token.kind == expected {
    5,974 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   28,825 ( 0.00%)          match self.token.kind.break_two_token_op() {
      444 ( 0.00%)              Some((first, second)) if first == expected => {
       48 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
       60 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
      108 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       12 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      168 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   17,259 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  101,900 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
      192 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   16,800 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
       30 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
      650 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   17,568 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   11,677 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      388 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
      412 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
      650 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
      582 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      291 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      194 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   17,088 ( 0.00%)              TokenExpectType::Expect => self.check(k),
       87 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
   30,951 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   21,720 ( 0.00%)              if let Some(ref t) = sep.sep {
   21,664 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   16,034 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   10,394 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
    5,425 ( 0.00%)              let t = f(self)?;
      854 ( 0.00%)              v.push(t);
        .                   }
        .           
   13,560 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   13,680 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   32,170 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   10,001 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    3,539 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
   29,536 ( 0.00%)          Ok((val, trailing))
   25,736 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
    9,876 ( 0.00%)          self.expect(bra)?;
   25,736 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
    3,368 ( 0.00%)              &token::OpenDelim(delim),
    3,519 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
8,362,575 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
3,859,650 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
2,573,100 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  643,275 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  643,275 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
5,146,104 ( 0.02%)      pub fn bump(&mut self) {
2,573,052 ( 0.01%)          let next_token = self.next_tok(self.token.span);
3,859,578 ( 0.01%)          self.bump_with(next_token);
5,146,104 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      360 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    1,808 ( 0.00%)          if dist == 0 {
      753 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   38,449 ( 0.00%)          let frame = &self.token_cursor.frame;
   41,766 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
   50,477 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
   68,004 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
   84,333 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   31,270 ( 0.00%)                      Some(tree) => match tree {
   15,519 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
    1,182 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   12,630 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
   24,385 ( 0.00%)          let mut token = Token::dummy();
      540 ( 0.00%)          while i < dist {
  170,707 ( 0.00%)              token = cursor.next().0;
   73,212 ( 0.00%)              if matches!(
   48,730 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      225 ( 0.00%)              i += 1;
        .                   }
   11,912 ( 0.00%)          return looker(&token);
      405 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
    7,452 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    2,067 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
    7,452 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      178 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
      712 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
    1,656 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
      470 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
       30 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
    2,898 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    5,600 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       34 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
       51 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
   18,374 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
      132 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   76,185 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   67,720 ( 0.00%)          Ok(
   42,433 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
       81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
       81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
   33,848 ( 0.00%)                  match self.parse_token_tree() {
   42,310 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
   16,924 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
        6 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        1 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        1 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
        1 ( 0.00%)                      let span = expr.span;
        .           
        5 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
        9 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   59,255 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   26,627 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   17,378 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
  979,200 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  783,348 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  832,198 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
  579,234 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
   36,726 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
   36,726 ( 0.00%)                  let span = frame.span;
   18,363 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
   36,726 ( 0.00%)                  self.bump();
   91,815 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
  208,074 ( 0.00%)                  self.bump();
  520,185 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
  856,800 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   11,764 ( 0.00%)          let old = self.restrictions;
   14,753 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   12,046 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
   80,080 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   50,050 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
   90,090 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    2,620 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
      524 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      262 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    1,048 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
      201 ( 0.00%)              return Ok(Visibility {
      603 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       61 ( 0.00%)          let lo = self.prev_token.span;
        .           
      305 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
      243 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
       81 ( 0.00%)                  self.bump(); // `(`
       54 ( 0.00%)                  self.bump(); // `crate`
       81 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
       27 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
        .                           return Ok(Visibility {
       81 ( 0.00%)                      span: lo.to(self.prev_token.span),
        .                               kind: vis,
        .                               tokens: None,
        .                           });
        .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
        .                           // Parse `pub(in path)`.
        .                           self.bump(); // `(`
        .                           self.bump(); // `in`
        .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      102 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    2,358 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
       77 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    3,810 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      381 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    3,810 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  240,680 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  120,340 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  135,158 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  248,436 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
1,062,208 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  531,104 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  531,104 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
1,062,208 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
       63 ( 0.00%)  #[derive(Debug, Clone)]
        .           pub enum FlatToken {
        .               /// A token - this holds both delimiter (e.g. '{' and '}')
        .               /// and non-delimiter tokens
        .               Token(Token),
        .               /// Holds the `AttributesData` for an AST node. The
        .               /// `AttributesData` is inserted directly into the
        .               /// constructed `AttrAnnotatedTokenStream` as
        .               /// an `AttrAnnotatedTokenTree::Attributes`
-- line 1481 ----------------------------------------

3,498,042 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 293 ----------------------------------------
         .           
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
     2,509 ( 0.00%)  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
   861,722 ( 0.00%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
     5,018 ( 0.00%)  }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
         .           fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
         .               let size = mem::size_of::<T>()
         .                   .checked_mul(n)
         .                   .ok_or(CollectionAllocErr::CapacityOverflow)?;
         .               let align = mem::align_of::<T>();
-- line 315 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   100,968 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
   181,831 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 1,628,391 ( 0.00%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
     1,826 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
     2,952 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
     5,796 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
    49,800 ( 0.00%)          assert!(len <= A::size());
   149,400 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    24,900 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
   133,734 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
         .                       A::size()
         .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,023,854 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
 6,779,582 ( 0.02%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
24,074,081 ( 0.07%)              if self.spilled() {
    38,553 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
18,262,825 ( 0.06%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   125,495 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 3,760,559 ( 0.01%)              if *len == cap {
     2,157 ( 0.00%)                  self.reserve(1);
    23,795 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    36,938 ( 0.00%)              ptr::write(ptr.add(*len), value);
 4,979,089 ( 0.02%)              *len += 1;
         .                   }
   100,396 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 2,222,232 ( 0.01%)              if *len_ptr == 0 {
     1,464 ( 0.00%)                  return None;
         .                       }
   599,122 ( 0.00%)              let last_index = *len_ptr - 1;
   825,222 ( 0.00%)              *len_ptr = last_index;
    62,859 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
     6,839 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
       416 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
        16 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
    48,124 ( 0.00%)              assert!(new_cap >= len);
    48,124 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
    48,124 ( 0.00%)              } else if new_cap != cap {
    42,858 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    24,062 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    13,235 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
    48,124 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    68,800 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
       432 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
   187,721 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
   909,743 ( 0.00%)          infallible(self.try_reserve(additional))
   213,600 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
 3,579,381 ( 0.01%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
    10,446 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
 2,668,476 ( 0.01%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       101 ( 0.00%)          self.try_grow(new_cap)
 3,877,526 ( 0.01%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
    77,095 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
         1 ( 0.00%)          self.try_grow(new_cap)
         1 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
    76,492 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
        96 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
     6,477 ( 0.00%)              let len = *len_ptr;
    19,614 ( 0.00%)              assert!(index < len);
    35,339 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
    13,076 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
       120 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
    16,993 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    12,719 ( 0.00%)              let len = *len_ptr;
    25,438 ( 0.00%)              assert!(index <= len);
    50,876 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
    25,438 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
    10,816 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   170,766 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
    22,452 ( 0.00%)              if !f(&mut self[i]) {
       292 ( 0.00%)                  del += 1;
     6,654 ( 0.00%)              } else if del > 0 {
         .                           self.swap(i - del, i);
         .                       }
         .                   }
    37,948 ( 0.00%)          self.truncate(len - del);
   151,792 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
         .               pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
         .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
     1,981 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
   232,497 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
    75,300 ( 0.00%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
    50,200 ( 0.00%)              self.set_len(len + slice.len());
         .                   }
   200,800 ( 0.00%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
    56,830 ( 0.00%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
    11,010 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
    16,302 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   204,745 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
   886,451 ( 0.00%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
 4,603,633 ( 0.01%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
   276,994 ( 0.00%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
    29,631 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
 1,597,973 ( 0.00%)              while len.get() < cap {
   377,750 ( 0.00%)                  if let Some(out) = iter.next() {
        24 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   192,128 ( 0.00%)          for elem in iter {
       657 ( 0.00%)              self.push(elem);
         .                   }
 3,841,074 ( 0.01%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 8,986,979 ( 0.03%)      fn drop(&mut self) {
         .                   unsafe {
 3,925,157 ( 0.01%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
 9,090,567 ( 0.03%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
       518 ( 0.00%)      fn drop(&mut self) {
    21,773 ( 0.00%)          for _ in self {}
       480 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
   481,884 ( 0.00%)          if self.current == self.end {
       429 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
   271,649 ( 0.00%)                  self.current += 1;
     3,480 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    20,463 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
    40,801 ( 0.00%)              IntoIter {
   283,830 ( 0.00%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
   484,306 ( 0.00%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
   127,649 ( 0.00%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
   547,788 ( 0.00%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

 9,545,247 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
306,597,050 ( 0.93%)  events annotated

