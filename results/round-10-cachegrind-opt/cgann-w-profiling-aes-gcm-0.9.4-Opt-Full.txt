--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name aes_gcm --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --cfg feature="aes" --cfg feature="alloc" --cfg feature="default" -C metadata=e047e19f2e8f97a8 -C extra-filename=-e047e19f2e8f97a8 --out-dir /usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps -L dependency=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps --extern aead=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libaead-e4fe378cacdf7e0b.rmeta --extern aes=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libaes-69bb9b9058ade687.rmeta --extern cipher=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libcipher-8c69359ab2cacbf5.rmeta --extern ctr=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libctr-0b458167bbc296ef.rmeta --extern ghash=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libghash-d418dd7215118de9.rmeta --extern subtle=/usr/home/liquid/tmp/.tmpA2Ko2e/target/release/deps/libsubtle-2f9ab08ea67eaf35.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-aes-gcm-0.9.4-Opt-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
497,964,216 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
11,566,679 ( 2.32%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
10,308,380 ( 2.07%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,038,067 ( 1.61%)  ./malloc/malloc.c:_int_malloc
 7,855,822 ( 1.58%)  ./malloc/malloc.c:_int_free
 5,757,502 ( 1.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 5,312,434 ( 1.07%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::insert::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 4,843,311 ( 0.97%)  ./elf/dl-lookup.c:do_lookup_x
 4,716,349 ( 0.95%)  ./malloc/malloc.c:malloc
 4,226,380 ( 0.85%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 4,182,121 ( 0.84%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 4,141,271 ( 0.83%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,607,356 ( 0.72%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 3,374,774 ( 0.68%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,964,644 ( 0.60%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 2,921,265 ( 0.59%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 2,762,710 ( 0.55%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 2,715,775 ( 0.55%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 2,713,884 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 2,646,280 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 2,617,568 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
 2,560,596 ( 0.51%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 2,544,823 ( 0.51%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,464,786 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 2,453,628 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 2,424,760 ( 0.49%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 2,377,046 ( 0.48%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,322,281 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 2,319,555 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 2,303,185 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::evaluate_trait_predicate_recursively
 2,249,295 ( 0.45%)  ./malloc/malloc.c:free
 2,235,330 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
 2,139,033 ( 0.43%)  ./elf/do-rel.h:_dl_relocate_object
 2,106,532 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 2,088,929 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 2,047,953 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 2,045,929 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,994,945 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 1,968,710 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ()>>::insert
 1,956,974 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,891,507 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 1,789,567 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,759,575 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
 1,740,473 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::select::SelectionContext>::evaluate_trait_predicate_recursively
 1,740,227 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
 1,688,852 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
 1,687,222 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs:<rustc_middle::traits::ObligationCauseCode as core::cmp::PartialEq>::eq
 1,617,480 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
 1,582,131 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 1,574,297 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 1,521,882 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 1,514,533 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/drain_filter.rs:<alloc::vec::drain_filter::DrainFilter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_trait_selection::traits::project::opt_normalize_projection_type::{closure#0}> as core::ops::drop::Drop>::drop
 1,505,306 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,482,963 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
 1,479,238 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
 1,437,784 ( 0.29%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,402,919 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<&rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>>>::insert
 1,330,854 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::TraitPredicate>::remap_constness
 1,244,120 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
 1,236,289 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,206,040 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 1,151,322 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>>::{closure#0}>
 1,141,562 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,136,836 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,133,600 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 1,116,197 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
 1,109,775 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,089,861 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,082,459 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,061,011 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/mod.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,058,325 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::CombineFields>::instantiate
 1,025,943 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
 1,013,980 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 1,006,018 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   989,244 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Predicate>::to_opt_poly_trait_pred
   978,025 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   974,340 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_trait_selection::traits::select::SelectionContext>::evaluate_trait_predicate_recursively
   972,998 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   956,484 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
   946,131 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::evaluate_predicate_recursively
   940,463 ( 0.19%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   932,055 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs:<rustc_data_structures::sso::map::SsoHashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ()>>::insert
   919,575 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   917,107 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   894,551 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   894,376 ( 0.18%)  ./malloc/malloc.c:realloc
   892,158 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   891,436 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   888,213 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   885,976 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   880,542 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::Predicate>
   878,956 ( 0.18%)  ./malloc/malloc.c:malloc_consolidate
   866,056 ( 0.17%)  ./elf/dl-lookup.c:check_match
   863,325 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/set.rs:<alloc::vec::drain_filter::DrainFilter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_trait_selection::traits::project::opt_normalize_projection_type::{closure#0}> as core::ops::drop::Drop>::drop
   853,988 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   852,690 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   842,786 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::hygiene::SyntaxContext as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   839,290 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   836,068 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
   829,278 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   825,852 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
   823,703 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   817,363 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::equate::Equate>
   807,437 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())> as core::ops::drop::Drop>::drop
   807,330 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   772,812 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/maybe_uninit.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::clone::Clone>::clone
   769,645 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:rustc_middle::ty::util::fold_list::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer, rustc_middle::ty::Predicate, <&rustc_middle::ty::list::List<rustc_middle::ty::Predicate> as rustc_middle::ty::fold::TypeFoldable>::try_super_fold_with<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>::{closure#0}>
   769,588 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs:<rustc_infer::infer::freshen::TypeFreshener as rustc_middle::ty::fold::TypeFolder>::fold_ty
   758,598 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::GenericArg as core::convert::From<&rustc_middle::ty::TyS>>::from
   752,133 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   718,003 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   715,556 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::opt_item_ident
   714,180 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   714,180 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   712,032 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::lang_items
   711,316 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs:<rustc_data_structures::sso::map::SsoHashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ()>>::insert
   707,181 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   706,726 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   701,685 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::new_var
   700,677 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   699,378 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   696,720 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::start_snapshot
   689,071 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs:<rustc_trait_selection::traits::select::SelectionContext>::assemble_candidates
   677,676 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::insert::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   676,624 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   674,974 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableStorage as ena::undo_log::Rollback<rustc_infer::infer::type_variable::UndoLog>>::reverse
   666,791 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::equate::Equate>
   664,966 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:rustc_data_structures::stack::ensure_sufficient_stack::<core::result::Result<rustc_middle::traits::select::EvaluationResult, rustc_middle::traits::select::OverflowError>, <rustc_trait_selection::traits::select::SelectionContext>::evaluate_predicate_recursively::{closure#0}>
   662,589 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   659,538 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   653,004 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   646,173 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   642,310 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs:<rustc_hir::def::DefKind as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   641,989 ( 0.13%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
   639,304 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   635,836 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<ena::unify::UnificationTable<ena::unify::backing_vec::InPlace<rustc_infer::infer::type_variable::TyVidEqKey, &mut alloc::vec::Vec<ena::unify::VarValue<rustc_infer::infer::type_variable::TyVidEqKey>>, &mut rustc_infer::infer::undo_log::InferCtxtUndoLogs>>>::uninlined_get_root_key
   635,130 ( 0.13%)  ./malloc/malloc.c:_int_realloc
   632,732 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::project_type
   616,080 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
   614,984 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   614,564 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs:<rustc_trait_selection::traits::select::SelectionContext>::candidate_from_obligation
   606,745 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::combine::Generalizer>
   606,740 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
   605,153 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>>::retain::<<rustc_trait_selection::traits::select::SelectionContext>::impl_or_trait_obligations::{closure#0}>
   603,186 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs:<rustc_metadata::rmeta::Lazy<rustc_metadata::rmeta::table::Table<rustc_span::def_id::DefIndex, rustc_metadata::rmeta::Lazy<rustc_span::def_id::DefId, ()>>, usize>>::get::<rustc_metadata::creader::CrateMetadataRef>
   598,930 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   597,023 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::sty::TraitRef>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   596,336 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
   591,141 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   587,888 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::replace_bound_vars::<rustc_middle::ty::TraitPredicate, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#0}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#1}, <rustc_infer::infer::InferCtxt>::replace_bound_vars_with_placeholders<rustc_middle::ty::TraitPredicate>::{closure#2}>
   587,231 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::freshen::TypeFreshener>
   585,882 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   576,403 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>>::{closure#0}>
   576,199 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   573,987 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:<rustc_trait_selection::traits::project::AssocTypeNormalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
   572,842 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<&rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>>>::get
   568,353 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::impl_or_trait_obligations
   565,947 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>>>::retain::<<rustc_trait_selection::traits::select::SelectionContext>::impl_or_trait_obligations::{closure#0}>
   564,730 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())> as core::ops::drop::Drop>::drop
   555,188 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   554,063 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::freshen::TypeFreshener>
   551,984 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::canonical::canonicalizer::Canonicalizer>
   549,615 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   545,280 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
   540,686 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   539,300 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   536,188 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor>::build_reduced_graph_for_external_crate_res
   535,466 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
   530,982 ( 0.11%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   529,691 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   527,631 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::InferCtxt>::super_combine_tys::<rustc_infer::infer::equate::Equate>
   522,809 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs:<rustc_hir::def::Res<!> as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   519,015 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   518,016 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::equate::Equate>::{closure#0}>>::{closure#0}>
   517,441 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::try_define
   515,184 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::vec::Vec<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::clone::Clone>::clone
   510,002 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_metadata::creader::CrateMetadataRef>::for_each_module_child::<rustc_metadata::rmeta::decoder::cstore_impl::provide_extern::module_children::{closure#0}>
   508,760 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_data_structures::sso::map::SsoHashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ()>>::insert
   504,500 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   501,948 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   501,916 ( 0.10%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 63 ----------------------------------------
        .           /// assert!(iter.next().is_none());
        .           /// ```
        .           #[stable(feature = "iter_zip", since = "1.59.0")]
        .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
        .           where
        .               A: IntoIterator,
        .               B: IntoIterator,
        .           {
      753 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A, B> Iterator for Zip<A, B>
        .           where
        .               A: Iterator,
        .               B: Iterator,
        .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
        .                           index: 0, // unused
        .                           len: 0,   // unused
        .                           a_len: 0, // unused
        .                       }
        .                   }
        .           
        .                   #[inline]
        .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    3,938 ( 0.00%)              let x = self.a.next()?;
    3,148 ( 0.00%)              let y = self.b.next()?;
      288 ( 0.00%)              Some((x, y))
      215 ( 0.00%)          }
        .           
        .                   #[inline]
        .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                       self.super_nth(n)
        .                   }
        .           
        .                   #[inline]
        .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
        .               B: Iterator,
        .           {
        .               type Item = (A::Item, B::Item);
        .           
        .               zip_impl_general_defaults! {}
        .           
        .               #[inline]
        .               default fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
        .                   let (b_lower, b_upper) = self.b.size_hint();
        .           
        .                   let lower = cmp::min(a_lower, b_lower);
        .           
        .                   let upper = match (a_upper, b_upper) {
        .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
        .                       (Some(x), None) => Some(x),
        .                       (None, Some(y)) => Some(y),
-- line 219 ----------------------------------------
-- line 263 ----------------------------------------
        .               fn new(a: A, b: B) -> Self {
        .                   let a_len = a.size();
        .                   let len = cmp::min(a_len, b.size());
        .                   Zip { a, b, index: 0, len, a_len }
        .               }
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
1,263,253 ( 0.25%)          if self.index < self.len {
        .                       let i = self.index;
        .                       // since get_unchecked executes code which can panic we increment the counters beforehand
        .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
  395,372 ( 0.08%)              self.index += 1;
        .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
        .                       unsafe {
        1 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
        .                       }
        .                   } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
        .                       let i = self.index;
        .                       // as above, increment before executing code that may panic
        .                       self.index += 1;
        .                       self.len += 1;
        .                       // match the base implementation's potential side effects
        .                       // SAFETY: we just checked that `i` < `self.a.len()`
-- line 286 ----------------------------------------
-- line 290 ----------------------------------------
        .                       None
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
  187,051 ( 0.04%)          let len = self.len - self.index;
        .                   (len, Some(len))
        .               }
        .           
        .               #[inline]
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   let delta = cmp::min(n, self.len - self.index);
        .                   let end = self.index + delta;
        .                   while self.index < end {
-- line 306 ----------------------------------------
-- line 535 ----------------------------------------
        .           #[unstable(feature = "trusted_random_access", issue = "none")]
        .           #[rustc_specialization_trait]
        .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
        .               // Convenience method.
        .               fn size(&self) -> usize
        .               where
        .                   Self: Iterator,
        .               {
       74 ( 0.00%)          self.size_hint().0
        .               }
        .               /// `true` if getting an iterator element may have side effects.
        .               /// Remember to take inner iterators into account.
        .               const MAY_HAVE_SIDE_EFFECT: bool;
        .           }
        .           
        .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
        .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
        .           /// Same requirements calling `get_unchecked` directly.
        .           #[doc(hidden)]
        .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
        .           where
        .               I: Iterator,
        .           {
        .               // SAFETY: the caller must uphold the contract for
        .               // `Iterator::__iterator_get_unchecked`.
       35 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
        .           }
        .           
        .           unsafe trait SpecTrustedRandomAccess: Iterator {
        .               /// If `Self: TrustedRandomAccess`, it must be safe to call
        .               /// `Iterator::__iterator_get_unchecked(self, index)`.
        .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
        .           }
        .           
-- line 571 ----------------------------------------

  285,859 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    1,313 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   49,511 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      658 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      392 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   54,525 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      612 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       18 ( 0.00%)          self.position += bytes;
       18 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      526 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    1,414 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   81,820 ( 0.02%)      fn read_u32(&mut self) -> u32 {
  307,705 ( 0.06%)          read_leb128!(self, read_u32_leb128)
  163,640 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  583,443 ( 0.12%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   83,349 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  166,780 ( 0.03%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,687,535 ( 0.34%)          let value = self.data[self.position];
  366,885 ( 0.07%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  218,947 ( 0.04%)      fn read_usize(&mut self) -> usize {
  218,947 ( 0.04%)          read_leb128!(self, read_usize_leb128)
  437,894 ( 0.09%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    9,630 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   36,210 ( 0.01%)          let len = self.read_usize();
  259,312 ( 0.05%)          let sentinel = self.data[self.position + len];
   64,828 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  162,070 ( 0.03%)          self.position += len + 1;
   11,388 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       99 ( 0.00%)          let start = self.position;
    2,658 ( 0.00%)          self.position += s.len();
       99 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  648,297 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 157 ----------------------------------------
        .               pub fn opt_fn_def_id(self) -> Option<DefId> {
        .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
        .               }
        .           }
        .           
        .           /// The "header" of an impl is everything outside the body: a Self type, a trait
        .           /// ref (in the case of a trait impl), and a set of predicates (from the
        .           /// bounds / where-clauses).
      166 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct ImplHeader<'tcx> {
        .               pub impl_def_id: DefId,
        .               pub self_ty: Ty<'tcx>,
        .               pub trait_ref: Option<TraitRef<'tcx>>,
        .               pub predicates: Vec<Predicate<'tcx>>,
        .           }
        .           
        .           #[derive(
        .               Copy,
        .               Clone,
   86,716 ( 0.02%)      PartialEq,
        .               Eq,
        .               Hash,
        .               TyEncodable,
    3,916 ( 0.00%)      TyDecodable,
        .               HashStable,
        .               Debug,
        .               TypeFoldable
        .           )]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
        .                   match self {
        .                       Self::Positive => f.write_str("positive"),
        .                       Self::Negative => f.write_str("negative"),
        .                       Self::Reservation => f.write_str("reservation"),
        .                   }
        .               }
        .           }
        .           
  329,522 ( 0.07%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
        .           pub enum Visibility {
        .               /// Visible everywhere (including in other crates).
        .               Public,
        .               /// Visible only in the given crate-local module.
        .               Restricted(DefId),
        .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
        .               Invisible,
        .           }
        .           
  121,065 ( 0.02%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
        .           pub enum BoundConstness {
        .               /// `T: Trait`
        .               NotConst,
        .               /// `T: ~const Trait`
        .               ///
        .               /// Requires resolving to const only when we are in a const context.
        .               ConstIfConst,
        .           }
        .           
        .           impl BoundConstness {
        .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    2,758 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
    4,137 ( 0.00%)          match (constness, self) {
        .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
        .                       (_, this) => {
   33,066 ( 0.01%)                  *this = BoundConstness::NotConst;
        .                           hir::Constness::NotConst
        .                       }
        .                   }
    1,379 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for BoundConstness {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
        .                       Self::NotConst => f.write_str("normal"),
        .                       Self::ConstIfConst => f.write_str("`~const`"),
        .                   }
-- line 256 ----------------------------------------
-- line 279 ----------------------------------------
        .           pub trait DefIdTree: Copy {
        .               fn parent(self, id: DefId) -> Option<DefId>;
        .           
        .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
        .                   if descendant.krate != ancestor.krate {
        .                       return false;
        .                   }
        .           
      112 ( 0.00%)          while descendant != ancestor {
       20 ( 0.00%)              match self.parent(descendant) {
        .                           Some(parent) => descendant = parent,
        .                           None => return false,
        .                       }
        .                   }
        .                   true
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
       62 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
        .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
       93 ( 0.00%)      }
        .           }
        .           
        .           impl Visibility {
       58 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
      174 ( 0.00%)          match visibility.node {
        .                       hir::VisibilityKind::Public => Visibility::Public,
        .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
        .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
        .                           // If there is no resolution, `resolve` will have already reported an error, so
        .                           // assume that the visibility is public to avoid reporting more privacy errors.
        .                           Res::Err => Visibility::Public,
        .                           def => Visibility::Restricted(def.def_id()),
        .                       },
        .                       hir::VisibilityKind::Inherited => {
       92 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
        .                       }
        .                   }
       58 ( 0.00%)      }
        .           
        .               /// Returns `true` if an item with this visibility is accessible from the given block.
    2,484 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
   14,323 ( 0.00%)          let restriction = match self {
        .                       // Public items are visible everywhere.
        .                       Visibility::Public => return true,
        .                       // Private items from other crates are visible nowhere.
        .                       Visibility::Invisible => return false,
        .                       // Restricted items are visible in an arbitrary local module.
      110 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   tree.is_descendant_of(module, restriction)
    2,484 ( 0.00%)      }
        .           
        .               /// Returns `true` if this visibility is at least as accessible as the given visibility
      864 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
    1,032 ( 0.00%)          let vis_restriction = match vis {
        .                       Visibility::Public => return self == Visibility::Public,
        .                       Visibility::Invisible => return true,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   self.is_accessible_from(vis_restriction, tree)
      864 ( 0.00%)      }
        .           
        .               // Returns `true` if this item is visible anywhere in the local crate.
        .               pub fn is_visible_locally(self) -> bool {
        .                   match self {
        .                       Visibility::Public => true,
        .                       Visibility::Restricted(def_id) => def_id.is_local(),
        .                       Visibility::Invisible => false,
        .                   }
        .               }
        .           
        .               pub fn is_public(self) -> bool {
   37,886 ( 0.01%)          matches!(self, Visibility::Public)
   18,940 ( 0.00%)      }
        .           }
        .           
        .           /// The crate variances map is computed during typeck and contains the
        .           /// variance of every item in the local crate. You should not use it
        .           /// directly, because to do so will make your pass dependent on the
        .           /// HIR of every item in the local crate. Instead, use
        .           /// `tcx.variances_of()` to get the variance for a *particular*
        .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
        .           #[derive(Clone, Copy, Lift)]
        .           pub struct Predicate<'tcx> {
        .               inner: &'tcx PredicateInner<'tcx>,
        .           }
        .           
        .           impl<'tcx> PartialEq for Predicate<'tcx> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   // `self.kind` is always interned.
  152,414 ( 0.03%)          ptr::eq(self.inner, other.inner)
  137,510 ( 0.03%)      }
        .           }
        .           
        .           impl Hash for Predicate<'_> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   (self.inner as *const PredicateInner<'_>).hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Predicate<'tcx> {}
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
        .               #[inline]
        .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
  643,978 ( 0.13%)          self.inner.kind
        .               }
        .           
        .               /// Flips the polarity of a Predicate.
        .               ///
        .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
        .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
        .                   let kind = self
        .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
        .                       flags: _,
        .                       outer_exclusive_binder: _,
        .                   } = self.inner;
        .           
        .                   kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
1,872,158 ( 0.38%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
1,932,430 ( 0.39%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum PredicateKind<'tcx> {
        .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
        .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
        .               /// would be the type parameters.
        .               Trait(TraitPredicate<'tcx>),
        .           
        .               /// `where 'a: 'b`
        .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 645 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Performs a substitution suitable for going from a
        .               /// poly-trait-ref to supertraits that must hold if that
        .               /// poly-trait-ref holds. This is slightly different from a normal
        .               /// substitution in terms of what happens with bound regions. See
        .               /// lengthy comment below for details.
    8,631 ( 0.00%)      pub fn subst_supertrait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: &ty::PolyTraitRef<'tcx>,
        .               ) -> Predicate<'tcx> {
        .                   // The interaction between HRTB and supertraits is not entirely
        .                   // obvious. Let me walk you (and myself) through an example.
        .                   //
        .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
        .                   //    ['x, 'b]
        .                   let bound_pred = self.kind();
        .                   let pred_bound_vars = bound_pred.bound_vars();
        .                   let trait_bound_vars = trait_ref.bound_vars();
        .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
        .                   let shifted_pred =
        .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
        .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
      959 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
        .                   // 3) ['x] + ['b] -> ['x, 'b]
        .                   let bound_vars =
        .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
    8,631 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
    6,713 ( 0.00%)      }
        .           }
        .           
    2,318 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  202,059 ( 0.04%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitPredicate<'tcx> {
        .               pub trait_ref: TraitRef<'tcx>,
        .           
  286,152 ( 0.06%)      pub constness: BoundConstness,
        .           
  324,714 ( 0.07%)      pub polarity: ImplPolarity,
        .           }
        .           
        .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
        .           
        .           impl<'tcx> TraitPredicate<'tcx> {
  253,496 ( 0.05%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
  221,809 ( 0.04%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
        .                       // remap without changing constness of this predicate.
        .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
        .                       param_env.remap_constness_with(self.constness)
        .                   } else {
   31,687 ( 0.01%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
        .                   }
  190,122 ( 0.04%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   // this is different to `remap_constness` that callees want to print this predicate
        .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
        .                   // param_env is not const because we it is always satisfied in non-const contexts.
        .                   if let hir::Constness::NotConst = param_env.constness() {
        .                       self.constness = ty::BoundConstness::NotConst;
        .                   }
        .               }
        .           
        .               pub fn def_id(self) -> DefId {
    4,580 ( 0.00%)          self.trait_ref.def_id
    2,290 ( 0.00%)      }
        .           
   12,580 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   37,740 ( 0.01%)          self.trait_ref.self_ty()
   25,160 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> PolyTraitPredicate<'tcx> {
        .               pub fn def_id(self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
        .                   self.skip_binder().def_id()
  125,459 ( 0.03%)      }
        .           
        .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound(|trait_ref| trait_ref.self_ty())
        .               }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   *self = self.map_bound(|mut p| {
        .                       p.remap_constness_diag(param_env);
        .                       p
        .                   });
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    1,851 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
    9,177 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
        .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
        .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
        .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
        .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
        .           
        .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
        .           /// whether the `a` type is the type that we should label as "expected" when
        .           /// presenting user diagnostics.
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub struct CoercePredicate<'tcx> {
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
        .           
   13,058 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    8,160 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum Term<'tcx> {
        6 ( 0.00%)      Ty(Ty<'tcx>),
        .               Const(&'tcx Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
        .               fn from(ty: Ty<'tcx>) -> Self {
        .                   Term::Ty(ty)
      174 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
        .               fn from(c: &'tcx Const<'tcx>) -> Self {
        .                   Term::Const(c)
        .               }
        .           }
        .           
        .           impl<'tcx> Term<'tcx> {
        .               pub fn ty(&self) -> Option<Ty<'tcx>> {
      408 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
      204 ( 0.00%)      }
        .           }
        .           
        .           /// This kind of predicate has no *direct* correspondent in the
        .           /// syntax, but it roughly corresponds to the syntactic forms:
        .           ///
        .           /// 1. `T: TraitRef<..., Item = Type>`
        .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
        .           ///
        .           /// In particular, form #1 is "desugared" to the combination of a
        .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
        .           /// predicates. Form #2 is a broader form in that it also permits
        .           /// equality between arbitrary types. Processing an instance of
        .           /// Form #2 eventually yields one of these `ProjectionPredicate`
        .           /// instances to normalize the LHS.
        7 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      773 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionPredicate<'tcx> {
        .               pub projection_ty: ProjectionTy<'tcx>,
    9,506 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
        .           
        .           impl<'tcx> PolyProjectionPredicate<'tcx> {
        .               /// Returns the `DefId` of the trait of the associated item being projected.
        .               #[inline]
        .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
-- line 886 ----------------------------------------
-- line 905 ----------------------------------------
        .               }
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
        .               pub fn projection_def_id(&self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
    4,560 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
    2,280 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPolyTraitRef<'tcx> {
        .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    4,100 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    4,100 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    4,100 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
        .               #[inline(always)]
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   tcx.mk_predicate(self)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
      636 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    3,180 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    1,272 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
       51 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      255 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      102 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
  128,230 ( 0.03%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
        .                   let predicate = self.kind();
  384,690 ( 0.08%)          match predicate.skip_binder() {
  274,830 ( 0.06%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
        .                       PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::TypeOutlives(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
    9,149 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
  128,230 ( 0.03%)      }
        .           
    2,514 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
        .                   let predicate = self.kind();
    5,028 ( 0.00%)          match predicate.skip_binder() {
      729 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
        .                       PredicateKind::Trait(..)
        .                       | PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
    2,271 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
    2,514 ( 0.00%)      }
        .           }
        .           
        .           /// Represents the bounds declared on a particular set of type
        .           /// parameters. Should eventually be generalized into a flag list of
        .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
        .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
        .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
        .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
        .           /// Example:
        .           ///
        .           ///     struct Foo<T, U: Bar<T>> { ... }
        .           ///
        .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
        .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
        .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
        .           /// [usize:Bar<isize>]]`.
    3,248 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct InstantiatedPredicates<'tcx> {
        .               pub predicates: Vec<Predicate<'tcx>>,
        .               pub spans: Vec<Span>,
        .           }
        .           
        .           impl<'tcx> InstantiatedPredicates<'tcx> {
        1 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
    4,856 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
        1 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.predicates.is_empty()
        4 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
        .           pub struct OpaqueTypeKey<'tcx> {
        .               pub def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
        .               /// ```
        .               /// for<'a> fn(&'a u32)
        .               /// ```
        .               ///
        .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
        .               /// new universe that extends `U` -- in this new universe, we can
        .               /// name the region `'a`, but that region was not nameable from
        .               /// `U` because it was not in scope there.
   14,419 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
        .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   43,257 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` can name a name from `other` -- in other words,
        .               /// if the set of names in `self` is a superset of those in
        .               /// `other` (`self >= other`).
        .               pub fn can_name(self, other: UniverseIndex) -> bool {
    1,856 ( 0.00%)          self.private >= other.private
      928 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` cannot name some names from `other` -- in other
        .               /// words, if the set of names in `self` is a strict subset of
        .               /// those in `other` (`self < other`).
        .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
        .                   self.private < other.private
        .               }
        .           }
-- line 1116 ----------------------------------------
-- line 1194 ----------------------------------------
        .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
        .           /// trivial to compute.
        .           ///
        .           /// If we now want to use that constant in a place which potentionally needs its type
        .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
        .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
        .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
        .           /// to get the type of `did`.
      757 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
        .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        .           #[derive(Hash, HashStable)]
        .           pub struct WithOptConstParam<T> {
      124 ( 0.00%)      pub did: T,
        .               /// The `DefId` of the corresponding generic parameter in case `did` is
        .               /// a const argument.
        .               ///
        .               /// Note that even if `did` is a const argument, this may still be `None`.
        .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
        .               /// to potentially update `param_did` in the case it is `None`.
      436 ( 0.00%)      pub const_param_did: Option<DefId>,
        .           }
        .           
        .           impl<T> WithOptConstParam<T> {
        .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
        .               #[inline(always)]
        .               pub fn unknown(did: T) -> WithOptConstParam<T> {
        .                   WithOptConstParam { did, const_param_did: None }
      450 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<LocalDefId> {
        .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
        .               /// `None` otherwise.
        .               #[inline(always)]
        .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
        .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
        .               }
        .           
        .               /// In case `self` is unknown but `self.did` is a const argument, this returns
        .               /// a `WithOptConstParam` with the correct `const_param_did`.
        .               #[inline(always)]
        .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
       40 ( 0.00%)          if self.const_param_did.is_none() {
       60 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
        .                           return Some(WithOptConstParam { did: self.did, const_param_did });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           
        .               pub fn to_global(self) -> WithOptConstParam<DefId> {
        .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
        .               }
        .           
       12 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        9 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
        3 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<DefId> {
       29 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
        .                   self.did
        .                       .as_local()
        .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
       29 ( 0.00%)      }
        .           
        .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
      120 ( 0.00%)          if let Some(param_did) = self.const_param_did {
       52 ( 0.00%)              if let Some(did) = self.did.as_local() {
        .                           return Some((did, param_did));
        .                       }
        .                   }
        .           
        .                   None
       48 ( 0.00%)      }
        .           
        .               pub fn is_local(self) -> bool {
        .                   self.did.is_local()
        .               }
        .           
       13 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        .                   self.const_param_did.unwrap_or(self.did)
       13 ( 0.00%)      }
        .           }
        .           
        .           /// When type checking, we use the `ParamEnv` to track
        .           /// details about the set of where-clauses that are in scope at this
        .           /// particular point.
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
        .           pub struct ParamEnv<'tcx> {
        .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
        .               reveal: traits::Reveal,
        .               constness: hir::Constness,
        .           }
        .           
        .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
        .               const BITS: usize = 2;
        .               #[inline]
        .               fn into_usize(self) -> usize {
    5,712 ( 0.00%)          match self {
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn from_usize(ptr: usize) -> Self {
  374,410 ( 0.08%)          match ptr {
        .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
        .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
        .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
        .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
        .                       _ => std::hint::unreachable_unchecked(),
        .                   }
        .               }
        .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
        .               pub fn new(
        .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
        .                   reveal: Reveal,
        .                   constness: hir::Constness,
        .               ) -> Self {
        .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
        .               }
        .           
        7 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
        .                   self
        7 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
        .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
        .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
      572 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
        .               }
        .           
        .               /// Returns a new parameter environment with the same clauses, but
        .               /// which "reveals" the true results of projections in all cases
        .               /// (even for associated types that are specializable). This is
        .               /// the desired behavior during codegen and certain other special
        .               /// contexts; normally though we want to use `Reveal::UserFacing`,
        .               /// which is the default.
        .               /// All opaque types in the caller_bounds of the `ParamEnv`
        .               /// will be normalized to their underlying types.
        .               /// See PR #65989 and issue #65918 for more details
    1,152 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
        .                   if self.packed.tag().reveal == traits::Reveal::All {
        .                       return self;
        .                   }
        .           
        .                   ParamEnv::new(
        .                       tcx.normalize_opaque_types(self.caller_bounds()),
        .                       Reveal::All,
        .                       self.constness(),
        .                   )
    1,296 ( 0.00%)      }
        .           
        .               /// Returns this same environment but with no caller bounds.
        .               #[inline]
        .               pub fn without_caller_bounds(self) -> Self {
        .                   Self::new(List::empty(), self.reveal(), self.constness())
        .               }
        .           
        .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
        .               /// pair it with the empty environment. This improves caching and is generally
        .               /// invisible.
        .               ///
        .               /// N.B., we preserve the environment when type-checking because it
        .               /// is possible for the user to have wacky where-clauses like
        .               /// `where Box<u32>: Copy`, which are clearly never
        .               /// satisfiable. We generally want to behave as if they were true,
        .               /// although the surrounding function is never reachable.
    8,338 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
        .                   match self.reveal() {
        .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
        .           
        .                       Reveal::All => {
    2,197 ( 0.00%)                  if value.is_global() {
        .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
        .                           } else {
        .                               ParamEnvAnd { param_env: self, value }
        .                           }
        .                       }
        .                   }
    8,191 ( 0.00%)      }
        .           }
        .           
        .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
        .           // the constness of trait bounds is being propagated correctly.
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               #[inline]
        .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
      276 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
        .               }
        .               #[inline]
        .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
        .                   self.with_constness(BoundConstness::NotConst)
        .               }
        .           }
        .           
       75 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
        .           pub struct ParamEnvAnd<'tcx, T> {
    1,865 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
   67,279 ( 0.01%)      pub value: T,
        .           }
        .           
        .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
        .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
        .                   (self.param_env, self.value)
        .               }
        .           
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.param_env = self.param_env.without_const();
      198 ( 0.00%)          self
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
        .           #[derive(Copy, Clone, Debug, HashStable)]
        .           pub struct Destructor {
        .               /// The `DefId` of the destructor method
        .               pub did: DefId,
        .               /// The constness of the destructor method
        .               pub constness: hir::Constness,
        .           }
        .           
       20 ( 0.00%)  bitflags! {
      333 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
        .               pub struct VariantFlags: u32 {
        .                   const NO_VARIANT_FLAGS        = 0;
        .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
        .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
        .                   /// Indicates whether this variant was obtained as part of recovering from
        .                   /// a syntactic error. May be incomplete or bogus.
        .                   const IS_RECOVERED = 1 << 1;
        .               }
        .           }
        .           
        .           /// Definition of a variant -- a struct's fields or an enum variant.
   36,679 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct VariantDef {
        .               /// `DefId` that identifies the variant itself.
        .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
        .               pub def_id: DefId,
        .               /// `DefId` that identifies the variant's constructor.
        .               /// If this variant is a struct variant, then this is `None`.
        .               pub ctor_def_id: Option<DefId>,
        .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
        .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
        .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
        .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
        .               /// built-in trait), and we do not want to load attributes twice.
        .               ///
        .               /// If someone speeds up attribute loading to not be a performance concern, they can
        .               /// remove this hack and use the constructor `DefId` everywhere.
      224 ( 0.00%)      pub fn new(
        .                   name: Symbol,
        .                   variant_did: Option<DefId>,
        .                   ctor_def_id: Option<DefId>,
        .                   discr: VariantDiscr,
        .                   fields: Vec<FieldDef>,
        .                   ctor_kind: CtorKind,
        .                   adt_kind: AdtKind,
        .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
        .               ) -> Self {
        .                   debug!(
        .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
        .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
        .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
        .                   );
        .           
        .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
       28 ( 0.00%)          if is_field_list_non_exhaustive {
        .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
        .                   }
        .           
       84 ( 0.00%)          if recovered {
        .                       flags |= VariantFlags::IS_RECOVERED;
        .                   }
        .           
      252 ( 0.00%)          VariantDef {
        .                       def_id: variant_did.unwrap_or(parent_did),
        .                       ctor_def_id,
        .                       name,
        .                       discr,
      112 ( 0.00%)              fields,
        .                       ctor_kind,
        .                       flags,
        .                   }
      112 ( 0.00%)      }
        .           
        .               /// Is this field list non-exhaustive?
        .               #[inline]
        .               pub fn is_field_list_non_exhaustive(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
        .               }
        .           
        .               /// Was this variant obtained as part of recovering from a syntactic error?
-- line 1644 ----------------------------------------
-- line 1648 ----------------------------------------
        .               }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
        .               pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
        .                   Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
        .               }
        .           }
        .           
   23,422 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
        .           pub enum VariantDiscr {
        .               /// Explicit value for this variant, i.e., `X = 123`.
        .               /// The `DefId` corresponds to the embedded constant.
        .               Explicit(DefId),
        .           
        .               /// The previous variant's discriminant plus one.
        .               /// For efficiency reasons, the distance from the
        .               /// last `Explicit` discriminant is being stored,
        .               /// or `0` for the first variant, if it has none.
        .               Relative(u32),
        .           }
        .           
   50,064 ( 0.01%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct FieldDef {
        .               pub did: DefId,
        .               pub name: Symbol,
        .               pub vis: Visibility,
        .           }
        .           
      201 ( 0.00%)  bitflags! {
        .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
        .               pub struct ReprFlags: u8 {
        .                   const IS_C               = 1 << 0;
        .                   const IS_SIMD            = 1 << 1;
        .                   const IS_TRANSPARENT     = 1 << 2;
        .                   // Internal only for now. If true, don't reorder fields.
        .                   const IS_LINEAR          = 1 << 3;
        .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
        .                   // Any of these flags being set prevent field reordering optimisation.
        .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
        .                                            | ReprFlags::IS_SIMD.bits
        .                                            | ReprFlags::IS_LINEAR.bits;
        .               }
        .           }
        .           
        .           /// Represents the repr options provided by the user,
   41,950 ( 0.01%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
        .           pub struct ReprOptions {
        .               pub int: Option<attr::IntType>,
        .               pub align: Option<Align>,
        .               pub pack: Option<Align>,
        .               pub flags: ReprFlags,
        .               /// The seed to be used for randomizing a type's layout
        .               ///
        .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
        .               /// be the "most accurate" hash as it'd encompass the item and crate
        .               /// hash without loss, but it does pay the price of being larger.
        .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
        .               /// purposes (primarily `-Z randomize-layout`)
        .               pub field_shuffle_seed: u64,
        .           }
        .           
        .           impl ReprOptions {
       13 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
        .                   let mut flags = ReprFlags::empty();
        .                   let mut size = None;
        .                   let mut max_align: Option<Align> = None;
        .                   let mut min_pack: Option<Align> = None;
        .           
        .                   // Generate a deterministically-derived seed from the item's path hash
        .                   // to allow for cross-crate compilation to actually work
        .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
        .           
        .                   // If the user defined a custom seed for layout randomization, xor the item's
        .                   // path hash with the user defined seed, this will allowing determinism while
        .                   // still allowing users to further randomize layout generation for e.g. fuzzing
        3 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
        .                       field_shuffle_seed ^= user_seed;
        .                   }
        .           
        4 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
       65 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
        .                           flags.insert(match r {
        .                               attr::ReprC => ReprFlags::IS_C,
        .                               attr::ReprPacked(pack) => {
        .                                   let pack = Align::from_bytes(pack as u64).unwrap();
        .                                   min_pack = Some(if let Some(min_pack) = min_pack {
        .                                       min_pack.min(pack)
        .                                   } else {
        .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
        .                                   ReprFlags::empty()
        .                               }
        .                           });
        .                       }
        .                   }
        .           
        .                   // If `-Z randomize-layout` was enabled for the type definition then we can
        .                   // consider performing layout randomization
        8 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
        .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
        .                   }
        .           
        .                   // This is here instead of layout because the choice must make it into metadata.
        6 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
        .                       flags.insert(ReprFlags::IS_LINEAR);
        .                   }
        .           
        2 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
       28 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn simd(&self) -> bool {
        .                   self.flags.contains(ReprFlags::IS_SIMD)
        .               }
        .           
        .               #[inline]
        .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
        .               #[inline]
        .               pub fn hide_niche(&self) -> bool {
        .                   self.flags.contains(ReprFlags::HIDE_NICHE)
        .               }
        .           
        .               /// Returns the discriminant type, given these `repr` options.
        .               /// This must only be called on enums!
        .               pub fn discr_type(&self) -> attr::IntType {
       21 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
        5 ( 0.00%)      }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
        .               /// layout" optimizations, such as representing `Foo<&T>` as a
        .               /// single pointer.
        .               pub fn inhibit_enum_layout_opt(&self) -> bool {
       10 ( 0.00%)          self.c() || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
        .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
        .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
      112 ( 0.00%)          if let Some(pack) = self.pack {
        .                       if pack.bytes() == 1 {
        .                           return true;
        .                       }
        .                   }
        .           
      240 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
        .               /// was enabled for its declaration crate
        .               pub fn can_randomize_type_layout(&self) -> bool {
       52 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
        .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
        .               pub fn inhibit_union_abi_opt(&self) -> bool {
        1 ( 0.00%)          self.c()
        .               }
        .           }
        .           
        .           impl<'tcx> FieldDef {
        .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
        .               /// typically obtained via the second field of [`TyKind::Adt`].
    1,218 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
      348 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
    1,392 ( 0.00%)      }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
      168 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
       96 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
      216 ( 0.00%)      }
        .           }
        .           
        .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub enum ImplOverlapKind {
        .               /// These impls are always allowed to overlap.
        .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
        .               /// marker traits.
        .               /// 4. Neither of the impls can have any where-clauses.
        .               ///
        .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
        .               Issue33140,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
      528 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
      132 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
      528 ( 0.00%)      }
        .           
        .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
        .                   self.associated_items(id)
        .                       .in_definition_order()
        .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
        .               }
        .           
        .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
        .               ///
        .               /// See [`item_name`][Self::item_name] for more information.
        .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
        .                   // Look at the HIR first so the span will be correct if this is a local item.
        .                   self.item_name_from_hir(def_id)
        .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
        .               }
        .           
   23,910 ( 0.00%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
    9,564 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
        .                       Some(self.associated_item(def_id))
        .                   } else {
        .                       None
        .                   }
   21,519 ( 0.00%)      }
        .           
       35 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
        .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
       70 ( 0.00%)      }
        .           
        .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
        .                   variant
        .                       .fields
        .                       .iter()
        .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
        .               }
        .           
        .               /// Returns `true` if the impls are the same polarity and the trait either
        .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    9,650 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
        .                   self,
        .                   def_id1: DefId,
        .                   def_id2: DefId,
        .               ) -> Option<ImplOverlapKind> {
        .                   // If either trait impl references an error, they're allowed to overlap,
        .                   // as one of them essentially doesn't exist.
        .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
    1,930 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
        .                   {
        .                       return Some(ImplOverlapKind::Permitted { marker: false });
        .                   }
        .           
    9,649 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
        .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
        .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
        .                           debug!(
        .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
        .                               def_id1, def_id2
        .                           );
        .                           return Some(ImplOverlapKind::Permitted { marker: false });
        .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
        .                           );
        .                           return None;
        .                       }
        .                       (ImplPolarity::Positive, ImplPolarity::Positive)
        .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
        .                   };
        .           
        .                   let is_marker_overlap = {
    9,640 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    2,892 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    2,892 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    7,712 ( 0.00%)              };
    3,856 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
        .                   };
        .           
        .                   if is_marker_overlap {
        .                       debug!(
        .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
        .                           def_id1, def_id2
        .                       );
        .                       Some(ImplOverlapKind::Permitted { marker: true })
        .                   } else {
    3,856 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
        .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
        .                               if self_ty1 == self_ty2 {
        .                                   debug!(
        .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
        .                                       def_id1, def_id2
        .                                   );
        .                                   return Some(ImplOverlapKind::Issue33140);
        .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
        .                                   );
        .                               }
        .                           }
        .                       }
        .           
        .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
        .                       None
        .                   }
    7,720 ( 0.00%)      }
        .           
        .               /// Returns `ty::VariantDef` if `res` refers to a struct,
        .               /// or variant or their constructors, panics otherwise.
        .               pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
        .                   match res {
        .                       Res::Def(DefKind::Variant, did) => {
        .                           let enum_did = self.parent(did).unwrap();
        .                           self.adt_def(enum_did).variant_with_id(did)
-- line 2054 ----------------------------------------
-- line 2091 ----------------------------------------
        .                       | ty::InstanceDef::Virtual(..)
        .                       | ty::InstanceDef::ClosureOnceShim { .. }
        .                       | ty::InstanceDef::DropGlue(..)
        .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
        .                   }
        .               }
        .           
        .               /// Gets the attributes of a definition.
    6,270 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
    1,881 ( 0.00%)          if let Some(did) = did.as_local() {
    1,398 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
        .                   } else {
        .                       self.item_attrs(did)
        .                   }
    5,016 ( 0.00%)      }
        .           
        .               /// Determines whether an item is annotated with an attribute.
      440 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
    1,377 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
        .               }
        .           
        .               /// Determines whether an item is annotated with `doc(hidden)`.
       14 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
        2 ( 0.00%)          self.get_attrs(did)
        .                       .iter()
        .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
       16 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is an `auto trait`.
    1,547 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
      221 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    1,768 ( 0.00%)      }
        .           
        .               /// Returns layout of a generator. Layout might be unavailable if the
        .               /// generator is tainted by errors.
        .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
        .                   self.optimized_mir(def_id).generator_layout()
        .               }
        .           
        .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
        .               /// If it implements no trait, returns `None`.
   16,821 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
        .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
   21,627 ( 0.00%)      }
        .           
        .               /// If the given defid describes a method belonging to an impl, returns the
        .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
       11 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
       44 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
        .                       TraitContainer(_) => None,
        .                       ImplContainer(def_id) => Some(def_id),
        .                   })
       22 ( 0.00%)      }
        .           
        .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
        .               /// with the name of the crate containing the impl.
        .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
        .                   if let Some(impl_did) = impl_did.as_local() {
        .                       Ok(self.def_span(impl_did))
        .                   } else {
        .                       Err(self.crate_name(impl_did.krate))
        .                   }
        .               }
        .           
        .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
        .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
        .               /// definition's parent/scope to perform comparison.
    1,352 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
        .                   // We could use `Ident::eq` here, but we deliberately don't. The name
        .                   // comparison fails frequently, and we want to avoid the expensive
        .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
      169 ( 0.00%)          use_name.name == def_name.name
      507 ( 0.00%)              && use_name
        .                           .span
        .                           .ctxt()
        .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    1,352 ( 0.00%)      }
        .           
      117 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
       26 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
       26 ( 0.00%)          ident
      104 ( 0.00%)      }
        .           
    1,134 ( 0.00%)      pub fn adjust_ident_and_get_scope(
        .                   self,
        .                   mut ident: Ident,
        .                   scope: DefId,
        .                   block: hir::HirId,
        .               ) -> (Ident, DefId) {
      126 ( 0.00%)          let scope = ident
        .                       .span
        .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
      504 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
      756 ( 0.00%)          (ident, scope)
    1,134 ( 0.00%)      }
        .           
        .               pub fn is_object_safe(self, key: DefId) -> bool {
        .                   self.object_safety_violations(key).is_empty()
        .               }
        .           }
        .           
        .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    1,287 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    1,287 ( 0.00%)      let def_id = def_id.as_local()?;
      264 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
      110 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        .                       return match opaque_ty.origin {
        .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
        .                               Some(parent)
        .                           }
        .                           hir::OpaqueTyOrigin::TyAlias => None,
        .                       };
        .                   }
        .               }
        .               None
    1,716 ( 0.00%)  }
        .           
        .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
        .               match ity {
        .                   ast::IntTy::Isize => IntTy::Isize,
        .                   ast::IntTy::I8 => IntTy::I8,
        .                   ast::IntTy::I16 => IntTy::I16,
        .                   ast::IntTy::I32 => IntTy::I32,
        .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
        .           
        .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
        .               match fty {
        .                   ast::FloatTy::F32 => FloatTy::F32,
        .                   ast::FloatTy::F64 => FloatTy::F64,
        .               }
        .           }
        .           
       67 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
        .               match ity {
        .                   IntTy::Isize => ast::IntTy::Isize,
        .                   IntTy::I8 => ast::IntTy::I8,
        .                   IntTy::I16 => ast::IntTy::I16,
        .                   IntTy::I32 => ast::IntTy::I32,
        .                   IntTy::I64 => ast::IntTy::I64,
        .                   IntTy::I128 => ast::IntTy::I128,
        .               }
       67 ( 0.00%)  }
        .           
        .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
        .               match uty {
        .                   UintTy::Usize => ast::UintTy::Usize,
        .                   UintTy::U8 => ast::UintTy::U8,
        .                   UintTy::U16 => ast::UintTy::U16,
        .                   UintTy::U32 => ast::UintTy::U32,
        .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
        .               closure::provide(providers);
        .               context::provide(providers);
        .               erase_regions::provide(providers);
        .               layout::provide(providers);
        .               util::provide(providers);
        .               print::provide(providers);
        .               super::util::bug::provide(providers);
        .               super::middle::provide(providers);
        8 ( 0.00%)      *providers = ty::query::Providers {
        .                   trait_impls_of: trait_def::trait_impls_of_provider,
        .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
        .                   const_param_default: consts::const_param_default,
        .                   vtable_allocation: vtable::vtable_allocation_provider,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
        .           /// A map for the local crate mapping each type to a vector of its
        .           /// inherent impls. This is not meant to be used outside of coherence;
        .           /// rather, you should request the vector for a specific type via
        .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
        .           /// (constructing this map requires touching the entire crate).
        .           #[derive(Clone, Debug, Default, HashStable)]
        .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
        .           pub struct SymbolName<'tcx> {
        .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
        .               pub name: &'tcx str,
        .           }
        .           
        .           impl<'tcx> SymbolName<'tcx> {
        6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
        .                   SymbolName {
        .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
        .           }
        .           
-- line 2308 ----------------------------------------

1,808,078 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .           pub enum ProjectionTyError<'tcx> {
      .               /// ...we found multiple sources of information and couldn't resolve the ambiguity.
      .               TooManyCandidates,
      .           
      .               /// ...an error occurred matching `T : TraitRef`
      .               TraitSelectionError(SelectionError<'tcx>),
      .           }
      .           
     12 ( 0.00%)  #[derive(PartialEq, Eq, Debug)]
      .           enum ProjectionTyCandidate<'tcx> {
      .               /// From a where-clause in the env or object type
     94 ( 0.00%)      ParamEnv(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// From the definition of `Trait` when you have something like <<A as Trait>::B as Trait2>::C
      .               TraitDef(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// Bounds specified on an object type
      .               Object(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// From an "impl" (or a "pseudo-impl" returned by select)
-- line 66 ----------------------------------------
-- line 71 ----------------------------------------
      .               None,
      .               Single(ProjectionTyCandidate<'tcx>),
      .               Ambiguous,
      .               Error(SelectionError<'tcx>),
      .           }
      .           
      .           impl<'tcx> ProjectionTyCandidateSet<'tcx> {
      .               fn mark_ambiguous(&mut self) {
     95 ( 0.00%)          *self = ProjectionTyCandidateSet::Ambiguous;
      .               }
      .           
      .               fn mark_error(&mut self, err: SelectionError<'tcx>) {
  1,330 ( 0.00%)          *self = ProjectionTyCandidateSet::Error(err);
      .               }
      .           
      .               // Returns true if the push was successful, or false if the candidate
      .               // was discarded -- this could be because of ambiguity, or because
      .               // a higher-priority candidate is already there.
 14,910 ( 0.00%)      fn push_candidate(&mut self, candidate: ProjectionTyCandidate<'tcx>) -> bool {
      .                   use self::ProjectionTyCandidate::*;
      .                   use self::ProjectionTyCandidateSet::*;
      .           
      .                   // This wacky variable is just used to try and
      .                   // make code readable and avoid confusing paths.
      .                   // It is assigned a "value" of `()` only on those
      .                   // paths in which we wish to convert `*self` to
      .                   // ambiguous (and return false, because the candidate
      .                   // was not used). On other paths, it is not assigned,
      .                   // and hence if those paths *could* reach the code that
      .                   // comes after the match, this fn would not compile.
      .                   let convert_to_ambiguous;
      .           
 14,910 ( 0.00%)          match self {
      .                       None => {
 32,253 ( 0.01%)                  *self = Single(candidate);
      .                           return true;
      .                       }
      .           
      .                       Single(current) => {
      .                           // Duplicates can happen inside ParamEnv. In the case, we
      .                           // perform a lazy deduplication.
      .                           if current == &candidate {
      .                               return false;
-- line 113 ----------------------------------------
-- line 115 ----------------------------------------
      .           
      .                           // Prefer where-clauses. As in select, if there are multiple
      .                           // candidates, we prefer where-clause candidates over impls.  This
      .                           // may seem a bit surprising, since impls are the source of
      .                           // "truth" in some sense, but in fact some of the impls that SEEM
      .                           // applicable are not, because of nested obligations. Where
      .                           // clauses are the safer choice. See the comment on
      .                           // `select::SelectionCandidate` and #21974 for more details.
     64 ( 0.00%)                  match (current, candidate) {
      .                               (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),
      .                               (ParamEnv(..), _) => return false,
      .                               (_, ParamEnv(..)) => unreachable!(),
      .                               (_, _) => convert_to_ambiguous = (),
      .                           }
      .                       }
      .           
      .                       Ambiguous | Error(..) => {
-- line 131 ----------------------------------------
-- line 133 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // We only ever get here when we moved from a single candidate
      .                   // to ambiguous.
      .                   let () = convert_to_ambiguous;
      .                   *self = Ambiguous;
      .                   false
 17,395 ( 0.00%)      }
      .           }
      .           
      .           /// Evaluates constraints of the form:
      .           ///
      .           ///     for<...> <T as Trait>::U == V
      .           ///
      .           /// If successful, this may result in additional obligations. Also returns
      .           /// the projection cache key used to track these additional obligations.
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
      .           pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &PolyProjectionObligation<'tcx>,
      .           ) -> Result<
      .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
      .               MismatchedProjectionTypes<'tcx>,
      .           > {
      .               let infcx = selcx.infcx();
    696 ( 0.00%)      infcx.commit_if_ok(|_snapshot| {
      .                   let placeholder_predicate =
    666 ( 0.00%)              infcx.replace_bound_vars_with_placeholders(obligation.predicate);
      .           
      .                   let placeholder_obligation = obligation.with(placeholder_predicate);
    222 ( 0.00%)          let result = project_and_unify_type(selcx, &placeholder_obligation)?;
    106 ( 0.00%)          Ok(result)
      .               })
      .           }
      .           
      .           /// Evaluates constraints of the form:
      .           ///
      .           ///     <T as Trait>::U == V
      .           ///
      .           /// If successful, this may result in additional obligations.
      .           ///
      .           /// See [poly_project_and_unify_type] for an explanation of the return value.
  1,110 ( 0.00%)  fn project_and_unify_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionObligation<'tcx>,
      .           ) -> Result<
      .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
      .               MismatchedProjectionTypes<'tcx>,
      .           > {
      .               debug!(?obligation, "project_and_unify_type");
      .           
      .               let mut obligations = vec![];
    888 ( 0.00%)      let normalized_ty = match opt_normalize_projection_type(
      .                   selcx,
    111 ( 0.00%)          obligation.param_env,
    222 ( 0.00%)          obligation.predicate.projection_ty,
      .                   obligation.cause.clone(),
    222 ( 0.00%)          obligation.recursion_depth,
      .                   &mut obligations,
      .               ) {
      .                   Ok(Some(n)) => n,
    156 ( 0.00%)          Ok(None) => return Ok(Ok(None)),
      .                   Err(InProgress) => return Ok(Err(InProgress)),
      .               };
      .           
      .               debug!(?normalized_ty, ?obligations, "project_and_unify_type result");
      .           
      .               let infcx = selcx.infcx();
      .               // FIXME(associated_const_equality): Handle consts here as well as types.
    144 ( 0.00%)      let obligation_pred_ty = obligation.predicate.term.ty().unwrap();
    216 ( 0.00%)      match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {
      .                   Ok(InferOk { obligations: inferred_obligations, value: () }) => {
      .                       obligations.extend(inferred_obligations);
    469 ( 0.00%)              Ok(Ok(Some(obligations)))
      .                   }
      .                   Err(err) => {
      .                       debug!("project_and_unify_type: equating types encountered error {:?}", err);
     30 ( 0.00%)              Err(MismatchedProjectionTypes { err })
      .                   }
      .               }
    999 ( 0.00%)  }
      .           
      .           /// Normalizes any associated type projections in `value`, replacing
      .           /// them with a fully resolved type where possible. The return value
      .           /// combines the normalized result and any additional obligations that
      .           /// were incurred as result.
 22,810 ( 0.00%)  pub fn normalize<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               value: T,
      .           ) -> Normalized<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               let mut obligations = Vec::new();
      .               let value = normalize_to(selcx, param_env, cause, value, &mut obligations);
 24,729 ( 0.00%)      Normalized { value, obligations }
 20,529 ( 0.00%)  }
      .           
      .           pub fn normalize_to<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               value: T,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
 40,780 ( 0.01%)      normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)
      .           }
      .           
      .           /// As `normalize`, but with a custom depth.
      .           pub fn normalize_with_depth<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               value: T,
      .           ) -> Normalized<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               let mut obligations = Vec::new();
111,310 ( 0.02%)      let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);
 60,716 ( 0.01%)      Normalized { value, obligations }
      .           }
      .           
321,618 ( 0.06%)  #[instrument(level = "info", skip(selcx, param_env, cause, obligations))]
447,525 ( 0.09%)  pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               value: T,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               debug!(obligations.len = obligations.len());
189,240 ( 0.04%)      let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);
156,119 ( 0.03%)      let result = ensure_sufficient_stack(|| normalizer.fold(value));
      .               debug!(?result, obligations.len = normalizer.obligations.len());
      .               debug!(?normalizer.obligations,);
  9,756 ( 0.00%)      result
 73,412 ( 0.01%)  }
      .           
      .           pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {
      .               match reveal {
      .                   Reveal::UserFacing => value
      .                       .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),
      .                   Reveal::All => value.has_type_flags(
      .                       ty::TypeFlags::HAS_TY_PROJECTION
      .                           | ty::TypeFlags::HAS_TY_OPAQUE
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               obligations: &'a mut Vec<PredicateObligation<'tcx>>,
      .               depth: usize,
      .               universes: Vec<Option<ty::UniverseIndex>>,
      .           }
      .           
      .           impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {
    590 ( 0.00%)      fn new(
      .                   selcx: &'a mut SelectionContext<'b, 'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   depth: usize,
      .                   obligations: &'a mut Vec<PredicateObligation<'tcx>>,
      .               ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {
208,358 ( 0.04%)          AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }
    590 ( 0.00%)      }
      .           
249,588 ( 0.05%)      fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {
131,720 ( 0.03%)          let value = self.selcx.infcx().resolve_vars_if_possible(value);
      .                   debug!(?value);
      .           
 47,039 ( 0.01%)          assert!(
      .                       !value.has_escaping_bound_vars(),
      .                       "Normalizing {:?} without wrapping in a `Binder`",
      .                       value
      .                   );
      .           
 85,247 ( 0.02%)          if !needs_normalization(&value, self.param_env.reveal()) {
  7,322 ( 0.00%)              value
      .                   } else {
    552 ( 0.00%)              value.fold_with(self)
      .                   }
239,069 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {
      .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
 10,187 ( 0.00%)          self.selcx.tcx()
    343 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
      .                   self.universes.push(None);
    555 ( 0.00%)          let t = t.super_fold_with(self);
      .                   self.universes.pop();
      .                   t
      .               }
      .           
187,272 ( 0.04%)      fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 46,818 ( 0.01%)          if !needs_normalization(&ty, self.param_env.reveal()) {
      .                       return ty;
      .                   }
      .           
      .                   // We try to be a little clever here as a performance optimization in
      .                   // cases where there are nested projections under binders.
      .                   // For example:
      .                   // ```
      .                   // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
      .                   //
      .                   // This is possible because the inner `'a` will already be a placeholder
      .                   // when we need to normalize the inner projection
      .                   //
      .                   // On the other hand, this does add a bit of complexity, since we only
      .                   // replace bound vars if the current type is a `Projection` and we need
      .                   // to make sure we don't forget to fold the substs regardless.
      .           
 27,109 ( 0.01%)          match *ty.kind() {
      .                       // This is really important. While we *can* handle this, this has
      .                       // severe performance implications for large opaque types with
      .                       // late-bound regions. See `issue-88862` benchmark.
      .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
      .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
      .                           match self.param_env.reveal() {
      .                               Reveal::UserFacing => ty.super_fold_with(self),
      .           
-- line 397 ----------------------------------------
-- line 421 ----------------------------------------
      .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
      .                           // This branch is *mostly* just an optimization: when we don't
      .                           // have escaping bound vars, we don't need to replace them with
      .                           // placeholders (see branch below). *Also*, we know that we can
      .                           // register an obligation to *later* project, since we know
      .                           // there won't be bound vars there.
      .           
      .                           let data = data.super_fold_with(self);
 40,908 ( 0.01%)                  let normalized_ty = normalize_projection_type(
  6,818 ( 0.00%)                      self.selcx,
  6,818 ( 0.00%)                      self.param_env,
      .                               data,
      .                               self.cause.clone(),
  6,818 ( 0.00%)                      self.depth,
  6,818 ( 0.00%)                      &mut self.obligations,
      .                           );
      .                           debug!(
      .                               ?self.depth,
      .                               ?ty,
      .                               ?normalized_ty,
      .                               obligations.len = ?self.obligations.len(),
      .                               "AssocTypeNormalizer: normalized type"
      .                           );
-- line 443 ----------------------------------------
-- line 490 ----------------------------------------
      .                               obligations.len = ?self.obligations.len(),
      .                               "AssocTypeNormalizer: normalized type"
      .                           );
      .                           normalized_ty
      .                       }
      .           
      .                       _ => ty.super_fold_with(self),
      .                   }
210,681 ( 0.04%)      }
      .           
     54 ( 0.00%)      fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     12 ( 0.00%)          if self.selcx.tcx().lazy_normalization() {
      .                       constant
      .                   } else {
     24 ( 0.00%)              let constant = constant.super_fold_with(self);
      .                       constant.eval(self.selcx.tcx(), self.param_env)
      .                   }
     54 ( 0.00%)      }
      .           }
      .           
      .           pub struct BoundVarReplacer<'me, 'tcx> {
      .               infcx: &'me InferCtxt<'me, 'tcx>,
      .               // These three maps track the bound variable that were replaced by placeholders. It might be
      .               // nice to remove these since we already have the `kind` in the placeholder; we really just need
      .               // the `var` (but we *could* bring that into scope if we were to track them as we pass them).
      .               mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,
-- line 515 ----------------------------------------
-- line 781 ----------------------------------------
      .           }
      .           
      .           /// The guts of `normalize`: normalize a specific projection like `<T
      .           /// as Trait>::Item`. The result is always a type (and possibly
      .           /// additional obligations). If ambiguity arises, which implies that
      .           /// there are unresolved type variables in the projection, we will
      .           /// substitute a fresh type variable `$X` and generate a new
      .           /// obligation `<T as Trait>::Item == $X` for later.
 68,570 ( 0.01%)  pub fn normalize_projection_type<'a, 'b, 'tcx>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               projection_ty: ty::ProjectionTy<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> Ty<'tcx> {
 54,856 ( 0.01%)      opt_normalize_projection_type(
      .                   selcx,
      .                   param_env,
      .                   projection_ty,
      .                   cause.clone(),
      .                   depth,
      .                   obligations,
      .               )
      .               .ok()
      .               .flatten()
      .               .unwrap_or_else(move || {
      .                   // if we bottom out in ambiguity, create a type variable
      .                   // and a deferred predicate to resolve this when more type
      .                   // information is available.
      .           
    462 ( 0.00%)          selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)
      .               })
 61,713 ( 0.01%)  }
      .           
      .           /// The guts of `normalize`: normalize a specific projection like `<T
      .           /// as Trait>::Item`. The result is always a type (and possibly
      .           /// additional obligations). Returns `None` in the case of ambiguity,
      .           /// which indicates that there are unbound type variables.
      .           ///
      .           /// This function used to return `Option<NormalizedTy<'tcx>>`, which contains a
      .           /// `Ty<'tcx>` and an obligations vector. But that obligation vector was very
      .           /// often immediately appended to another obligations vector. So now this
      .           /// function takes an obligations vector and appends to it directly, which is
      .           /// slightly uglier but avoids the need for an extra short-lived allocation.
176,590 ( 0.04%)  #[instrument(level = "debug", skip(selcx, param_env, cause, obligations))]
      .           fn opt_normalize_projection_type<'a, 'b, 'tcx>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               projection_ty: ty::ProjectionTy<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> Result<Option<Ty<'tcx>>, InProgress> {
      .               let infcx = selcx.infcx();
      .               // Don't use the projection cache in intercrate mode -
      .               // the `infcx` may be re-used between intercrate in non-intercrate
      .               // mode, which could lead to using incorrect cache results.
      .               let use_cache = !selcx.is_intercrate();
      .           
      .               let projection_ty = infcx.resolve_vars_if_possible(projection_ty);
 20,904 ( 0.00%)      let cache_key = ProjectionCacheKey::new(projection_ty);
      .           
      .               // FIXME(#20304) For now, I am caching here, which is good, but it
      .               // means we don't capture the type variables that are created in
      .               // the case of ambiguity. Which means we may create a large stream
      .               // of such variables. OTOH, if we move the caching up a level, we
      .               // would not benefit from caching when proving `T: Trait<U=Foo>`
      .               // bounds. It might be the case that we want two distinct caches,
      .               // or else another kind of cache entry.
      .           
  6,968 ( 0.00%)      let cache_result = if use_cache {
 41,736 ( 0.01%)          infcx.inner.borrow_mut().projection_cache().try_start(cache_key)
      .               } else {
     12 ( 0.00%)          Ok(())
      .               };
 41,736 ( 0.01%)      match cache_result {
      .                   Ok(()) => debug!("no cache"),
      .                   Err(ProjectionCacheEntry::Ambiguous) => {
      .                       // If we found ambiguity the last time, that means we will continue
      .                       // to do so until some type in the key changes (and we know it
      .                       // hasn't, because we just fully resolved it).
      .                       debug!("found cache entry: ambiguous");
      .                       return Ok(None);
      .                   }
-- line 865 ----------------------------------------
-- line 882 ----------------------------------------
      .                           infcx.inner.borrow_mut().projection_cache().recur(cache_key);
      .                       }
      .                       return Err(InProgress);
      .                   }
      .                   Err(ProjectionCacheEntry::Recur) => {
      .                       debug!("recur cache");
      .                       return Err(InProgress);
      .                   }
  8,440 ( 0.00%)          Err(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {
      .                       // This is the hottest path in this function.
      .                       //
      .                       // If we find the value in the cache, then return it along
      .                       // with the obligations that went along with it. Note
      .                       // that, when using a fulfillment context, these
      .                       // obligations could in principle be ignored: they have
      .                       // already been registered when the cache entry was
      .                       // created (and hence the new ones will quickly be
-- line 898 ----------------------------------------
-- line 908 ----------------------------------------
      .                       let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
      .                       obligations.extend(result.obligations);
      .                       return Ok(Some(result.value));
      .                   }
      .               }
      .           
      .               let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);
      .           
 24,489 ( 0.00%)      match project_type(selcx, &obligation) {
      .                   Ok(ProjectedTy::Progress(Progress {
      .                       ty: projected_ty,
  9,896 ( 0.00%)              obligations: mut projected_obligations,
      .                   })) => {
      .                       // if projection succeeded, then what we get out of this
      .                       // is also non-normalized (consider: it was derived from
      .                       // an impl, where-clause etc) and hence we must
      .                       // re-normalize it
      .           
      .                       let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);
      .                       debug!(?projected_ty, ?depth, ?projected_obligations);
      .           
  2,474 ( 0.00%)              let mut result = if projected_ty.has_projections() {
      .                           let mut normalizer = AssocTypeNormalizer::new(
      .                               selcx,
      .                               param_env,
  6,092 ( 0.00%)                      cause,
  3,046 ( 0.00%)                      depth + 1,
      .                               &mut projected_obligations,
      .                           );
  3,046 ( 0.00%)                  let normalized_ty = normalizer.fold(projected_ty);
      .           
      .                           debug!(?normalized_ty, ?depth);
      .           
  7,615 ( 0.00%)                  Normalized { value: normalized_ty, obligations: projected_obligations }
      .                       } else {
  5,706 ( 0.00%)                  Normalized { value: projected_ty, obligations: projected_obligations }
      .                       };
      .           
      .                       let mut deduped: SsoHashSet<_> = Default::default();
  2,474 ( 0.00%)              result.obligations.drain_filter(|projected_obligation| {
      .                           if !deduped.insert(projected_obligation.clone()) {
      .                               return true;
      .                           }
      .                           false
      .                       });
      .           
  2,474 ( 0.00%)              if use_cache {
  7,422 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
      .                       }
      .                       obligations.extend(result.obligations);
  2,474 ( 0.00%)              Ok(Some(result.value))
      .                   }
      .                   Ok(ProjectedTy::NoProgress(projected_ty)) => {
      .                       debug!(?projected_ty, "opt_normalize_projection_type: no progress");
    214 ( 0.00%)              let result = Normalized { value: projected_ty, obligations: vec![] };
    107 ( 0.00%)              if use_cache {
    321 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
      .                       }
      .                       // No need to extend `obligations`.
    107 ( 0.00%)              Ok(Some(result.value))
      .                   }
      .                   Err(ProjectionTyError::TooManyCandidates) => {
      .                       debug!("opt_normalize_projection_type: too many candidates");
     45 ( 0.00%)              if use_cache {
    198 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);
      .                       }
      .                       Ok(None)
      .                   }
      .                   Err(ProjectionTyError::TraitSelectionError(_)) => {
      .                       debug!("opt_normalize_projection_type: ERROR");
      .                       // if we got an error processing the `T as Trait` part,
      .                       // just return `ty::err` but add the obligation `T :
      .                       // Trait`, which when processed will cause the error to be
      .                       // reported later
      .           
     95 ( 0.00%)              if use_cache {
    570 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().error(cache_key);
      .                       }
  1,330 ( 0.00%)              let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
      .                       obligations.extend(result.obligations);
    285 ( 0.00%)              Ok(Some(result.value))
      .                   }
      .               }
      .           }
      .           
      .           /// If we are projecting `<T as Trait>::Item`, but `T: Trait` does not
      .           /// hold. In various error cases, we cannot generate a valid
      .           /// normalized projection. Therefore, we create an inference variable
      .           /// return an associated obligation that, when fulfilled, will lead to
-- line 996 ----------------------------------------
-- line 1004 ----------------------------------------
      .           /// paths you want to take. To make things worse, it was possible for
      .           /// cycles to arise, where you basically had a setup like `<MyType<$0>
      .           /// as Trait>::Foo == $0`. Here, normalizing `<MyType<$0> as
      .           /// Trait>::Foo> to `[type error]` would lead to an obligation of
      .           /// `<MyType<[type error]> as Trait>::Foo`. We are supposed to report
      .           /// an error for this obligation, but we legitimately should not,
      .           /// because it contains `[type error]`. Yuck! (See issue #29857 for
      .           /// one case where this arose.)
  1,140 ( 0.00%)  fn normalize_to_error<'a, 'tcx>(
      .               selcx: &mut SelectionContext<'a, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               projection_ty: ty::ProjectionTy<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .           ) -> NormalizedTy<'tcx> {
     95 ( 0.00%)      let trait_ref = ty::Binder::dummy(projection_ty.trait_ref(selcx.tcx()));
    760 ( 0.00%)      let trait_obligation = Obligation {
    380 ( 0.00%)          cause,
      .                   recursion_depth: depth,
      .                   param_env,
     95 ( 0.00%)          predicate: trait_ref.without_const().to_predicate(selcx.tcx()),
      .               };
     95 ( 0.00%)      let tcx = selcx.infcx().tcx;
      .               let def_id = projection_ty.item_def_id;
    475 ( 0.00%)      let new_value = selcx.infcx().next_ty_var(TypeVariableOrigin {
      .                   kind: TypeVariableOriginKind::NormalizeProjectionType,
      .                   span: tcx.def_span(def_id),
      .               });
  1,045 ( 0.00%)      Normalized { value: new_value, obligations: vec![trait_obligation] }
    760 ( 0.00%)  }
      .           
      .           enum ProjectedTy<'tcx> {
      .               Progress(Progress<'tcx>),
      .               NoProgress(Ty<'tcx>),
      .           }
      .           
      .           struct Progress<'tcx> {
      .               ty: Ty<'tcx>,
-- line 1041 ----------------------------------------
-- line 1060 ----------------------------------------
      .                   self
      .               }
      .           }
      .           
      .           /// Computes the result of a projection type (if we can).
      .           ///
      .           /// IMPORTANT:
      .           /// - `obligation` must be fully normalized
 48,978 ( 0.01%)  #[tracing::instrument(level = "info", skip(selcx))]
      .           fn project_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .           ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {
  8,163 ( 0.00%)      if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {
      .                   debug!("project: overflow!");
      .                   // This should really be an immediate error, but some existing code
      .                   // relies on being able to recover from this.
      .                   return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));
      .               }
      .           
      .               if obligation.predicate.references_error() {
      .                   return Ok(ProjectedTy::Progress(Progress::error(selcx.tcx())));
      .               }
      .           
  2,721 ( 0.00%)      let mut candidates = ProjectionTyCandidateSet::None;
      .           
      .               // Make sure that the following procedures are kept in order. ParamEnv
      .               // needs to be first because it has highest priority, and Select checks
      .               // the return value of push_candidate which assumes it's ran at last.
  5,442 ( 0.00%)      assemble_candidates_from_param_env(selcx, obligation, &mut candidates);
      .           
  4,548 ( 0.00%)      assemble_candidates_from_trait_def(selcx, obligation, &mut candidates);
      .           
  5,442 ( 0.00%)      assemble_candidates_from_object_ty(selcx, obligation, &mut candidates);
      .           
  5,566 ( 0.00%)      if let ProjectionTyCandidateSet::Single(ProjectionTyCandidate::Object(_)) = candidates {
      .                   // Avoid normalization cycle from selection (see
      .                   // `assemble_candidates_from_object_ty`).
      .                   // FIXME(lazy_normalization): Lazy normalization should save us from
      .                   // having to special case this.
      .               } else {
  5,442 ( 0.00%)          assemble_candidates_from_impls(selcx, obligation, &mut candidates);
      .               };
      .           
 13,605 ( 0.00%)      match candidates {
      .                   ProjectionTyCandidateSet::Single(candidate) => {
 54,428 ( 0.01%)              Ok(ProjectedTy::Progress(confirm_candidate(selcx, obligation, candidate)))
      .                   }
    535 ( 0.00%)          ProjectionTyCandidateSet::None => Ok(ProjectedTy::NoProgress(
      .                       selcx
      .                           .tcx()
    214 ( 0.00%)                  .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs),
      .                   )),
      .                   // Error occurred while trying to processing impls.
  1,520 ( 0.00%)          ProjectionTyCandidateSet::Error(e) => Err(ProjectionTyError::TraitSelectionError(e)),
      .                   // Inherent ambiguity that prevents us from even enumerating the
      .                   // candidates.
    180 ( 0.00%)          ProjectionTyCandidateSet::Ambiguous => Err(ProjectionTyError::TooManyCandidates),
      .               }
  5,689 ( 0.00%)  }
      .           
      .           /// The first thing we have to do is scan through the parameter
      .           /// environment to see whether there are any projection predicates
      .           /// there that can answer this question.
      .           fn assemble_candidates_from_param_env<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_param_env(..)");
      .               assemble_candidates_from_predicates(
      .                   selcx,
      .                   obligation,
      .                   candidate_set,
      .                   ProjectionTyCandidate::ParamEnv,
  2,721 ( 0.00%)          obligation.param_env.caller_bounds().iter(),
      .                   false,
      .               );
      .           }
      .           
      .           /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find
      .           /// that the definition of `Foo` has some clues:
      .           ///
      .           /// ```
-- line 1143 ----------------------------------------
-- line 1152 ----------------------------------------
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_trait_def(..)");
      .           
      .               let tcx = selcx.tcx();
      .               // Check whether the self-type is itself a projection.
      .               // If so, extract what we know from the trait and try to come up with a good answer.
 32,584 ( 0.01%)      let bounds = match *obligation.predicate.self_ty().kind() {
      6 ( 0.00%)          ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),
      .                   ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),
      .                   ty::Infer(ty::TyVar(_)) => {
      .                       // If the self-type is an inference variable, then it MAY wind up
      .                       // being a projected type, so induce an ambiguity.
      .                       candidate_set.mark_ambiguous();
      .                       return;
      .                   }
      .                   _ => return,
-- line 1169 ----------------------------------------
-- line 1192 ----------------------------------------
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_object_ty(..)");
      .           
      .               let tcx = selcx.tcx();
      .           
  5,442 ( 0.00%)      let self_ty = obligation.predicate.self_ty();
      .               let object_ty = selcx.infcx().shallow_resolve(self_ty);
 13,605 ( 0.00%)      let data = match object_ty.kind() {
      .                   ty::Dynamic(data, ..) => data,
      .                   ty::Infer(ty::TyVar(_)) => {
      .                       // If the self-type is an inference variable, then it MAY wind up
      .                       // being an object type, so induce an ambiguity.
      .                       candidate_set.mark_ambiguous();
      .                       return;
      .                   }
      .                   _ => return,
-- line 1210 ----------------------------------------
-- line 1232 ----------------------------------------
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .               ctor: fn(ty::PolyProjectionPredicate<'tcx>) -> ProjectionTyCandidate<'tcx>,
      .               env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
      .               potentially_unnormalized_candidates: bool,
      .           ) {
      .               let infcx = selcx.infcx();
     16 ( 0.00%)      for predicate in env_predicates {
      .                   debug!(?predicate);
      .                   let bound_predicate = predicate.kind();
102,170 ( 0.02%)          if let ty::PredicateKind::Projection(data) = predicate.kind().skip_binder() {
  9,120 ( 0.00%)              let data = bound_predicate.rebind(data);
  4,560 ( 0.00%)              let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;
      .           
  2,506 ( 0.00%)              let is_match = same_def_id
      .                           && infcx.probe(|_| {
    339 ( 0.00%)                      selcx.match_projection_projections(
      .                                   obligation,
  1,017 ( 0.00%)                          data,
      .                                   potentially_unnormalized_candidates,
      .                               )
      .                           });
      .           
      .                       debug!(?data, ?is_match, ?same_def_id);
      .           
    226 ( 0.00%)              if is_match {
  1,034 ( 0.00%)                  candidate_set.push_candidate(ctor(data));
      .           
      .                           if potentially_unnormalized_candidates
      .                               && !obligation.predicate.has_infer_types_or_consts()
      .                           {
      .                               // HACK: Pick the first trait def candidate for a fully
      .                               // inferred predicate. This is to allow duplicates that
      .                               // differ only in normalization.
      .                               return;
-- line 1267 ----------------------------------------
-- line 1274 ----------------------------------------
      .           #[tracing::instrument(level = "debug", skip(selcx, obligation, candidate_set))]
      .           fn assemble_candidates_from_impls<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               // If we are resolving `<T as TraitRef<...>>::Item == Type`,
      .               // start out by selecting the predicate `T as TraitRef<...>`:
  8,163 ( 0.00%)      let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));
  5,442 ( 0.00%)      let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());
 24,489 ( 0.00%)      let _ = selcx.infcx().commit_if_ok(|_| {
 16,136 ( 0.00%)          let impl_source = match selcx.select(&trait_obligation) {
 25,810 ( 0.01%)              Ok(Some(impl_source)) => impl_source,
      .                       Ok(None) => {
      .                           candidate_set.mark_ambiguous();
      .                           return Err(());
      .                       }
      .                       Err(e) => {
      .                           debug!(error = ?e, "selection error");
      .                           candidate_set.mark_error(e);
      .                           return Err(());
      .                       }
      .                   };
      .           
 12,905 ( 0.00%)          let eligible = match &impl_source {
      .                       super::ImplSource::Closure(_)
      .                       | super::ImplSource::Generator(_)
      .                       | super::ImplSource::FnPointer(_)
      .                       | super::ImplSource::TraitAlias(_) => {
      .                           debug!(?impl_source);
      .                           true
      .                       }
      .                       super::ImplSource::UserDefined(impl_data) => {
-- line 1306 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           //
      .                           // In either case, we handle this by not adding a
      .                           // candidate for an impl if it contains a `default`
      .                           // type.
      .                           //
      .                           // NOTE: This should be kept in sync with the similar code in
      .                           // `rustc_ty_utils::instance::resolve_associated_item()`.
      .                           let node_item =
 21,519 ( 0.00%)                      assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)
      .                                   .map_err(|ErrorReported| ())?;
      .           
  7,173 ( 0.00%)                  if node_item.is_final() {
      .                               // Non-specializable items are always projectable.
      .                               true
      .                           } else {
      .                               // Only reveal a specializable default if we're past type-checking
      .                               // and the obligation is monomorphic, otherwise passes such as
      .                               // transmute checking and polymorphic MIR optimizations could
      .                               // get a result which isn't correct for all monomorphizations.
      .                               if obligation.param_env.reveal() == Reveal::All {
-- line 1341 ----------------------------------------
-- line 1495 ----------------------------------------
      .                               obligation.cause.span,
      .                               &format!("Cannot project an associated type from `{:?}`", impl_source),
      .                           );
      .                           return Err(());
      .                       }
      .                   };
      .           
      .                   if eligible {
 33,474 ( 0.01%)              if candidate_set.push_candidate(ProjectionTyCandidate::Select(impl_source)) {
      .                           Ok(())
      .                       } else {
      .                           Err(())
      .                       }
      .                   } else {
      .                       Err(())
      .                   }
    380 ( 0.00%)      });
      .           }
      .           
      .           fn confirm_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate: ProjectionTyCandidate<'tcx>,
      .           ) -> Progress<'tcx> {
      .               debug!(?obligation, ?candidate, "confirm_candidate");
 12,370 ( 0.00%)      let mut progress = match candidate {
      .                   ProjectionTyCandidate::ParamEnv(poly_projection)
      .                   | ProjectionTyCandidate::Object(poly_projection) => {
  1,218 ( 0.00%)              confirm_param_env_candidate(selcx, obligation, poly_projection, false)
      .                   }
      .           
      .                   ProjectionTyCandidate::TraitDef(poly_projection) => {
      .                       confirm_param_env_candidate(selcx, obligation, poly_projection, true)
      .                   }
      .           
      .                   ProjectionTyCandidate::Select(impl_source) => {
 23,870 ( 0.00%)              confirm_select_candidate(selcx, obligation, impl_source)
      .                   }
      .               };
      .               // When checking for cycle during evaluation, we compare predicates with
      .               // "syntactic" equality. Since normalization generally introduces a type
      .               // with new region variables, we need to resolve them to existing variables
      .               // when possible for this to work. See `auto-trait-projection-recursion.rs`
      .               // for a case where this matters.
  2,561 ( 0.00%)      if progress.ty.has_infer_regions() {
      .                   progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);
      .               }
      .               progress
      .           }
      .           
      .           fn confirm_select_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               impl_source: Selection<'tcx>,
      .           ) -> Progress<'tcx> {
 11,935 ( 0.00%)      match impl_source {
 11,935 ( 0.00%)          super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),
      .                   super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),
      .                   super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),
      .                   super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),
      .                   super::ImplSource::DiscriminantKind(data) => {
      .                       confirm_discriminant_kind_candidate(selcx, obligation, data)
      .                   }
      .                   super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),
      .                   super::ImplSource::Object(_)
-- line 1559 ----------------------------------------
-- line 1747 ----------------------------------------
      .                       item_def_id: fn_once_output_def_id,
      .                   },
      .                   term: ret_type.into(),
      .               });
      .           
      .               confirm_param_env_candidate(selcx, obligation, predicate, true)
      .           }
      .           
  1,044 ( 0.00%)  fn confirm_param_env_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,
      .               potentially_unnormalized_candidate: bool,
      .           ) -> Progress<'tcx> {
      .               let infcx = selcx.infcx();
      .               let cause = &obligation.cause;
    174 ( 0.00%)      let param_env = obligation.param_env;
      .           
    348 ( 0.00%)      let (cache_entry, _) = infcx.replace_bound_vars_with_fresh_vars(
    261 ( 0.00%)          cause.span,
      .                   LateBoundRegionConversionTime::HigherRankedType,
      .                   poly_cache_entry,
      .               );
      .           
    174 ( 0.00%)      let cache_projection = cache_entry.projection_ty;
      .               let mut nested_obligations = Vec::new();
    261 ( 0.00%)      let obligation_projection = obligation.predicate;
    696 ( 0.00%)      let obligation_projection = ensure_sufficient_stack(|| {
    348 ( 0.00%)          normalize_with_depth_to(
      .                       selcx,
     87 ( 0.00%)              obligation.param_env,
      .                       obligation.cause.clone(),
    261 ( 0.00%)              obligation.recursion_depth + 1,
    174 ( 0.00%)              obligation_projection,
      .                       &mut nested_obligations,
      .                   )
      .               });
    174 ( 0.00%)      let cache_projection = if potentially_unnormalized_candidate {
      .                   ensure_sufficient_stack(|| {
      .                       normalize_with_depth_to(
      .                           selcx,
      .                           obligation.param_env,
      .                           obligation.cause.clone(),
      .                           obligation.recursion_depth + 1,
      .                           cache_projection,
      .                           &mut nested_obligations,
      .                       )
      .                   })
      .               } else {
    174 ( 0.00%)          cache_projection
      .               };
      .           
      .               debug!(?cache_projection, ?obligation_projection);
      .           
    174 ( 0.00%)      match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {
      .                   Ok(InferOk { value: _, obligations }) => {
      .                       nested_obligations.extend(obligations);
    174 ( 0.00%)              assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);
      .                       // FIXME(associated_const_equality): Handle consts here as well? Maybe this progress type should just take
      .                       // a term instead.
    696 ( 0.00%)              Progress { ty: cache_entry.term.ty().unwrap(), obligations: nested_obligations }
      .                   }
      .                   Err(e) => {
      .                       let msg = format!(
      .                           "Failed to unify obligation `{:?}` with poly_projection `{:?}`: {:?}",
      .                           obligation, poly_cache_entry, e,
      .                       );
      .                       debug!("confirm_param_env_candidate: {}", msg);
      .                       let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);
      .                       Progress { ty: err, obligations: vec![] }
      .                   }
      .               }
    696 ( 0.00%)  }
      .           
      .           fn confirm_impl_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,
      .           ) -> Progress<'tcx> {
      .               let tcx = selcx.tcx();
      .           
  9,548 ( 0.00%)      let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;
  7,161 ( 0.00%)      let assoc_item_id = obligation.predicate.item_def_id;
  9,548 ( 0.00%)      let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();
      .           
  9,548 ( 0.00%)      let param_env = obligation.param_env;
 16,709 ( 0.00%)      let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {
 23,870 ( 0.00%)          Ok(assoc_ty) => assoc_ty,
      .                   Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },
      .               };
      .           
  9,548 ( 0.00%)      if !assoc_ty.item.defaultness.has_value() {
      .                   // This means that the impl is missing a definition for the
      .                   // associated type. This error will be reported by the type
      .                   // checker method `check_impl_items_against_trait`, so here we
      .                   // just return Error.
      .                   debug!(
      .                       "confirm_impl_candidate: no associated type {:?} for {:?}",
      .                       assoc_ty.item.name, obligation.predicate
      .                   );
-- line 1846 ----------------------------------------
-- line 1847 ----------------------------------------
      .                   return Progress { ty: tcx.ty_error(), obligations: nested };
      .               }
      .               // If we're trying to normalize `<Vec<u32> as X>::A<S>` using
      .               //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:
      .               //
      .               // * `obligation.predicate.substs` is `[Vec<u32>, S]`
      .               // * `substs` is `[u32]`
      .               // * `substs` ends up as `[u32, S]`
 14,322 ( 0.00%)      let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);
      .               let substs =
 26,257 ( 0.01%)          translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);
  2,387 ( 0.00%)      let ty = tcx.type_of(assoc_ty.item.def_id);
  7,161 ( 0.00%)      if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {
      .                   let err = tcx.ty_error_with_message(
      .                       obligation.cause.span,
      .                       "impl item and trait item have different parameter counts",
      .                   );
      .                   Progress { ty: err, obligations: nested }
      .               } else {
  4,774 ( 0.00%)          assoc_ty_own_obligations(selcx, obligation, &mut nested);
      .                   Progress { ty: ty.subst(tcx, substs), obligations: nested }
      .               }
      .           }
      .           
      .           // Get obligations corresponding to the predicates from the where-clause of the
      .           // associated type itself.
      .           // Note: `feature(generic_associated_types)` is required to write such
      .           // predicates, even for non-generic associcated types.
 22,266 ( 0.00%)  fn assoc_ty_own_obligations<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               nested: &mut Vec<PredicateObligation<'tcx>>,
      .           ) {
      .               let tcx = selcx.tcx();
 22,266 ( 0.00%)      for predicate in tcx
  4,948 ( 0.00%)          .predicates_of(obligation.predicate.item_def_id)
  7,422 ( 0.00%)          .instantiate_own(tcx, obligation.predicate.substs)
      .                   .predicates
      .               {
      .                   let normalized = normalize_with_depth_to(
      .                       selcx,
      .                       obligation.param_env,
      .                       obligation.cause.clone(),
      .                       obligation.recursion_depth + 1,
      .                       predicate,
-- line 1891 ----------------------------------------
-- line 1893 ----------------------------------------
      .                   );
      .                   nested.push(Obligation::with_depth(
      .                       obligation.cause.clone(),
      .                       obligation.recursion_depth + 1,
      .                       obligation.param_env,
      .                       normalized,
      .                   ));
      .               }
 19,792 ( 0.00%)  }
      .           
      .           /// Locate the definition of an associated type in the specialization hierarchy,
      .           /// starting from the given impl.
      .           ///
      .           /// Based on the "projection mode", this lookup may in fact only examine the
      .           /// topmost impl. See the comments for `Reveal` for more details.
 43,002 ( 0.01%)  fn assoc_ty_def(
      .               selcx: &SelectionContext<'_, '_>,
      .               impl_def_id: DefId,
      .               assoc_ty_def_id: DefId,
      .           ) -> Result<specialization_graph::LeafDef, ErrorReported> {
      .               let tcx = selcx.tcx();
  9,556 ( 0.00%)      let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;
      .               let trait_def = tcx.trait_def(trait_def_id);
      .           
      .               // This function may be called while we are still building the
      .               // specialization graph that is queried below (via TraitDef::ancestors()),
      .               // so, in order to avoid unnecessary infinite recursion, we manually look
      .               // for the associated item at the given impl.
      .               // If there is no such item in that impl, this function will fail with a
      .               // cycle error if the specialization graph is currently being built.
  9,556 ( 0.00%)      if let Some(&impl_item_id) = tcx.impl_item_implementor_ids(impl_def_id).get(&assoc_ty_def_id) {
      .                   let item = tcx.associated_item(impl_item_id);
      .                   let impl_node = specialization_graph::Node::Impl(impl_def_id);
 57,336 ( 0.01%)          return Ok(specialization_graph::LeafDef {
 28,668 ( 0.01%)              item: *item,
      .                       defining_node: impl_node,
 23,890 ( 0.00%)              finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },
      .                   });
      .               }
      .           
      .               let ancestors = trait_def.ancestors(tcx, impl_def_id)?;
      .               if let Some(assoc_item) = ancestors.leaf_def(tcx, assoc_ty_def_id) {
      .                   Ok(assoc_item)
      .               } else {
      .                   // This is saying that neither the trait nor
-- line 1937 ----------------------------------------
-- line 1941 ----------------------------------------
      .                   // if the user wrote a bad item name, it
      .                   // should have failed in astconv.
      .                   bug!(
      .                       "No associated type `{}` for {}",
      .                       tcx.item_name(assoc_ty_def_id),
      .                       tcx.def_path_str(impl_def_id)
      .                   )
      .               }
 43,002 ( 0.01%)  }
      .           
      .           crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {
      .               fn from_poly_projection_predicate(
      .                   selcx: &mut SelectionContext<'cx, 'tcx>,
      .                   predicate: ty::PolyProjectionPredicate<'tcx>,
      .               ) -> Option<Self>;
      .           }
      .           
      .           impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {
    294 ( 0.00%)      fn from_poly_projection_predicate(
      .                   selcx: &mut SelectionContext<'cx, 'tcx>,
      .                   predicate: ty::PolyProjectionPredicate<'tcx>,
      .               ) -> Option<Self> {
      .                   let infcx = selcx.infcx();
      .                   // We don't do cross-snapshot caching of obligations with escaping regions,
      .                   // so there's no cache key to use
    252 ( 0.00%)          predicate.no_bound_vars().map(|predicate| {
     84 ( 0.00%)              ProjectionCacheKey::new(
      .                           // We don't attempt to match up with a specific type-variable state
      .                           // from a specific call to `opt_normalize_projection_type` - if
      .                           // there's no precise match, the original cache entry is "stranded"
      .                           // anyway.
      .                           infcx.resolve_vars_if_possible(predicate.projection_ty),
      .                       )
      .                   })
    336 ( 0.00%)      }
      .           }

289,361 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
      .           
      .           /// See `simplify_type`
      .           ///
      .           /// Note that we keep this type generic over the type of identifier it uses
      .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
      .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
      .           /// the non-stable but fast to construct DefId-version is the better choice.
220,143 ( 0.04%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           pub enum SimplifiedTypeGen<D>
      .           where
      .               D: Copy + Debug + Eq,
      .           {
      .               BoolSimplifiedType,
      .               CharSimplifiedType,
      .               IntSimplifiedType(ty::IntTy),
      .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
      .           ///
      .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
      .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
      .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
      .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
      .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
      .           ///   this way so I am not going to change this until we actually find an issue as I am really
      .           ///   interesting in getting an actual test for this.
220,412 ( 0.04%)  pub fn simplify_type(
      .               tcx: TyCtxt<'_>,
      .               ty: Ty<'_>,
      .               can_simplify_params: SimplifyParams,
      .               strip_references: StripReferences,
      .           ) -> Option<SimplifiedType> {
330,618 ( 0.07%)      match *ty.kind() {
      .                   ty::Bool => Some(BoolSimplifiedType),
      .                   ty::Char => Some(CharSimplifiedType),
  4,552 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
  7,380 ( 0.00%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
    124 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
365,610 ( 0.07%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
      .                   ty::Str => Some(StrSimplifiedType),
      .                   ty::Array(..) => Some(ArraySimplifiedType),
      .                   ty::Slice(..) => Some(SliceSimplifiedType),
    140 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
      .                   ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
      .                       Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
      .                           Some(TraitSimplifiedType(principal_def_id))
      .                       }
      .                       _ => Some(MarkerTraitObjectSimplifiedType),
      .                   },
  9,428 ( 0.00%)          ty::Ref(_, ty, mutbl) => {
  4,714 ( 0.00%)              if strip_references == StripReferences::Yes {
      .                           // For diagnostics, when recommending similar impls we want to
      .                           // recommend impls even when there is a reference mismatch,
      .                           // so we treat &T and T equivalently in that case.
      .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
      .                       } else {
      .                           Some(RefSimplifiedType(mutbl))
      .                       }
      .                   }
      .                   ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
      .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
      .                   ty::GeneratorWitness(ref tys) => {
      .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
      .                   }
      .                   ty::Never => Some(NeverSimplifiedType),
 12,168 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
      .                   ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
      .                   ty::Projection(_) | ty::Param(_) => {
 17,901 ( 0.00%)              if can_simplify_params == SimplifyParams::Yes {
      .                           // In normalized types, projections don't unify with
      .                           // anything. when lazy normalization happens, this
      .                           // will change. It would still be nice to have a way
      .                           // to deal with known-not-to-unify-with-anything
      .                           // projections (e.g., the likes of <__S as Encoder>::Error).
      .                           Some(ParameterSimplifiedType)
      .                       } else {
      .                           None
      .                       }
      .                   }
      .                   ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
      .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
      .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
      .               }
495,927 ( 0.10%)  }
      .           
      .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
      .               pub fn def(self) -> Option<D> {
      .                   match self {
      .                       AdtSimplifiedType(d)
      .                       | ForeignSimplifiedType(d)
      .                       | TraitSimplifiedType(d)
      .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

402,222 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs
--------------------------------------------------------------------------------
Ir               

-- line 6 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::Symbol;
      .           
      .           use std::array::IntoIter;
      .           use std::fmt::Debug;
      .           
      .           /// Encodes if a `DefKind::Ctor` is the constructor of an enum variant or a struct.
    324 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
     26 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum CtorOf {
      .               /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit struct.
      .               Struct,
      .               /// This `DefKind::Ctor` is a synthesized constructor of a tuple or unit variant.
      .               Variant,
      .           }
      .           
      .           /// What kind of constructor something is.
  3,142 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
     26 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum CtorKind {
      .               /// Constructor function automatically created by a tuple struct/variant.
      .               Fn,
      .               /// Constructor constant automatically created by a unit struct/variant.
      .               Const,
      .               /// Unusable name in value namespace created by a struct variant.
      .               Fictive,
      .           }
-- line 33 ----------------------------------------
-- line 45 ----------------------------------------
      .               /// Single-segment custom attribute registered by a derive macro
      .               /// but used before that derive macro was expanded (deprecated).
      .               DeriveHelperCompat,
      .               /// Single-segment custom attribute registered with `#[register_attr]`.
      .               Registered,
      .           }
      .           
      .           /// What kind of definition something is; e.g., `mod` vs `struct`.
466,867 ( 0.09%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum DefKind {
      .               // Type namespace
      .               Mod,
      .               /// Refers to the struct itself, [`DefKind::Ctor`] refers to its constructor if it exists.
      .               Struct,
      .               Union,
      .               Enum,
-- line 61 ----------------------------------------
-- line 116 ----------------------------------------
      .               /// A use of `global_asm!`.
      .               GlobalAsm,
      .               Impl,
      .               Closure,
      .               Generator,
      .           }
      .           
      .           impl DefKind {
     44 ( 0.00%)      pub fn descr(self, def_id: DefId) -> &'static str {
     55 ( 0.00%)          match self {
      .                       DefKind::Fn => "function",
      .                       DefKind::Mod if def_id.index == CRATE_DEF_INDEX && def_id.krate != LOCAL_CRATE => {
      .                           "crate"
      .                       }
      .                       DefKind::Mod => "module",
      .                       DefKind::Static => "static",
      .                       DefKind::Enum => "enum",
      .                       DefKind::Variant => "variant",
-- line 133 ----------------------------------------
-- line 160 ----------------------------------------
      .                       DefKind::InlineConst => "inline constant",
      .                       DefKind::Field => "field",
      .                       DefKind::Impl => "implementation",
      .                       DefKind::Closure => "closure",
      .                       DefKind::Generator => "generator",
      .                       DefKind::ExternCrate => "extern crate",
      .                       DefKind::GlobalAsm => "global assembly block",
      .                   }
     22 ( 0.00%)      }
      .           
      .               /// Gets an English article for the definition.
     11 ( 0.00%)      pub fn article(&self) -> &'static str {
     55 ( 0.00%)          match *self {
      .                       DefKind::AssocTy
      .                       | DefKind::AssocConst
      .                       | DefKind::AssocFn
      .                       | DefKind::Enum
      .                       | DefKind::OpaqueTy
      .                       | DefKind::Impl
      .                       | DefKind::Use
      .                       | DefKind::InlineConst
      .                       | DefKind::ExternCrate => "an",
      .                       DefKind::Macro(macro_kind) => macro_kind.article(),
      .                       _ => "a",
      .                   }
     22 ( 0.00%)      }
      .           
      .               pub fn ns(&self) -> Option<Namespace> {
    147 ( 0.00%)          match self {
      .                       DefKind::Mod
      .                       | DefKind::Struct
      .                       | DefKind::Union
      .                       | DefKind::Enum
      .                       | DefKind::Variant
      .                       | DefKind::Trait
      .                       | DefKind::OpaqueTy
      .                       | DefKind::TyAlias
-- line 196 ----------------------------------------
-- line 217 ----------------------------------------
      .                       | DefKind::ExternCrate
      .                       | DefKind::Closure
      .                       | DefKind::Generator
      .                       | DefKind::Use
      .                       | DefKind::ForeignMod
      .                       | DefKind::GlobalAsm
      .                       | DefKind::Impl => None,
      .                   }
     49 ( 0.00%)      }
      .           }
      .           
      .           /// The resolution of a path or export.
      .           ///
      .           /// For every path or identifier in Rust, the compiler must determine
      .           /// what the path refers to. This process is called name resolution,
      .           /// and `Res` is the primary result of name resolution.
      .           ///
-- line 233 ----------------------------------------
-- line 248 ----------------------------------------
      .           /// - `String` will resolve to [`Res::Def`], and the `Res` will include the [`DefId`]
      .           ///   for `String` as defined in the standard library;
      .           /// - `String::from` will also resolve to [`Res::Def`], with the [`DefId`]
      .           ///   pointing to `String::from`;
      .           /// - `s` will resolve to [`Res::Local`];
      .           /// - the call to `str_to_string` will resolve to [`Res::Def`], with the [`DefId`]
      .           ///   pointing to the definition of `str_to_string` in the current crate.
      .           //
424,877 ( 0.09%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
 18,622 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum Res<Id = hir::HirId> {
      .               /// Definition having a unique ID (`DefId`), corresponds to something defined in user code.
      .               ///
      .               /// **Not bound to a specific namespace.**
    324 ( 0.00%)      Def(DefKind, DefId),
      .           
      .               // Type namespace
      .               /// A primitive type such as `i32` or `str`.
      .               ///
      .               /// **Belongs to the type namespace.**
      .               PrimTy(hir::PrimTy),
      .               /// The `Self` type, optionally with the trait it is associated with
      .               /// and optionally with the [`DefId`] of the impl it is associated with.
-- line 270 ----------------------------------------
-- line 338 ----------------------------------------
      .               Local(Id),
      .           
      .               // Macro namespace
      .               /// An attribute that is *not* implemented via macro.
      .               /// E.g., `#[inline]` and `#[rustfmt::skip]`, which are essentially directives,
      .               /// as opposed to `#[test]`, which is a builtin macro.
      .               ///
      .               /// **Belongs to the macro namespace.**
      6 ( 0.00%)      NonMacroAttr(NonMacroAttrKind), // e.g., `#[inline]` or `#[rustfmt::skip]`
      .           
      .               // All namespaces
      .               /// Name resolution failed. We use a dummy `Res` variant so later phases
      .               /// of the compiler won't crash and can instead report more errors.
      .               ///
      .               /// **Not bound to a specific namespace.**
      .               Err,
      .           }
-- line 354 ----------------------------------------
-- line 364 ----------------------------------------
      .           /// module::Type::AssocX::AssocY::MethodOrAssocType
      .           /// ^~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      .           /// base_res      unresolved_segments = 3
      .           ///
      .           /// <T as Trait>::AssocX::AssocY::MethodOrAssocType
      .           ///       ^~~~~~~~~~~~~~  ^~~~~~~~~~~~~~~~~~~~~~~~~
      .           ///       base_res        unresolved_segments = 2
      .           /// ```
  2,264 ( 0.00%)  #[derive(Copy, Clone, Debug)]
      .           pub struct PartialRes {
      .               base_res: Res<NodeId>,
      .               unresolved_segments: usize,
      .           }
      .           
      .           impl PartialRes {
      .               #[inline]
      .               pub fn new(base_res: Res<NodeId>) -> Self {
    353 ( 0.00%)          PartialRes { base_res, unresolved_segments: 0 }
      .               }
      .           
      .               #[inline]
      .               pub fn with_unresolved_segments(base_res: Res<NodeId>, mut unresolved_segments: usize) -> Self {
  1,344 ( 0.00%)          if base_res == Res::Err {
      .                       unresolved_segments = 0
      .                   }
    380 ( 0.00%)          PartialRes { base_res, unresolved_segments }
      .               }
      .           
      .               #[inline]
      .               pub fn base_res(&self) -> Res<NodeId> {
  5,372 ( 0.00%)          self.base_res
      .               }
      .           
      .               #[inline]
      .               pub fn unresolved_segments(&self) -> usize {
      .                   self.unresolved_segments
      .               }
      .           }
      .           
      .           /// Different kinds of symbols can coexist even if they share the same textual name.
      .           /// Therefore, they each have a separate universe (known as a "namespace").
 10,782 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           pub enum Namespace {
      .               /// The type namespace includes `struct`s, `enum`s, `union`s, `trait`s, and `mod`s
      .               /// (and, by extension, crates).
      .               ///
      .               /// Note that the type namespace includes other items; this is not an
      .               /// exhaustive list.
      .               TypeNS,
      .               /// The value namespace includes `fn`s, `const`s, `static`s, and local variables (including function arguments).
-- line 413 ----------------------------------------
-- line 425 ----------------------------------------
      .                       Self::TypeNS => "type",
      .                       Self::ValueNS => "value",
      .                       Self::MacroNS => "macro",
      .                   }
      .               }
      .           }
      .           
      .           /// Just a helper ‒ separate structure for each namespace.
     28 ( 0.00%)  #[derive(Copy, Clone, Default, Debug)]
      .           pub struct PerNS<T> {
      .               pub value_ns: T,
      .               pub type_ns: T,
      .               pub macro_ns: T,
      .           }
      .           
      .           impl<T> PerNS<T> {
      .               pub fn map<U, F: FnMut(T) -> U>(self, mut f: F) -> PerNS<U> {
-- line 441 ----------------------------------------
-- line 450 ----------------------------------------
      .                   [&self.value_ns, &self.type_ns, &self.macro_ns].into_iter()
      .               }
      .           }
      .           
      .           impl<T> ::std::ops::Index<Namespace> for PerNS<T> {
      .               type Output = T;
      .           
      .               fn index(&self, ns: Namespace) -> &T {
  2,436 ( 0.00%)          match ns {
      .                       Namespace::ValueNS => &self.value_ns,
    394 ( 0.00%)              Namespace::TypeNS => &self.type_ns,
    170 ( 0.00%)              Namespace::MacroNS => &self.macro_ns,
      .                   }
      .               }
      .           }
      .           
      .           impl<T> ::std::ops::IndexMut<Namespace> for PerNS<T> {
      .               fn index_mut(&mut self, ns: Namespace) -> &mut T {
     66 ( 0.00%)          match ns {
      6 ( 0.00%)              Namespace::ValueNS => &mut self.value_ns,
     74 ( 0.00%)              Namespace::TypeNS => &mut self.type_ns,
      .                       Namespace::MacroNS => &mut self.macro_ns,
      .                   }
      .               }
      .           }
      .           
      .           impl<T> PerNS<Option<T>> {
      .               /// Returns `true` if all the items in this collection are `None`.
      .               pub fn is_empty(&self) -> bool {
      1 ( 0.00%)          self.type_ns.is_none() && self.value_ns.is_none() && self.macro_ns.is_none()
      .               }
      .           
      .               /// Returns an iterator over the items which are `Some`.
      .               pub fn present_items(self) -> impl Iterator<Item = T> {
    574 ( 0.00%)          [self.type_ns, self.value_ns, self.macro_ns].into_iter().flatten()
      .               }
      .           }
      .           
      .           impl CtorKind {
      .               pub fn from_ast(vdata: &ast::VariantData) -> CtorKind {
      4 ( 0.00%)          match *vdata {
      .                       ast::VariantData::Tuple(..) => CtorKind::Fn,
      .                       ast::VariantData::Unit(..) => CtorKind::Const,
      .                       ast::VariantData::Struct(..) => CtorKind::Fictive,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn from_hir(vdata: &hir::VariantData<'_>) -> CtorKind {
      .                   match *vdata {
      .                       hir::VariantData::Tuple(..) => CtorKind::Fn,
      .                       hir::VariantData::Unit(..) => CtorKind::Const,
      .                       hir::VariantData::Struct(..) => CtorKind::Fictive,
      .                   }
      .               }
-- line 503 ----------------------------------------
-- line 530 ----------------------------------------
      .                       | NonMacroAttrKind::DeriveHelperCompat => true,
      .                       NonMacroAttrKind::Builtin(..) | NonMacroAttrKind::Registered => false,
      .                   }
      .               }
      .           }
      .           
      .           impl<Id> Res<Id> {
      .               /// Return the `DefId` of this `Def` if it has an ID, else panic.
    280 ( 0.00%)      pub fn def_id(&self) -> DefId
      .               where
      .                   Id: Debug,
      .               {
      .                   self.opt_def_id()
      .                       .unwrap_or_else(|| panic!("attempted .def_id() on invalid res: {:?}", self))
    280 ( 0.00%)      }
      .           
      .               /// Return `Some(..)` with the `DefId` of this `Res` if it has a ID, else `None`.
      .               pub fn opt_def_id(&self) -> Option<DefId> {
    794 ( 0.00%)          match *self {
      .                       Res::Def(_, id) => Some(id),
      .           
      .                       Res::Local(..)
      .                       | Res::PrimTy(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::ToolMod
      .                       | Res::NonMacroAttr(..)
-- line 556 ----------------------------------------
-- line 585 ----------------------------------------
      .                   match *self {
      .                       Res::Def(kind, _) => kind.article(),
      .                       Res::NonMacroAttr(kind) => kind.article(),
      .                       Res::Err => "an",
      .                       _ => "a",
      .                   }
      .               }
      .           
    734 ( 0.00%)      pub fn map_id<R>(self, mut map: impl FnMut(Id) -> R) -> Res<R> {
 40,704 ( 0.01%)          match self {
 38,519 ( 0.01%)              Res::Def(kind, id) => Res::Def(kind, id),
      .                       Res::SelfCtor(id) => Res::SelfCtor(id),
     78 ( 0.00%)              Res::PrimTy(id) => Res::PrimTy(id),
    520 ( 0.00%)              Res::Local(id) => Res::Local(map(id)),
    105 ( 0.00%)              Res::SelfTy(a, b) => Res::SelfTy(a, b),
      .                       Res::ToolMod => Res::ToolMod,
      .                       Res::NonMacroAttr(attr_kind) => Res::NonMacroAttr(attr_kind),
      .                       Res::Err => Res::Err,
      .                   }
  2,202 ( 0.00%)      }
      .           
      .               #[track_caller]
      .               pub fn expect_non_local<OtherId>(self) -> Res<OtherId> {
      .                   self.map_id(|_| panic!("unexpected `Res::Local`"))
      .               }
      .           
      .               pub fn macro_kind(self) -> Option<MacroKind> {
  1,573 ( 0.00%)          match self {
      .                       Res::Def(DefKind::Macro(kind), _) => Some(kind),
      .                       Res::NonMacroAttr(..) => Some(MacroKind::Attr),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Returns `None` if this is `Res::Err`
      .               pub fn ns(&self) -> Option<Namespace> {
    258 ( 0.00%)          match self {
     98 ( 0.00%)              Res::Def(kind, ..) => kind.ns(),
      .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::ToolMod => Some(Namespace::TypeNS),
      .                       Res::SelfCtor(..) | Res::Local(..) => Some(Namespace::ValueNS),
      .                       Res::NonMacroAttr(..) => Some(Namespace::MacroNS),
      .                       Res::Err => None,
      .                   }
      .               }
      .           
      .               /// Always returns `true` if `self` is `Res::Err`
-- line 630 ----------------------------------------

296,686 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/def.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
3,512,458 ( 0.71%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .           
        .               // Perform the swap
        .               // SAFETY: the caller must guarantee that `x` and `y` are
        .               // valid for writes and properly aligned. `tmp` cannot be
        .               // overlapping either `x` or `y` because `tmp` was just allocated
        .               // on the stack as a separate allocated object.
        .               unsafe {
      184 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
      184 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
        .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
        .               }
        .           }
        .           
        .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
        .           /// beginning at `x` and `y`. The two regions must *not* overlap.
        .           ///
        .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       18 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   27,347 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  582,029 ( 0.12%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
8,299,427 ( 1.67%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
      255 ( 0.00%)          return wrapping_sub(
      978 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
1,051,134 ( 0.21%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  473,523 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
  5,445 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 52,535 ( 0.01%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      8 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      8 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     32 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
      6 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      3 ( 0.00%)          Ident::new(Symbol::intern(string), span)
      6 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
    312 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
    195 ( 0.00%)      }
      .           
      .               pub fn without_first_quote(self) -> Ident {
      .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
      .               }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 75,321 ( 0.02%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 58,583 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
    450 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
    350 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     11 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
  4,635 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
  9,120 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
  6,180 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
     10 ( 0.00%)          self.name.hash(state);
  1,638 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
     64 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     80 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
     64 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
     17 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
    192 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
     17 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     22 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     22 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     11 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
    220 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     88 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
     44 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
     30 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
     15 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  8,041 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
      6 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
293,157 ( 0.06%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
293,157 ( 0.06%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
  7,629 ( 0.00%)      pub fn as_str(&self) -> &str {
  2,543 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 10,172 ( 0.00%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    212 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  1,032 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
  3,066 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 38,830 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
 67,845 ( 0.01%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
     30 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  1,552 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 42,898 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
 11,124 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
  7,629 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
     28 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
     28 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      .                       if idx < 10 {
     12 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      4 ( 0.00%)          Symbol::intern(&n.to_string())
     16 ( 0.00%)      }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
     51 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  2,421 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
     51 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
     17 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
  4,025 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 10,738 ( 0.00%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    336 ( 0.00%)          self == kw::True || self == kw::False
    336 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
     70 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      .               }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
     17 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
     17 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     17 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
     34 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
     17 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
     17 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
     34 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
    770 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  1,540 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  1,534 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     19 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
     38 ( 0.00%)      }
      .           }

 32,807 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
176,350 ( 0.04%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    179 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    786 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 11,324 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 14,091 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
229,111 ( 0.05%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      1 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
    890 ( 0.00%)          let _ = &self[a];
  1,498 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    120 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     90 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  1,916 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    309 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  6,714 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  3,810 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
528,086 ( 0.11%)          while left < right {
779,006 ( 0.16%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
493,766 ( 0.10%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
257,133 ( 0.05%)              if cmp == Less {
311,821 ( 0.06%)                  left = mid + 1;
103,938 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
818,374 ( 0.16%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  4,396 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
    510 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    510 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    510 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
      .               /// let v = [1, 2, 3, 3, 5, 6, 7];
      .               /// let i = v.partition_point(|&x| x < 5);
      .               ///
      .               /// assert_eq!(i, 4);
      .               /// assert!(v[..i].iter().all(|&x| x < 5));
      .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
      .               /// ```
      .               #[stable(feature = "partition_point", since = "1.52.0")]
    149 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
      .               where
      .                   P: FnMut(&T) -> bool,
      .               {
      .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
    298 ( 0.00%)      }
      .           
      .               /// Removes the subslice corresponding to the given range
      .               /// and returns a reference to it.
      .               ///
      .               /// Returns `None` and does not modify the slice if the given
      .               /// range is out of bounds.
      .               ///
      .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

286,922 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
  4,947 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
246,498 ( 0.05%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
410,830 ( 0.08%)          match undo {
718,000 ( 0.14%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    128 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
  2,894 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 16,730 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
  4,560 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
328,664 ( 0.07%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
  5,202 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 25,085 ( 0.01%)          if self.in_snapshot() {
 39,576 ( 0.01%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
165,684 ( 0.03%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
301,726 ( 0.06%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
985,992 ( 0.20%)              self.reverse(undo);
      .                   }
      .           
 62,451 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  4,104 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 84,894 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
193,298 ( 0.04%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 56,502 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  2,262 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 57,633 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
185,792 ( 0.04%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
 95,408 ( 0.02%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 82,842 ( 0.02%)          assert!(self.logs.len() >= snapshot.undo_len);
 82,842 ( 0.02%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 96,043 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 71,800 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
301,548 ( 0.06%)          match undo {
 57,452 ( 0.01%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
 28,728 ( 0.01%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 57,420 ( 0.01%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
143,600 ( 0.03%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
200,344 ( 0.04%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
104,622 ( 0.02%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
  7,803 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
      6 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    182 ( 0.00%)          self.eq_relations().union(a, b);
    156 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
      .                   self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 77,860 ( 0.02%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
109,004 ( 0.02%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 77,860 ( 0.02%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 93,558 ( 0.02%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
140,337 ( 0.03%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 77,965 ( 0.02%)          let sub_key = self.sub_relations().new_key(());
 15,593 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
140,337 ( 0.03%)          let index = self.values().push(TypeVariableData { origin });
 62,372 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
109,151 ( 0.02%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
     27 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 47,067 ( 0.01%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      1 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 46,743 ( 0.01%)          self.sub_relations().find(vid)
      2 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
422,745 ( 0.08%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
422,745 ( 0.08%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
170,988 ( 0.03%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
158,658 ( 0.03%)          match *t.kind() {
 94,321 ( 0.02%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
348,230 ( 0.07%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 31,202 ( 0.01%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
    135 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
    162 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
    162 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
  3,532 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
119,491 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 62,418 ( 0.01%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
     26 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
     26 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    104 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 30,421 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  450,467 ( 0.09%)          Vec { buf: RawVec::NEW, len: 0 }
       25 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  135,506 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    2,602 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   26,622 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   37,902 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,179 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    1,078 ( 0.00%)          if self.capacity() > self.len {
      389 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      258 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
    8,282 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
    7,311 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   11,899 ( 0.00%)              self.len = len;
      271 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
    9,936 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  504,094 ( 0.10%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  757,991 ( 0.15%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   57,437 ( 0.01%)          self.len = new_len;
    1,496 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        7 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      378 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       55 ( 0.00%)          let len = self.len();
      116 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      162 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      240 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      162 ( 0.00%)              self.set_len(len + 1);
        .                   }
      324 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       37 ( 0.00%)          let len = self.len();
      139 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      144 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      104 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       37 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   41,226 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      800 ( 0.00%)          self.retain_mut(|elem| f(elem));
   40,544 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    5,078 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    3,476 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    2,660 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  187,326 ( 0.04%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  131,287 ( 0.03%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   42,030 ( 0.01%)                      g.processed_len += 1;
   39,918 ( 0.01%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
   49,149 ( 0.01%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
   32,933 ( 0.01%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       61 ( 0.00%)          let len = self.len();
      256 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      460 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       62 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      260 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       70 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,581,493 ( 0.32%)          if self.len == self.buf.capacity() {
   44,412 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   19,568 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,869,294 ( 0.38%)              self.len += 1;
        .                   }
       56 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  189,518 ( 0.04%)          if self.len == 0 {
        3 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  293,135 ( 0.06%)                  self.len -= 1;
    5,180 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       35 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       30 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    4,300 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   74,587 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
      794 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       51 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
       99 ( 0.00%)              Drain {
        .                           tail_start: end,
       44 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   14,666 ( 0.00%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   23,947 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
       45 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
       33 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
      755 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      105 ( 0.00%)          let len = self.len();
      210 ( 0.00%)          if new_len > len {
    1,314 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      650 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       20 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    1,040 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      104 ( 0.00%)          let len = self.len();
        .           
      312 ( 0.00%)          if new_len > len {
      534 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
      160 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       20 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
    6,552 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      335 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   15,534 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
    5,215 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    2,710 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   14,464 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    3,653 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  518,506 ( 0.10%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  109,563 ( 0.02%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   42,124 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   57,756 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    6,066 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
        4 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  149,691 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   97,541 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
  120,150 ( 0.02%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
      846 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      400 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   65,860 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      400 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   22,627 ( 0.00%)          while let Some(element) = iterator.next() {
    1,508 ( 0.00%)              let len = self.len();
   20,076 ( 0.00%)              if len == self.capacity() {
      182 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   18,549 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
      283 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
       99 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,908 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
   19,792 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  127,426 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   41,389 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  151,154 ( 0.03%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  212,366 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A, B> PartialEq<[B]> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
  3,672 ( 0.00%)      fn eq(&self, other: &[B]) -> bool {
      .                   SlicePartialEq::equal(self, other)
  4,467 ( 0.00%)      }
      .           
      .               fn ne(&self, other: &[B]) -> bool {
      .                   SlicePartialEq::not_equal(self, other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Eq> Eq for [T] {}
-- line 36 ----------------------------------------
-- line 62 ----------------------------------------
      .           }
      .           
      .           // Generic slice equality
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
      .               default fn equal(&self, other: &[B]) -> bool {
291,482 ( 0.06%)          if self.len() != other.len() {
      .                       return false;
      .                   }
      .           
  1,302 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
      .               }
      .           }
      .           
      .           // Use memcmp for bytewise equality when the types allow
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: BytewiseEquality<B>,
      .           {
      .               fn equal(&self, other: &[B]) -> bool {
 55,541 ( 0.01%)          if self.len() != other.len() {
      .                       return false;
      .                   }
      .           
      .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
      .                   // The two slices have been checked to have the same size above.
      .                   unsafe {
      .                       let size = mem::size_of_val(self);
134,380 ( 0.03%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
      .                   }
      .               }
      .           }
      .           
      .           #[doc(hidden)]
      .           // intermediate trait for specialization of slice's PartialOrd
      .           trait SlicePartialOrd: Sized {
      .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
-- line 100 ----------------------------------------
-- line 168 ----------------------------------------
      .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let l = cmp::min(left.len(), right.len());
      .           
      .                   // Slice to the loop iteration range to enable bound check
      .                   // elimination in the compiler
      .                   let lhs = &left[..l];
      .                   let rhs = &right[..l];
      .           
      2 ( 0.00%)          for i in 0..l {
      .                       match lhs[i].cmp(&rhs[i]) {
      .                           Ordering::Equal => (),
      .                           non_eq => return non_eq,
      .                       }
      .                   }
      .           
      .                   left.len().cmp(&right.len())
      .               }
-- line 184 ----------------------------------------
-- line 188 ----------------------------------------
      .           // this matches the order we want for [u8], but no others (not even [i8]).
      .           impl SliceOrd for u8 {
      .               #[inline]
      .               fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let order =
      .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
      .                       // We use the minimum of both lengths which guarantees that both regions are
      .                       // valid for reads in that interval.
  1,656 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
  3,312 ( 0.00%)          if order == 0 {
      .                       left.len().cmp(&right.len())
    238 ( 0.00%)          } else if order < 0 {
      .                       Less
      .                   } else {
      .                       Greater
      .                   }
      .               }
      .           }
      .           
      .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
-- line 207 ----------------------------------------
-- line 231 ----------------------------------------
      .               fn slice_contains(&self, x: &[Self]) -> bool;
      .           }
      .           
      .           impl<T> SliceContains for T
      .           where
      .               T: PartialEq,
      .           {
      .               default fn slice_contains(&self, x: &[Self]) -> bool {
  1,151 ( 0.00%)          x.iter().any(|y| *y == *self)
      .               }
      .           }
      .           
      .           impl SliceContains for u8 {
      .               #[inline]
      .               fn slice_contains(&self, x: &[Self]) -> bool {
      .                   memchr::memchr(*self, x).is_some()
      .               }
-- line 247 ----------------------------------------

354,999 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs
--------------------------------------------------------------------------------
Ir               

-- line 406 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut set = HashSet::with_hasher(s);
      .               /// set.insert(2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hasher: S) -> Self {
     21 ( 0.00%)          Self {
      .                       map: HashMap::with_hasher(hasher),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashSet` with the specified capacity, using
      .               /// `hasher` to hash the keys.
      .               ///
      .               /// The hash set will be able to hold at least `capacity` elements without
-- line 422 ----------------------------------------
-- line 766 ----------------------------------------
      .               /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();
      .               /// assert_eq!(set.contains(&1), true);
      .               /// assert_eq!(set.contains(&4), false);
      .               /// ```
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
      .               /// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html
      .               #[cfg_attr(feature = "inline-more", inline)]
    384 ( 0.00%)      pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool
      .               where
      .                   T: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 25,278 ( 0.01%)          self.map.contains_key(value)
    768 ( 0.00%)      }
      .           
      .               /// Returns a reference to the value in the set, if any, that is equal to the given value.
      .               ///
      .               /// The value may be any borrowed form of the set's value type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the value type.
      .               ///
      .               /// # Examples
-- line 788 ----------------------------------------
-- line 793 ----------------------------------------
      .               /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();
      .               /// assert_eq!(set.get(&2), Some(&2));
      .               /// assert_eq!(set.get(&4), None);
      .               /// ```
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
      .               /// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html
      .               #[cfg_attr(feature = "inline-more", inline)]
    686 ( 0.00%)      pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>
      .               where
      .                   T: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.map.get_key_value(value) {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
    784 ( 0.00%)      }
      .           
      .               /// Inserts the given `value` into the set if it is not present, then
      .               /// returns a reference to the value in the set.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashSet;
-- line 819 ----------------------------------------
-- line 982 ----------------------------------------
      .               ///
      .               /// let mut set = HashSet::new();
      .               ///
      .               /// assert_eq!(set.insert(2), true);
      .               /// assert_eq!(set.insert(2), false);
      .               /// assert_eq!(set.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  2,348 ( 0.00%)      pub fn insert(&mut self, value: T) -> bool {
588,267 ( 0.12%)          self.map.insert(value, ()).is_none()
  2,348 ( 0.00%)      }
      .           
      .               /// Insert a value the set without checking if the value already exists in the set.
      .               ///
      .               /// Returns a reference to the value just inserted.
      .               ///
      .               /// This operation is safe if a value does not exist in the set.
      .               ///
      .               /// However, if a value exists in the set already, the behavior is unspecified:
-- line 1000 ----------------------------------------
-- line 1027 ----------------------------------------
      .               /// set.insert(Vec::<i32>::new());
      .               ///
      .               /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);
      .               /// set.replace(Vec::with_capacity(10));
      .               /// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn replace(&mut self, value: T) -> Option<T> {
     90 ( 0.00%)          match self.map.entry(value) {
      4 ( 0.00%)              map::Entry::Occupied(occupied) => Some(occupied.replace_key()),
      .                       map::Entry::Vacant(vacant) => {
     48 ( 0.00%)                  vacant.insert(());
      .                           None
      .                       }
      .                   }
      .               }
      .           
      .               /// Removes a value from the set. Returns whether the value was
      .               /// present in the set.
      .               ///
-- line 1046 ----------------------------------------
-- line 1182 ----------------------------------------
      .           
      .           impl<T, S, A> Extend<T> for HashSet<T, S, A>
      .           where
      .               T: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
     88 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
    122 ( 0.00%)          self.map.extend(iter.into_iter().map(|k| (k, ())));
     78 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, k: T) {
      .                   self.map.insert(k, ());
      .               }
      .           
      .               #[inline]
-- line 1200 ----------------------------------------
-- line 1231 ----------------------------------------
      .           impl<T, S, A> Default for HashSet<T, S, A>
      .           where
      .               S: Default,
      .               A: Default + Allocator + Clone,
      .           {
      .               /// Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn default() -> Self {
  1,001 ( 0.00%)          Self {
      .                       map: HashMap::default(),
      .                   }
      .               }
      .           }
      .           
      .           impl<T, S, A> BitOr<&HashSet<T, S, A>> for &HashSet<T, S, A>
      .           where
      .               T: Eq + Hash + Clone,
-- line 1247 ----------------------------------------
-- line 1501 ----------------------------------------
      .               ///
      .               /// // Will print in an arbitrary order.
      .               /// for x in &v {
      .               ///     println!("{}", x);
      .               /// }
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn into_iter(self) -> IntoIter<T, A> {
    102 ( 0.00%)          IntoIter {
    308 ( 0.00%)              iter: self.map.into_iter(),
      .                   }
      .               }
      .           }
      .           
      .           impl<K> Clone for Iter<'_, K> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn clone(&self) -> Self {
      .                   Iter {
-- line 1518 ----------------------------------------
-- line 1520 ----------------------------------------
      .                   }
      .               }
      .           }
      .           impl<'a, K> Iterator for Iter<'a, K> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<&'a K> {
      6 ( 0.00%)          self.iter.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.iter.size_hint()
      .               }
      .           }
      .           impl<'a, K> ExactSizeIterator for Iter<'a, K> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 1536 ----------------------------------------
-- line 1547 ----------------------------------------
      .           }
      .           
      .           impl<K, A: Allocator + Clone> Iterator for IntoIter<K, A> {
      .               type Item = K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     17 ( 0.00%)          match self.iter.next() {
     24 ( 0.00%)              Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.iter.size_hint()
      .               }
      .           }
-- line 1564 ----------------------------------------

  1,100 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
365,314 ( 0.07%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
273,984 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  3,432 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  5,148 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 92,176 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 36,716 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 73,432 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs
--------------------------------------------------------------------------------
Ir               

-- line 31 ----------------------------------------
      .               fn default() -> Self {
      .                   Self::new(T::default)
      .               }
      .           }
      .           
      .           impl<T> Sharded<T> {
      .               #[inline]
      .               pub fn new(mut value: impl FnMut() -> T) -> Self {
      2 ( 0.00%)          Sharded { shards: [(); SHARDS].map(|()| CacheAligned(Lock::new(value()))) }
      .               }
      .           
      .               /// The shard is selected by hashing `val` with `FxHasher`.
      .               #[inline]
      .               pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {
      .                   if SHARDS == 1 { &self.shards[0].0 } else { self.get_shard_by_hash(make_hash(val)) }
      .               }
      .           
      .               #[inline]
      .               pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {
      .                   &self.shards[get_shard_index_by_hash(hash)].0
      .               }
      .           
      .               #[inline]
      .               pub fn get_shard_by_index(&self, i: usize) -> &Lock<T> {
 33,540 ( 0.01%)          &self.shards[i].0
      .               }
      .           
      .               pub fn lock_shards(&self) -> Vec<LockGuard<'_, T>> {
      .                   (0..SHARDS).map(|i| self.shards[i].0.lock()).collect()
      .               }
      .           
      .               pub fn try_lock_shards(&self) -> Option<Vec<LockGuard<'_, T>>> {
      .                   (0..SHARDS).map(|i| self.shards[i].0.try_lock()).collect()
-- line 63 ----------------------------------------
-- line 79 ----------------------------------------
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash(value);
      .                   let mut shard = self.get_shard_by_hash(hash).lock();
      .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, value);
      .           
      .                   match entry {
136,132 ( 0.03%)              RawEntryMut::Occupied(e) => *e.key(),
      .                       RawEntryMut::Vacant(e) => {
      .                           let v = make();
      .                           e.insert_hashed_nocheck(hash, v, ());
      .                           v
      .                       }
      .                   }
      .               }
      .           
-- line 95 ----------------------------------------
-- line 99 ----------------------------------------
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash(&value);
      .                   let mut shard = self.get_shard_by_hash(hash).lock();
      .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, &value);
      .           
      .                   match entry {
154,309 ( 0.03%)              RawEntryMut::Occupied(e) => *e.key(),
      .                       RawEntryMut::Vacant(e) => {
 68,006 ( 0.01%)                  let v = make(value);
      .                           e.insert_hashed_nocheck(hash, v, ());
      .                           v
      .                       }
      .                   }
     61 ( 0.00%)      }
      .           }
      .           
      .           pub trait IntoPointer {
      .               /// Returns a pointer which outlives `self`.
      .               fn into_pointer(&self) -> *const ();
      .           }
      .           
      .           impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {
     54 ( 0.00%)      pub fn contains_pointer_to<T: Hash + IntoPointer>(&self, value: &T) -> bool {
      .                   let hash = make_hash(&value);
      .                   let shard = self.get_shard_by_hash(hash).lock();
      .                   let value = value.into_pointer();
     12 ( 0.00%)          shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()
     54 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {
501,703 ( 0.10%)      let mut state = FxHasher::default();
116,880 ( 0.02%)      val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is
      .           /// ever used in combination with `get_shard_by_hash` on a single `Sharded`
      .           /// instance, then `hash` must be computed with `FxHasher`. Otherwise,
      .           /// `hash` can be computed with any hasher, so long as that hasher is used
      .           /// consistently for each `Sharded` instance.
-- line 142 ----------------------------------------

186,066 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 154 ----------------------------------------
      .           /// Value of a unification key. We implement Tarjan's union-find
      .           /// algorithm: when two keys are unified, one of them is converted
      .           /// into a "redirect" pointing at the other. These redirects form a
      .           /// DAG: the roots of the DAG (nodes that are not redirected) are each
      .           /// associated with a value of type `V` and a rank. The rank is used
      .           /// to keep the DAG relatively balanced, which helps keep the running
      .           /// time of the algorithm under control. For more information, see
      .           /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
  6,129 ( 0.00%)  #[derive(PartialEq, Clone, Debug)]
      .           pub struct VarValue<K: UnifyKey> {
 18,555 ( 0.00%)      parent: K,       // if equal to self, this is a root
  5,860 ( 0.00%)      value: K::Value, // value assigned (only relevant to root)
 15,627 ( 0.00%)      rank: u32,       // max depth (only relevant to root)
      .           }
      .           
      .           /// Table of unification keys and their values. You must define a key type K
      .           /// that implements the `UnifyKey` trait. Unification tables can be used in two-modes:
      .           ///
      .           /// - in-place (`UnificationTable<InPlace<K>>` or `InPlaceUnificationTable<K>`):
      .           ///   - This is the standard mutable mode, where the array is modified
      .           ///     in place.
      .           ///   - To do backtracking, you can employ the `snapshot` and `rollback_to`
      .           ///     methods.
      .           /// - persistent (`UnificationTable<Persistent<K>>` or `PersistentUnificationTable<K>`):
      .           ///   - In this mode, we use a persistent vector to store the data, so that
      .           ///     cloning the table is an O(1) operation.
      .           ///   - This implies that ordinary operations are quite a bit slower though.
      .           ///   - Requires the `persistent` feature be selected in your Cargo.toml file.
 13,005 ( 0.00%)  #[derive(Clone, Debug, Default)]
      .           pub struct UnificationTable<S: UnificationStoreBase> {
      .               /// Indicates the current value of each key.
      .               values: S,
      .           }
      .           
      .           pub type UnificationStorage<K> = Vec<VarValue<K>>;
      .           pub type UnificationTableStorage<K> = UnificationTable<InPlace<K, UnificationStorage<K>, ()>>;
      .           
-- line 190 ----------------------------------------
-- line 215 ----------------------------------------
      .               }
      .           
      .               fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> {
      .                   VarValue {
      .                       parent: parent, // this is a root
      .                       value: value,
      .                       rank: rank,
      .                   }
  6,544 ( 0.00%)      }
      .           
      .               fn redirect(&mut self, to: K) {
    326 ( 0.00%)          self.parent = to;
      .               }
      .           
      .               fn root(&mut self, rank: u32, value: K::Value) {
    301 ( 0.00%)          self.rank = rank;
    177 ( 0.00%)          self.value = value;
      .               }
      .           
      .               fn parent(&self, self_key: K) -> Option<K> {
317,061 ( 0.06%)          self.if_not_self(self.parent, self_key)
      .               }
      .           
      .               fn if_not_self(&self, key: K, self_key: K) -> Option<K> {
      .                   if key == self_key {
      .                       None
      .                   } else {
      .                       Some(key)
      .                   }
-- line 243 ----------------------------------------
-- line 311 ----------------------------------------
      .               pub fn len(&self) -> usize {
      .                   self.values.len()
      .               }
      .           }
      .           
      .           impl<S: UnificationStoreMut> UnificationTable<S> {
      .               /// Starts a new snapshot. Each snapshot must be either
      .               /// Creates a fresh key with the given value.
 94,078 ( 0.02%)      pub fn new_key(&mut self, value: S::Value) -> S::Key {
      .                   let len = self.values.len();
 72,278 ( 0.01%)          let key: S::Key = UnifyKey::from_index(len as u32);
      .                   self.values.push(VarValue::new_var(key, value));
 34,488 ( 0.01%)          debug!("{}: created new key: {:?}", S::tag(), key);
      .                   key
140,837 ( 0.03%)      }
      .           
      .               /// Reserve memory for `num_new_keys` to be created. Does not
      .               /// actually create the new keys; you must then invoke `new_key`.
      .               pub fn reserve(&mut self, num_new_keys: usize) {
      .                   self.values.reserve(num_new_keys);
      .               }
      .           
      .               /// Clears all unifications that have been performed, resetting to
-- line 333 ----------------------------------------
-- line 339 ----------------------------------------
      .                       let value = value(key);
      .                       VarValue::new_var(key, value)
      .                   });
      .               }
      .           
      .               /// Obtains the current value for a particular key.
      .               /// Not for end-users; they can use `probe_value`.
      .               fn value(&self, key: S::Key) -> &VarValue<S::Key> {
172,162 ( 0.03%)          &self.values[key.index() as usize]
      .               }
      .           
      .               /// Find the root node for `vid`. This uses the standard
      .               /// union-find algorithm with path compression:
      .               /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
      .               ///
      .               /// NB. This is a building-block operation and you would probably
      .               /// prefer to call `probe` below.
      .               ///
      .               /// This is an always-inlined version of this function for the hot
      .               /// callsites. `uninlined_get_root_key` is the never-inlined version.
      .               #[inline(always)]
      .               fn inlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
      .                   let redirect = {
158,730 ( 0.03%)              match self.value(vid).parent(vid) {
      .                           None => return vid,
      .                           Some(redirect) => redirect,
      .                       }
      .                   };
      .           
  2,082 ( 0.00%)          let root_key: S::Key = self.uninlined_get_root_key(redirect);
    401 ( 0.00%)          if root_key != redirect {
      .                       // Path compression
      .                       self.update_value(vid, |value| value.parent = root_key);
      .                   }
      .           
      .                   root_key
      .               }
      .           
      .               // This is a never-inlined version of this function for cold callsites.
      .               // 'inlined_get_root_key` is the always-inlined version.
      .               #[inline(never)]
417,593 ( 0.08%)      fn uninlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
      .                   self.inlined_get_root_key(vid)
417,100 ( 0.08%)      }
      .           
      .               fn update_value<OP>(&mut self, key: S::Key, op: OP)
      .               where
      .                   OP: FnOnce(&mut VarValue<S::Key>),
      .               {
  1,381 ( 0.00%)          self.values.update(key.index() as usize, op);
 17,414 ( 0.00%)          debug!("Updated variable {:?} to {:?}", key, self.value(key));
      .               }
      .           
      .               /// Either redirects `node_a` to `node_b` or vice versa, depending
      .               /// on the relative rank. The value associated with the new root
      .               /// will be `new_value`.
      .               ///
      .               /// NB: This is the "union" operation of "union-find". It is
      .               /// really more of a building block. If the values associated with
      .               /// your key are non-trivial, you would probably prefer to call
      .               /// `unify_var_var` below.
      .               fn unify_roots(&mut self, key_a: S::Key, key_b: S::Key, new_value: S::Value) {
    176 ( 0.00%)          debug!("unify(key_a={:?}, key_b={:?})", key_a, key_b);
      .           
    272 ( 0.00%)          let rank_a = self.value(key_a).rank;
    798 ( 0.00%)          let rank_b = self.value(key_b).rank;
      .                   if let Some((new_root, redirected)) = S::Key::order_roots(
    447 ( 0.00%)              key_a,
      .                       &self.value(key_a).value,
    447 ( 0.00%)              key_b,
      .                       &self.value(key_b).value,
      .                   ) {
      .                       // compute the new rank for the new root that they chose;
      .                       // this may not be the optimal choice.
      .                       let new_rank = if new_root == key_a {
      .                           debug_assert!(redirected == key_b);
      .                           if rank_a > rank_b {
      .                               rank_a
-- line 416 ----------------------------------------
-- line 422 ----------------------------------------
      .                           debug_assert!(redirected == key_a);
      .                           if rank_b > rank_a {
      .                               rank_b
      .                           } else {
      .                               rank_a + 1
      .                           }
      .                       };
      .                       self.redirect_root(new_rank, redirected, new_root, new_value);
    352 ( 0.00%)          } else if rank_a > rank_b {
      .                       // a has greater rank, so a should become b's parent,
      .                       // i.e., b should redirect to a.
     91 ( 0.00%)              self.redirect_root(rank_a, key_b, key_a, new_value);
    148 ( 0.00%)          } else if rank_a < rank_b {
      .                       // b has greater rank, so a should redirect to b.
     35 ( 0.00%)              self.redirect_root(rank_b, key_a, key_b, new_value);
      .                   } else {
      .                       // If equal, redirect one to the other and increment the
      .                       // other's rank.
    546 ( 0.00%)              self.redirect_root(rank_a + 1, key_a, key_b, new_value);
      .                   }
      .               }
      .           
      .               /// Internal method to redirect `old_root_key` (which is currently
      .               /// a root) to a child of `new_root_key` (which will remain a
      .               /// root). The rank and value of `new_root_key` will be updated to
      .               /// `new_rank` and `new_value` respectively.
  2,263 ( 0.00%)      fn redirect_root(
      .                   &mut self,
      .                   new_rank: u32,
      .                   old_root_key: S::Key,
      .                   new_root_key: S::Key,
      .                   new_value: S::Value,
      .               ) {
      .                   self.update_value(old_root_key, |old_root_value| {
      .                       old_root_value.redirect(new_root_key);
      .                   });
      5 ( 0.00%)          self.update_value(new_root_key, |new_root_value| {
     27 ( 0.00%)              new_root_value.root(new_rank, new_value);
      .                   });
  1,233 ( 0.00%)      }
      .           }
      .           
      .           /// ////////////////////////////////////////////////////////////////////////
      .           /// Public API
      .           
      .           impl<S, K, V> UnificationTable<S>
      .           where
      .               S: UnificationStoreMut<Key = K, Value = V>,
      .               K: UnifyKey<Value = V>,
      .               V: UnifyValue,
      .           {
      .               /// Unions two keys without the possibility of failure; only
      .               /// applicable when unify values use `NoError` as their error
      .               /// type.
  1,549 ( 0.00%)      pub fn union<K1, K2>(&mut self, a_id: K1, b_id: K2)
      .               where
      .                   K1: Into<K>,
      .                   K2: Into<K>,
      .                   V: UnifyValue<Error = NoError>,
      .               {
      .                   self.unify_var_var(a_id, b_id).unwrap();
  1,374 ( 0.00%)      }
      .           
      .               /// Unions a key and a value without the possibility of failure;
      .               /// only applicable when unify values use `NoError` as their error
      .               /// type.
140,309 ( 0.03%)      pub fn union_value<K1>(&mut self, id: K1, value: V)
      .               where
      .                   K1: Into<K>,
      .                   V: UnifyValue<Error = NoError>,
      .               {
      .                   self.unify_var_value(id, value).unwrap();
109,142 ( 0.02%)      }
      .           
      .               /// Given two keys, indicates whether they have been unioned together.
      .               pub fn unioned<K1, K2>(&mut self, a_id: K1, b_id: K2) -> bool
      .               where
      .                   K1: Into<K>,
      .                   K2: Into<K>,
      .               {
      .                   self.find(a_id) == self.find(b_id)
-- line 502 ----------------------------------------
-- line 503 ----------------------------------------
      .               }
      .           
      .               /// Given a key, returns the (current) root key.
      .               pub fn find<K1>(&mut self, id: K1) -> K
      .               where
      .                   K1: Into<K>,
      .               {
      .                   let id = id.into();
 48,470 ( 0.01%)          self.uninlined_get_root_key(id)
      .               }
      .           
      .               /// Unions together two variables, merging their values. If
      .               /// merging the values fails, the error is propagated and this
      .               /// method has no effect.
      9 ( 0.00%)      pub fn unify_var_var<K1, K2>(&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>
      .               where
      .                   K1: Into<K>,
      .                   K2: Into<K>,
      .               {
      .                   let a_id = a_id.into();
      .                   let b_id = b_id.into();
      .           
    598 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
    530 ( 0.00%)          let root_b = self.uninlined_get_root_key(b_id);
      .           
     27 ( 0.00%)          if root_a == root_b {
      .                       return Ok(());
      .                   }
      .           
  1,043 ( 0.00%)          let combined = V::unify_values(&self.value(root_a).value, &self.value(root_b).value)?;
      .           
      .                   Ok(self.unify_roots(root_a, root_b, combined))
     10 ( 0.00%)      }
      .           
      .               /// Sets the value of the key `a_id` to `b`, attempting to merge
      .               /// with the previous value.
 14,666 ( 0.00%)      pub fn unify_var_value<K1>(&mut self, a_id: K1, b: V) -> Result<(), V::Error>
      .               where
      .                   K1: Into<K>,
      .               {
      .                   let a_id = a_id.into();
 17,189 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
 46,855 ( 0.01%)          let value = V::unify_values(&self.value(root_a).value, &b)?;
 37,066 ( 0.01%)          self.update_value(root_a, |node| node.value = value);
      .                   Ok(())
 13,207 ( 0.00%)      }
      .           
      .               /// Returns the current value for the given key. If the key has
      .               /// been union'd, this will give the value from the current root.
  6,108 ( 0.00%)      pub fn probe_value<K1>(&mut self, id: K1) -> V
      .               where
      .                   K1: Into<K>,
      .               {
      .                   self.inlined_probe_value(id)
  5,736 ( 0.00%)      }
      .           
      .               // An always-inlined version of `probe_value`, for hot callsites.
      .               #[inline(always)]
      .               pub fn inlined_probe_value<K1>(&mut self, id: K1) -> V
      .               where
      .                   K1: Into<K>,
      .               {
      .                   let id = id.into();
      .                   let id = self.inlined_get_root_key(id);
  2,999 ( 0.00%)          self.value(id).value.clone()
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           
      .           impl UnifyValue for () {
      .               type Error = NoError;
      .           
      .               fn unify_values(_: &(), _: &()) -> Result<(), NoError> {
      .                   Ok(())
     52 ( 0.00%)      }
      .           }
      .           
      .           impl<V: UnifyValue> UnifyValue for Option<V> {
      .               type Error = V::Error;
      .           
      .               fn unify_values(a: &Option<V>, b: &Option<V>) -> Result<Self, V::Error> {
  8,786 ( 0.00%)          match (a, b) {
      .                       (&None, &None) => Ok(None),
      .                       (&Some(ref v), &None) | (&None, &Some(ref v)) => Ok(Some(v.clone())),
      .                       (&Some(ref a), &Some(ref b)) => match V::unify_values(a, b) {
      .                           Ok(v) => Ok(Some(v)),
      .                           Err(err) => Err(err),
      .                       },
      .                   }
      .               }
-- line 593 ----------------------------------------

 26,148 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
       38 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       19 ( 0.00%)              from_str_radix(src, radix)
       57 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
    5,295 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
   85,297 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   67,304 ( 0.01%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
3,787,172 ( 0.76%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       18 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  386,464 ( 0.08%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    2,753 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
       16 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   13,254 ( 0.00%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    6,732 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  280,786 ( 0.06%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  611,159 ( 0.12%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
4,329,712 ( 0.87%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
       27 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        1 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  148,596 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        2 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   62,134 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  223,764 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
        9 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
        .                   }
        .           
        .                   /// Shifts self right by `rhs` bits.
        .                   ///
        .                   /// Returns a tuple of the shifted version of self along with a boolean
        .                   /// indicating whether the shift value was larger than or equal to the
        .                   /// number of bits. If the shift value is too large, then value is
        .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      138 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      668 ( 0.00%)              if self <= 1 { return 0; }
        .           
    7,725 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   23,151 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    7,717 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   14,766 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   20,624 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 346 ----------------------------------------
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// c.set(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn set(&self, val: T) {
       28 ( 0.00%)          let old = self.replace(val);
       48 ( 0.00%)          drop(old);
        .               }
        .           
        .               /// Swaps the values of two `Cell`s.
        .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
        .               ///
        .               /// let five = c.get();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
   36,213 ( 0.01%)          unsafe { *self.value.get() }
        .               }
        .           
        .               /// Updates the contained value using a function and returns the new value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
        .           
        .           #[inline(always)]
        .           fn is_writing(x: BorrowFlag) -> bool {
        .               x < UNUSED
        .           }
        .           
        .           #[inline(always)]
        .           fn is_reading(x: BorrowFlag) -> bool {
   18,282 ( 0.00%)      x > UNUSED
        .           }
        .           
        .           impl<T> RefCell<T> {
        .               /// Creates a new `RefCell` containing `value`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
        .               /// use std::cell::RefCell;
        .               ///
        .               /// let c = RefCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
        .               #[inline]
        .               pub const fn new(value: T) -> RefCell<T> {
   19,820 ( 0.00%)          RefCell {
   22,972 ( 0.00%)              value: UnsafeCell::new(value),
        .                       borrow: Cell::new(UNUSED),
        .                       #[cfg(feature = "debug_refcell")]
        .                       borrowed_at: Cell::new(None),
        .                   }
        .               }
        .           
        .               /// Consumes the `RefCell`, returning the wrapped value.
        .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
        .               /// let five = c.into_inner();
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
        .               #[inline]
        .               pub const fn into_inner(self) -> T {
        .                   // Since this function takes `self` (the `RefCell`) by value, the
        .                   // compiler statically verifies that it is not currently borrowed.
       60 ( 0.00%)          self.value.into_inner()
        .               }
        .           
        .               /// Replaces the wrapped value with a new one, returning the old value,
        .               /// without deinitializing either one.
        .               ///
        .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
        .               ///
        .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               ///
        .               /// let m = c.borrow_mut();
        .               /// let b = c.borrow(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
      263 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
        .                   self.try_borrow().expect("already mutably borrowed")
      789 ( 0.00%)      }
        .           
        .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
        .               /// borrowed.
        .               ///
        .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
        .               /// taken out at the same time.
        .               ///
        .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               /// let m = c.borrow();
        .               ///
        .               /// let b = c.borrow_mut(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
      689 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
        .                   self.try_borrow_mut().expect("already borrowed")
    2,067 ( 0.00%)      }
        .           
        .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
        .               ///
        .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
        .               /// from it exit scope. The value cannot be borrowed while this borrow is
        .               /// active.
        .               ///
        .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
        .                   match BorrowRefMut::new(&self.borrow) {
        .                       Some(b) => {
        .                           #[cfg(feature = "debug_refcell")]
        .                           {
        .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
        .                           }
        .           
        .                           // SAFETY: `BorrowRef` guarantees unique access.
       24 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
        .                       }
        .                       None => Err(BorrowMutError {
        .                           // If a borrow occurred, then we must already have an outstanding borrow,
        .                           // so `borrowed_at` will be `Some`
        .                           #[cfg(feature = "debug_refcell")]
        .                           location: self.borrowed_at.get().unwrap(),
        .                       }),
        .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
        .           
        .           struct BorrowRef<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl<'b> BorrowRef<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
   26,674 ( 0.01%)          let b = borrow.get().wrapping_add(1);
   15,417 ( 0.00%)          if !is_reading(b) {
        .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
        .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
        .                       //    due to Rust's reference aliasing rules
        .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
        .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
        .                       //    an additional read borrow because isize can't represent so many read borrows
        .                       //    (this can only happen if you mem::forget more than a small constant amount of
        .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
        .                       Some(BorrowRef { borrow })
        .                   }
        .               }
        .           }
        .           
        .           impl Drop for BorrowRef<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
    9,281 ( 0.00%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_reading(borrow));
   18,607 ( 0.00%)          self.borrow.set(borrow - 1);
        .               }
        .           }
        .           
        .           impl Clone for BorrowRef<'_> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   // Since this Ref exists, we know the borrow flag
        .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
        .           
        .           struct BorrowRefMut<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl Drop for BorrowRefMut<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  948,800 ( 0.19%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_writing(borrow));
2,007,787 ( 0.40%)          self.borrow.set(borrow + 1);
        .               }
        .           }
        .           
        .           impl<'b> BorrowRefMut<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        .                   // mutable reference, and so there must currently be no existing
        .                   // references. Thus, while clone increments the mutable refcount, here
        .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
2,096,416 ( 0.42%)          match borrow.get() {
        .                       UNUSED => {
        .                           borrow.set(UNUSED - 1);
        .                           Some(BorrowRefMut { borrow })
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
        .                   self.value
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut T {
       50 ( 0.00%)          self.value
        .               }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
        .           
        .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
        .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
        .               /// ```
        .               #[inline(always)]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
        .               pub const fn get(&self) -> *mut T {
        .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        .                   // #[repr(transparent)]. This exploits libstd's special status, there is
        .                   // no guarantee for user code that this will work in future versions of the compiler!
  347,935 ( 0.07%)          self as *const UnsafeCell<T> as *const T as *mut T
        .               }
        .           
        .               /// Returns a mutable reference to the underlying data.
        .               ///
        .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
        .               /// guarantees that we possess the only reference.
        .               ///
        .               /// # Examples
-- line 1925 ----------------------------------------

1,299,117 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir               

-- line 109 ----------------------------------------
      .               /// The resolution of `module_path`.
      .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
      .               pub vis: Cell<ty::Visibility>,
      .               pub used: Cell<bool>,
      .           }
      .           
      .           impl<'a> Import<'a> {
      .               pub fn is_glob(&self) -> bool {
    195 ( 0.00%)          matches!(self.kind, ImportKind::Glob { .. })
      .               }
      .           
      .               pub fn is_nested(&self) -> bool {
      .                   match self.kind {
      .                       ImportKind::Single { nested, .. } => nested,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               crate fn crate_lint(&self) -> CrateLint {
    107 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
    205 ( 0.00%)      }
      .           }
      .           
 22,515 ( 0.00%)  #[derive(Clone, Default, Debug)]
      .           /// Records information about the resolution of a name in a namespace of a module.
      .           pub struct NameResolution<'a> {
      .               /// Single imports that may define the name in the namespace.
      .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
      .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
      .               /// The least shadowable known binding for this name, or None if there are no known bindings.
      .               pub binding: Option<&'a NameBinding<'a>>,
      .               shadowed_glob: Option<&'a NameBinding<'a>>,
      .           }
      .           
      .           impl<'a> NameResolution<'a> {
      .               // Returns the binding for the name if it is known or None if it not known.
      .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
  7,450 ( 0.00%)          self.binding.and_then(|binding| {
     39 ( 0.00%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
      .                           Some(binding)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
  1,601 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
      .                       ident,
      .                       ns,
      .                       parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
      .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
      .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
 14,886 ( 0.00%)      crate fn resolve_ident_in_module_unadjusted_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   restricted_shadowing: bool,
      .                   record_used: bool,
      .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 229 ----------------------------------------
      .                           } else if !self.graph_root.unexpanded_invocations.borrow().is_empty() {
      .                               // Macro-expanded `extern crate` items can add names to extern prelude.
      .                               Err((Undetermined, Weak::No))
      .                           } else {
      .                               Err((Determined, Weak::No))
      .                           };
      .                       }
      .                       ModuleOrUniformRoot::CurrentScope => {
     24 ( 0.00%)                  assert!(!restricted_shadowing);
     12 ( 0.00%)                  if ns == TypeNS {
     16 ( 0.00%)                      if ident.name == kw::Crate || ident.name == kw::DollarCrate {
      .                                   let module = self.resolve_crate_root(ident);
      .                                   let binding =
      .                                       (module, ty::Visibility::Public, module.span, LocalExpnId::ROOT)
      .                                           .to_name_binding(self.arenas);
      .                                   return Ok(binding);
      .                               } else if ident.name == kw::Super || ident.name == kw::SelfLower {
      .                                   // FIXME: Implement these with renaming requirements so that e.g.
      .                                   // `use super;` doesn't work, but `use super as name;` does.
      .                                   // Fall through here to get an error from `early_resolve_...`.
      .                               }
      .                           }
      .           
      .                           let scopes = ScopeSet::All(ns, true);
    156 ( 0.00%)                  let binding = self.early_resolve_ident_in_lexical_scope(
      .                               ident,
      .                               scopes,
      .                               parent_scope,
      .                               record_used,
      .                               record_used,
      .                               path_span,
      .                           );
      .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
      .                       }
      .                   };
      .           
      .                   let key = self.new_key(ident, ns);
      .                   let resolution =
  5,584 ( 0.00%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
      .           
  2,604 ( 0.00%)          if let Some(binding) = resolution.binding {
    236 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
     44 ( 0.00%)                  if let NameBindingKind::Res(_, true) = binding.kind {
      .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
      .                           }
      .                       }
      .                   }
      .           
  2,792 ( 0.00%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
    603 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
      .                           if ptr::eq(binding, unusable_binding) {
      .                               return Err((Determined, Weak::No));
      .                           }
      .                       }
    330 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
    324 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
      .                   };
      .           
  1,396 ( 0.00%)          if record_used {
    642 ( 0.00%)              return resolution
      .                           .binding
      .                           .and_then(|binding| {
      .                               // If the primary binding is unusable, search further and return the shadowed glob
      .                               // binding if it exists. What we really want here is having two separate scopes in
      .                               // a module - one for non-globs and one for globs, but until that's done use this
      .                               // hack to avoid inconsistent resolution ICEs during import validation.
    874 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
      .                                   if ptr::eq(binding, unusable_binding) {
      2 ( 0.00%)                              return resolution.shadowed_glob;
      .                                   }
      .                               }
      .                               Some(binding)
      .                           })
      .                           .ok_or((Determined, Weak::No))
      .                           .and_then(|binding| {
    392 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
      .                                   Err((Determined, Weak::No))
      .                               } else {
    996 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
      .           
    498 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
      .                                       // Forbid expanded shadowing to avoid time travel.
      .                                       if restricted_shadowing
      .                                           && binding.expansion != LocalExpnId::ROOT
      .                                           && binding.res() != shadowed_glob.res()
      .                                       {
      .                                           self.ambiguity_errors.push(AmbiguityError {
      .                                               kind: AmbiguityKind::GlobVsExpanded,
      .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
      .                                               b1: binding,
      .                                               b2: shadowed_glob,
      .                                               misc1: AmbiguityErrorMisc::None,
      .                                               misc2: AmbiguityErrorMisc::None,
      .                                           });
      .                                       }
      .                                   }
      .           
    830 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
      .                                       self.privacy_errors.push(PrivacyError {
      .                                           ident,
      .                                           binding,
      .                                           dedup_span: path_span,
      .                                       });
      .                                   }
      .           
      .                                   Ok(binding)
      .                               }
      .                           });
      .                   }
      .           
      .                   // Items and single imports are not shadowable, if we have one, then it's determined.
  1,131 ( 0.00%)          if let Some(binding) = resolution.binding {
     24 ( 0.00%)              if !binding.is_glob_import() {
      .                           return check_usable(self, binding);
      .                       }
      .                   }
      .           
      .                   // --- From now on we either have a glob resolution or no resolution. ---
      .           
      .                   // Check if one of single imports can still define the name,
      .                   // if it can then our result is not determined and can be invalidated.
  2,918 ( 0.00%)          for single_import in &resolution.single_imports {
     24 ( 0.00%)              if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match single_import.imported_module.get() {
      .                           Some(x) => x,
      .                           None => return Err((Undetermined, Weak::No)),
      .                       };
      .                       let ident = match single_import.kind {
      .                           ImportKind::Single { source, .. } => source,
-- line 359 ----------------------------------------
-- line 385 ----------------------------------------
      .                   // Additionally, any macro in any module can plant names in the root module if it creates
      .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
      .                   // module has unresolved invocations.
      .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
      .                   // progress, we have to ignore those potential unresolved invocations from other modules
      .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
      .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
      .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
  1,455 ( 0.00%)          if let Some(binding) = resolution.binding {
      .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
      .                           return check_usable(self, binding);
      .                       } else {
      .                           return Err((Undetermined, Weak::No));
      .                       }
      .                   }
      .           
      .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
      .                   // Now we are in situation when new item/import can appear only from a glob or a macro
      .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
      .                   // shadow names from outer scopes, so we can freely fallback from module search to search
      .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
      .                   // scopes we return `Undetermined` with `Weak::Yes`.
      .           
      .                   // Check if one of unexpanded macros can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    291 ( 0.00%)          if unexpanded_macros {
      .                       return Err((Undetermined, Weak::Yes));
      .                   }
      .           
      .                   // Check if one of glob imports can still define the name,
      .                   // if it can then our "no resolution" result is not determined and can be invalidated.
  1,052 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
      .                       if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
      .                           continue;
      .                       }
      .                       let module = match glob_import.imported_module.get() {
      .                           Some(ModuleOrUniformRoot::Module(module)) => module,
      .                           Some(_) => continue,
      .                           None => return Err((Undetermined, Weak::Yes)),
      .                       };
-- line 425 ----------------------------------------
-- line 452 ----------------------------------------
      .                               continue;
      .                           }
      .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
      .                       }
      .                   }
      .           
      .                   // No resolution and no one else can define the name - determinate error.
      .                   Err((Determined, Weak::No))
 12,780 ( 0.00%)      }
      .           
      .               // Given a binding and an import that resolves to it,
      .               // return the corresponding binding defined by the import.
    660 ( 0.00%)      crate fn import(
      .                   &self,
      .                   binding: &'a NameBinding<'a>,
      .                   import: &'a Import<'a>,
      .               ) -> &'a NameBinding<'a> {
    660 ( 0.00%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
      .                       || pub_use_of_private_extern_crate_hack(import, binding)
      .                   {
      .                       import.vis.get()
      .                   } else {
      .                       binding.vis
      .                   };
      .           
    198 ( 0.00%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
      .                       if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
      .                           max_vis.set(vis)
      .                       }
      .                   }
      .           
     66 ( 0.00%)          self.arenas.alloc_name_binding(NameBinding {
      .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
      .                       ambiguity: None,
     66 ( 0.00%)              span: import.span,
      .                       vis,
     66 ( 0.00%)              expansion: import.parent_scope.expansion,
      .                   })
    528 ( 0.00%)      }
      .           
      .               // Define the name or return the existing binding if there is a collision.
 87,444 ( 0.02%)      crate fn try_define(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .                   binding: &'a NameBinding<'a>,
      .               ) -> Result<(), &'a NameBinding<'a>> {
      .                   let res = binding.res();
131,166 ( 0.03%)          self.check_reserved_macro_name(key.ident, res);
      .                   self.set_binding_parent_module(binding, module);
 43,722 ( 0.01%)          self.update_resolution(module, key, |this, resolution| {
      .                       if let Some(old_binding) = resolution.binding {
      .                           if res == Res::Err {
      .                               // Do not override real bindings with `Res::Err`s from error recovery.
      .                               return Ok(());
      .                           }
      .                           match (old_binding.is_glob_import(), binding.is_glob_import()) {
      .                               (true, true) => {
      .                                   if res != old_binding.res() {
-- line 510 ----------------------------------------
-- line 535 ----------------------------------------
      .                                   }
      .                                   resolution.shadowed_glob = Some(glob_binding);
      .                               }
      .                               (false, false) => {
      .                                   return Err(old_binding);
      .                               }
      .                           }
      .                       } else {
 21,861 ( 0.00%)                  resolution.binding = Some(binding);
      .                       }
      .           
      .                       Ok(())
      .                   })
 65,583 ( 0.01%)      }
      .           
      .               fn ambiguity(
      .                   &self,
      .                   kind: AmbiguityKind,
      .                   primary_binding: &'a NameBinding<'a>,
      .                   secondary_binding: &'a NameBinding<'a>,
      .               ) -> &'a NameBinding<'a> {
      .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
      .               // If the resolution becomes a success, define it in the module's glob importers.
      .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
      .               where
      .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
      .               {
      .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
      .                   // during which the resolution might end up getting re-defined via a glob cycle.
      .                   let (binding, t) = {
117,008 ( 0.02%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
      .                       let old_binding = resolution.binding();
      .           
      .                       let t = f(self, resolution);
      .           
      .                       match resolution.binding() {
      .                           _ if old_binding.is_some() => return t,
      .                           None => return t,
      .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 643 ----------------------------------------
      .               // This is a fixed-point algorithm. We resolve imports until our efforts
      .               // are stymied by an unresolved import; then we bail out of the current
      .               // module and continue. We terminate successfully once no more imports
      .               // remain or unsuccessfully when no forward progress in resolving imports
      .               // is made.
      .           
      .               /// Resolves all imports for the crate. This method performs the fixed-
      .               /// point iteration.
     16 ( 0.00%)      pub fn resolve_imports(&mut self) {
     10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
     29 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
      .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
     62 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
      .                           match self.resolve_import(&import) {
     30 ( 0.00%)                      true => self.r.determined_imports.push(import),
      2 ( 0.00%)                      false => self.r.indeterminate_imports.push(import),
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn finalize_imports(&mut self) {
      2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
      3 ( 0.00%)              self.finalize_resolutions_in(module);
      .                   }
      .           
      .                   let mut seen_spans = FxHashSet::default();
      .                   let mut errors = vec![];
      .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
      1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
      1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
      .           
     12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
      .                       .into_iter()
      .                       .map(|i| (false, i))
      .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
      .                   {
    174 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
      .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
      .                               if source.name == kw::SelfLower {
      .                                   // Silence `unresolved import` error if E0429 is already emitted
      .                                   if let Err(Determined) = source_bindings.value_ns.get() {
      .                                       continue;
      .                                   }
      .                               }
      .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
      .                               let path = import_path_to_string(
      .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                                   &import.kind,
      .                                   err.span,
      .                               );
      .                               errors.push((path, err));
      .                               prev_root_id = import.root_id;
      .                           }
     58 ( 0.00%)              } else if is_indeterminate {
      .                           // Consider erroneous imports used to avoid duplicate diagnostics.
      .                           self.r.used_imports.insert(import.id);
      .                           let path = import_path_to_string(
      .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
      .                               &import.kind,
      .                               import.span,
      .                           );
      .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
      .                               label: None,
      .                               note: Vec::new(),
      .                               suggestion: None,
      .                           };
      .                           errors.push((path, err));
      .                       }
      .                   }
      .           
      1 ( 0.00%)          if !errors.is_empty() {
      .                       self.throw_unresolved_import_error(errors, None);
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn throw_unresolved_import_error(
      .                   &self,
      .                   errors: Vec<(String, UnresolvedImportError)>,
      .                   span: Option<MultiSpan>,
      .               ) {
      .                   /// Upper limit on the number of `span_label` messages.
      .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
      .               /// If successful, the resolved bindings are written into the module.
      .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
      .                   debug!(
      .                       "(resolving import for module) resolving import `{}::...` in `{}`",
      .                       Segment::names_to_string(&import.module_path),
      .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
      .                   );
      .           
     95 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
      4 ( 0.00%)              module
      .                   } else {
      .                       // For better failure detection, pretend that the import will
      .                       // not define any names while resolving its module path.
      .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                       let path_res = self.r.resolve_path(
      .                           &import.module_path,
      .                           None,
     29 ( 0.00%)                  &import.parent_scope,
      .                           false,
      .                           import.span,
      .                           import.crate_lint(),
      .                       );
      .                       import.vis.set(orig_vis);
      .           
    203 ( 0.00%)              match path_res {
    145 ( 0.00%)                  PathResult::Module(module) => module,
      .                           PathResult::Indeterminate => return false,
      .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
      .                       }
      .                   };
      .           
      .                   import.imported_module.set(Some(module));
    365 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     30 ( 0.00%)                  ref source_bindings,
     30 ( 0.00%)                  ref target_bindings,
     30 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      .                       ImportKind::Glob { .. } => {
      .                           self.resolve_glob_import(import);
      .                           return true;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     30 ( 0.00%)          let mut indeterminate = false;
  1,290 ( 0.00%)          self.r.per_ns(|this, ns| {
    276 ( 0.00%)              if !type_ns_only || ns == TypeNS {
    354 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
      .                               // For better failure detection, pretend that the import will
      .                               // not define any names while resolving its module path.
     86 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                               let binding = this.resolve_ident_in_module(
    258 ( 0.00%)                          module,
    258 ( 0.00%)                          source,
      .                                   ns,
     86 ( 0.00%)                          &import.parent_scope,
      .                                   false,
     86 ( 0.00%)                          import.span,
      .                               );
      .                               import.vis.set(orig_vis);
      .                               source_bindings[ns].set(binding);
      .                           } else {
      .                               return;
      .                           };
      .           
     86 ( 0.00%)                  let parent = import.parent_scope.module;
    198 ( 0.00%)                  match source_bindings[ns].get() {
     12 ( 0.00%)                      Err(Undetermined) => indeterminate = true,
      .                               // Don't update the resolution, because it was never added.
    104 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
      .                               Err(Determined) => {
    104 ( 0.00%)                          let key = this.new_key(target, ns);
      .                                   this.update_resolution(parent, key, |_, resolution| {
    104 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
      .                                   });
      .                               }
      .                               Ok(binding) if !binding.is_importable() => {
      .                                   let msg = format!("`{}` is not directly importable", target);
      .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
      .                                       .span_label(import.span, "cannot be imported directly")
      .                                       .emit();
      .                                   // Do not import this illegal binding. Import a dummy binding and pretend
      .                                   // everything is fine
      .                                   this.import_dummy_binding(import);
      .                               }
      .                               Ok(binding) => {
    120 ( 0.00%)                          let imported_binding = this.import(binding, import);
     30 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
     90 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
      .                               }
      .                           }
      .                       }
    720 ( 0.00%)          });
      .           
     88 ( 0.00%)          !indeterminate
      .               }
      .           
      .               /// Performs final import resolution, consistency checks and error reporting.
      .               ///
      .               /// Optionally returns an unresolved import error. This error is buffered and used to
      .               /// consolidate multiple unresolved import errors into a single diagnostic.
    290 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
      .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
    116 ( 0.00%)          let orig_unusable_binding = match &import.kind {
      .                       ImportKind::Single { target_bindings, .. } => {
     56 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
      .                       }
      .                       _ => None,
      .                   };
     58 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
      .                   let path_res = self.r.resolve_path(
      .                       &import.module_path,
      .                       None,
     29 ( 0.00%)              &import.parent_scope,
      .                       true,
     29 ( 0.00%)              import.span,
      .                       import.crate_lint(),
      .                   );
     29 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
     29 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
     28 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
      .                   }
      .                   import.vis.set(orig_vis);
    145 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
      .                       // Consider erroneous imports used to avoid duplicate diagnostics.
      .                       self.r.used_imports.insert(import.id);
      .                   }
      .                   let module = match path_res {
     87 ( 0.00%)              PathResult::Module(module) => {
      .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
     87 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
     81 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
      .                                   span_bug!(import.span, "inconsistent resolution for an import");
      .                               }
      .                           } else if self.r.privacy_errors.is_empty() {
      .                               let msg = "cannot determine resolution for the import";
      .                               let msg_note = "import resolution is stuck, try simplifying other imports";
      .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
      .                           }
      .           
     87 ( 0.00%)                  module
      .                       }
      .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
      .                           if no_ambiguity {
      .                               assert!(import.imported_module.get().is_none());
      .                               self.r
      .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
      .                           }
      .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
      .                               assert!(import.imported_module.get().is_none());
      .                           }
      .                           // The error was already reported earlier.
      .                           return None;
      .                       }
      .                       PathResult::Indeterminate => unreachable!(),
      .                   };
      .           
    341 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
      .                       ImportKind::Single {
      .                           source,
      .                           target,
     28 ( 0.00%)                  ref source_bindings,
     28 ( 0.00%)                  ref target_bindings,
     28 ( 0.00%)                  type_ns_only,
      .                           ..
      .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
      2 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
      3 ( 0.00%)                  if import.module_path.len() <= 1 {
      .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                               // 2 segments, so the `resolve_path` above won't trigger it.
      .                               let mut full_path = import.module_path.clone();
      .                               full_path.push(Segment::from_ident(Ident::empty()));
      .                               self.r.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
      .                                   import.span,
      .                                   None,
      .                               );
      .                           }
      .           
      4 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
      1 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
      .                                   // Importing a module into itself is not allowed.
      .                                   return Some(UnresolvedImportError {
      .                                       span: import.span,
      .                                       label: Some(String::from("cannot glob-import a module into itself")),
      .                                       note: Vec::new(),
      .                                       suggestion: None,
      .                                   });
      .                               }
      .                           }
      1 ( 0.00%)                  if !is_prelude &&
      .                              max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
      .                              !max_vis.get().is_at_least(import.vis.get(), &*self)
      .                           {
      .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
      .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
      .                           }
      .                           return None;
      .                       }
      .                       _ => unreachable!(),
      .                   };
      .           
     56 ( 0.00%)          let mut all_ns_err = true;
  1,288 ( 0.00%)          self.r.per_ns(|this, ns| {
    258 ( 0.00%)              if !type_ns_only || ns == TypeNS {
     82 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      .                           let orig_unusable_binding =
    164 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
      .                           let binding = this.resolve_ident_in_module(
    246 ( 0.00%)                      module,
    328 ( 0.00%)                      ident,
      .                               ns,
     82 ( 0.00%)                      &import.parent_scope,
      .                               true,
      .                               import.span,
      .                           );
    164 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
    164 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                           import.vis.set(orig_vis);
      .           
      .                           match binding {
      .                               Ok(binding) => {
      .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
     90 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
     30 ( 0.00%)                              all_ns_err = false;
     90 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
     30 ( 0.00%)                                  if target.name == kw::Underscore
      .                                               && initial_binding.is_extern_crate()
      .                                               && !initial_binding.is_import()
      .                                           {
      .                                               this.record_use(
      .                                                   ident,
      .                                                   target_binding,
      .                                                   import.module_path.is_empty(),
      .                                               );
      .                                           }
      .                                       }
      .                                       initial_binding.res()
      .                                   });
      .                                   let res = binding.res();
    420 ( 0.00%)                          if let Ok(initial_res) = initial_res {
     90 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
      .                                           span_bug!(import.span, "inconsistent resolution for an import");
      .                                       }
      .                                   } else if res != Res::Err
      .                                       && this.ambiguity_errors.is_empty()
      .                                       && this.privacy_errors.is_empty()
      .                                   {
      .                                       let msg = "cannot determine resolution for the import";
      .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
      .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
      .                                   // always block globs, even if they are not yet resolved, so that this kind of
      .                                   // self-inconsistent resolution never happens.
      .                                   // Re-enable the assert when the issue is fixed.
      .                                   // assert!(result[ns].get().is_err());
      .                               }
      .                           }
      .                       }
    672 ( 0.00%)          });
      .           
     56 ( 0.00%)          if all_ns_err {
      .                       let mut all_ns_failed = true;
      .                       self.r.per_ns(|this, ns| {
      .                           if !type_ns_only || ns == TypeNS {
      .                               let binding = this.resolve_ident_in_module(
      .                                   module,
      .                                   ident,
      .                                   ns,
      .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           })
      .                       } else {
      .                           // `resolve_ident_in_module` reported a privacy error.
      .                           self.r.import_dummy_binding(import);
      .                           None
      .                       };
      .                   }
      .           
     28 ( 0.00%)          let mut reexport_error = None;
     28 ( 0.00%)          let mut any_successful_reexport = false;
     56 ( 0.00%)          let mut crate_private_reexport = false;
    336 ( 0.00%)          self.r.per_ns(|this, ns| {
    196 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
     90 ( 0.00%)                  let vis = import.vis.get();
    180 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
      .                               reexport_error = Some((ns, binding));
      .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
      .                                   if binding_def_id.is_top_level_module() {
      .                                       crate_private_reexport = true;
      .                                   }
      .                               }
      .                           } else {
     60 ( 0.00%)                      any_successful_reexport = true;
      .                           }
      .                       }
      .                   });
      .           
      .                   // All namespaces must be re-exported with extra visibility for an error to occur.
     56 ( 0.00%)          if !any_successful_reexport {
      .                       let (ns, binding) = reexport_error.unwrap();
      .                       if pub_use_of_private_extern_crate_hack(import, binding) {
      .                           let msg = format!(
      .                               "extern crate `{}` is private, and cannot be \
      .                                              re-exported (error E0365), consider declaring with \
      .                                              `pub`",
      .                               ident
      .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
      .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
      .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
      .                                   .span_note(import.span, &note_msg)
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .           
     84 ( 0.00%)          if import.module_path.len() <= 1 {
      .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
      .                       // 2 segments, so the `resolve_path` above won't trigger it.
      .                       let mut full_path = import.module_path.clone();
     57 ( 0.00%)              full_path.push(Segment::from_ident(ident));
    133 ( 0.00%)              self.r.per_ns(|this, ns| {
    115 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
     60 ( 0.00%)                      this.lint_if_path_starts_with_module(
      .                                   import.crate_lint(),
      .                                   &full_path,
     20 ( 0.00%)                          import.span,
      .                                   Some(binding),
      .                               );
      .                           }
      .                       });
      .                   }
      .           
      .                   // Record what this import resolves to for later uses in documentation,
      .                   // this may resolve to either a value or a type, but for documentation
      .                   // purposes it's good enough to just favor one over the other.
    784 ( 0.00%)          self.r.per_ns(|this, ns| {
    334 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
    480 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
      .                       }
    672 ( 0.00%)          });
      .           
    252 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
      .           
      .                   debug!("(resolving single import) successfully resolved import");
      .                   None
    232 ( 0.00%)      }
      .           
      .               fn check_for_redundant_imports(
      .                   &mut self,
      .                   ident: Ident,
      .                   import: &'b Import<'b>,
      .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
      .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
      .                   target: Ident,
      .               ) {
      .                   // Skip if the import was produced by a macro.
     28 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
      .                       return;
      .                   }
      .           
      .                   // Skip if we are inside a named module (in contrast to an anonymous
      .                   // module defined by a block).
     84 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
      .                       return;
      .                   }
      .           
      2 ( 0.00%)          let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
      4 ( 0.00%)          let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
      .           
     44 ( 0.00%)          self.r.per_ns(|this, ns| {
     11 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
      5 ( 0.00%)                  if binding.res() == Res::Err {
      .                               return;
      .                           }
      .           
      .                           let orig_unusable_binding =
      2 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
      .           
     12 ( 0.00%)                  match this.early_resolve_ident_in_lexical_scope(
      3 ( 0.00%)                      target,
      .                               ScopeSet::All(ns, false),
      2 ( 0.00%)                      &import.parent_scope,
      .                               false,
      .                               false,
      .                               import.span,
      .                           ) {
      .                               Ok(other_binding) => {
      .                                   is_redundant[ns] = Some(
      .                                       binding.res() == other_binding.res() && !other_binding.is_ambiguity(),
      .                                   );
      .                                   redundant_span[ns] = Some((other_binding.span, other_binding.is_import()));
      .                               }
      2 ( 0.00%)                      Err(_) => is_redundant[ns] = Some(false),
      .                           }
      .           
      2 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
      .                       }
     24 ( 0.00%)          });
      .           
      8 ( 0.00%)          if !is_redundant.is_empty() && is_redundant.present_items().all(|is_redundant| is_redundant)
      .                   {
      .                       let mut redundant_spans: Vec<_> = redundant_span.present_items().collect();
      .                       redundant_spans.sort();
      .                       redundant_spans.dedup();
      .                       self.r.lint_buffer.buffer_lint_with_diagnostic(
      .                           UNUSED_IMPORTS,
      .                           import.id,
      .                           import.span,
-- line 1342 ----------------------------------------
-- line 1350 ----------------------------------------
      .                   let module = match import.imported_module.get().unwrap() {
      .                       ModuleOrUniformRoot::Module(module) => module,
      .                       _ => {
      .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
      .                           return;
      .                       }
      .                   };
      .           
      3 ( 0.00%)          if module.is_trait() {
      .                       self.r.session.span_err(import.span, "items in traits are not importable");
      .                       return;
      1 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
      .                       return;
      4 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
      2 ( 0.00%)              self.r.prelude = Some(module);
      .                       return;
      .                   }
      .           
      .                   // Add to module's glob_importers
      .                   module.glob_importers.borrow_mut().push(import);
      .           
      .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
      .                   // since it might get updated via a glob cycle.
-- line 1372 ----------------------------------------
-- line 1394 ----------------------------------------
      .                   // Record the destination of this import
      .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
      .               }
      .           
      .               // Miscellaneous post-processing, including recording re-exports,
      .               // reporting conflicts, and reporting unresolved imports.
      .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
      .                   // Since import resolution is finished, globs will not define any more names.
     12 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
      .           
      .                   let mut reexports = Vec::new();
      .           
     15 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
      .                       // Filter away ambiguous imports and anything that has def-site hygiene.
      .                       // FIXME: Implement actual cross-crate hygiene.
      .                       let is_good_import =
     73 ( 0.00%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
     83 ( 0.00%)              if is_good_import || binding.is_macro_def() {
      .                           let res = binding.res().expect_non_local();
      .                           if res != def::Res::Err {
    120 ( 0.00%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
      .                           }
      .                       }
      .                   });
      .           
      3 ( 0.00%)          if !reexports.is_empty() {
      4 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
      .                           // Call to `expect_local` should be fine because current
      .                           // code is only called for local modules.
      .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1428 ----------------------------------------

 47,919 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir               

-- line 55 ----------------------------------------
      .           ///   `ctxt` values depend partly on the crate size and partly on the form of
      .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
      .           ///   but larger crates might need more than 16 bits.
      .           ///
      .           /// In order to reliably use parented spans in incremental compilation,
      .           /// the dependency to the parent definition's span. This is performed
      .           /// using the callback `SPAN_TRACK` to access the query engine.
      .           ///
390,336 ( 0.08%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
      .           // FIXME(@lcnr): Enable this attribute once the bootstrap
      .           // compiler knows of `rustc_pass_by_value`.
      .           //
      .           // Right now, this lint would only trigger when compiling the
      .           // stage 2 compiler, which is fairly annoying as there are
      .           // a lot of places using `&Span` right now. After the next bootstrap bump,
      .           // the lint will already trigger when using stage 1, which is a lot less annoying.
      .           //
      .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
      .           pub struct Span {
495,922 ( 0.10%)      base_or_index: u32,
282,430 ( 0.06%)      len_or_tag: u16,
686,149 ( 0.14%)      ctxt_or_zero: u16,
      .           }
      .           
      .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
      .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
      .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
      .           
      .           /// Dummy span, both position and length are zero, syntax context is zero as well.
      .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
      .           impl Span {
      .               #[inline]
      .               pub fn new(
      .                   mut lo: BytePos,
      .                   mut hi: BytePos,
      .                   ctxt: SyntaxContext,
      .                   parent: Option<LocalDefId>,
      .               ) -> Self {
 71,419 ( 0.01%)          if lo > hi {
      .                       std::mem::swap(&mut lo, &mut hi);
      .                   }
      .           
142,832 ( 0.03%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
      .           
580,149 ( 0.12%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
      .                       // Inline format.
      .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
      .                   } else {
      .                       // Interned format.
      .                       let index =
    180 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
      .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
      .                   }
215,010 ( 0.04%)      }
      .           
      .               #[inline]
      .               pub fn data(self) -> SpanData {
      .                   let data = self.data_untracked();
      .                   if let Some(parent) = data.parent {
      .                       (*SPAN_TRACK)(parent);
      .                   }
      .                   data
      .               }
      .           
      .               /// Internal function to translate between an encoded span and the expanded representation.
      .               /// This function must not be used outside the incremental engine.
      .               #[inline]
      .               pub fn data_untracked(self) -> SpanData {
136,147 ( 0.03%)          if self.len_or_tag != LEN_TAG {
      .                       // Inline format.
      .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
      .                       SpanData {
      .                           lo: BytePos(self.base_or_index),
129,882 ( 0.03%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
      .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
      .                           parent: None,
      .                       }
      .                   } else {
      .                       // Interned format.
      .                       debug_assert!(self.ctxt_or_zero == 0);
      .                       let index = self.base_or_index;
      .                       with_span_interner(|interner| interner.spans[index as usize])
      .                   }
 30,806 ( 0.01%)      }
      .           }
      .           
      4 ( 0.00%)  #[derive(Default)]
      .           pub struct SpanInterner {
      .               spans: FxIndexSet<SpanData>,
      .           }
      .           
      .           impl SpanInterner {
     54 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
     72 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
      .                   index as u32
     72 ( 0.00%)      }
      .           }
      .           
      .           // If an interner exists, return it. Otherwise, prepare a fresh one.
      .           #[inline]
      .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
      .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
      .           }

332,747 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     10 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     10 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
     20 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 13,005 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 88,434 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  7,803 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 15,606 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  9,707 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
157,240 ( 0.03%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
  4,194 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    395 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 19,727 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 20,510 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
  4,912 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
  2,949 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    146 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
     44 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
     35 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
     46 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  2,601 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  7,803 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  2,601 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
    279 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    341 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    155 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    217 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
     20 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     10 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
     82 ( 0.00%)          self
     30 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  5,411 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  4,808 ( 0.00%)              let (value, subst) =
    137 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  7,662 ( 0.00%)              f(infcx, value, subst)
      .                   })
  5,972 ( 0.00%)      }
      .           
 14,724 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  6,978 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
113,538 ( 0.02%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  2,601 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  2,601 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 16,496 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     10 ( 0.00%)          let InferOk { value, obligations } = self;
     38 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
    590 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  2,360 ( 0.00%)          self.obligations
    590 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  2,797 ( 0.00%)      }
      .           
 50,936 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 57,303 ( 0.01%)          t.fold_with(&mut self.freshener())
 57,303 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     20 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     40 ( 0.00%)          match *ty.kind() {
      6 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     24 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      4 ( 0.00%)              _ => None,
      .                   }
     40 ( 0.00%)      }
      .           
  6,367 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  6,367 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
  8,357 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
  8,357 ( 0.00%)      }
      .           
     64 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     32 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     32 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     12 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
     68 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      4 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    112 ( 0.00%)      }
      .           
 16,176 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 64,716 ( 0.01%)          CombineFields {
      .                       infcx: self,
161,790 ( 0.03%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 16,176 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    162 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 92,896 ( 0.02%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
278,688 ( 0.06%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 46,448 ( 0.01%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
185,792 ( 0.04%)      }
      .           
303,754 ( 0.06%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 27,614 ( 0.01%)              undo_snapshot,
 27,614 ( 0.01%)              region_constraints_snapshot,
 27,614 ( 0.01%)              universe,
 27,614 ( 0.01%)              was_in_snapshot,
 55,228 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
 27,614 ( 0.01%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
282,510 ( 0.06%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 18,834 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 18,834 ( 0.00%)              was_in_snapshot,
 37,668 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
 48,044 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 58,762 ( 0.01%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  5,342 ( 0.00%)          let snapshot = self.start_snapshot();
 16,118 ( 0.00%)          let r = f(&snapshot);
 37,394 ( 0.01%)          self.commit_from(snapshot);
 32,226 ( 0.01%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
206,492 ( 0.04%)      #[instrument(skip(self, f), level = "debug")]
253,076 ( 0.05%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 26,826 ( 0.01%)          let snapshot = self.start_snapshot();
118,832 ( 0.02%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 21,881 ( 0.00%)          match r {
      .                       Ok(_) => {
101,121 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
107,845 ( 0.02%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
123,406 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
120,123 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
138,912 ( 0.03%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
 34,417 ( 0.01%)          let snapshot = self.start_snapshot();
 58,823 ( 0.01%)          let r = f(&snapshot);
154,608 ( 0.03%)          self.rollback_to("probe", snapshot);
    783 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     27 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
     36 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
      6 ( 0.00%)          let snapshot = self.start_snapshot();
      3 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
      6 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
     12 ( 0.00%)          let r = f(&snapshot);
     27 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
     36 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
 15,552 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
 31,104 ( 0.01%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 23,328 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
      .               pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
-- line 908 ----------------------------------------
-- line 911 ----------------------------------------
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
      .               }
      .           
    120 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     90 ( 0.00%)      }
      .           
    880 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
    792 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 1022 ----------------------------------------
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      .                       let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
      .               }
      .           
    168 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
    140 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
    112 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
      6 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     12 ( 0.00%)      }
      .           
    716 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  3,580 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  1,074 ( 0.00%)      }
      .           
    650 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  2,473 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    975 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    154 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     14 ( 0.00%)          self.tcx.mk_ty_var(vid)
     42 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
    100 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
     60 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
     80 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
    260 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 15,375 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    520 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
  6,444 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 41,886 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 16,110 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
  9,666 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
    744 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  1,116 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
     80 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    120 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    280 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    560 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      .               pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      4 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      .               }
      .           
141,248 ( 0.03%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 83,530 ( 0.02%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  2,375 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
 60,884 ( 0.01%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
 76,105 ( 0.02%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
 15,221 ( 0.00%)                              param.name,
 15,221 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
 15,221 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
    660 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
     60 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
    480 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
 32,835 ( 0.01%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
153,825 ( 0.03%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 21,890 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
     40 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  5,588 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
     60 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  6,356 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 17,252 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
    908 ( 0.00%)              assert!(
  2,724 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
    908 ( 0.00%)          };
      .           
      .                   let region_rels =
    908 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
  8,172 ( 0.00%)          let (lexical_region_resolutions, errors) =
 21,792 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  3,632 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    908 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
  8,172 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  9,080 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  1,816 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  2,724 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  1,816 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  4,540 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
    728 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
     50 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
    190 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
     10 ( 0.00%)              .into_infos_and_data();
     10 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
     80 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    188 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
    564 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
    658 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 15,343 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
    218 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
    327 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
  3,320 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 52,303 ( 0.01%)          if !value.needs_infer() {
 38,110 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 45,439 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 31,024 ( 0.01%)          value.fold_with(&mut r)
  4,122 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
    495 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
  3,128 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 76,473 ( 0.02%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    330 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    560 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
    210 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  1,190 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    490 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
      .               pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      .                   let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      .                   closure_kind_ty.to_opt_closure_kind()
-- line 1546 ----------------------------------------
-- line 1551 ----------------------------------------
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 92,608 ( 0.02%)          self.universe.get()
 16,925 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
      .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
      .                   let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
      .               }
-- line 1568 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
628,496 ( 0.13%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
419,115 ( 0.08%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
207,020 ( 0.04%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
  1,844 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
    453 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
707,058 ( 0.14%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
  4,897 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
    300 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    205 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    205 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      .               pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  1,776 ( 0.00%)          match *ty.kind() {
    346 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     62 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
-- line 1745 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
115,205 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    464 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    464 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    580 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
    348 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    580 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
    619 ( 0.00%)          match *cause.code() {
    155 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    775 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

554,045 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 357 ----------------------------------------
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
        .               ///
        .               /// let five = Rc::new(5);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      566 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
        .                   // There is an implicit weak pointer owned by all the strong
        .                   // pointers, which ensures that the weak destructor never frees
        .                   // the allocation while the strong destructor is running, even
        .                   // if the weak pointer is stored inside the strong one.
        .                   unsafe {
        .                       Self::from_inner(
  170,076 ( 0.03%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
        .                       )
        .                   }
      566 ( 0.00%)      }
        .           
        .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
        .               /// weak reference to the constructing `Rc<T>`.
        .               ///
        .               /// Generally, a structure circularly referencing itself, either directly or
        .               /// indirectly, should not hold a strong reference to prevent a memory leak.
        .               /// In `data_fn`, initialization of `T` can make use of the weak reference
        .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///
        .               /// let x = Rc::new(4);
        .               /// let _y = Rc::clone(&x);
        .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
        2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
        .                       unsafe {
        .                           let val = ptr::read(&*this); // copy the contained object
        .           
        .                           // Indicate to Weaks that they can't be promoted by decrementing
        .                           // the strong count, and then remove the implicit "strong weak"
        .                           // pointer while also handling drop logic by just crafting a
        .                           // fake Weak.
        .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let _weak_five = Rc::downgrade(&five);
        .               ///
        .               /// assert_eq!(1, Rc::weak_count(&five));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_counts", since = "1.15.0")]
        .               pub fn weak_count(this: &Self) -> usize {
      126 ( 0.00%)          this.inner().weak() - 1
        .               }
        .           
        .               /// Gets the number of strong (`Rc`) pointers to this allocation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
        .               pub unsafe fn decrement_strong_count(ptr: *const T) {
        .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
        .               }
        .           
        .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
        .               /// this allocation.
        .               #[inline]
        .               fn is_unique(this: &Self) -> bool {
       72 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`, if there are
        .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
        .               ///
        .               /// Returns [`None`] otherwise, because it is not safe to
        .               /// mutate a shared value.
        .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
        .               /// assert_eq!(*x, 4);
        .               ///
        .               /// let _y = Rc::clone(&x);
        .               /// assert!(Rc::get_mut(&mut x).is_none());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
       24 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`,
        .               /// without any check.
        .               ///
        .               /// See also [`get_mut`], which is safe and does appropriate checks.
        .               ///
        .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1088 ----------------------------------------
        .               /// }
        .               /// assert_eq!(*x, "foo");
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
        .               pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
        .                   // We are careful to *not* create a reference covering the "count" fields, as
        .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
   18,493 ( 0.00%)          unsafe { &mut (*this.ptr.as_ptr()).value }
        .               }
        .           
        .               #[inline]
        .               #[stable(feature = "ptr_eq", since = "1.17.0")]
        .               /// Returns `true` if the two `Rc`s point to the same allocation
        .               /// (in a vein similar to [`ptr::eq`]).
        .               ///
        .               /// # Examples
-- line 1104 ----------------------------------------
-- line 1109 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let same_five = Rc::clone(&five);
        .               /// let other_five = Rc::new(5);
        .               ///
        .               /// assert!(Rc::ptr_eq(&five, &same_five));
        .               /// assert!(!Rc::ptr_eq(&five, &other_five));
        .               /// ```
        .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
  132,141 ( 0.03%)          this.ptr.as_ptr() == other.ptr.as_ptr()
        .               }
        .           }
        .           
        .           impl<T: Clone> Rc<T> {
        .               /// Makes a mutable reference into the given `Rc`.
        .               ///
        .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
        .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
        .               /// *Rc::make_mut(&mut data) += 1;
        .               ///
        .               /// assert!(76 == *data);
        .               /// assert!(weak.upgrade().is_none());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
       90 ( 0.00%)      pub fn make_mut(this: &mut Self) -> &mut T {
       54 ( 0.00%)          if Rc::strong_count(this) != 1 {
        .                       // Gotta clone the data, there are other Rcs.
        .                       // Pre-allocate memory to allow writing the cloned value directly.
        9 ( 0.00%)              let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           (**this).write_clone_into_raw(data.as_mut_ptr());
       18 ( 0.00%)                  *this = rc.assume_init();
        .                       }
       36 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
        .                       // Can just steal the data, all that's left is Weaks
        .                       let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
        .           
        .                           this.inner().dec_strong();
        .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
        .                           ptr::write(this, rc.assume_init());
        .                       }
        .                   }
        .                   // This unsafety is ok because we're guaranteed that the pointer
        .                   // returned is the *only* pointer that will ever be returned to T. Our
        .                   // reference count is guaranteed to be 1 at this point, and we required
        .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
        .                   // reference to the allocation.
       27 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
      108 ( 0.00%)      }
        .           }
        .           
        .           impl Rc<dyn Any> {
        .               #[inline]
        .               #[stable(feature = "rc_downcast", since = "1.29.0")]
        .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
        .               ///
        .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Copy elements from slice into newly allocated Rc<\[T\]>
        .               ///
        .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
        .               #[cfg(not(no_global_oom_handling))]
      218 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
        .                   unsafe {
        .                       let ptr = Self::allocate_for_slice(v.len());
       43 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
        .                       Self::from_ptr(ptr)
        .                   }
      284 ( 0.00%)      }
        .           
        .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
        .               ///
        .               /// Behavior is undefined should the size be wrong.
        .               #[cfg(not(no_global_oom_handling))]
        .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
        .                   // Panic guard while cloning T elements.
        .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
        .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
        .               #[inline]
        .               fn from_slice(v: &[T]) -> Self {
       13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Deref for Rc<T> {
        .               type Target = T;
        .           
        .               #[inline(always)]
        .               fn deref(&self) -> &T {
  147,898 ( 0.03%)          &self.inner().value
        .               }
        .           }
        .           
        .           #[unstable(feature = "receiver_trait", issue = "none")]
        .           impl<T: ?Sized> Receiver for Rc<T> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
        .               /// }
        .               ///
        .               /// let foo  = Rc::new(Foo);
        .               /// let foo2 = Rc::clone(&foo);
        .               ///
        .               /// drop(foo);    // Doesn't print anything
        .               /// drop(foo2);   // Prints "dropped!"
        .               /// ```
   49,290 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
   32,051 ( 0.01%)              self.inner().dec_strong();
  862,242 ( 0.17%)              if self.inner().strong() == 0 {
        .                           // destroy the contained object
   18,418 ( 0.00%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
        .           
        .                           // remove the implicit "strong weak" pointer now that we've
        .                           // destroyed the contents.
        1 ( 0.00%)                  self.inner().dec_weak();
        .           
   41,130 ( 0.01%)                  if self.inner().weak() == 0 {
       34 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
        .                           }
        .                       }
        .                   }
   73,282 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Clone for Rc<T> {
        .               /// Makes a clone of the `Rc` pointer.
        .               ///
        .               /// This creates another pointer to the same allocation, increasing the
        .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1562 ----------------------------------------
        .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
        .           /// the same value, than two `&T`s.
        .           ///
        .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
        .               #[inline]
        .               fn eq(&self, other: &Rc<T>) -> bool {
  192,767 ( 0.04%)          Rc::ptr_eq(self, other) || **self == **other
        .               }
        .           
        .               #[inline]
        .               fn ne(&self, other: &Rc<T>) -> bool {
        .                   !Rc::ptr_eq(self, other) && **self != **other
        .               }
        .           }
        .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
        .               /// # use std::rc::Rc;
        .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
        .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
        .               /// assert_eq!(vec![1, 2, 3], *shared);
        .               /// ```
        .               #[inline]
        .               fn from(mut v: Vec<T>) -> Rc<[T]> {
        .                   unsafe {
       60 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
        .           
        .                       // Allow the Vec to free its memory, but not destroy its contents
        .                       v.set_len(0);
        .           
        .                       rc
        .                   }
        .               }
        .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[must_use]
        .               pub fn new() -> Weak<T> {
        .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
        .               }
        .           }
        .           
        .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
        .               let address = ptr as *mut () as usize;
       42 ( 0.00%)      address == usize::MAX
        .           }
        .           
        .           /// Helper type to allow accessing the reference counts without
        .           /// making any assertions about the data field.
        .           struct WeakInner<'a> {
        .               weak: &'a Cell<usize>,
        .               strong: &'a Cell<usize>,
        .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
        .                       })
        .                       .unwrap_or(0)
        .               }
        .           
        .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
        .               /// (i.e., when this `Weak` was created by `Weak::new`).
        .               #[inline]
        .               fn inner(&self) -> Option<WeakInner<'_>> {
        1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
        .                       None
        .                   } else {
        .                       // We are careful to *not* create a reference covering the "data" field, as
        .                       // the field may be mutated concurrently (for example, if the last `Rc`
        .                       // is dropped, the data field will be dropped in-place).
        .                       Some(unsafe {
        .                           let ptr = self.ptr.as_ptr();
        .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
        .               /// assert!(other_weak_foo.upgrade().is_none());
        .               /// ```
        .               fn drop(&mut self) {
        .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
        .           
        .                   inner.dec_weak();
        .                   // the weak count starts at 1, and will only go to zero if all
        .                   // the strong pointers have disappeared.
        2 ( 0.00%)          if inner.weak() == 0 {
        .                       unsafe {
        .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2469 ----------------------------------------
        .           
        .               #[inline]
        .               fn strong(&self) -> usize {
        .                   self.strong_ref().get()
        .               }
        .           
        .               #[inline]
        .               fn inc_strong(&self) {
  433,459 ( 0.09%)          let strong = self.strong();
        .           
        .                   // We want to abort on overflow instead of dropping the value.
        .                   // The reference count will never be zero when this is called;
        .                   // nevertheless, we insert an abort here to hint LLVM at
        .                   // an otherwise missed optimization.
1,304,560 ( 0.26%)          if strong == 0 || strong == usize::MAX {
        .                       abort();
        .                   }
      156 ( 0.00%)          self.strong_ref().set(strong + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_strong(&self) {
1,287,752 ( 0.26%)          self.strong_ref().set(self.strong() - 1);
        .               }
        .           
        .               #[inline]
        .               fn weak(&self) -> usize {
        .                   self.weak_ref().get()
        .               }
        .           
        .               #[inline]
-- line 2499 ----------------------------------------
-- line 2507 ----------------------------------------
        .                   if weak == 0 || weak == usize::MAX {
        .                       abort();
        .                   }
        .                   self.weak_ref().set(weak + 1);
        .               }
        .           
        .               #[inline]
        .               fn dec_weak(&self) {
   58,713 ( 0.01%)          self.weak_ref().set(self.weak() - 1);
        .               }
        .           }
        .           
        .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
        .               #[inline(always)]
        .               fn weak_ref(&self) -> &Cell<usize> {
        .                   &self.weak
        .               }
-- line 2523 ----------------------------------------

   10,444 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .               fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   f(self)
        .               }
        .           
        .               /// Generic relation routine suitable for most anything.
    6,821 ( 0.00%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
  325,513 ( 0.07%)          Relate::relate(self, a, b)
    5,587 ( 0.00%)      }
        .           
        .               /// Relate the two substitutions for the given item. The default
        .               /// is to look up the variance for the item and proceed
        .               /// accordingly.
      450 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   debug!(
        .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
        .                       item_def_id, a_subst, b_subst
        .                   );
        .           
        .                   let tcx = self.tcx();
        .                   let opt_variances = tcx.variances_of(item_def_id);
      180 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
      405 ( 0.00%)      }
        .           
        .               /// Switch variance for the purpose of relating `a` and `b`.
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self>;
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Relate impls
        .           
    5,547 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: ty::TypeAndMut<'tcx>,
        .               b: ty::TypeAndMut<'tcx>,
        .               base_ty: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
        .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
      912 ( 0.00%)      if a.mutbl != b.mutbl {
       52 ( 0.00%)          Err(TypeError::Mutability)
        .               } else {
        .                   let mutbl = a.mutbl;
        .                   let (variance, info) = match mutbl {
        .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
        .                       ast::Mutability::Mut => {
        .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
        .                       }
        .                   };
      215 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
    2,315 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
        .               }
    5,558 ( 0.00%)  }
        .           
        .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               variances: Option<(DefId, &[ty::Variance])>,
        .               a_subst: SubstsRef<'tcx>,
        .               b_subst: SubstsRef<'tcx>,
        .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  122,567 ( 0.02%)      let tcx = relation.tcx();
   61,599 ( 0.01%)      let mut cached_ty = None;
        .           
        .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
  365,292 ( 0.07%)          let (variance, variance_info) = match variances {
      442 ( 0.00%)              Some((ty_def_id, variances)) => {
      663 ( 0.00%)                  let variance = variances[i];
      221 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
        .                               let ty =
      271 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
        .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
        .                           } else {
        .                               ty::VarianceDiagInfo::default()
        .                           };
        .                           (variance, variance_info)
        .                       }
        .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
        .                   };
   71,995 ( 0.01%)          relation.relate_with_variance(variance, variance_info, a, b)
        .               });
        .           
        .               tcx.mk_substs(params)
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
       52 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::FnSig<'tcx>,
        .                   b: ty::FnSig<'tcx>,
        .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
        .                   let tcx = relation.tcx();
        .           
       24 ( 0.00%)          if a.c_variadic != b.c_variadic {
        .                       return Err(TypeError::VariadicMismatch(expected_found(
        .                           relation,
        .                           a.c_variadic,
        .                           b.c_variadic,
        .                       )));
        .                   }
       24 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
        .                   let abi = relation.relate(a.abi, b.abi)?;
        .           
       32 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
        .                       return Err(TypeError::ArgCount);
        .                   }
        .           
       36 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
       26 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
       32 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
        6 ( 0.00%)              .map(|((a, b), is_output)| {
        6 ( 0.00%)                  if is_output {
        .                               relation.relate(a, b)
        .                           } else {
        .                               relation.relate_with_variance(
        .                                   ty::Contravariant,
        .                                   ty::VarianceDiagInfo::default(),
        .                                   a,
        .                                   b,
        .                               )
        .                           }
        .                       })
        .                       .enumerate()
       39 ( 0.00%)              .map(|(i, r)| match r {
        .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
        .                               Err(TypeError::ArgumentSorts(exp_found, i))
        .                           }
        .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
        .                               Err(TypeError::ArgumentMutability(i))
        .                           }
       53 ( 0.00%)                  r => r,
        .                       });
       32 ( 0.00%)          Ok(ty::FnSig {
        .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
        4 ( 0.00%)              c_variadic: a.c_variadic,
        .                       unsafety,
        .                       abi,
        .                   })
       36 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::BoundConstness,
        .                   b: ty::BoundConstness,
        .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ast::Unsafety,
        .                   b: ast::Unsafety,
        .               ) -> RelateResult<'tcx, ast::Unsafety> {
        4 ( 0.00%)          if a != b {
        .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
        .                   a: abi::Abi,
        .                   b: abi::Abi,
        .               ) -> RelateResult<'tcx, abi::Abi> {
        .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
    2,982 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionTy<'tcx>,
        .                   b: ty::ProjectionTy<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
      634 ( 0.00%)          if a.item_def_id != b.item_def_id {
       30 ( 0.00%)              Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let substs = relation.relate(a.substs, b.substs)?;
      756 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
        .                   }
    1,926 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialProjection<'tcx>,
        .                   b: ty::ExistentialProjection<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
        .                           b.substs,
        .                       )?;
        .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
  210,831 ( 0.04%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitRef<'tcx>,
        .                   b: ty::TraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   45,150 ( 0.01%)          if a.def_id != b.def_id {
       45 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
   15,045 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   34,820 ( 0.01%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
        .                   }
  135,534 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialTraitRef<'tcx>,
        .                   b: ty::ExistentialTraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
-- line 332 ----------------------------------------
-- line 358 ----------------------------------------
        .           
        .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
        .               #[inline]
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  202,539 ( 0.04%)          relation.tys(a, b)
        .               }
        .           }
        .           
        .           /// The main "type relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
  432,112 ( 0.09%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: Ty<'tcx>,
        .               b: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, Ty<'tcx>> {
        .               let tcx = relation.tcx();
        .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
  968,138 ( 0.19%)      match (a.kind(), b.kind()) {
        .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_tys")
        .                   }
        .           
        .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
        .                       bug!("bound types encountered in super_relate_tys")
        .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
        .           
        .                   (&ty::Never, _)
        .                   | (&ty::Char, _)
        .                   | (&ty::Bool, _)
        .                   | (&ty::Int(_), _)
        .                   | (&ty::Uint(_), _)
        .                   | (&ty::Float(_), _)
        .                   | (&ty::Str, _)
    2,057 ( 0.00%)              if a == b =>
        .                   {
        .                       Ok(a)
        .                   }
        .           
    1,299 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
        .           
        .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
        .           
  465,828 ( 0.09%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
  145,508 ( 0.03%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
        .                       Ok(tcx.mk_adt(a_def, substs))
        .                   }
        .           
        .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
        .           
        .                   (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
        .                       let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
        .                           relation.relate_with_variance(
-- line 417 ----------------------------------------
-- line 452 ----------------------------------------
        .                       Ok(tcx.mk_closure(a_id, &substs))
        .                   }
        .           
        .                   (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
        .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ptr(mt))
        .                   }
        .           
    8,647 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
    4,347 ( 0.00%)              let r = relation.relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_r,
        .                           b_r,
        .                       )?;
        .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
        .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
    6,128 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ref(r, mt))
        .                   }
        .           
      125 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
        .                       let t = relation.relate(a_t, b_t)?;
       50 ( 0.00%)              match relation.relate(sz_a, sz_b) {
       75 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
        .                           Err(err) => {
        .                               // Check whether the lengths are both concrete/known values,
        .                               // but are unequal, for better diagnostics.
        .                               //
        .                               // It might seem dubious to eagerly evaluate these constants here,
        .                               // we however cannot end up with errors in `Relate` during both
        .                               // `type_of` and `predicates_of`. This means that evaluating the
        .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
        .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
        .                                   ),
        .                                   _ => Err(err),
        .                               }
        .                           }
        .                       }
        .                   }
        .           
      462 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
        .                       let t = relation.relate(a_t, b_t)?;
        .                       Ok(tcx.mk_slice(t))
        .                   }
        .           
       24 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
       24 ( 0.00%)              if as_.len() == bs.len() {
        .                           Ok(tcx.mk_tup(
        .                               iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
        .                           )?)
        .                       } else if !(as_.is_empty() || bs.is_empty()) {
        .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
        .                       } else {
        .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
        .                       }
        .                   }
        .           
        6 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
       10 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
        8 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
        .                       Ok(tcx.mk_fn_def(a_def_id, substs))
        .                   }
        .           
        .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
       64 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
        .                       Ok(tcx.mk_fn_ptr(fty))
        .                   }
        .           
        .                   // these two are already handled downstream in case of lazy normalization
       90 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
        .                       let projection_ty = relation.relate(a_data, b_data)?;
        .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
        .                   }
        .           
        .                   (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
        .                       if a_def_id == b_def_id =>
        .                   {
        .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
        .                       Ok(tcx.mk_opaque(a_def_id, substs))
        .                   }
        .           
        .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
        .               }
  486,126 ( 0.10%)  }
        .           
        .           /// The main "const relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
      250 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
        .               let tcx = relation.tcx();
        .           
        .               // FIXME(oli-obk): once const generics can have generic types, this assertion
        .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
       50 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
       50 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
       25 ( 0.00%)      if a_ty != b_ty {
        .                   relation.tcx().sess.delay_span_bug(
        .                       DUMMY_SP,
        .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
        .                   );
        .               }
        .           
        .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
       25 ( 0.00%)      let a = eagerly_eval(a);
       50 ( 0.00%)      let b = eagerly_eval(b);
        .           
        .               // Currently, the values that can be unified are primitive types,
        .               // and those that derive both `PartialEq` and `Eq`, corresponding
        .               // to structural-match types.
      275 ( 0.00%)      let is_match = match (a.val, b.val) {
        .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
        .                   }
        .           
        .                   (ty::ConstKind::Error(_), _) => return Ok(a),
        .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
        .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
        .                               substs,
        .                               promoted: au.promoted,
        .                           }),
        .                           ty: a.ty,
        .                       }));
        .                   }
        .                   _ => false,
        .               };
      150 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
      225 ( 0.00%)  }
        .           
        .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a_val: ConstValue<'tcx>,
        .               b_val: ConstValue<'tcx>,
        .               // FIXME(oli-obk): these arguments should go away with valtrees
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .               // FIXME(oli-obk): this should just be `bool` with valtrees
        .           ) -> RelateResult<'tcx, bool> {
       25 ( 0.00%)      let tcx = relation.tcx();
      275 ( 0.00%)      Ok(match (a_val, b_val) {
      550 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
       25 ( 0.00%)              a_val == b_val
        .                   }
        .                   (
        .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
        .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
        .                   ) => {
        .                       a_val == b_val
        .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
        .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 737 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: SubstsRef<'tcx>,
        .                   b: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      208 ( 0.00%)          relate_substs(relation, None, a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
    4,227 ( 0.00%)          relation.regions(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
       96 ( 0.00%)          relation.consts(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
      195 ( 0.00%)          relation.binders(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
  293,672 ( 0.06%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GenericArg<'tcx>,
        .                   b: GenericArg<'tcx>,
        .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
  401,820 ( 0.08%)          match (a.unpack(), b.unpack()) {
        .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
        .                           Ok(relation.relate(a_lt, b_lt)?.into())
        .                       }
        .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
       35 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
        .                       }
        .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
        .                           Ok(relation.relate(a_ct, b_ct)?.into())
        .                       }
        .                       (GenericArgKind::Lifetime(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Type(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Const(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                   }
  321,954 ( 0.06%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ImplPolarity,
        .                   b: ty::ImplPolarity,
        .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
        .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
      165 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitPredicate<'tcx>,
        .                   b: ty::TraitPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        .                   Ok(ty::TraitPredicate {
       75 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        .                       constness: relation.relate(a.constness, b.constness)?,
        .                       polarity: relation.relate(a.polarity, b.polarity)?,
        .                   })
      135 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Error handling
        .           
        .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
        .           where
        .               R: TypeRelation<'tcx>,
        .           {
       30 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
        .           }

1,145,419 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
1,113,151 ( 0.22%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   71,989 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
1,182,591 ( 0.24%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
   24,243 ( 0.00%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   13,732 ( 0.00%)          self.try_fold_with(folder).into_ok()
   21,949 ( 0.00%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
2,962,475 ( 0.59%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  818,178 ( 0.16%)          self.try_super_fold_with(folder)
2,849,790 ( 0.57%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  125,869 ( 0.03%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  133,803 ( 0.03%)          self.super_visit_with(visitor)
  109,716 ( 0.02%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   53,739 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
        .                   self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
   70,895 ( 0.01%)      fn has_escaping_bound_vars(&self) -> bool {
   68,007 ( 0.01%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
   71,066 ( 0.01%)      }
        .           
    3,655 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   61,360 ( 0.01%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
      346 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
    2,064 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    2,064 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
      168 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
    9,436 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
    6,678 ( 0.00%)      fn needs_infer(&self) -> bool {
   46,232 ( 0.01%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    6,708 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 146 ----------------------------------------
        .               /// True if there are any un-erased free regions.
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
       35 ( 0.00%)      fn is_global(&self) -> bool {
    5,234 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
       42 ( 0.00%)      }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
        .               /// which could be replaced later, in a way that would change the results of `impl`
-- line 164 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  414,045 ( 0.08%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    4,511 ( 0.00%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
      211 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    7,586 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    5,920 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    1,589 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
  100,976 ( 0.02%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  185,065 ( 0.04%)          Ok(self.fold_binder(t))
  146,043 ( 0.03%)      }
        .           
    3,173 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
  692,472 ( 0.14%)          Ok(self.fold_ty(t))
    2,012 ( 0.00%)      }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
   42,038 ( 0.01%)          Ok(self.fold_region(r))
        .               }
        .           
      120 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    3,571 ( 0.00%)          Ok(self.fold_const(c))
      100 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      131 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
-- line 396 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
      120 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
      490 ( 0.00%)              callback(r);
        .                       false
        .                   });
      105 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
      126 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 479 ----------------------------------------
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
        .                           self.outer_index.shift_in(1);
        .                           let result = t.as_ref().skip_binder().visit_with(self);
        .                           self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
      570 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      928 ( 0.00%)                  match *r {
        .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
      798 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
      665 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
      781 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
    1,642 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
    5,710 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   52,259 ( 0.01%)          self.tcx
   52,259 ( 0.01%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
       21 ( 0.00%)          self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
       21 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
       34 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      782 ( 0.00%)          match *r {
       34 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
       34 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
    2,244 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
    2,492 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
    8,722 ( 0.00%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    1,246 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    6,701 ( 0.00%)          self.tcx
    6,088 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   17,943 ( 0.00%)          self.current_index.shift_in(1);
   50,190 ( 0.01%)          let t = t.super_fold_with(self);
   17,547 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
   36,825 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   15,950 ( 0.00%)          match *t.kind() {
       95 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
       19 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
       19 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   15,912 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
    3,933 ( 0.00%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   41,088 ( 0.01%)      }
        .           
    5,616 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    3,834 ( 0.00%)          match *r {
    3,586 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    1,793 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
    3,586 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
        .                                   assert_eq!(debruijn1, ty::INNERMOST);
        .                                   self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
    5,616 ( 0.00%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
-- line 669 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   16,755 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
      208 ( 0.00%)          let value = value.skip_binder();
    9,292 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   14,142 ( 0.00%)              value
        .                   } else {
      495 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
        .                       value.fold_with(&mut replacer)
        .                   };
   34,341 ( 0.01%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
    8,792 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
    4,392 ( 0.00%)          if !value.has_escaping_bound_vars() {
   46,901 ( 0.01%)              value
        .                   } else {
        .                       let mut replacer =
   14,302 ( 0.00%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    1,709 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
    6,104 ( 0.00%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  241,121 ( 0.05%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
    4,629 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  225,378 ( 0.05%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  203,775 ( 0.04%)          (value, region_map)
  169,065 ( 0.03%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
      264 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
      754 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
      116 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
      144 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
   14,385 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      112 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
      168 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      244 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   16,137 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   12,045 ( 0.00%)          let mut counter = 0;
    2,646 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
        .                               var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
        .                           let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
        .                           counter += 1;
        .                           r
        .                       })
        .                       .0;
    2,409 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    7,227 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
   14,142 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   13,728 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
       38 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
        .                               self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
       38 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
       57 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
       38 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
      520 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
      684 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        6 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
        9 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        .                       _ => ct.super_visit_with(self),
        .                   }
        6 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  189,955 ( 0.04%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      354 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      461 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
       96 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
      366 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
       42 ( 0.00%)      fn new(just_constrained: bool) -> Self {
      294 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
       42 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.current_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
        .                   self.current_index.shift_out(1);
        .                   result
        .               }
        .           
      156 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
      516 ( 0.00%)          if self.just_constrained {
      247 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
      713 ( 0.00%)          t.super_visit_with(self)
      104 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
        .                   if self.just_constrained {
        .                       if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
       85 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
       17 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

   57,711 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                 

-- line 94 ----------------------------------------
        .           /// Adds packed 32-bit integers in `a` and `b`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(paddd))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
       17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
        .           }
        .           
        .           /// Adds packed 64-bit integers in `a` and `b`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
        .           /// Compares packed 8-bit integers in `a` and `b` for equality.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpeqb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
  102,331 ( 0.02%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
        .           }
        .           
        .           /// Compares packed 16-bit integers in `a` and `b` for equality.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
        .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpgtb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    1,454 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
        .           }
        .           
        .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
        .           /// `mem_addr` must be aligned on a 16-byte boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(movaps))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   24,024 ( 0.00%)      *mem_addr
        .           }
        .           
        .           /// Loads 128-bits of integer data from memory into a new vector.
        .           ///
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
        .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
       16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
        .           }
        .           
        .           /// Stores the lower 64-bit integer `a` to a memory location.
        .           ///
        .           /// `mem_addr` does not need to be aligned on any particular boundary.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
        .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
        .           /// Returns a mask of the most significant bit of each element in `a`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pmovmskb))]
        .           #[stable(feature = "simd_x86", since = "1.27.0")]
        .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
4,634,960 ( 0.93%)      pmovmskb(a.as_i8x16())
        .           }
        .           
        .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
        .           ///
        .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
        .           #[inline]
        .           #[target_feature(enable = "sse2")]
        .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir               

-- line 24 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
      .               fn tag(&self) -> &'static str {
      .                   "Equate"
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 17,463 ( 0.00%)          self.fields.tcx()
 10,983 ( 0.00%)      }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      8 ( 0.00%)          self.fields.param_env
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
 20,922 ( 0.00%)          self.a_is_expected
      .               }
      .           
 32,385 ( 0.01%)      fn relate_item_substs(
      .                   &mut self,
      .                   _item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      .                   // N.B., once we are equating types, we don't care about
      .                   // variance, so don't try to lookup the variance here. This
      .                   // also avoids some cycles (e.g., #41849) since looking up
      .                   // variance requires computing types which can require
      .                   // performing trait matching (which then performs equality
      .                   // unification).
      .           
  6,477 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
 38,862 ( 0.01%)      }
      .           
      .               fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   _: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   self.relate(a, b)
      .               }
      .           
470,925 ( 0.09%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 52,325 ( 0.01%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
 59,812 ( 0.01%)          let infcx = self.fields.infcx;
 59,812 ( 0.01%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 59,812 ( 0.01%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
      .           
      .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
      .           
195,390 ( 0.04%)          match (a.kind(), b.kind()) {
      .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
      .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
      .                       }
      .           
    645 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
  2,580 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
      .                       }
      .           
 14,701 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
 73,505 ( 0.01%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
      .                       }
      .           
      .                       _ => {
101,738 ( 0.02%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
      .                       }
      .                   }
      .           
      .                   Ok(a)
470,925 ( 0.09%)      }
      .           
  4,221 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
      .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
  1,407 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
  2,814 ( 0.00%)          self.fields
      .                       .infcx
      .                       .inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  2,814 ( 0.00%)              .make_eqregion(origin, a, b);
    938 ( 0.00%)          Ok(a)
  4,221 ( 0.00%)      }
      .           
      .               fn consts(
      .                   &mut self,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     28 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
      .               }
      .           
      .               fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
-- line 131 ----------------------------------------

197,405 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           pub struct BitMask(pub BitMaskWord);
        .           
        .           #[allow(clippy::use_self)]
        .           impl BitMask {
        .               /// Returns a new `BitMask` with all bits inverted.
        .               #[inline]
        .               #[must_use]
        .               pub fn invert(self) -> Self {
   20,073 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
        .               }
        .           
        .               /// Flip the bit in the mask for the entry at the given index.
        .               ///
        .               /// Returns the bit's previous state.
        .               #[inline]
        .               #[allow(clippy::cast_ptr_alignment)]
        .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
        .                   // The bit was set if the bit is now 0.
        .                   self.0 & mask == 0
        .               }
        .           
        .               /// Returns a new `BitMask` with the lowest bit removed.
        .               #[inline]
        .               #[must_use]
        .               pub fn remove_lowest_bit(self) -> Self {
    4,546 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
        .               }
        .               /// Returns whether the `BitMask` has at least one set bit.
        .               #[inline]
        .               pub fn any_bit_set(self) -> bool {
  348,139 ( 0.07%)          self.0 != 0
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one.
        .               #[inline]
        .               pub fn lowest_set_bit(self) -> Option<usize> {
5,020,201 ( 1.01%)          if self.0 == 0 {
        .                       None
        .                   } else {
        .                       Some(unsafe { self.lowest_set_bit_nonzero() })
        .                   }
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one. The
        .               /// bitmask must not be empty.
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
    5,191 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
        .               }
        .               #[inline]
        .               #[cfg(not(feature = "nightly"))]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
        .                   self.trailing_zeros()
        .               }
        .           
        .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
        .           /// bits.
        .           pub struct BitMaskIter(BitMask);
        .           
        .           impl Iterator for BitMaskIter {
        .               type Item = usize;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<usize> {
1,545,900 ( 0.31%)          let bit = self.0.lowest_set_bit()?;
        .                   self.0 = self.0.remove_lowest_bit();
        .                   Some(bit)
        .               }
        .           }

   45,716 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 79 ----------------------------------------
        .           /// The reason why we incurred this obligation; used for error reporting.
        .           ///
        .           /// Non-misc `ObligationCauseCode`s are stored on the heap. This gives the
        .           /// best trade-off between keeping the type small (which makes copies cheaper)
        .           /// while not doing too many heap allocations.
        .           ///
        .           /// We do not want to intern this as there are a lot of obligation causes which
        .           /// only live for a short period of time.
  247,181 ( 0.05%)  #[derive(Clone, Debug, PartialEq, Eq, Lift)]
        .           pub struct ObligationCause<'tcx> {
   51,450 ( 0.01%)      pub span: Span,
        .           
        .               /// The ID of the fn body that triggered this obligation. This is
        .               /// used for region obligations to determine the precise
        .               /// environment in which the region obligation should be evaluated
        .               /// (in particular, closures can add new assumptions). See the
        .               /// field `region_obligations` of the `FulfillmentContext` for more
        .               /// information.
1,269,435 ( 0.25%)      pub body_id: hir::HirId,
        .           
        .               /// `None` for `MISC_OBLIGATION_CAUSE_CODE` (a common case, occurs ~60% of
        .               /// the time). `Some` otherwise.
  396,483 ( 0.08%)      code: Option<Lrc<ObligationCauseCode<'tcx>>>,
        .           }
        .           
        .           // This custom hash function speeds up hashing for `Obligation` deduplication
        .           // greatly by skipping the `code` field, which can be large and complex. That
        .           // shouldn't affect hash quality much since there are several other fields in
        .           // `Obligation` which should be unique enough, especially the predicate itself
        .           // which is hashed as an interned pointer. See #90996.
        .           impl Hash for ObligationCause<'_> {
-- line 109 ----------------------------------------
-- line 117 ----------------------------------------
        .           
        .           impl<'tcx> ObligationCause<'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   span: Span,
        .                   body_id: hir::HirId,
        .                   code: ObligationCauseCode<'tcx>,
        .               ) -> ObligationCause<'tcx> {
   49,397 ( 0.01%)          ObligationCause {
        .                       span,
        .                       body_id,
   90,238 ( 0.02%)              code: if code == MISC_OBLIGATION_CAUSE_CODE { None } else { Some(Lrc::new(code)) },
        .                   }
    1,724 ( 0.00%)      }
        .           
    1,555 ( 0.00%)      pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {
        .                   ObligationCause::new(span, body_id, MiscObligation)
    1,555 ( 0.00%)      }
        .           
        .               #[inline(always)]
        .               pub fn dummy() -> ObligationCause<'tcx> {
   12,866 ( 0.00%)          ObligationCause { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: None }
        .               }
        .           
       56 ( 0.00%)      pub fn dummy_with_span(span: Span) -> ObligationCause<'tcx> {
      168 ( 0.00%)          ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: None }
       56 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub fn make_mut_code(&mut self) -> &mut ObligationCauseCode<'tcx> {
        .                   Lrc::make_mut(self.code.get_or_insert_with(|| Lrc::new(MISC_OBLIGATION_CAUSE_CODE)))
       81 ( 0.00%)      }
        .           
        .               pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {
    9,984 ( 0.00%)          match *self.code() {
        .                       ObligationCauseCode::CompareImplMethodObligation { .. }
        .                       | ObligationCauseCode::MainFunctionType
        .                       | ObligationCauseCode::StartFunctionType => {
        .                           tcx.sess.source_map().guess_head_span(self.span)
        .                       }
        .                       ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {
        .                           arm_span,
        .                           ..
        .                       }) => arm_span,
    1,248 ( 0.00%)              _ => self.span,
        .                   }
    1,248 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn code(&self) -> &ObligationCauseCode<'tcx> {
        .                   self.code.as_deref().unwrap_or(&MISC_OBLIGATION_CAUSE_CODE)
        .               }
        .           
    5,325 ( 0.00%)      pub fn clone_code(&self) -> Lrc<ObligationCauseCode<'tcx>> {
   15,975 ( 0.00%)          match &self.code {
        .                       Some(code) => code.clone(),
        .                       None => Lrc::new(MISC_OBLIGATION_CAUSE_CODE),
        .                   }
   10,650 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
        .           pub struct UnifyReceiverContext<'tcx> {
        .               pub assoc_item: ty::AssocItem,
        .               pub param_env: ty::ParamEnv<'tcx>,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
  821,391 ( 0.16%)  #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
        .           pub enum ObligationCauseCode<'tcx> {
        .               /// Not well classified or should be obvious from the span.
        .               MiscObligation,
        .           
        .               /// A slice or array is WF only if `T: Sized`.
        .               SliceOrArrayElem,
        .           
        .               /// A tuple is WF only if its middle elements are `Sized`.
-- line 192 ----------------------------------------
-- line 250 ----------------------------------------
        .               },
        .           
        .               /// Constant expressions must be sized.
        .               ConstSized,
        .           
        .               /// `static` items must have `Sync` type.
        .               SharedStatic,
        .           
       40 ( 0.00%)      BuiltinDerivedObligation(DerivedObligationCause<'tcx>),
        .           
   21,232 ( 0.00%)      ImplDerivedObligation(DerivedObligationCause<'tcx>),
        .           
        .               DerivedObligation(DerivedObligationCause<'tcx>),
        .           
        .               FunctionArgumentObligation {
        .                   /// The node of the relevant argument in the function call.
        .                   arg_hir_id: hir::HirId,
        .                   /// The node of the function call.
        .                   call_hir_id: hir::HirId,
-- line 268 ----------------------------------------
-- line 382 ----------------------------------------
        .                   /// Parameters are indexed from 0, with the return type
        .                   /// being the last 'parameter'
        .                   param_idx: u16,
        .               },
        .           }
        .           
        .           impl ObligationCauseCode<'_> {
        .               // Return the base obligation, ignoring derived obligations.
       24 ( 0.00%)      pub fn peel_derives(&self) -> &Self {
        .                   let mut base_cause = self;
       32 ( 0.00%)          while let BuiltinDerivedObligation(DerivedObligationCause { parent_code, .. })
        .                   | ImplDerivedObligation(DerivedObligationCause { parent_code, .. })
        .                   | DerivedObligation(DerivedObligationCause { parent_code, .. })
        .                   | FunctionArgumentObligation { parent_code, .. } = base_cause
        .                   {
        .                       base_cause = &parent_code;
        .                   }
        .                   base_cause
        8 ( 0.00%)      }
        .           }
        .           
        .           // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(ObligationCauseCode<'_>, 48);
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
        .           pub enum StatementAsExpression {
-- line 408 ----------------------------------------
-- line 433 ----------------------------------------
        .           pub struct IfExpressionCause {
        .               pub then: Span,
        .               pub else_sp: Span,
        .               pub outer: Option<Span>,
        .               pub semicolon: Option<(Span, StatementAsExpression)>,
        .               pub opt_suggest_box_span: Option<Span>,
        .           }
        .           
   60,626 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]
        .           pub struct DerivedObligationCause<'tcx> {
        .               /// The trait predicate of the parent obligation that led to the
        .               /// current obligation. Note that only trait obligations lead to
        .               /// derived obligations, so we just store the trait predicate here
        .               /// directly.
        .               pub parent_trait_pred: ty::PolyTraitPredicate<'tcx>,
        .           
        .               /// The parent trait had this cause.
        .               pub parent_code: Lrc<ObligationCauseCode<'tcx>>,
        .           }
        .           
    2,129 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable, Lift)]
        .           pub enum SelectionError<'tcx> {
        .               /// The trait is not implemented.
        .               Unimplemented,
        .               /// After a closure impl has selected, its "outputs" were evaluated
        .               /// (which for closures includes the "input" type params) and they
        .               /// didn't resolve. See `confirm_poly_trait_refs` for more.
        .               OutputTypeParameterMismatch(
        .                   ty::PolyTraitRef<'tcx>,
-- line 461 ----------------------------------------
-- line 468 ----------------------------------------
        .               NotConstEvaluatable(NotConstEvaluatable),
        .               /// Exceeded the recursion depth during type projection.
        .               Overflow,
        .               /// Signaling that an error has already been emitted, to avoid
        .               /// multiple errors being shown.
        .               ErrorReporting,
        .               /// Multiple applicable `impl`s where found. The `DefId`s correspond to
        .               /// all the `impl`s' Items.
      121 ( 0.00%)      Ambiguous(Vec<DefId>),
        .           }
        .           
        .           /// When performing resolution, it is typically the case that there
        .           /// can be one of three outcomes:
        .           ///
        .           /// - `Ok(Some(r))`: success occurred with result `r`
        .           /// - `Ok(None)`: could not definitely determine anything, usually due
        .           ///   to inconclusive type inference.
-- line 484 ----------------------------------------
-- line 514 ----------------------------------------
        .           ///     // Case C: A mix of cases A and B.
        .           ///     mixed.clone();    // ImplSource(Impl_1, [ImplSource::Param])
        .           /// }
        .           /// ```
        .           ///
        .           /// ### The type parameter `N`
        .           ///
        .           /// See explanation on `ImplSourceUserDefinedData`.
      330 ( 0.00%)  #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub enum ImplSource<'tcx, N> {
        .               /// ImplSource identifying a particular impl.
        .               UserDefined(ImplSourceUserDefinedData<'tcx, N>),
        .           
        .               /// ImplSource for auto trait implementations.
        .               /// This carries the information and nested obligations with regards
        .               /// to an auto implementation for a trait `Trait`. The nested obligations
        .               /// ensure the trait implementation holds for all the constituent types.
-- line 530 ----------------------------------------
-- line 565 ----------------------------------------
        .               /// ImplSource for a trait alias.
        .               TraitAlias(ImplSourceTraitAliasData<'tcx, N>),
        .           
        .               /// ImplSource for a `const Drop` implementation.
        .               ConstDrop(ImplSourceConstDropData<N>),
        .           }
        .           
        .           impl<'tcx, N> ImplSource<'tcx, N> {
    8,152 ( 0.00%)      pub fn nested_obligations(self) -> Vec<N> {
   20,380 ( 0.00%)          match self {
        .                       ImplSource::UserDefined(i) => i.nested,
        .                       ImplSource::Param(n, _) => n,
        .                       ImplSource::Builtin(i) => i.nested,
        .                       ImplSource::AutoImpl(d) => d.nested,
        .                       ImplSource::Closure(c) => c.nested,
        .                       ImplSource::Generator(c) => c.nested,
        .                       ImplSource::Object(d) => d.nested,
        .                       ImplSource::FnPointer(d) => d.nested,
        .                       ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)
        .                       | ImplSource::Pointee(ImplSourcePointeeData) => Vec::new(),
        .                       ImplSource::TraitAlias(d) => d.nested,
        .                       ImplSource::TraitUpcasting(d) => d.nested,
        .                       ImplSource::ConstDrop(i) => i.nested,
        .                   }
    8,152 ( 0.00%)      }
        .           
        .               pub fn borrow_nested_obligations(&self) -> &[N] {
       28 ( 0.00%)          match &self {
        .                       ImplSource::UserDefined(i) => &i.nested[..],
        .                       ImplSource::Param(n, _) => &n,
        .                       ImplSource::Builtin(i) => &i.nested,
        .                       ImplSource::AutoImpl(d) => &d.nested,
        .                       ImplSource::Closure(c) => &c.nested,
        .                       ImplSource::Generator(c) => &c.nested,
        .                       ImplSource::Object(d) => &d.nested,
        .                       ImplSource::FnPointer(d) => &d.nested,
        .                       ImplSource::DiscriminantKind(ImplSourceDiscriminantKindData)
        .                       | ImplSource::Pointee(ImplSourcePointeeData) => &[],
        .                       ImplSource::TraitAlias(d) => &d.nested,
        .                       ImplSource::TraitUpcasting(d) => &d.nested,
        .                       ImplSource::ConstDrop(i) => &i.nested,
        .                   }
        4 ( 0.00%)      }
        .           
      170 ( 0.00%)      pub fn map<M, F>(self, f: F) -> ImplSource<'tcx, M>
        .               where
        .                   F: FnMut(N) -> M,
        .               {
       85 ( 0.00%)          match self {
      182 ( 0.00%)              ImplSource::UserDefined(i) => ImplSource::UserDefined(ImplSourceUserDefinedData {
        .                           impl_def_id: i.impl_def_id,
        .                           substs: i.substs,
        .                           nested: i.nested.into_iter().map(f).collect(),
        .                       }),
       28 ( 0.00%)              ImplSource::Param(n, ct) => ImplSource::Param(n.into_iter().map(f).collect(), ct),
        .                       ImplSource::Builtin(i) => ImplSource::Builtin(ImplSourceBuiltinData {
        .                           nested: i.nested.into_iter().map(f).collect(),
        .                       }),
        .                       ImplSource::Object(o) => ImplSource::Object(ImplSourceObjectData {
        .                           upcast_trait_ref: o.upcast_trait_ref,
        .                           vtable_base: o.vtable_base,
        .                           nested: o.nested.into_iter().map(f).collect(),
        .                       }),
-- line 627 ----------------------------------------
-- line 660 ----------------------------------------
        .                               vtable_vptr_slot: d.vtable_vptr_slot,
        .                               nested: d.nested.into_iter().map(f).collect(),
        .                           })
        .                       }
        .                       ImplSource::ConstDrop(i) => ImplSource::ConstDrop(ImplSourceConstDropData {
        .                           nested: i.nested.into_iter().map(f).collect(),
        .                       }),
        .                   }
      153 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies a particular impl in the source, along with a set of
        .           /// substitutions from the impl's type/lifetime parameters. The
        .           /// `nested` vector corresponds to the nested obligations attached to
        .           /// the impl's type parameters.
        .           ///
        .           /// The type parameter `N` indicates the type used for "nested
        .           /// obligations" that are required by the impl. During type-check, this
        .           /// is `Obligation`, as one might expect. During codegen, however, this
        .           /// is `()`, because codegen only requires a shallow resolution of an
        .           /// impl, and nested obligations are satisfied later.
       88 ( 0.00%)  #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct ImplSourceUserDefinedData<'tcx, N> {
        4 ( 0.00%)      pub impl_def_id: DefId,
        4 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .               pub nested: Vec<N>,
        .           }
        .           
        .           #[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct ImplSourceGeneratorData<'tcx, N> {
        .               pub generator_def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .               /// Nested obligations. This can be non-empty if the generator
-- line 692 ----------------------------------------

1,222,438 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/traits/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/drain_filter.rs
--------------------------------------------------------------------------------
Ir               

-- line 58 ----------------------------------------
      .           
      .           #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
      .           impl<T, F, A: Allocator> Iterator for DrainFilter<'_, T, F, A>
      .           where
      .               F: FnMut(&mut T) -> bool,
      .           {
      .               type Item = T;
      .           
    868 ( 0.00%)      fn next(&mut self) -> Option<T> {
      .                   unsafe {
431,544 ( 0.09%)              while self.idx < self.old_len {
      .                           let i = self.idx;
      .                           let v = slice::from_raw_parts_mut(self.vec.as_mut_ptr(), self.old_len);
 95,925 ( 0.02%)                  self.panic_flag = true;
    592 ( 0.00%)                  let drained = (self.pred)(&mut v[i]);
 95,925 ( 0.02%)                  self.panic_flag = false;
      .                           // Update the index *after* the predicate is called. If the index
      .                           // is updated prior and the predicate panics, the element at this
      .                           // index would be leaked.
156,968 ( 0.03%)                  self.idx += 1;
192,971 ( 0.04%)                  if drained {
125,112 ( 0.03%)                      self.del += 1;
      .                               return Some(ptr::read(&v[i]));
 23,024 ( 0.00%)                  } else if self.del > 0 {
      .                               let del = self.del;
      .                               let src: *const T = &v[i];
245,401 ( 0.05%)                      let dst: *mut T = &mut v[i - del];
      .                               ptr::copy_nonoverlapping(src, dst, 1);
      .                           }
      .                       }
      .                       None
      .                   }
    868 ( 0.00%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
     52 ( 0.00%)          (0, Some(self.old_len - self.idx))
      .               }
      .           }
      .           
      .           #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
      .           impl<T, F, A: Allocator> Drop for DrainFilter<'_, T, F, A>
      .           where
      .               F: FnMut(&mut T) -> bool,
      .           {
 21,094 ( 0.00%)      fn drop(&mut self) {
      .                   struct BackshiftOnDrop<'a, 'b, T, F, A: Allocator>
      .                   where
      .                       F: FnMut(&mut T) -> bool,
      .                   {
      .                       drain: &'b mut DrainFilter<'a, T, F, A>,
      .                   }
      .           
      .                   impl<'a, 'b, T, F, A: Allocator> Drop for BackshiftOnDrop<'a, 'b, T, F, A>
      .                   where
      .                       F: FnMut(&mut T) -> bool,
      .                   {
      .                       fn drop(&mut self) {
      .                           unsafe {
 11,632 ( 0.00%)                      if self.drain.idx < self.drain.old_len && self.drain.del > 0 {
      .                                   // This is a pretty messed up state, and there isn't really an
      .                                   // obviously right thing to do. We don't want to keep trying
      .                                   // to execute `pred`, so we just backshift all the unprocessed
      .                                   // elements and tell the vec that they still exist. The backshift
      .                                   // is required to prevent a double-drop of the last successfully
      .                                   // drained item prior to a panic in the predicate.
      .                                   let ptr = self.drain.vec.as_mut_ptr();
      .                                   let src = ptr.add(self.drain.idx);
      .                                   let dst = src.sub(self.drain.del);
      .                                   let tail_len = self.drain.old_len - self.drain.idx;
      .                                   src.copy_to(dst, tail_len);
      .                               }
  8,724 ( 0.00%)                      self.drain.vec.set_len(self.drain.old_len - self.drain.del);
      .                           }
      .                       }
      .                   }
      .           
  2,908 ( 0.00%)          let backshift = BackshiftOnDrop { drain: self };
      .           
      .                   // Attempt to consume any remaining elements if the filter predicate
      .                   // has not yet panicked. We'll backshift any remaining elements
      .                   // whether we've already panicked or if the consumption here panics.
  6,684 ( 0.00%)          if !backshift.drain.panic_flag {
      .                       backshift.drain.for_each(drop);
      .                   }
 21,094 ( 0.00%)      }
      .           }

 92,805 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/drain_filter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs
--------------------------------------------------------------------------------
Ir                 

-- line 685 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<(T, U), F::Error> {
      238 ( 0.00%)          Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   self.0.visit_with(visitor)?;
        6 ( 0.00%)          self.1.visit_with(visitor)
        .               }
        .           }
        .           
        .           impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>
        .               for (A, B, C)
        .           {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
-- line 706 ----------------------------------------
-- line 826 ----------------------------------------
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   self.try_map_id(|value| value.try_fold_with(folder))
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      268 ( 0.00%)          (**self).visit_with(visitor)
        .               }
        .           }
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
    2,009 ( 0.00%)          self.try_map_id(|t| t.try_fold_with(folder))
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
       92 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
-- line 855 ----------------------------------------
-- line 857 ----------------------------------------
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {
    2,368 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
1,031,857 ( 0.21%)          self.try_map_bound(|ty| ty.try_fold_with(folder))
    2,960 ( 0.00%)      }
        .           
        .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  242,869 ( 0.05%)          folder.try_fold_binder(self)
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      168 ( 0.00%)          self.as_ref().skip_binder().visit_with(visitor)
        .               }
        .           
        .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   visitor.visit_binder(self)
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
-- line 885 ----------------------------------------
-- line 895 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
    2,697 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {
-- line 911 ----------------------------------------
-- line 949 ----------------------------------------
        .                           }
        .                       },
        .                   })
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   use crate::ty::InstanceDef::*;
        .                   self.substs.visit_with(visitor)?;
      180 ( 0.00%)          match self.def {
        .                       Item(def) => def.visit_with(visitor),
        .                       VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {
        .                           did.visit_with(visitor)
        .                       }
        .                       FnPtrShim(did, ty) | CloneShim(did, ty) => {
        .                           did.visit_with(visitor)?;
        .                           ty.visit_with(visitor)
        .                       }
-- line 965 ----------------------------------------
-- line 976 ----------------------------------------
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
       84 ( 0.00%)          self.instance.visit_with(visitor)
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {
    2,940 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
  504,351 ( 0.10%)          let kind = match *self.kind() {
        .                       ty::RawPtr(tm) => ty::RawPtr(tm.try_fold_with(folder)?),
      343 ( 0.00%)              ty::Array(typ, sz) => ty::Array(typ.try_fold_with(folder)?, sz.try_fold_with(folder)?),
    2,180 ( 0.00%)              ty::Slice(typ) => ty::Slice(typ.try_fold_with(folder)?),
  501,216 ( 0.10%)              ty::Adt(tid, substs) => ty::Adt(tid, substs.try_fold_with(folder)?),
        .                       ty::Dynamic(trait_ty, region) => {
        .                           ty::Dynamic(trait_ty.try_fold_with(folder)?, region.try_fold_with(folder)?)
        .                       }
      366 ( 0.00%)              ty::Tuple(ts) => ty::Tuple(ts.try_fold_with(folder)?),
    1,418 ( 0.00%)              ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.try_fold_with(folder)?),
      344 ( 0.00%)              ty::FnPtr(f) => ty::FnPtr(f.try_fold_with(folder)?),
   15,088 ( 0.00%)              ty::Ref(r, ty, mutbl) => {
   24,798 ( 0.00%)                  ty::Ref(r.try_fold_with(folder)?, ty.try_fold_with(folder)?, mutbl)
        .                       }
        .                       ty::Generator(did, substs, movability) => {
        .                           ty::Generator(did, substs.try_fold_with(folder)?, movability)
        .                       }
        .                       ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),
        .                       ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),
   78,894 ( 0.02%)              ty::Projection(data) => ty::Projection(data.try_fold_with(folder)?),
        .                       ty::Opaque(did, substs) => ty::Opaque(did, substs.try_fold_with(folder)?),
        .           
        .                       ty::Bool
        .                       | ty::Char
        .                       | ty::Str
        .                       | ty::Int(_)
        .                       | ty::Uint(_)
        .                       | ty::Float(_)
-- line 1020 ----------------------------------------
-- line 1022 ----------------------------------------
        .                       | ty::Infer(_)
        .                       | ty::Param(..)
        .                       | ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Never
        .                       | ty::Foreign(..) => return Ok(self),
        .                   };
        .           
  328,574 ( 0.07%)          Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })
    4,284 ( 0.00%)      }
        .           
        .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
    8,890 ( 0.00%)          folder.try_fold_ty(self)
        .               }
        .           
   37,066 ( 0.01%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   35,591 ( 0.01%)          match self.kind() {
        .                       ty::RawPtr(ref tm) => tm.visit_with(visitor),
       15 ( 0.00%)              ty::Array(typ, sz) => {
       30 ( 0.00%)                  typ.visit_with(visitor)?;
      135 ( 0.00%)                  sz.visit_with(visitor)
        .                       }
        .                       ty::Slice(typ) => typ.visit_with(visitor),
        .                       ty::Adt(_, substs) => substs.visit_with(visitor),
        .                       ty::Dynamic(ref trait_ty, ref reg) => {
        .                           trait_ty.visit_with(visitor)?;
        .                           reg.visit_with(visitor)
        .                       }
        .                       ty::Tuple(ts) => ts.visit_with(visitor),
        .                       ty::FnDef(_, substs) => substs.visit_with(visitor),
        .                       ty::FnPtr(ref f) => f.visit_with(visitor),
        .                       ty::Ref(r, ty, _) => {
      482 ( 0.00%)                  r.visit_with(visitor)?;
        .                           ty.visit_with(visitor)
        .                       }
        .                       ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),
        .                       ty::GeneratorWitness(ref types) => types.visit_with(visitor),
        .                       ty::Closure(_did, ref substs) => substs.visit_with(visitor),
       14 ( 0.00%)              ty::Projection(ref data) => data.visit_with(visitor),
        .                       ty::Opaque(_, ref substs) => substs.visit_with(visitor),
        .           
        .                       ty::Bool
        .                       | ty::Char
        .                       | ty::Str
        .                       | ty::Int(_)
        .                       | ty::Uint(_)
        .                       | ty::Float(_)
-- line 1068 ----------------------------------------
-- line 1069 ----------------------------------------
        .                       | ty::Error(_)
        .                       | ty::Infer(_)
        .                       | ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Param(..)
        .                       | ty::Never
        .                       | ty::Foreign(..) => ControlFlow::CONTINUE,
        .                   }
   34,278 ( 0.01%)      }
        .           
        .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  113,687 ( 0.02%)          visitor.visit_ty(self)
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   _folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   Ok(self)
        .               }
        .           
        .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
      589 ( 0.00%)          folder.try_fold_region(self)
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   ControlFlow::CONTINUE
        .               }
        .           
        .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    1,267 ( 0.00%)          visitor.visit_region(*self)
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {
    3,552 ( 0.00%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
        .                   folder.try_fold_predicate(self)
    2,960 ( 0.00%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
  314,994 ( 0.06%)          let new = self.inner.kind.try_fold_with(folder)?;
1,326,511 ( 0.27%)          Ok(folder.tcx().reuse_or_mk_predicate(self, new))
    1,776 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   self.inner.kind.visit_with(visitor)
        .               }
        .           
        .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    7,163 ( 0.00%)          visitor.visit_predicate(*self)
        .               }
        .           
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   22,613 ( 0.00%)          self.inner.outer_exclusive_binder > binder
   22,613 ( 0.00%)      }
        .           
        .               fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {
   50,880 ( 0.01%)          self.inner.flags.intersects(flags)
   50,880 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
    8,959 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
       28 ( 0.00%)          self.iter().try_for_each(|p| p.visit_with(visitor))
        .               }
        .           }
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
-- line 1152 ----------------------------------------
-- line 1154 ----------------------------------------
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        .                   self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {
       36 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
      284 ( 0.00%)          let ty = self.ty.try_fold_with(folder)?;
    3,325 ( 0.00%)          let val = self.val.try_fold_with(folder)?;
    1,126 ( 0.00%)          if ty != self.ty || val != self.val {
       91 ( 0.00%)              Ok(folder.tcx().mk_const(ty::Const { ty, val }))
        .                   } else {
        .                       Ok(self)
        .                   }
       36 ( 0.00%)      }
        .           
        .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
      118 ( 0.00%)          folder.try_fold_const(self)
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        3 ( 0.00%)          self.ty.visit_with(visitor)?;
        .                   self.val.visit_with(visitor)
        .               }
        .           
       90 ( 0.00%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
       18 ( 0.00%)          visitor.visit_const(self)
      105 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
    2,038 ( 0.00%)          Ok(match self {
        .                       ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),
        .                       ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),
       34 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.try_fold_with(folder)?),
        .                       ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Bound(..)
        .                       | ty::ConstKind::Placeholder(..)
      516 ( 0.00%)              | ty::ConstKind::Error(_) => self,
        .                   })
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        6 ( 0.00%)          match *self {
        .                       ty::ConstKind::Infer(ic) => ic.visit_with(visitor),
        .                       ty::ConstKind::Param(p) => p.visit_with(visitor),
        .                       ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),
        .                       ty::ConstKind::Value(_)
        .                       | ty::ConstKind::Bound(..)
        .                       | ty::ConstKind::Placeholder(_)
        .                       | ty::ConstKind::Error(_) => ControlFlow::CONTINUE,
        .                   }
-- line 1214 ----------------------------------------
-- line 1230 ----------------------------------------
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   Ok(ty::Unevaluated {
        .                       def: self.def,
       84 ( 0.00%)              substs: self.substs.try_fold_with(folder)?,
        .                       promoted: self.promoted,
        .                   })
        .               }
        .           
        .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
       15 ( 0.00%)          visitor.visit_unevaluated_const(*self)
        .               }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
        6 ( 0.00%)          self.substs.visit_with(visitor)
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
-- line 1256 ----------------------------------------

  136,226 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
  879,384 ( 0.18%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
  549,615 ( 0.11%)              .intern(kind, |kind| {
   13,280 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   26,560 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
  989,307 ( 0.20%)      }
        .           
        .               #[inline(never)]
  403,600 ( 0.08%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  353,150 ( 0.07%)              .intern(kind, |kind| {
   28,560 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  454,050 ( 0.09%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
    6,520 ( 0.00%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
    4,601 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
      922 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      922 ( 0.00%)          self.data.get(&id.local_id)
    3,686 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
       42 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
       28 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
      246 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
    2,911 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
      246 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
    1,206 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
      804 ( 0.00%)          match *qpath {
    2,064 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
      348 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
    2,010 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
       70 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
       10 ( 0.00%)      }
        .           
      179 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
      373 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
      358 ( 0.00%)      }
        .           
      544 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
      544 ( 0.00%)      }
        .           
      467 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
      467 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
      467 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
       49 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
        7 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
       96 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
       48 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
      190 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
       95 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
        4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
        2 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
      928 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
      464 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
    1,526 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
      763 ( 0.00%)      }
        .           
    6,378 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
    1,063 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
    5,315 ( 0.00%)      }
        .           
    1,366 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
    1,366 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
    2,732 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
      306 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
      153 ( 0.00%)      }
        .           
      533 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
      533 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
    1,066 ( 0.00%)      }
        .           
      316 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
      316 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
      632 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
       96 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    1,375 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
    1,207 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
      600 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
      300 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    1,096 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
      548 ( 0.00%)      }
        .           
      554 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
    1,108 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
    1,108 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
       45 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
        9 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
       32 ( 0.00%)      }
        .           
       75 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       15 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       40 ( 0.00%)      }
        .           
       60 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
      120 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
      176 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
      120 ( 0.00%)      }
        .           
      315 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
      420 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
      251 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
       73 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
      140 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
       70 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      222 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
      111 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
       72 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
       36 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
       40 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
       50 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
       20 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
       10 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
       48 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
       24 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
       28 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
       14 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
       20 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
       10 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       21 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        7 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       14 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
       10 ( 0.00%)          &self.coercion_casts
       10 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 823 ----------------------------------------
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
        .           #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
        1 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
       18 ( 0.00%)      pub fn is_identity(&self) -> bool {
       36 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
       18 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
       54 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
       26 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
        .                                   GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
       36 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
        6 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
      172 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
      460 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
      184 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
      368 ( 0.00%)      }
        .           
       30 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
       10 ( 0.00%)          self.arena.alloc(Steal::new(thir))
       40 ( 0.00%)      }
        .           
      200 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
       40 ( 0.00%)          self.arena.alloc(Steal::new(mir))
      280 ( 0.00%)      }
        .           
       40 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
       10 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
       50 ( 0.00%)      }
        .           
      243 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
      432 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      108 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
      448 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
      224 ( 0.00%)          let attrs = self.get_attrs(def_id);
      952 ( 0.00%)          let get = |name| {
      224 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
        .                       if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
        .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
        .                       ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
    1,120 ( 0.00%)          };
      336 ( 0.00%)          (
      336 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
      168 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
      448 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
      364 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       52 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
      409 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
      416 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  311,514 ( 0.06%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  400,518 ( 0.08%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
        7 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
        8 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
      518 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
      592 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    2,520 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
    2,880 ( 0.00%)      }
        .           
      336 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
      432 ( 0.00%)      }
        .           
   16,835 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
   19,240 ( 0.00%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
      219 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
      176 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      130 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
       68 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   21,322 ( 0.00%)          &*self.untracked_resolutions.cstore
   10,661 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        5 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
       23 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
       20 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
       30 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
       10 ( 0.00%)          self.sess.opts.borrowck_mode
       40 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
        6 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
        6 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
      121 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
       88 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
      198 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
       99 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
       48 ( 0.00%)      }
        .           
  220,745 ( 0.04%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  252,280 ( 0.05%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
       56 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
       64 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
       24 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
        .           macro_rules! nop_list_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {
        .                       type Lifted = &'tcx List<$lifted>;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
        6 ( 0.00%)                  if self.is_empty() {
        .                               return Some(List::empty());
        .                           }
       48 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1648 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   16,923 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
   68,315 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
       12 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
   33,643 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   33,540 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  104,583 ( 0.02%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   21,516 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   46,270 ( 0.01%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    7,164 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  137,659 ( 0.03%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   15,368 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
    5,479 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
    6,231 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
   55,333 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
   28,255 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    1,563 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
   62,091 ( 0.01%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
1,455,372 ( 0.29%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
1,309,095 ( 0.26%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
      468 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
      351 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       78 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
      351 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      298 ( 0.00%)              let trait_did = stack.pop()?;
      149 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
      429 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
      254 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
    3,904 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
  658,681 ( 0.13%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
  552,843 ( 0.11%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  882,736 ( 0.18%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   62,125 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  882,736 ( 0.18%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      720 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      720 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      810 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      810 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
-- line 2248 ----------------------------------------
-- line 2340 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
       48 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
       72 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
        .                   iter.intern_with(|ts| {
        8 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
       90 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
        2 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
        8 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      360 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    1,015 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
      725 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
      290 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,015 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
       23 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
       23 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
       46 ( 0.00%)      }
        .           
        6 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       18 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       12 ( 0.00%)      }
        .           
        5 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        5 ( 0.00%)          self.mk_place_elem(
        .                       place,
       10 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
       10 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
      306 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
      340 ( 0.00%)      }
        .           
       21 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        3 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       15 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
       12 ( 0.00%)          self._intern_poly_existential_predicates(eps)
       24 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    2,403 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
      922 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    3,032 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
    1,789 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
       58 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  293,165 ( 0.06%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   55,550 ( 0.01%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
      312 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
      152 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
    2,522 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    2,240 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    2,428 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    4,464 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
       43 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
       11 ( 0.00%)              c_variadic,
       14 ( 0.00%)              unsafety,
       16 ( 0.00%)              abi,
        .                   })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        9 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
        8 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
      372 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  239,997 ( 0.05%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       36 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
      541 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
    1,082 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   16,105 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
    3,850 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
    3,850 ( 0.00%)          let hir = self.hir();
        .                   loop {
    6,633 ( 0.00%)              if id == bound {
        .                           return bound;
        .                       }
        .           
    8,305 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
    4,983 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    5,500 ( 0.00%)      }
        .           
      464 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
    1,388 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
       64 ( 0.00%)              let next = self.hir().get_parent_node(id);
      192 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
      464 ( 0.00%)      }
        .           
        .               pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        8 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
        2 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
        .               }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
      350 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      100 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      100 ( 0.00%)          Some(&*candidates)
      400 ( 0.00%)      }
        .           
      287 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
      369 ( 0.00%)      }
        .           
        .               pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
        .               }
        .           
      665 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
      855 ( 0.00%)      }
        .           
    1,278 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    1,278 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
       30 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        3 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        2 ( 0.00%)              match self.lookup_const_stability(def_id) {
        4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
       27 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   30,040 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,041,398 ( 0.21%)          E::intern_with(self, f)
   30,960 ( 0.01%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
   45,231 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
   58,285 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        .                           assert!(iter.next().is_none());
    3,320 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
        3 ( 0.00%)                  assert!(iter.next().is_none());
    8,988 ( 0.00%)                  f(&[t0, t1])
        .                       }
       32 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
   38,740 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
      710 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
        .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
      568 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  492,912 ( 0.10%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  366,324 ( 0.07%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
    3,620 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        4 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        4 ( 0.00%)                  let t1 = iter.next().unwrap()?;
        6 ( 0.00%)                  assert!(iter.next().is_none());
   50,826 ( 0.01%)                  f(&[t0, t1])
        .                       }
    5,271 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  554,531 ( 0.11%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   33,643 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
      368 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

  644,858 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
385,993 ( 0.08%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,187 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 62,105 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
614,492 ( 0.12%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
123,230 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
123,230 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
134,342 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 22,880 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  1,781 ( 0.00%)          self.hash = hash.hash;
  1,187 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     19 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     59 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
126,916 ( 0.03%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 176 ----------------------------------------
        .               }
        .               fn sess(self) -> Option<&'tcx Session> {
        .                   None
        .               }
        .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
        .                   None
        .               }
        .           
    4,143 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    1,381 ( 0.00%)          let tcx = self.tcx();
  653,931 ( 0.13%)          DecodeContext {
   65,039 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    1,381 ( 0.00%)              cdata: self.cdata(),
        .                       blob: self.blob(),
    7,068 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
        .                       tcx,
        .                       last_source_file_index: 0,
        .                       lazy_state: LazyState::NoNode,
        .                       alloc_decoding_session: self
        .                           .cdata()
   44,618 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
        .                   }
    4,143 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
        .               #[inline]
        .               fn blob(self) -> &'a MetadataBlob {
        .                   self
        .               }
        .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
        .               }
        .               #[inline]
        .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
        .                   Some(self.1)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
   21,529 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
   16,214 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
  180,611 ( 0.04%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  127,669 ( 0.03%)          T::decode(&mut dcx)
   27,565 ( 0.01%)      }
        .           }
        .           
        .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
        .               fn decode<M: Metadata<'a, 'tcx>>(
        .                   self,
        .                   metadata: M,
        .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
       56 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
       16 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
    4,875 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
        .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
        .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
        .                   self.cdata.unwrap()
        .               }
        .           
        .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
  118,737 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
        .               }
        .           
   25,162 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
        .                   let distance = self.read_usize();
   23,720 ( 0.00%)          let position = match self.lazy_state {
        .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
    3,550 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
    7,100 ( 0.00%)                  assert!(distance <= start);
        .                           start - distance
        .                       }
    7,842 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
        .                   };
   12,328 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
        .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
   25,162 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
        .                   self.opaque.read_raw_bytes(len)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
        .           
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   self.tcx.expect("missing TyCtxt in DecodeContext")
        .               }
        .           
        .               #[inline]
        .               fn peek_byte(&self) -> u8 {
   53,035 ( 0.01%)          self.opaque.data[self.opaque.position()]
        .               }
        .           
        .               #[inline]
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
        .           
   38,402 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
        .               {
    5,486 ( 0.00%)          let tcx = self.tcx();
        .           
    5,486 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
        .           
   14,684 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
        .                       return ty;
        .                   }
        .           
    1,815 ( 0.00%)          let ty = or_insert_with(self);
        .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
        .                   ty
   49,374 ( 0.01%)      }
        .           
        .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
        .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
        .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
        .                   let r = f(self);
   10,625 ( 0.00%)          self.opaque = old_opaque;
    2,125 ( 0.00%)          self.lazy_state = old_state;
        .                   r
        .               }
        .           
        .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
        .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
        .                       alloc_decoding_session.decode_alloc_id(self)
        .                   } else {
        .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
   69,513 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
        .                   d.map_encoded_cnum_to_current(cnum)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
       60 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
  143,937 ( 0.03%)          DefIndex::from_u32(d.read_u32())
      120 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
        .                   ExpnIndex::from_u32(d.read_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
  236,344 ( 0.05%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
   59,086 ( 0.01%)          let cdata = decoder.cdata();
   59,086 ( 0.01%)          let sess = decoder.sess.unwrap();
  118,172 ( 0.02%)          let cname = cdata.root.name;
        .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
        .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    2,968 ( 0.00%)              cdata
        .                           .root
        .                           .syntax_contexts
        .                           .get(cdata, id)
        .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
        .                           .decode((cdata, sess))
        .                   })
  295,430 ( 0.06%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
   12,509 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    1,787 ( 0.00%)          let local_cdata = decoder.cdata();
    1,787 ( 0.00%)          let sess = decoder.sess.unwrap();
        .           
        .                   let cnum = CrateNum::decode(decoder);
        .                   let index = u32::decode(decoder);
        .           
        .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
        .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
        .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
        .                       // are stored in the owning crate, to avoid duplication.
        .                       debug_assert_ne!(cnum, LOCAL_CRATE);
      754 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
        .                           local_cdata
        .                       } else {
        .                           local_cdata.cstore.get_crate_data(cnum)
        .                       };
    3,770 ( 0.00%)              let expn_data = crate_data
        .                           .root
        .                           .expn_data
        .                           .get(crate_data, index)
        .                           .unwrap()
        .                           .decode((crate_data, sess));
    3,770 ( 0.00%)              let expn_hash = crate_data
        .                           .root
        .                           .expn_hashes
        .                           .get(crate_data, index)
        .                           .unwrap()
        .                           .decode((crate_data, sess));
    7,540 ( 0.00%)              (expn_data, expn_hash)
        .                   });
        .                   expn_id
   14,296 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
  454,880 ( 0.09%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
   56,860 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
        .                   let tag = u8::decode(decoder);
        .           
  113,720 ( 0.02%)          if tag == TAG_PARTIAL_SPAN {
        .                       return DUMMY_SP.with_ctxt(ctxt);
        .                   }
        .           
        .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
        .           
        .                   let lo = BytePos::decode(decoder);
        .                   let len = BytePos::decode(decoder);
        .                   let hi = lo + len;
        .           
  170,493 ( 0.03%)          let Some(sess) = decoder.sess else {
        .                       bug!("Cannot decode Span without Session.")
        .                   };
        .           
        .                   // There are two possibilities here:
        .                   // 1. This is a 'local span', which is located inside a `SourceFile`
        .                   // that came from this crate. In this case, we use the source map data
        .                   // encoded in this crate. This branch should be taken nearly all of the time.
        .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
        .                   // a transitive dependency.
        .                   //
        .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
        .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
        .                   // we are writing metadata for (e.g. crate B). This allows us to
        .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
        .                   // we can call `imported_source_files` for the proper crate, and binary search
        .                   // through the returned slice using our span.
  164,486 ( 0.03%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
        .                       decoder.cdata().imported_source_files(sess)
        .                   } else {
        .                       // When we encode a proc-macro crate, all `Span`s should be encoded
        .                       // with `TAG_VALID_SPAN_LOCAL`
       58 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
        .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
        .                           // since we don't have `cnum_map` populated.
        .                           let cnum = u32::decode(decoder);
        .                           panic!(
        .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
        .                               decoder.cdata().root.name,
        .                               cnum
        .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
        .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
        .                           cnum
        .                       );
        .           
        .                       // Decoding 'foreign' spans should be rare enough that it's
        .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
        .                       // We just set it to 0, to ensure that we don't try to access something out
        .                       // of bounds for our initial 'guess'
      116 ( 0.00%)              decoder.last_source_file_index = 0;
        .           
       58 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
        .                       foreign_data.imported_source_files(sess)
        .                   };
        .           
        .                   let source_file = {
        .                       // Optimize for the case that most spans within a translated item
        .                       // originate from the same source_file.
  170,493 ( 0.03%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
        .           
  211,544 ( 0.04%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
        .                       {
        .                           last_source_file
        .                       } else {
        .                           let index = imported_source_files
        .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  101,646 ( 0.02%)                      .unwrap_or_else(|index| index - 1);
        .           
        .                           // Don't try to cache the index for foreign spans,
        .                           // as this would require a map from CrateNums to indices
   50,824 ( 0.01%)                  if tag == TAG_VALID_SPAN_LOCAL {
   50,785 ( 0.01%)                      decoder.last_source_file_index = index;
        .                           }
  101,648 ( 0.02%)                  &imported_source_files[index]
        .                       }
        .                   };
        .           
        .                   // Make sure our binary search above is correct.
        .                   debug_assert!(
        .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
        .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
        .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
        .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
        .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
        .                       hi,
        .                       source_file.original_start_pos,
        .                       source_file.original_end_pos
        .                   );
        .           
        .                   let lo =
  227,324 ( 0.05%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
        .                   let hi =
        .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
        .           
        .                   // Do not try to decode parent for foreign spans.
        .                   Span::new(lo, hi, ctxt, None)
  511,740 ( 0.10%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   ty::codec::RefDecodable::decode(d)
        .               }
        .           }
        .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
        .                   ty::codec::RefDecodable::decode(d)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
    5,939 ( 0.00%)          decoder.read_lazy_with_meta(())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   let len = decoder.read_usize();
   11,778 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   let len = decoder.read_usize();
    9,126 ( 0.00%)          decoder.read_lazy_with_meta(len)
        .               }
        .           }
        .           
        .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
        .           
        .           impl<'tcx> MetadataBlob {
        .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
        .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
        .                   self.blob().starts_with(METADATA_HEADER)
        .               }
        .           
        .               crate fn get_rustc_version(&self) -> String {
        .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
        .                       .decode(self)
        .               }
        .           
      162 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
       54 ( 0.00%)          let slice = &self.blob()[..];
        .                   let offset = METADATA_HEADER.len();
      270 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
      108 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
      216 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
      162 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
        .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
      270 ( 0.00%)      }
        .           
        .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
        .                   let root = self.get_root();
        .                   writeln!(out, "Crate info:")?;
        .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
        .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
        .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
        .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
        .                   }
        .                   write!(out, "\n")?;
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl CrateRoot<'_> {
        .               crate fn is_proc_macro_crate(&self) -> bool {
       36 ( 0.00%)          self.proc_macro_data.is_some()
        .               }
        .           
        .               crate fn name(&self) -> Symbol {
       12 ( 0.00%)          self.name
        .               }
        .           
        .               crate fn hash(&self) -> Svh {
       18 ( 0.00%)          self.hash
        .               }
        .           
        .               crate fn stable_crate_id(&self) -> StableCrateId {
       36 ( 0.00%)          self.stable_crate_id
        .               }
        .           
        .               crate fn triple(&self) -> &TargetTriple {
        .                   &self.triple
        .               }
        .           
        .               crate fn decode_crate_deps<'a>(
        .                   &self,
        .                   metadata: &'a MetadataBlob,
        .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
       36 ( 0.00%)          self.crate_deps.decode(metadata)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> CrateMetadataRef<'a> {
        .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
        .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
        .                   // with items in 'raw_proc_macros'.
        .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
        .                       .unwrap()
        .                       .macros
        .                       .decode(self)
        .                       .position(|i| i == id)
        .                       .unwrap();
        .                   &self.raw_proc_macros.unwrap()[pos]
        .               }
        .           
  151,547 ( 0.03%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
  110,586 ( 0.02%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
   68,446 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
        .                       Some(lazy_span) => lazy_span.decode((self, sess)),
        .                       None => {
        .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
        .                           // items, which are supposed to be treated like `use` items and only be encoded
        .                           // to metadata as `Export`s, return `None` because that's what all the callers
        .                           // expect in this case.
      423 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
        .                           return None;
        .                       }
        .                   };
        .                   Some(Ident::new(name, span))
  193,026 ( 0.04%)      }
        .           
       57 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
    3,201 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
      114 ( 0.00%)      }
        .           
        .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
    6,646 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
        .               }
        .           
   26,584 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
        .                   self.maybe_kind(item_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
        .                           item_id,
        .                           self.root.name,
        .                           self.cnum,
        .                       )
        .                   })
   19,938 ( 0.00%)      }
        .           
   65,961 ( 0.01%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
   40,717 ( 0.01%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
        .                       bug!(
        .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
        .                           item_id,
        .                           self.root.name,
        .                           self.cnum,
        .                       )
        .                   })
   37,692 ( 0.01%)      }
        .           
      513 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
   31,986 ( 0.01%)          self.root
        .                       .tables
        .                       .span
        .                       .get(self, index)
        .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
        .                       .decode((self, sess))
      285 ( 0.00%)      }
        .           
        .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
        .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
        .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
        .                           let helper_attrs =
        .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
        .                           (
        .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
        .                       self.get_span(id, sess),
        .                       helper_attrs,
        .                       self.root.edition,
        .                       Symbol::intern(name),
        .                       &attrs,
        .                   )
        .               }
        .           
      624 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
      192 ( 0.00%)          match self.kind(item_id) {
       48 ( 0.00%)              EntryKind::Trait(data) => {
      288 ( 0.00%)                  let data = data.decode((self, sess));
      768 ( 0.00%)                  ty::TraitDef::new(
        .                               self.local_def_id(item_id),
       96 ( 0.00%)                      data.unsafety,
       96 ( 0.00%)                      data.paren_sugar,
       96 ( 0.00%)                      data.has_auto_impl,
       96 ( 0.00%)                      data.is_marker,
       48 ( 0.00%)                      data.skip_array_during_method_dispatch,
       48 ( 0.00%)                      data.specialization_kind,
      192 ( 0.00%)                      self.def_path_hash(item_id),
       48 ( 0.00%)                      data.must_implement_one_of,
        .                           )
        .                       }
        .                       EntryKind::TraitAlias => ty::TraitDef::new(
        .                           self.local_def_id(item_id),
        .                           hir::Unsafety::Normal,
        .                           false,
        .                           false,
        .                           false,
        .                           false,
        .                           ty::trait_def::TraitSpecializationKind::None,
        .                           self.def_path_hash(item_id),
        .                           None,
        .                       ),
        .                       _ => bug!("def-index does not refer to trait or trait alias"),
        .                   }
      432 ( 0.00%)      }
        .           
      243 ( 0.00%)      fn get_variant(
        .                   self,
        .                   kind: &EntryKind,
        .                   index: DefIndex,
        .                   parent_did: DefId,
        .                   sess: &Session,
        .               ) -> ty::VariantDef {
      108 ( 0.00%)          let data = match kind {
        .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
      135 ( 0.00%)                  data.decode(self)
        .                       }
        .                       _ => bug!(),
        .                   };
        .           
      106 ( 0.00%)          let adt_kind = match kind {
        .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
        .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
        .                       EntryKind::Union(..) => ty::AdtKind::Union,
        .                       _ => bug!(),
        .                   };
        .           
        .                   let variant_did =
        .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
       54 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
        .           
      594 ( 0.00%)          ty::VariantDef::new(
        .                       self.item_ident(index, sess).name,
        .                       variant_did,
        .                       ctor_did,
      108 ( 0.00%)              data.discr,
      162 ( 0.00%)              self.root
        .                           .tables
        .                           .children
        .                           .get(self, index)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
        .                           .map(|index| ty::FieldDef {
       33 ( 0.00%)                      did: self.local_def_id(index),
       66 ( 0.00%)                      name: self.item_ident(index, sess).name,
       66 ( 0.00%)                      vis: self.get_visibility(index),
        .                           })
        .                           .collect(),
        .                       data.ctor_kind,
        .                       adt_kind,
        .                       parent_did,
        .                       false,
       27 ( 0.00%)              data.is_non_exhaustive,
        .                   )
      243 ( 0.00%)      }
        .           
      390 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
      104 ( 0.00%)          let kind = self.kind(item_id);
       52 ( 0.00%)          let did = self.local_def_id(item_id);
        .           
      130 ( 0.00%)          let (adt_kind, repr) = match kind {
        .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
        .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
        .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
        .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
        .                   };
        .           
        .                   let variants = if let ty::AdtKind::Enum = adt_kind {
        5 ( 0.00%)              self.root
        .                           .tables
        .                           .children
        .                           .get(self, item_id)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
       34 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
        .                           .collect()
        .                   } else {
      200 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
        .                   };
        .           
      369 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
      182 ( 0.00%)      }
        .           
        .               fn get_explicit_predicates(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> ty::GenericPredicates<'tcx> {
    2,855 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
        .               }
        .           
        .               fn get_inferred_outlives(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    2,855 ( 0.00%)          self.root
        .                       .tables
        .                       .inferred_outlives
        .                       .get(self, item_id)
        .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
        .                       .unwrap_or_default()
        .               }
        .           
        .               fn get_super_predicates(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> ty::GenericPredicates<'tcx> {
      145 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
        .               }
        .           
        .               fn get_explicit_item_bounds(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
       40 ( 0.00%)          self.root
        .                       .tables
        .                       .explicit_item_bounds
        .                       .get(self, item_id)
       32 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
        .                       .unwrap_or_default()
        .               }
        .           
        .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    6,502 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
        .               }
        .           
        .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    3,670 ( 0.00%)          self.root
        .                       .tables
        .                       .ty
        .                       .get(self, id)
        .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
      130 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
        .               }
        .           
        .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
        5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
        .               }
        .           
        .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
      315 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
        .               }
        .           
       18 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
   32,185 ( 0.01%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
       12 ( 0.00%)      }
        .           
        .               fn get_impl_data(self, id: DefIndex) -> ImplData {
    9,144 ( 0.00%)          match self.kind(id) {
    7,620 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    3,231 ( 0.00%)          self.get_impl_data(id).parent_impl
        .               }
        .           
        .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
      437 ( 0.00%)          self.get_impl_data(id).polarity
        .               }
        .           
        .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
       10 ( 0.00%)          self.get_impl_data(id).defaultness
        .               }
        .           
        .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
        .                   self.get_impl_data(id).constness
        .               }
        .           
        .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
    3,190 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
        .               }
        .           
        .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
        .                   self.get_impl_data(id).coerce_unsized_info
        .               }
        .           
        .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
   25,861 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
        .               }
        .           
        .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
    1,455 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
        .               }
        .           
        .               fn get_const_param_default(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   id: DefIndex,
        .               ) -> rustc_middle::ty::Const<'tcx> {
        .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
        .           
        .               /// Iterates over all the stability attributes in the given crate.
        .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
        .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
        .               }
        .           
        .               /// Iterates over the language items in the given crate.
        .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
       54 ( 0.00%)          tcx.arena.alloc_from_iter(
       36 ( 0.00%)              self.root
        .                           .lang_items
        .                           .decode(self)
      532 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
        .                   )
        .               }
        .           
        .               /// Iterates over the diagnostic items in the given crate.
        .               fn get_diagnostic_items(self) -> DiagnosticItems {
        .                   let mut id_to_name = FxHashMap::default();
       36 ( 0.00%)          let name_to_id = self
        .                       .root
        .                       .diagnostic_items
        .                       .decode(self)
        .                       .map(|(name, def_index)| {
      106 ( 0.00%)                  let id = self.local_def_id(def_index);
      106 ( 0.00%)                  id_to_name.insert(id, name);
        .                           (name, id)
        .                       })
        .                       .collect();
      162 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
        .               }
        .           
        .               /// Iterates over all named children of the given module,
        .               /// including both proper items and reexports.
        .               /// Module here is understood in name resolution sense - it can be a `mod` item,
        .               /// or a crate root, or an enum, or a trait.
    5,302 ( 0.00%)      fn for_each_module_child(
        .                   self,
        .                   id: DefIndex,
        .                   mut callback: impl FnMut(ModChild),
        .                   sess: &Session,
        .               ) {
    2,144 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
        .                       // If we are loading as a proc macro, we want to return
        .                       // the view of this crate as a proc macro crate.
        .                       if id == CRATE_DEF_INDEX {
        .                           for def_index in data.macros.decode(self) {
        .                               let raw_macro = self.raw_proc_macro(def_index);
        .                               let res = Res::Def(
        .                                   DefKind::Macro(macro_kind(raw_macro)),
        .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
        .                                   span: ident.span,
        .                               });
        .                           }
        .                       }
        .                       return;
        .                   }
        .           
        .                   // Iterate over all children.
    3,806 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
   23,713 ( 0.00%)              for child_index in children.decode((self, sess)) {
  106,497 ( 0.02%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
   32,696 ( 0.01%)                      let kind = self.def_kind(child_index);
   18,174 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
        .                                   // FIXME: Macros are currently encoded twice, once as items and once as
        .                                   // reexports. We ignore the items here and only use the reexports.
        .                                   continue;
        .                               }
        .                               let def_id = self.local_def_id(child_index);
        .                               let res = Res::Def(kind, def_id);
        .                               let vis = self.get_visibility(child_index);
        .                               let span = self.get_span(child_index, sess);
        .           
        .                               callback(ModChild { ident, res, vis, span });
        .           
        .                               // For non-re-export structs and variants add their constructors to children.
        .                               // Re-export lists automatically contain constructors when necessary.
   57,184 ( 0.01%)                      match kind {
        .                                   DefKind::Struct => {
      148 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
        .                                           self.get_ctor_def_id_and_kind(child_index)
        .                                       {
        .                                           let ctor_res =
        .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
        .                                           let vis = self.get_visibility(ctor_def_id.index);
        .                                           callback(ModChild { ident, res: ctor_res, vis, span });
        .                                       }
        .                                   }
        .                                   DefKind::Variant => {
        .                                       // Braced variants, unlike structs, generate unusable names in
        .                                       // value namespace, they are reserved for possible future use.
        .                                       // It's ok to use the variant's id as a ctor id since an
        .                                       // error will be reported on any use of such resolution anyway.
      192 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
        .                                           .get_ctor_def_id_and_kind(child_index)
        .                                           .unwrap_or((def_id, CtorKind::Fictive));
        .                                       let ctor_res =
        .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
        .                                       let mut vis = self.get_visibility(ctor_def_id.index);
       64 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
        .                                           // For non-exhaustive variants lower the constructor visibility to
        .                                           // within the crate. We only need this for fictive constructors,
        .                                           // for other constructors correct visibilities
        .                                           // were already encoded in metadata.
        .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
        .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
        .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
        .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
        .                                       callback(ModChild { ident, res: ctor_res, vis, span });
        .                                   }
        .                                   _ => {}
        .                               }
        .                           }
        .                       }
        .                   }
        .           
    5,276 ( 0.00%)          match self.kind(id) {
      532 ( 0.00%)              EntryKind::Mod(exports) => {
   10,914 ( 0.00%)                  for exp in exports.decode((self, sess)) {
        .                               callback(exp);
        .                           }
        .                       }
        .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
        .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
        .                   }
    3,856 ( 0.00%)      }
        .           
        .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
        8 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
        .               }
        .           
        .               fn is_item_mir_available(self, id: DefIndex) -> bool {
        .                   self.root.tables.mir.get(self, id).is_some()
        .               }
        .           
        .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
    1,813 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
        .                           self.get_expn_that_defined(id, sess)
        .                       }
        .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
        .                   }
        .               }
        .           
        .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
        .                       })
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
       10 ( 0.00%)          self.root
        .                       .tables
        .                       .mir_for_ctfe
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
        .                       })
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn get_thir_abstract_const(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   id: DefIndex,
        .               ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {
        5 ( 0.00%)          self.root
        .                       .tables
        .                       .thir_abstract_consts
        .                       .get(self, id)
        .                       .map_or(Ok(None), |v| Ok(Some(v.decode((self, tcx)))))
        .               }
        .           
        .               fn get_unused_generic_params(self, id: DefIndex) -> FiniteBitSet<u32> {
        .                   self.root
-- line 1215 ----------------------------------------
-- line 1242 ----------------------------------------
        .                           qualif,
        .                           _,
        .                       ) => qualif,
        .                       _ => bug!("mir_const_qualif: unexpected kind"),
        .                   }
        .               }
        .           
        .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
      715 ( 0.00%)          match self.kind(id) {
      572 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
      749 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
      321 ( 0.00%)              tcx.arena.alloc_from_iter(
      107 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
        .                       )
        .                   } else {
        .                       &[]
        .                   }
        .               }
        .           
    5,844 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
    3,409 ( 0.00%)          let def_key = self.def_key(id);
        .                   let parent = self.local_def_id(def_key.parent.unwrap());
        .                   let ident = self.item_ident(id, sess);
        .           
    3,667 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
       52 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
      371 ( 0.00%)              EntryKind::AssocFn(data) => {
        .                           let data = data.decode(self);
    2,597 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
        .                       }
      206 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
        .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
        .                   };
        .           
    8,766 ( 0.00%)          ty::AssocItem {
        .                       name: ident.name,
        .                       kind,
        .                       vis: self.get_visibility(id),
        .                       defaultness: container.defaultness(),
        .                       def_id: self.local_def_id(id),
        .                       trait_item_def_id: self.get_trait_item_def_id(id),
        .                       container: container.with_def_id(parent),
        .                       fn_has_self_parameter: has_self,
        .                   }
    4,383 ( 0.00%)      }
        .           
        .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
       70 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
        .               }
        .           
        .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    2,286 ( 0.00%)          match self.kind(node_id) {
        .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    1,010 ( 0.00%)                  let vdata = data.decode(self);
      402 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
        .                       }
        .                       _ => None,
        .                   }
      654 ( 0.00%)      }
        .           
       36 ( 0.00%)      fn get_item_attrs(
        .                   self,
        .                   id: DefIndex,
        .                   sess: &'a Session,
        .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
      429 ( 0.00%)          self.root
        .                       .tables
        .                       .attributes
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           // Structure and variant constructors don't have any attributes encoded for them,
        .                           // but we assume that someone passing a constructor ID actually wants to look at
        .                           // the attributes on the corresponding struct or variant.
        .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
        .                           let parent_id = def_key.parent.expect("no parent for a constructor");
        .                           self.root
        .                               .tables
        .                               .attributes
        .                               .get(self, parent_id)
        .                               .expect("no encoded attributes for a structure or variant")
        .                       })
        .                       .decode((self, sess))
       27 ( 0.00%)      }
        .           
        .               fn get_struct_field_names(
        .                   self,
        .                   id: DefIndex,
        .                   sess: &'a Session,
        .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
      275 ( 0.00%)          self.root
        .                       .tables
        .                       .children
        .                       .get(self, id)
        .                       .unwrap_or_else(Lazy::empty)
        .                       .decode(self)
      570 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
        .               }
        .           
        .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
      125 ( 0.00%)          self.root
        .                       .tables
        .                       .children
        .                       .get(self, id)
        .                       .unwrap_or_else(Lazy::empty)
        .                       .decode(self)
        6 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
        .               }
        .           
        .               fn get_inherent_implementations_for_type(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   id: DefIndex,
        .               ) -> &'tcx [DefId] {
       24 ( 0.00%)          tcx.arena.alloc_from_iter(
       30 ( 0.00%)              self.root
        .                           .tables
        .                           .inherent_impls
        .                           .get(self, id)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
      475 ( 0.00%)                  .map(|index| self.local_def_id(index)),
        .                   )
        .               }
        .           
        .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
        .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
        .               }
        .           
        .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
        .                           index: *trait_index,
        .                       };
        .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
        .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
        .                       })
        .                   })
        .               }
        .           
    9,234 ( 0.00%)      fn get_implementations_of_trait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_def_id: DefId,
        .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    1,026 ( 0.00%)          if self.trait_impls.is_empty() {
        .                       return &[];
        .                   }
        .           
        .                   // Do a reverse lookup beforehand to avoid touching the crate_num
        .                   // hash map in the loop below.
    1,072 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
        .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
        .                       None => return &[],
        .                   };
        .           
        .                   if let Some(impls) = self.trait_impls.get(&key) {
      572 ( 0.00%)              tcx.arena.alloc_from_iter(
      286 ( 0.00%)                  impls
        .                               .decode(self)
    4,457 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
        .                       )
        .                   } else {
        .                       &[]
        .                   }
    8,208 ( 0.00%)      }
        .           
        .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
      100 ( 0.00%)          let def_key = self.def_key(id);
      125 ( 0.00%)          match def_key.disambiguated_data.data {
        .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
        .                       // Not an associated item
        .                       _ => return None,
        .                   }
      216 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
        .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
       36 ( 0.00%)          self.root.native_libraries.decode((self, sess))
        .               }
        .           
        .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
        .                   self.root
        .                       .tables
        .                       .proc_macro_quoted_spans
        .                       .get(self, index)
        .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
        .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
        .                           let cnum = CrateNum::new(i + 1);
        .                           link.map(|link| (self.cnum_map[cnum], link))
        .                       }),
        .                   )
        .               }
        .           
        .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
       90 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
        .               }
        .           
        .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
        .                   let param_names = match self.kind(id) {
        .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
        .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
        .                       _ => Lazy::empty(),
        .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
        .                       EntryKind::AnonConst(_, data)
        .                       | EntryKind::Const(_, data)
        .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
       18 ( 0.00%)          match self.kind(id) {
        3 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
        .               // don't serialize constness for tuple variant and tuple struct constructors.
        .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
       36 ( 0.00%)          let constness = match self.kind(id) {
        6 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
        6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
        .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
        .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
        .                       _ => hir::Constness::NotConst,
        .                   };
        .                   constness == hir::Constness::Const
        .               }
        .           
        .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1517 ----------------------------------------
        .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
        .                           true
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
       11 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
        .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
        .                   match self.kind(id) {
        .                       EntryKind::Generator(data) => Some(data),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
      185 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
        .               }
        .           
        .               #[inline]
  102,543 ( 0.02%)      fn def_key(self, index: DefIndex) -> DefKey {
   29,298 ( 0.01%)          *self
        .                       .def_key_cache
        .                       .lock()
        .                       .entry(index)
   48,350 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
  117,192 ( 0.02%)      }
        .           
        .               // Returns the path leading to the thing with this `id`.
        .               fn def_path(self, id: DefIndex) -> DefPath {
        .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
        .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
        .               }
        .           
        .               fn def_path_hash_unlocked(
        .                   self,
        .                   index: DefIndex,
        .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
        .               ) -> DefPathHash {
    1,016 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
      495 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
        .                   })
        .               }
        .           
        .               #[inline]
    3,556 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
        .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
        .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
    4,064 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
        .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
        .               }
        .           
        .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
        .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
        .               /// Proc macro crates don't currently export spans, so this function does not have
        .               /// to work for them.
        .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
        .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
        .                   // that should hold actual sources, where possible.
        .                   //
        .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
        .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  113,662 ( 0.02%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
        .                       .map(Path::new)
        .                       .filter(|_| {
        .                           // Only spend time on further checks if we have what to translate *to*.
        .                           sess.opts.real_rust_source_base_dir.is_some()
        .                       })
        .                       .filter(|virtual_dir| {
        .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
        .                           // since that means we're still building `std`/`rustc` that need it,
        .                           // and we don't want the real path to leak into codegen/debuginfo.
        .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
        .                       });
  113,662 ( 0.02%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
        .                       debug!(
        .                           "try_to_translate_virtual_to_real(name={:?}): \
        .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
        .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
        .                       );
        .           
    2,115 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
        .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
        .                               if let rustc_span::FileName::Real(old_name) = name {
        .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
        .                                       old_name
        .                                   {
        .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
        .                                           let virtual_name = virtual_name.clone();
        .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
        .                                           *old_name = new_name;
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   };
        .           
  113,604 ( 0.02%)          self.cdata.source_map_import_info.get_or_init(|| {
       51 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
        .           
        .                       external_source_map
        .                           .map(|source_file_to_import| {
        .                               // We can't reuse an existing SourceFile, so allocate a new one
        .                               // containing the information we need.
        .                               let rustc_span::SourceFile {
    8,883 ( 0.00%)                          mut name,
    2,538 ( 0.00%)                          src_hash,
      423 ( 0.00%)                          start_pos,
      846 ( 0.00%)                          end_pos,
    2,115 ( 0.00%)                          mut lines,
    2,115 ( 0.00%)                          mut multibyte_chars,
    2,538 ( 0.00%)                          mut non_narrow_chars,
    2,115 ( 0.00%)                          mut normalized_pos,
    2,538 ( 0.00%)                          name_hash,
        .                                   ..
        .                               } = source_file_to_import;
        .           
        .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
        .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
        .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
        .                               // then we change `name` to a similar state as if the rust was bootstrapped
        .                               // with `remap-debuginfo = true`.
        .                               // This is useful for testing so that tests about the effects of
        .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
        .                               // compiler is bootstrapped.
      846 ( 0.00%)                      if let Some(virtual_dir) =
        .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
        .                               {
        .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
        .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
        .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
        .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
        .                                                   *old_name = rustc_span::RealFileName::Remapped {
        .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
        .                               let source_length = (end_pos - start_pos).to_usize();
        .           
        .                               // Translate line-start positions and multibyte character
        .                               // position into frame of reference local to file.
        .                               // `SourceMap::new_imported_source_file()` will then translate those
        .                               // coordinates to their new global frame of reference when the
        .                               // offset of the SourceFile is known.
        .                               for pos in &mut lines {
  583,826 ( 0.12%)                          *pos = *pos - start_pos;
        .                               }
        .                               for mbc in &mut multibyte_chars {
    1,394 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
        .                               }
        .                               for swc in &mut non_narrow_chars {
      888 ( 0.00%)                          *swc = *swc - start_pos;
        .                               }
        .                               for np in &mut normalized_pos {
    3,806 ( 0.00%)                          np.pos = np.pos - start_pos;
        .                               }
        .           
    7,614 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
    5,499 ( 0.00%)                          name,
    2,961 ( 0.00%)                          src_hash,
        .                                   name_hash,
        .                                   source_length,
      846 ( 0.00%)                          self.cnum,
    2,115 ( 0.00%)                          lines,
    2,538 ( 0.00%)                          multibyte_chars,
    2,115 ( 0.00%)                          non_narrow_chars,
    1,692 ( 0.00%)                          normalized_pos,
        .                                   start_pos,
        .                                   end_pos,
        .                               );
        .                               debug!(
        .                                   "CrateMetaData::imported_source_files alloc \
        .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
        .                                    translated (start_pos {:?} end_pos {:?})",
        .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
        .                                   local_version.end_pos
        .                               );
        .           
        .                               ImportedSourceFile {
        .                                   original_start_pos: start_pos,
        .                                   original_end_pos: end_pos,
        .                                   translated_source_file: local_version,
        .                               }
    1,269 ( 0.00%)                  })
        .                           .collect()
        .                   })
        .               }
        .           }
        .           
        .           impl CrateMetadata {
      216 ( 0.00%)      crate fn new(
        .                   sess: &Session,
        .                   blob: MetadataBlob,
        .                   root: CrateRoot<'static>,
        .                   raw_proc_macros: Option<&'static [ProcMacro]>,
        .                   cnum: CrateNum,
        .                   cnum_map: CrateNumMap,
        .                   dep_kind: CrateDepKind,
        .                   source: CrateSource,
        .                   private_dep: bool,
        .                   host_hash: Option<Svh>,
        .               ) -> CrateMetadata {
       54 ( 0.00%)          let trait_impls = root
        .                       .impls
        .                       .decode((&blob, sess))
        .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
        .                       .collect();
        .                   let alloc_decoding_state =
       54 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
        .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
        .           
        .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
        .                   // that does not copy any data. It just does some data verification.
       18 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
        .           
      414 ( 0.00%)          CrateMetadata {
       18 ( 0.00%)              blob,
       54 ( 0.00%)              root,
       72 ( 0.00%)              trait_impls,
        .                       raw_proc_macros,
        .                       source_map_import_info: OnceCell::new(),
       72 ( 0.00%)              def_path_hash_map,
        .                       expn_hash_map: Default::default(),
      126 ( 0.00%)              alloc_decoding_state,
        .                       cnum,
       72 ( 0.00%)              cnum_map,
       90 ( 0.00%)              dependencies,
        .                       dep_kind: Lock::new(dep_kind),
      216 ( 0.00%)              source,
        .                       private_dep,
        .                       host_hash,
        .                       extern_crate: Lock::new(None),
        .                       hygiene_context: Default::default(),
        .                       def_key_cache: Default::default(),
        .                       def_path_hash_cache: Default::default(),
        .                   }
      162 ( 0.00%)      }
        .           
        .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
        .                   self.dependencies.borrow()
        .               }
        .           
        .               crate fn add_dependency(&self, cnum: CrateNum) {
        .                   self.dependencies.borrow_mut().push(cnum);
        .               }
        .           
        .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
        .                   let mut extern_crate = self.extern_crate.borrow_mut();
        .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
        .                   if update {
       95 ( 0.00%)              *extern_crate = Some(new_extern_crate);
        .                   }
        .                   update
        .               }
        .           
        .               crate fn source(&self) -> &CrateSource {
      248 ( 0.00%)          &self.source
        .               }
        .           
        .               crate fn dep_kind(&self) -> CrateDepKind {
        .                   *self.dep_kind.lock()
        .               }
        .           
        .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
      133 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
        .               }
        .           
        .               crate fn panic_strategy(&self) -> PanicStrategy {
        .                   self.root.panic_strategy
        .               }
        .           
        .               crate fn needs_panic_runtime(&self) -> bool {
        .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
        .                   self.root.panic_runtime
        .               }
        .           
        .               crate fn is_profiler_runtime(&self) -> bool {
        .                   self.root.profiler_runtime
        .               }
        .           
        .               crate fn needs_allocator(&self) -> bool {
        5 ( 0.00%)          self.root.needs_allocator
        .               }
        .           
        .               crate fn has_global_allocator(&self) -> bool {
        .                   self.root.has_global_allocator
        .               }
        .           
        .               crate fn has_default_lib_allocator(&self) -> bool {
        .                   self.root.has_default_lib_allocator
        .               }
        .           
        .               crate fn is_proc_macro_crate(&self) -> bool {
        .                   self.root.is_proc_macro_crate()
        .               }
        .           
        .               crate fn name(&self) -> Symbol {
      680 ( 0.00%)          self.root.name
        .               }
        .           
        .               crate fn stable_crate_id(&self) -> StableCrateId {
        .                   self.root.stable_crate_id
        .               }
        .           
        .               crate fn hash(&self) -> Svh {
        .                   self.root.hash
        .               }
        .           
        .               fn num_def_ids(&self) -> usize {
        .                   self.root.tables.def_keys.size()
        .               }
        .           
        .               fn local_def_id(&self, index: DefIndex) -> DefId {
   41,195 ( 0.01%)          DefId { krate: self.cnum, index }
        .               }
        .           
        .               // Translate a DefId from the current compilation environment to a DefId
        .               // for an external crate.
        .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
        .                   for (local, &global) in self.cnum_map.iter_enumerated() {
    4,904 ( 0.00%)              if global == did.krate {
        .                           return Some(DefId { krate: local, index: did.index });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           }
        .           
-- line 1964 ----------------------------------------

1,202,780 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                 

-- line 504 ----------------------------------------
        .           use crate::panicking::{panic, panic_str};
        .           use crate::pin::Pin;
        .           use crate::{
        .               convert, hint, mem,
        .               ops::{self, ControlFlow, Deref, DerefMut},
        .           };
        .           
        .           /// The `Option` type. See [the module level documentation](self) for more.
1,758,500 ( 0.35%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[rustc_diagnostic_item = "Option"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Option<T> {
        .               /// No value.
        .               #[lang = "None"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               None,
        .               /// Some value of type `T`.
        .               #[lang = "Some"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      332 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Type implementation
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           impl<T> Option<T> {
        .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_some(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               pub const fn is_some(&self) -> bool {
  302,956 ( 0.06%)          matches!(*self, Some(_))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
        .               /// // then consume *that* with `map`, leaving `text` on the stack.
        .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
        .               /// println!("still can print text: {:?}", text);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Option<&T> {
  549,793 ( 0.11%)          match *self {
        .                       Some(ref x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
        .               ///
        .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
        .               ///     None => {},
        .               /// }
        .               /// assert_eq!(x, Some(42));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn as_mut(&mut self) -> Option<&mut T> {
  164,887 ( 0.03%)          match *self {
        .                       Some(ref mut x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
        .               ///
        .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn expect(self, msg: &str) -> T {
  174,346 ( 0.04%)          match self {
   20,532 ( 0.00%)              Some(val) => val,
        .                       None => expect_failed(msg),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.unwrap(), "air"); // fails
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn unwrap(self) -> T {
  973,885 ( 0.20%)          match self {
  290,137 ( 0.06%)              Some(val) => val,
        .                       None => panic("called `Option::unwrap()` on a `None` value"),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or(self, default: T) -> T
        .               where
        .                   T: ~const Drop,
        .               {
   28,319 ( 0.01%)          match self {
        .                       Some(x) => x,
       28 ( 0.00%)              None => default,
        .                   }
      295 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or computes it from a closure.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 10;
        .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
        .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       15 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
  119,237 ( 0.02%)          match self {
   18,282 ( 0.00%)              Some(x) => x,
      212 ( 0.00%)              None => f(),
        .                   }
       36 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a default.
        .               ///
        .               /// Consumes the `self` argument then, if [`Some`], returns the contained
        .               /// value, otherwise if [`None`], returns the [default value] for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or_default(self) -> T
        .               where
        .                   T: ~const Default,
        .               {
      307 ( 0.00%)          match self {
      717 ( 0.00%)              Some(x) => x,
        .                       None => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value,
        .               /// without checking that the value is not [`None`].
        .               ///
        .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
        .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
        .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
        .               ///
        .               /// assert_eq!(maybe_some_len, Some(13));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      112 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
  499,318 ( 0.10%)          match self {
  958,102 ( 0.19%)              Some(x) => Some(f(x)),
    2,634 ( 0.00%)              None => None,
        .                   }
   10,949 ( 0.00%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .                   U: ~const Drop,
        .               {
  127,008 ( 0.03%)          match self {
    1,448 ( 0.00%)              Some(t) => f(t),
      118 ( 0.00%)              None => default,
        .                   }
        .               }
        .           
        .               /// Computes a default function result (if none), or
        .               /// applies a different function to the contained value (if any).
        .               ///
        .               /// # Examples
        .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
        .               where
        .                   D: ~const FnOnce() -> U,
        .                   D: ~const Drop,
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
    1,293 ( 0.00%)          match self {
      431 ( 0.00%)              Some(t) => f(t),
        .                       None => default(),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
        .               ///
        .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
        .               where
        .                   E: ~const Drop,
        .               {
   33,092 ( 0.01%)          match self {
       40 ( 0.00%)              Some(v) => Ok(v),
       20 ( 0.00%)              None => Err(err),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
        .               ///
        .               /// [`Ok(v)`]: Ok
        .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
        .               where
        .                   F: ~const FnOnce() -> E,
        .                   F: ~const Drop,
        .               {
    1,930 ( 0.00%)          match self {
    1,383 ( 0.00%)              Some(v) => Ok(v),
      594 ( 0.00%)              None => Err(err()),
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
        .               ///
        .               /// Leaves the original Option in-place, creating a new one with a reference
        .               /// to the original one, additionally coercing the contents via [`Deref`].
        .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
        .               /// assert_eq!(x.as_deref(), None);
        .               /// ```
        .               #[stable(feature = "option_deref", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn as_deref(&self) -> Option<&T::Target>
        .               where
        .                   T: ~const Deref,
        .               {
    1,657 ( 0.00%)          match self.as_ref() {
        .                       Some(t) => Some(t.deref()),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
        .               ///
        .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
        .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
        .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
        .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
        .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       21 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> Option<U>,
        .                   F: ~const Drop,
        .               {
   20,617 ( 0.00%)          match self {
      774 ( 0.00%)              Some(x) => f(x),
        .                       None => None,
        .                   }
    1,045 ( 0.00%)      }
        .           
        .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
        .               /// with the wrapped value and returns:
        .               ///
        .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
        .               ///   value), and
        .               /// - [`None`] if `predicate` returns `false`.
        .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
        .               #[stable(feature = "option_filter", since = "1.27.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn filter<P>(self, predicate: P) -> Self
        .               where
        .                   T: ~const Drop,
        .                   P: ~const FnOnce(&T) -> bool,
        .                   P: ~const Drop,
        .               {
      143 ( 0.00%)          if let Some(x) = self {
       82 ( 0.00%)              if predicate(&x) {
        .                           return Some(x);
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise returns `optb`.
        .               ///
-- line 1274 ----------------------------------------
-- line 1299 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or(self, optb: Option<T>) -> Option<T>
        .               where
        .                   T: ~const Drop,
        .               {
      324 ( 0.00%)          match self {
       21 ( 0.00%)              Some(x) => Some(x),
        .                       None => optb,
        .                   }
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise calls `f` and
        .               /// returns the result.
        .               ///
        .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or_else<F>(self, f: F) -> Option<T>
        .               where
        .                   F: ~const FnOnce() -> Option<T>,
        .                   F: ~const Drop,
        .               {
    1,061 ( 0.00%)          match self {
      794 ( 0.00%)              Some(x) => Some(x),
        .                       None => f(),
        .                   }
        .               }
        .           
        .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
        .               where
        .                   T: ~const Drop,
        .               {
    1,059 ( 0.00%)          if let None = *self {
    2,471 ( 0.00%)              *self = Some(value);
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
   12,891 ( 0.00%)          if let None = *self {
        .                       // the compiler isn't smart enough to know that we are not dropping a `T`
        .                       // here and wants us to ensure `T` can be dropped at compile time.
       36 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1558 ----------------------------------------
        .               /// let old = x.replace(3);
        .               /// assert_eq!(x, Some(3));
        .               /// assert_eq!(old, None);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               #[stable(feature = "option_replace", since = "1.31.0")]
        .               pub const fn replace(&mut self, value: T) -> Option<T> {
       68 ( 0.00%)          mem::replace(self, Some(value))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] value containing the given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
        .               #[stable(feature = "copied", since = "1.35.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn copied(self) -> Option<T>
        .               where
        .                   T: Copy,
        .               {
        .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        .                   // ready yet, should be reverted when possible to avoid code repetition
    6,048 ( 0.00%)          match self {
  134,218 ( 0.03%)              Some(&v) => Some(v),
      151 ( 0.00%)              None => None,
        .                   }
        .               }
        .           
        .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1730 ----------------------------------------
-- line 1733 ----------------------------------------
        .               /// let opt_x = Some(&x);
        .               /// assert_eq!(opt_x, Some(&12));
        .               /// let cloned = opt_x.cloned();
        .               /// assert_eq!(cloned, Some(12));
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
      840 ( 0.00%)      pub const fn cloned(self) -> Option<T>
        .               where
        .                   T: ~const Clone,
        .               {
    6,480 ( 0.00%)          match self {
    6,762 ( 0.00%)              Some(t) => Some(t.clone()),
      420 ( 0.00%)              None => None,
        .                   }
    2,161 ( 0.00%)      }
        .           }
        .           
        .           impl<T> Option<&mut T> {
        .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone> Clone for Option<T> {
        .               #[inline]
        .               fn clone(&self) -> Self {
1,552,019 ( 0.31%)          match self {
   19,694 ( 0.00%)              Some(x) => Some(x.clone()),
       45 ( 0.00%)              None => None,
        .                   }
   98,411 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Some(to), Some(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
        .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A> {
        .                   self.opt.take()
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    1,429 ( 0.00%)          match self.opt {
        .                       Some(_) => (1, Some(1)),
        .                       None => (0, Some(0)),
        .                   }
        .               }
        .           }
        .           
        .           impl<A> DoubleEndedIterator for Item<A> {
        .               #[inline]
-- line 2022 ----------------------------------------
-- line 2241 ----------------------------------------
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::Try for Option<T> {
        .               type Output = T;
        .               type Residual = Option<convert::Infallible>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
        .                   Some(output)
       85 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
   69,761 ( 0.01%)          match self {
    6,337 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
        .                       None => ControlFlow::Break(None),
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::FromResidual for Option<T> {
        .               #[inline]
        .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
        .                   match residual {
   17,123 ( 0.00%)              None => None,
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
        .               type TryType = Option<T>;
        .           }
-- line 2274 ----------------------------------------

  589,107 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 13 ----------------------------------------
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           #[derive(Clone)]
      .           pub struct FilterMap<I, F> {
      .               iter: I,
      .               f: F,
      .           }
      .           impl<I, F> FilterMap<I, F> {
      .               pub(in crate::iter) fn new(iter: I, f: F) -> FilterMap<I, F> {
  1,594 ( 0.00%)          FilterMap { iter, f }
      .               }
      .           }
      .           
      .           #[stable(feature = "core_impl_debug", since = "1.9.0")]
      .           impl<I: fmt::Debug, F> fmt::Debug for FilterMap<I, F> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_struct("FilterMap").field("iter", &self.iter).finish()
      .               }
      .           }
      .           
      .           fn filter_map_fold<T, B, Acc>(
      .               mut f: impl FnMut(T) -> Option<B>,
      .               mut fold: impl FnMut(Acc, B) -> Acc,
      .           ) -> impl FnMut(Acc, T) -> Acc {
  1,095 ( 0.00%)      move |acc, item| match f(item) {
      .                   Some(x) => fold(acc, x),
      .                   None => acc,
      .               }
      .           }
      .           
      .           fn filter_map_try_fold<'a, T, B, Acc, R: Try<Output = Acc>>(
      .               f: &'a mut impl FnMut(T) -> Option<B>,
      .               mut fold: impl FnMut(Acc, B) -> R + 'a,
      .           ) -> impl FnMut(Acc, T) -> R + 'a {
206,010 ( 0.04%)      move |acc, item| match f(item) {
329,066 ( 0.07%)          Some(x) => fold(acc, x),
      .                   None => try { acc },
    123 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<B, I: Iterator, F> Iterator for FilterMap<I, F>
      .           where
      .               F: FnMut(I::Item) -> Option<B>,
      .           {
      .               type Item = B;
      .           
      .               #[inline]
     92 ( 0.00%)      fn next(&mut self) -> Option<B> {
    144 ( 0.00%)          self.iter.find_map(&mut self.f)
    101 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
     10 ( 0.00%)          let (_, upper) = self.iter.size_hint();
      .                   (0, upper) // can't know a lower bound, due to the predicate
      .               }
      .           
      .               #[inline]
      .               fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R
      .               where
      .                   Self: Sized,
      .                   Fold: FnMut(Acc, Self::Item) -> R,
      .                   R: Try<Output = Acc>,
      .               {
     65 ( 0.00%)          self.iter.try_fold(init, filter_map_try_fold(&mut self.f, fold))
      .               }
      .           
      .               #[inline]
      .               fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
      .               where
      .                   Fold: FnMut(Acc, Self::Item) -> Acc,
      .               {
     29 ( 0.00%)          self.iter.fold(init, filter_map_fold(self.f, fold))
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<B, I: DoubleEndedIterator, F> DoubleEndedIterator for FilterMap<I, F>
      .           where
      .               F: FnMut(I::Item) -> Option<B>,
      .           {
-- line 93 ----------------------------------------

169,040 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/filter_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .               Array(ArrayVec<(K, V), SSO_ARRAY_SIZE>),
        .               Map(FxHashMap<K, V>),
        .           }
        .           
        .           impl<K, V> SsoHashMap<K, V> {
        .               /// Creates an empty `SsoHashMap`.
        .               #[inline]
        .               pub fn new() -> Self {
   15,608 ( 0.00%)          SsoHashMap::Array(ArrayVec::new())
        .               }
        .           
        .               /// Creates an empty `SsoHashMap` with the specified capacity.
        .               pub fn with_capacity(cap: usize) -> Self {
        .                   if cap <= SSO_ARRAY_SIZE {
        .                       Self::new()
        .                   } else {
        .                       SsoHashMap::Map(FxHashMap::with_capacity_and_hasher(cap, Default::default()))
-- line 86 ----------------------------------------
-- line 226 ----------------------------------------
        .               /// Inserts a key-value pair into the map.
        .               ///
        .               /// If the map did not have this key present, [`None`] is returned.
        .               ///
        .               /// If the map did have this key present, the value is updated, and the old
        .               /// value is returned. The key is not updated, though; this matters for
        .               /// types that can be `==` without being identical. See the [module-level
        .               /// documentation] for more.
1,209,644 ( 0.24%)      pub fn insert(&mut self, key: K, value: V) -> Option<V> {
  284,780 ( 0.06%)          match self {
        .                       SsoHashMap::Array(array) => {
  209,800 ( 0.04%)                  for (k, v) in array.iter_mut() {
  145,906 ( 0.03%)                      if *k == key {
        .                                   let old_value = std::mem::replace(v, value);
        .                                   return Some(old_value);
        .                               }
        .                           }
  109,061 ( 0.02%)                  if let Err(error) = array.try_push((key, value)) {
        .                               let mut map: FxHashMap<K, V> = array.drain(..).collect();
        .                               let (key, value) = error.element();
        .                               map.insert(key, value);
   12,726 ( 0.00%)                      *self = SsoHashMap::Map(map);
        .                           }
   41,850 ( 0.01%)                  None
        .                       }
        .                       SsoHashMap::Map(map) => map.insert(key, value),
        .                   }
1,260,209 ( 0.25%)      }
        .           
        .               /// Removes a key from the map, returning the value at the key if the key
        .               /// was previously in the map.
        .               pub fn remove(&mut self, key: &K) -> Option<V> {
        2 ( 0.00%)          match self {
        .                       SsoHashMap::Array(array) => {
        .                           if let Some(index) = array.iter().position(|(k, _v)| k == key) {
        .                               Some(array.swap_remove(index).1)
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                       SsoHashMap::Map(map) => map.remove(key),
-- line 266 ----------------------------------------
-- line 278 ----------------------------------------
        .                               None
        .                           }
        .                       }
        .                       SsoHashMap::Map(map) => map.remove_entry(key),
        .                   }
        .               }
        .           
        .               /// Returns a reference to the value corresponding to the key.
   46,473 ( 0.01%)      pub fn get(&self, key: &K) -> Option<&V> {
   92,946 ( 0.02%)          match self {
        .                       SsoHashMap::Array(array) => {
  232,145 ( 0.05%)                  for (k, v) in array {
  108,843 ( 0.02%)                      if k == key {
        .                                   return Some(v);
        .                               }
        .                           }
        .                           None
        .                       }
        .                       SsoHashMap::Map(map) => map.get(key),
        .                   }
   92,946 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               pub fn get_mut(&mut self, key: &K) -> Option<&mut V> {
        .                   match self {
        .                       SsoHashMap::Array(array) => {
        .                           for (k, v) in array {
        .                               if k == key {
        .                                   return Some(v);
-- line 306 ----------------------------------------
-- line 409 ----------------------------------------
        .           impl<K, V> IntoIterator for SsoHashMap<K, V> {
        .               type IntoIter = EitherIter<
        .                   <ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,
        .                   <FxHashMap<K, V> as IntoIterator>::IntoIter,
        .               >;
        .               type Item = <Self::IntoIter as Iterator>::Item;
        .           
        .               fn into_iter(self) -> Self::IntoIter {
      324 ( 0.00%)          match self {
    1,944 ( 0.00%)              SsoHashMap::Array(array) => EitherIter::Left(array.into_iter()),
        .                       SsoHashMap::Map(map) => EitherIter::Right(map.into_iter()),
        .                   }
        .               }
        .           }
        .           
        .           /// adapts Item of array reference iterator to Item of hashmap reference iterator.
        .           #[inline(always)]
        .           fn adapt_array_ref_it<K, V>(pair: &(K, V)) -> (&K, &V) {
-- line 426 ----------------------------------------

  157,317 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
191,718 ( 0.04%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
276,540 ( 0.06%)      if enough_space {
 18,105 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
184,360 ( 0.04%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
184,360 ( 0.04%)      get_stack_limit().map(|limit| current_ptr - limit)
368,720 ( 0.07%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
184,360 ( 0.04%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

127,313 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  261,836 ( 0.05%)      ptr: NonZeroUsize,
  493,490 ( 0.10%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   23,256 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
    5,913 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    5,913 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   11,480 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    5,913 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
    4,983 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
    4,983 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  379,299 ( 0.08%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  379,299 ( 0.08%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      172 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      172 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
2,941,743 ( 0.59%)              match ptr & TAG_MASK {
    4,379 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  870,744 ( 0.17%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      128 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      360 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   29,565 ( 0.01%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   29,565 ( 0.01%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
-- line 192 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
      760 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      436 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
      684 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   99,497 ( 0.02%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   33,467 ( 0.01%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   22,130 ( 0.00%)          tcx.intern_substs(&substs)
   99,585 ( 0.02%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  111,921 ( 0.02%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   44,852 ( 0.01%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
      225 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   89,520 ( 0.02%)      }
        .           
       32 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   89,611 ( 0.02%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       32 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   75,033 ( 0.02%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
   16,940 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    4,840 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
   19,360 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   77,056 ( 0.02%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
1,132,286 ( 0.23%)          match self.len() {
        .                       1 => {
  129,972 ( 0.03%)                  let param0 = self[0].try_fold_with(folder)?;
  495,292 ( 0.10%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  160,070 ( 0.03%)                  let param0 = self[0].try_fold_with(folder)?;
  345,314 ( 0.07%)                  let param1 = self[1].try_fold_with(folder)?;
  352,667 ( 0.07%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  194,864 ( 0.04%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   20,115 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      547 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
   19,044 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   90,077 ( 0.02%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  165,764 ( 0.03%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  276,796 ( 0.06%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   50,879 ( 0.01%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   91,872 ( 0.02%)          self.binders_passed += 1;
   22,811 ( 0.00%)          let t = t.super_fold_with(self);
   91,872 ( 0.02%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
   18,522 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
    6,174 ( 0.00%)          match *r {
    4,906 ( 0.00%)              ty::ReEarlyBound(data) => {
    4,906 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    2,453 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
   21,609 ( 0.00%)      }
        .           
  321,315 ( 0.06%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  107,105 ( 0.02%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  168,972 ( 0.03%)          match *t.kind() {
  297,415 ( 0.06%)              ty::Param(p) => self.ty_for_param(p, t),
  150,018 ( 0.03%)              _ => t.super_fold_with(self),
        .                   }
  410,510 ( 0.08%)      }
        .           
    1,064 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      884 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
      324 ( 0.00%)              c.super_fold_with(self)
        .                   }
      928 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  118,966 ( 0.02%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      232 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  210,161 ( 0.04%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    4,954 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
       87 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
       41 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------

1,776,019 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   32,639 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   16,663 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   23,537 ( 0.00%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   11,860 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    6,202 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
2,114,368 ( 0.42%)              let byte = slice[*position];
1,057,184 ( 0.21%)              *position += 1;
1,057,184 ( 0.21%)              if (byte & 0x80) == 0 {
      206 ( 0.00%)                  return byte as $int_ty;
        .                       }
      846 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  810,123 ( 0.16%)                  let byte = slice[*position];
  535,235 ( 0.11%)                  *position += 1;
  540,082 ( 0.11%)                  if (byte & 0x80) == 0 {
  426,852 ( 0.09%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  887,297 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                 

-- line 267 ----------------------------------------
        .           macro_rules! bitor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitOr for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
       22 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
        .           macro_rules! bitxor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitXor for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
3,390,214 ( 0.68%)              fn bitxor(self, other: $t) -> $t { self ^ other }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 384 ----------------------------------------

  453,973 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 208 ----------------------------------------
      .               /// There is no built-in impl. There may be some other
      .               /// candidate (a where-clause or user-defined impl).
      .               None,
      .               /// It is unknown whether there is an impl.
      .               Ambiguous,
      .           }
      .           
      .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
  4,134 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
100,240 ( 0.02%)          SelectionContext {
      .                       infcx,
 15,184 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
  3,445 ( 0.00%)      }
      .           
      .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
     47 ( 0.00%)          SelectionContext {
      .                       infcx,
      6 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: true,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
      .               }
      .           
      .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
      .                       freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
      .               }
      .           
  4,576 ( 0.00%)      pub fn with_query_mode(
      .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
      .                   query_mode: TraitQueryMode,
      .               ) -> SelectionContext<'cx, 'tcx> {
      .                   debug!(?query_mode, "with_query_mode");
  9,152 ( 0.00%)          SelectionContext {
      .                       infcx,
    572 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode,
      .                   }
  3,432 ( 0.00%)      }
      .           
      .               /// Enables tracking of intercrate ambiguity causes. These are
      .               /// used in coherence to give improved diagnostics. We don't do
      .               /// this until we detect a coherence error because it can lead to
      .               /// false overflow results (#47139) and because it costs
      .               /// computation time.
      .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
      .                   assert!(self.intercrate);
      .                   assert!(self.intercrate_ambiguity_causes.is_none());
      1 ( 0.00%)          self.intercrate_ambiguity_causes = Some(vec![]);
      .                   debug!("selcx: enable_tracking_intercrate_ambiguity_causes");
      .               }
      .           
      .               /// Gets the intercrate ambiguity causes collected since tracking
      .               /// was enabled and disables tracking at the same time. If
      .               /// tracking is not enabled, just returns an empty vector.
      .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
      4 ( 0.00%)          assert!(self.intercrate);
      .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
      .               }
      .           
      .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
140,890 ( 0.03%)          self.infcx
    590 ( 0.00%)      }
      .           
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
470,006 ( 0.09%)          self.infcx.tcx
      .               }
      .           
      .               pub fn is_intercrate(&self) -> bool {
 37,561 ( 0.01%)          self.intercrate
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Selection
      .               //
      .               // The selection phase tries to identify *how* an obligation will
      .               // be resolved. For example, it will identify which impl or
      .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
      .               // 1. If no applicable impl or parameter bound can be found.
      .               // 2. If the output type parameters in the obligation do not match
      .               //    those specified by the impl/bound. For example, if the obligation
      .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
      .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
      .           
      .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
      .               /// type environment by performing unification.
 23,891 ( 0.00%)      #[instrument(level = "debug", skip(self))]
 30,717 ( 0.01%)      pub fn select(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
 24,289 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
      .                       Err(SelectionError::Overflow) => {
      .                           // In standard mode, overflow must have been caught and reported
      .                           // earlier.
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           return Err(SelectionError::Overflow);
      .                       }
      .                       Err(SelectionError::Ambiguous(_)) => {
      .                           return Ok(None);
      .                       }
      .                       Err(e) => {
  2,380 ( 0.00%)                  return Err(e);
      .                       }
      .                       Ok(None) => {
    390 ( 0.00%)                  return Ok(None);
      .                       }
 18,504 ( 0.00%)              Ok(Some(candidate)) => candidate,
      .                   };
      .           
 30,844 ( 0.01%)          match self.confirm_candidate(obligation, candidate) {
      .                       Err(SelectionError::Overflow) => {
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           Err(SelectionError::Overflow)
      .                       }
     26 ( 0.00%)              Err(e) => Err(e),
      .                       Ok(candidate) => {
      .                           debug!(?candidate, "confirmed");
 36,984 ( 0.01%)                  Ok(Some(candidate))
      .                       }
      .                   }
      .               }
      .           
 34,130 ( 0.01%)      crate fn select_from_obligation(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
      .           
      .                   let pec = &ProvisionalEvaluationCache::default();
      .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
      .           
  6,826 ( 0.00%)          self.candidate_from_obligation(&stack)
 30,717 ( 0.01%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // EVALUATION
      .               //
      .               // Tests whether an obligation can be selected or whether an impl
      .               // can be applied to particular types. It skips the "confirmation"
      .               // step and hence completely ignores output type parameters.
      .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
      .               // we can be sure it does not.
      .           
      .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
      .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
      .                   debug!(?obligation, "predicate_may_hold_fatal");
      .           
      .                   // This fatal query is a stopgap that should only be used in standard mode,
      .                   // where we do not expect overflow to be propagated.
     22 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
      .           
    110 ( 0.00%)          self.evaluate_root_obligation(obligation)
      .                       .expect("Overflow should be caught earlier in standard query mode")
      .                       .may_apply()
      .               }
      .           
      .               /// Evaluates whether the obligation `obligation` can be satisfied
      .               /// and returns an `EvaluationResult`. This is meant for the
      .               /// *initial* call.
  1,144 ( 0.00%)      pub fn evaluate_root_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
  1,782 ( 0.00%)              this.evaluate_predicate_recursively(
      .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                           obligation.clone(),
      .                       )
      .                   })
  1,144 ( 0.00%)      }
      .           
      .               fn evaluation_probe(
      .                   &mut self,
      .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
      .               ) -> Result<EvaluationResult, OverflowError> {
 68,534 ( 0.01%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
  1,188 ( 0.00%)              let result = op(self)?;
      .           
 54,418 ( 0.01%)              match self.infcx.leak_check(true, snapshot) {
      .                           Ok(()) => {}
      .                           Err(_) => return Ok(EvaluatedToErr),
      .                       }
      .           
 38,870 ( 0.01%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
      .                           None => Ok(result),
      .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
      .                       }
      .                   })
      .               }
      .           
      .               /// Evaluates the predicates in `predicates` recursively. Note that
      .               /// this applies projections in the predicates, and therefore
      .               /// is run within an inference probe.
 73,560 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
      .               fn evaluate_predicates_recursively<'o, I>(
      .                   &mut self,
      .                   stack: TraitObligationStackList<'o, 'tcx>,
      .                   predicates: I,
      .               ) -> Result<EvaluationResult, OverflowError>
      .               where
      .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
      .               {
      .                   let mut result = EvaluatedToOk;
231,006 ( 0.05%)          for obligation in predicates {
 86,076 ( 0.02%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
 43,038 ( 0.01%)              if let EvaluatedToErr = eval {
      .                           // fast-path - EvaluatedToErr is the top of the lattice,
      .                           // so we don't need to look on the other predicates.
      .                           return Ok(EvaluatedToErr);
      .                       } else {
      .                           result = cmp::max(result, eval);
      .                       }
      .                   }
      .                   Ok(result)
      .               }
      .           
221,130 ( 0.04%)      #[instrument(
      .                   level = "debug",
      .                   skip(self, previous_stack),
      .                   fields(previous_stack = ?previous_stack.head())
199,017 ( 0.04%)      )]
      .               fn evaluate_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
      .                   // a `PredicateObligation`. These are distinct types, so we can't
      .                   // use any `Option` combinator method that would force them to be
      .                   // the same.
 44,226 ( 0.01%)          match previous_stack.head() {
 40,710 ( 0.01%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
  1,758 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
      .                   }
      .           
132,678 ( 0.03%)          let result = ensure_sufficient_stack(|| {
 22,113 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
221,130 ( 0.04%)              match bound_predicate.skip_binder() {
      .                           ty::PredicateKind::Trait(t) => {
      .                               let t = bound_predicate.rebind(t);
      .                               debug_assert!(!t.has_escaping_bound_vars());
      .                               let obligation = obligation.with(t);
331,245 ( 0.07%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(p) => {
      .                               let p = bound_predicate.rebind(p);
      .                               // Does this code ever run?
      .                               match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
      .                                   Some(Ok(InferOk { mut obligations, .. })) => {
      .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
-- line 483 ----------------------------------------
-- line 545 ----------------------------------------
      .                               } else {
      .                                   Ok(EvaluatedToErr)
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Projection(data) => {
      .                               let data = bound_predicate.rebind(data);
      .                               let project_obligation = obligation.with(data);
    160 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
     85 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
      .                                       'compute_res: {
      .                                           // If we've previously marked this projection as 'complete', thne
      .                                           // use the final cached result (either `EvaluatedToOk` or
      .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
      .                                           // sub-obligations.
     68 ( 0.00%)                                  if let Some(key) =
    153 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
      .                                           {
    136 ( 0.00%)                                      if let Some(cached_res) = self
      .                                                   .infcx
      .                                                   .inner
      .                                                   .borrow_mut()
      .                                                   .projection_cache()
      .                                                   .is_complete(key)
      .                                               {
      .                                                   break 'compute_res Ok(cached_res);
      .                                               }
      .                                           }
      .           
     34 ( 0.00%)                                  self.add_depth(
      .                                               subobligations.iter_mut(),
     34 ( 0.00%)                                      obligation.recursion_depth,
      .                                           );
     34 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
     51 ( 0.00%)                                      previous_stack,
     85 ( 0.00%)                                      subobligations,
      .                                           );
     68 ( 0.00%)                                  if let Ok(res) = res {
     34 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
     68 ( 0.00%)                                          if let Some(key) =
     17 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
    119 ( 0.00%)                                                  self, data,
      .                                                       )
      .                                                   {
      .                                                       // If the result is something that we can cache, then mark this
      .                                                       // entry as 'complete'. This will allow us to skip evaluating the
      .                                                       // suboligations at all the next time we evaluate the projection
      .                                                       // predicate.
    119 ( 0.00%)                                              self.infcx
      .                                                           .inner
      .                                                           .borrow_mut()
      .                                                           .projection_cache()
      .                                                           .complete(key, res);
      .                                                   }
      .                                               }
      .                                           }
      .                                           res
-- line 601 ----------------------------------------
-- line 693 ----------------------------------------
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for chalk")
      .                           }
      .                       }
 22,113 ( 0.00%)          });
      .           
      .                   debug!("finished: {:?} from {:?}", result, obligation);
      .           
      .                   result
      .               }
      .           
463,743 ( 0.09%)      #[instrument(skip(self, previous_stack), level = "debug")]
      .               fn evaluate_trait_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   mut obligation: TraitObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
 44,166 ( 0.01%)          if !self.intercrate
      .                       && obligation.is_global()
      .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
      .                   {
      .                       // If a param env has no global bounds, global obligations do not
      .                       // depend on its particular value in order to work, so we can clear
      .                       // out the param env and get better caching.
      .                       debug!("in global");
  4,982 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
      .                   }
      .           
      .                   let stack = self.push_stack(previous_stack, &obligation);
      .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
 44,166 ( 0.01%)          let mut param_env = obligation.param_env;
      .           
      .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
 22,083 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
264,996 ( 0.05%)              pred
      .                   });
      .           
      .                   debug!(?fresh_trait_pred);
      .           
 27,538 ( 0.01%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
      .                       debug!(?result, "CACHE HIT");
      .                       return Ok(result);
      .                   }
      .           
      .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
      .                       debug!(?result, "PROVISIONAL CACHE HIT");
      .                       stack.update_reached_depth(result.reached_depth);
      .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
      .                   // stack. If so, we don't want to insert the result into the
      .                   // main cache (it is cycle dependent) nor the provisional
      .                   // cache (which is meant for things that have completed but
      .                   // for a "backedge" -- this result *is* the backedge).
      .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
      .                       return Ok(cycle_result);
      .                   }
      .           
 26,640 ( 0.01%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
  2,960 ( 0.00%)          let result = result?;
      .           
 14,800 ( 0.00%)          if !result.must_apply_modulo_regions() {
      .                       stack.cache().on_failure(stack.dfn);
      .                   }
      .           
  2,960 ( 0.00%)          let reached_depth = stack.reached_depth.get();
  5,920 ( 0.00%)          if reached_depth >= stack.depth {
      .                       debug!(?result, "CACHE MISS");
 56,240 ( 0.01%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
      .           
      .                       stack.cache().on_completion(
  5,920 ( 0.00%)                  stack.dfn,
      .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
      .                               // Create a new `DepNode` that has dependencies on:
      .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
      .                               // entry being crated
      .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
      .                               // provisional caches entries and inserting them into the evaluation cache
      .                               //
      .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 839 ----------------------------------------
      .               fn check_evaluation_cycle(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'_, 'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   if let Some(cycle_depth) = stack
      .                       .iter()
      .                       .skip(1) // Skip top-most frame.
      .                       .find(|prev| {
 19,730 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
      .                       })
      .                       .map(|stack| stack.depth)
      .                   {
      .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
      .           
      .                       // If we have a stack like `A B C D E A`, where the top of
      .                       // the stack is the final `A`, then this will iterate over
-- line 855 ----------------------------------------
-- line 874 ----------------------------------------
      .                           debug!("evaluate_stack --> recursive, inductive");
      .                           Some(EvaluatedToRecur)
      .                       }
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
 26,640 ( 0.01%)      fn evaluate_stack<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // In intercrate mode, whenever any of the generics are unbound,
      .                   // there can always be an impl. Even if there are no impls in
      .                   // this crate, perhaps the type would be unified with
      .                   // something from another crate that does provide an impl.
      .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
      .                   // imagine, this is just where we started. To avoid that, we
      .                   // check for unbound variables and return an ambiguous (hence possible)
      .                   // match if we've seen this trait before.
      .                   //
      .                   // This suffices to allow chains like `FnMut` implemented in
      .                   // terms of `Fn` etc, but we could probably make this more
      .                   // precise still.
      .                   let unbound_input_types =
  2,960 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
      .           
  8,880 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
      .                       // This check was an imperfect workaround for a bug in the old
      .                       // intercrate mode; it should be removed when that goes away.
 14,800 ( 0.00%)              if unbound_input_types && self.intercrate {
      .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
      .                           // Heuristics: show the diagnostics when there are no candidates in crate.
      6 ( 0.00%)                  if self.intercrate_ambiguity_causes.is_some() {
      .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
     27 ( 0.00%)                      if let Ok(candidate_set) = self.assemble_candidates(stack) {
      6 ( 0.00%)                          if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
      .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
      .                                       let self_ty = trait_ref.self_ty();
      .                                       let cause = with_no_trimmed_paths(|| {
      .                                           IntercrateAmbiguityCause::DownstreamCrate {
      .                                               trait_desc: trait_ref.print_only_trait_path().to_string(),
      .                                               self_desc: if self_ty.has_concrete_skeleton() {
      .                                                   Some(self_ty.to_string())
      .                                               } else {
-- line 930 ----------------------------------------
-- line 937 ----------------------------------------
      .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
      .                                   }
      .                               }
      .                           }
      .                           return Ok(EvaluatedToAmbig);
      .                       }
      .                   }
      .           
  5,908 ( 0.00%)          if unbound_input_types
      .                       && stack.iter().skip(1).any(|prev| {
     45 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && self.match_fresh_trait_refs(
     60 ( 0.00%)                          stack.fresh_trait_pred,
     60 ( 0.00%)                          prev.fresh_trait_pred,
      .                                   prev.obligation.param_env,
      .                               )
      .                       })
      .                   {
      .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
      .                       return Ok(EvaluatedToUnknown);
      .                   }
      .           
 24,280 ( 0.00%)          match self.candidate_from_obligation(stack) {
 17,154 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
      .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
      .                       Ok(None) => Ok(EvaluatedToAmbig),
      .                       Err(Overflow) => Err(OverflowError::Canonical),
      .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
      .                       Err(..) => Ok(EvaluatedToErr),
      .                   }
 29,600 ( 0.01%)      }
      .           
      .               /// For defaulted traits, we use a co-inductive strategy to solve, so
      .               /// that recursion is ok. This routine returns `true` if the top of the
      .               /// stack (`cycle[0]`):
      .               ///
      .               /// - is a defaulted trait,
      .               /// - it also appears in the backtrace at some position `X`,
      .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 998 ----------------------------------------
      .                   skip(self, stack),
      .                   fields(depth = stack.obligation.recursion_depth)
      .               )]
      .               fn evaluate_candidate<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   candidate: &SelectionCandidate<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
  7,188 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
      .                       let candidate = (*candidate).clone();
 57,557 ( 0.01%)              match this.confirm_candidate(stack.obligation, candidate) {
      .                           Ok(selection) => {
      .                               debug!(?selection);
 14,376 ( 0.00%)                      this.evaluate_predicates_recursively(
      .                                   stack.list(),
 46,722 ( 0.01%)                          selection.nested_obligations().into_iter(),
      .                               )
      .                           }
      .                           Err(..) => Ok(EvaluatedToErr),
      .                       }
      .                   })?;
      .           
      .                   // If we erased any lifetimes, then we want to use
      .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
 44,166 ( 0.01%)          if self.intercrate {
      .                       return None;
      .                   }
      .           
      .                   let tcx = self.tcx();
      .                   if self.can_use_global_caches(param_env) {
 62,482 ( 0.01%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
      .                           return Some(res);
      .                       }
      .                   }
 55,076 ( 0.01%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
      .               }
      .           
 35,520 ( 0.01%)      fn insert_evaluation_cache(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   result: EvaluationResult,
      .               ) {
      .                   // Avoid caching results that depend on more than just the trait-ref
      .                   // - the stack can create recursion.
 11,840 ( 0.00%)          if result.is_stack_dependent() {
      .                       return;
      .                   }
      .           
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  5,920 ( 0.00%)          if self.intercrate {
      .                       return;
      .                   }
      .           
      .                   if self.can_use_global_caches(param_env) {
      .                       if !trait_pred.needs_infer() {
      .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
      .                           // This may overwrite the cache with the same value
      .                           // FIXME: Due to #50507 this overwrites the different values
      .                           // This should be changed to use HashMapExt::insert_same
      .                           // when that is fixed
    628 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
      .                           return;
      .                       }
      .                   }
      .           
      .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
  9,264 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
 23,680 ( 0.00%)      }
      .           
      .               /// For various reasons, it's possible for a subobligation
      .               /// to have a *lower* recursion_depth than the obligation used to create it.
      .               /// Projection sub-obligations may be returned from the projection cache,
      .               /// which results in obligations with an 'old' `recursion_depth`.
      .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
      .               /// subobligations without taking in a 'parent' depth, causing the
      .               /// generated subobligations to have a `recursion_depth` of `0`.
      .               ///
      .               /// To ensure that obligation_depth never decreases, we force all subobligations
      .               /// to have at least the depth of the original obligation.
     17 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
      .                   &self,
      .                   it: I,
      .                   min_depth: usize,
      .               ) {
 21,728 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
     34 ( 0.00%)      }
      .           
      .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
      .                   &self,
      .                   depth: usize,
      .                   error_obligation: &Obligation<'tcx, T>,
      .               ) -> Result<(), OverflowError> {
113,920 ( 0.02%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
      .                       match self.query_mode {
      .                           TraitQueryMode::Standard => {
      .                               if self.infcx.is_tainted_by_errors() {
      .                                   return Err(OverflowError::ErrorReporting);
      .                               }
      .                               self.infcx.report_overflow_error(error_obligation, true);
      .                           }
      .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
      .               ) -> Result<(), OverflowError> {
      .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
      .               }
      .           
      .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
      .               where
      .                   OP: FnOnce(&mut Self) -> R,
      .               {
 42,367 ( 0.01%)          let (result, dep_node) =
 43,234 ( 0.01%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
      .                   self.tcx().dep_graph.read_index(dep_node);
 39,108 ( 0.01%)          (result, dep_node)
      .               }
      .           
      .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
      .               /// for a negative goal and a negative impl for a positive goal
      .               #[instrument(level = "debug", skip(self))]
      .               fn filter_impls(
      .                   &mut self,
      .                   candidates: Vec<SelectionCandidate<'tcx>>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Vec<SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   let mut result = Vec::with_capacity(candidates.len());
      .           
 56,000 ( 0.01%)          for candidate in candidates {
      .                       // Respect const trait obligations
 10,875 ( 0.00%)              if obligation.is_const() {
      .                           match candidate {
      .                               // const impl
      .                               ImplCandidate(def_id)
      .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
      .                               // const param
      .                               ParamCandidate(trait_pred)
      .                                   if trait_pred.skip_binder().constness
      .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
      .                               ConstDropCandidate(_) => {}
      .                               _ => {
      .                                   // reject all other types of candidates
      .                                   continue;
      .                               }
      .                           }
      .                       }
      .           
  7,250 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
  5,536 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
  2,768 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
      .                               || self.allow_negative_impls
      .                           {
      .                               result.push(candidate);
      .                           }
      .                       } else {
      .                           result.push(candidate);
      .                       }
      .                   }
      .           
 12,900 ( 0.00%)          result
      .               }
      .           
      .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
 51,221 ( 0.01%)      #[instrument(level = "debug", skip(self))]
      .               fn filter_reservation_impls(
      .                   &mut self,
      .                   candidate: SelectionCandidate<'tcx>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   // Treat reservation impls as ambiguity.
 10,352 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
  4,326 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
      .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
      .                               let attrs = tcx.get_attrs(def_id);
      .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
      .                               let value = attr.and_then(|a| a.value_str());
      .                               if let Some(value) = value {
      .                                   debug!(
      .                                       "filter_reservation_impls: \
      .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
      .                                           message: value.to_string(),
      .                                       },
      .                                   );
      .                               }
      .                           }
      .                           return Ok(None);
      .                       }
      .                   }
 18,078 ( 0.00%)          Ok(Some(candidate))
      .               }
      .           
      .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
      .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
      .           
  9,843 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
      .                       return None;
      .                   }
      .           
      .                   let obligation = &stack.obligation;
     66 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
      .           
      .                   // Okay to skip binder because of the nature of the
      .                   // trait-ref-is-knowable check, which does not care about
      .                   // bound regions.
      .                   let trait_ref = predicate.skip_binder().trait_ref;
      .           
     66 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
      .               }
      .           
      .               /// Returns `true` if the global caches can be used.
      .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   // If there are any inference variables in the `ParamEnv`, then we
      .                   // always use a cache local to this particular scope. Otherwise, we
      .                   // switch to a global cache.
      .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
 12,734 ( 0.00%)          if self.intercrate {
     22 ( 0.00%)              return None;
      .                   }
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
 12,690 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
  6,345 ( 0.00%)          if self.can_use_global_caches(param_env) {
 28,420 ( 0.01%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
 26,338 ( 0.01%)                  return Some(res);
      .                       }
      .                   }
 44,006 ( 0.01%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
      .               }
      .           
      .               /// Determines whether can we safely cache the result
      .               /// of selecting an obligation. This is almost always `true`,
      .               /// except when dealing with certain `ParamCandidate`s.
      .               ///
      .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
      .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
      .               fn can_cache_candidate(
      .                   &self,
      .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) -> bool {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  6,518 ( 0.00%)          if self.intercrate {
      .                       return false;
      .                   }
  9,711 ( 0.00%)          match result {
      .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
      .                       _ => true,
      .                   }
      .               }
      .           
      .               fn insert_candidate_cache(
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) {
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
      .           
  6,518 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
      .                   if !self.can_cache_candidate(&candidate) {
      .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
      .                       return;
      .                   }
      .           
  3,237 ( 0.00%)          if self.can_use_global_caches(param_env) {
  1,800 ( 0.00%)              if let Err(Overflow) = candidate {
      .                           // Don't cache overflow globally; we only produce this in certain modes.
      .                       } else if !pred.needs_infer() {
  3,264 ( 0.00%)                  if !candidate.needs_infer() {
      .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
      .                               // This may overwrite the cache with the same value.
 22,032 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
 55,683 ( 0.01%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .               }
      .           
      .               /// Matches a predicate against the bounds of its self type.
      .               ///
      .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
      .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
      .               /// `Baz` bound. We return indexes into the list returned by
      .               /// `tcx.item_bounds` for any applicable bounds.
    216 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> smallvec::SmallVec<[usize; 2]> {
    312 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
      .                   let placeholder_trait_predicate =
    408 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
      .                   debug!(
      .                       ?placeholder_trait_predicate,
      .                       "match_projection_obligation_against_definition_bounds"
      .                   );
      .           
     24 ( 0.00%)          let tcx = self.infcx.tcx;
    144 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
     72 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
      .                       ty::Opaque(def_id, substs) => (def_id, substs),
      .                       _ => {
      .                           span_bug!(
      .                               obligation.cause.span,
      .                               "match_projection_obligation_against_definition_bounds() called \
      .                                but self-ty is not a projection: {:?}",
      .                               placeholder_trait_predicate.trait_ref.self_ty()
      .                           );
-- line 1404 ----------------------------------------
-- line 1411 ----------------------------------------
      .                   // unnecessary ambiguity.
      .                   let mut distinct_normalized_bounds = FxHashSet::default();
      .           
      .                   let matching_bounds = bounds
      .                       .iter()
      .                       .enumerate()
      .                       .filter_map(|(idx, bound)| {
      .                           let bound_predicate = bound.kind();
    392 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
      .                               let bound = bound_predicate.rebind(pred.trait_ref);
  1,800 ( 0.00%)                      if self.infcx.probe(|_| {
    720 ( 0.00%)                          match self.match_normalize_trait_ref(
      .                                       obligation,
    480 ( 0.00%)                              bound,
    480 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
      .                                   ) {
      .                                       Ok(None) => true,
      .                                       Ok(Some(normalized_trait))
      .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
      .                                       {
      .                                           true
      .                                       }
      .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
      .                               }
      .                           }
      .                           None
      .                       })
      .                       .collect();
      .           
      .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
      .                   matching_bounds
    216 ( 0.00%)      }
      .           
      .               /// Equates the trait in `obligation` with trait bound. If the two traits
      .               /// can be equated and the normalized trait bound doesn't contain inference
      .               /// variables or placeholders, the normalized bound is returned.
  1,560 ( 0.00%)      fn match_normalize_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   trait_bound: ty::PolyTraitRef<'tcx>,
      .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
      .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
      .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
    400 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
      .                       // Avoid unnecessary normalization
    200 ( 0.00%)              return Err(());
      .                   }
      .           
    240 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
      .                       project::normalize_with_depth(
      .                           self,
     20 ( 0.00%)                  obligation.param_env,
      .                           obligation.cause.clone(),
     60 ( 0.00%)                  obligation.recursion_depth + 1,
     80 ( 0.00%)                  trait_bound,
      .                       )
      .                   });
     60 ( 0.00%)          self.infcx
     40 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
      .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
      .                       .map(|InferOk { obligations: _, value: () }| {
      .                           // This method is called within a probe, so we can't have
      .                           // inference variables and placeholders escape.
      .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
    100 ( 0.00%)                      Some(trait_bound)
      .                           } else {
      .                               None
      .                           }
      .                       })
      .                       .map_err(|_| ())
  1,080 ( 0.00%)      }
      .           
      .               fn evaluate_where_clause<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
 39,446 ( 0.01%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
    536 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
      .                           Err(()) => Ok(EvaluatedToErr),
      .                       }
      .                   })
      .               }
      .           
  1,017 ( 0.00%)      pub(super) fn match_projection_projections(
      .                   &mut self,
      .                   obligation: &ProjectionTyObligation<'tcx>,
      .                   env_predicate: PolyProjectionPredicate<'tcx>,
      .                   potentially_unnormalized_candidates: bool,
      .               ) -> bool {
      .                   let mut nested_obligations = Vec::new();
    565 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
    339 ( 0.00%)              obligation.cause.span,
      .                       LateBoundRegionConversionTime::HigherRankedType,
      .                       env_predicate,
      .                   );
    226 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
      .                       ensure_sufficient_stack(|| {
      .                           project::normalize_with_depth_to(
      .                               self,
      .                               obligation.param_env,
      .                               obligation.cause.clone(),
      .                               obligation.recursion_depth + 1,
      .                               infer_predicate.projection_ty,
      .                               &mut nested_obligations,
      .                           )
      .                       })
      .                   } else {
    226 ( 0.00%)              infer_predicate.projection_ty
      .                   };
      .           
    113 ( 0.00%)          self.infcx
    226 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
    226 ( 0.00%)              .sup(obligation.predicate, infer_projection)
    847 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
      .                           self.evaluate_predicates_recursively(
      .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                               nested_obligations.into_iter().chain(obligations),
      .                           )
    188 ( 0.00%)                  .map_or(false, |res| res.may_apply())
      .                       })
  1,017 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // WINNOW
      .               //
      .               // Winnowing is the process of attempting to resolve ambiguity by
      .               // probing further. During the winnowing process, we unify all
      .               // type variables and then we also attempt to evaluate recursive
      .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
      .               /// See the comment for "SelectionCandidate" for more details.
      .               fn candidate_should_be_dropped_in_favor_of(
      .                   &mut self,
      .                   sized_predicate: bool,
      .                   victim: &EvaluatedCandidate<'tcx>,
      .                   other: &EvaluatedCandidate<'tcx>,
      .                   needs_infer: bool,
      .               ) -> bool {
    964 ( 0.00%)          if victim.candidate == other.candidate {
      .                       return true;
      .                   }
      .           
      .                   // Check if a bound would previously have been removed when normalizing
      .                   // the param_env so that it can be given the lowest priority. See
      .                   // #50825 for the motivation for this.
      .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
     35 ( 0.00%)              cand.is_global() && !cand.has_late_bound_regions()
      .                   };
      .           
      .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
      .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
      .                   //
      .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
      .                   // lifetime of a variable.
 17,422 ( 0.00%)          match (&other.candidate, &victim.candidate) {
      .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
      .                           bug!(
      .                               "default implementations shouldn't be recorded \
      .                               when there are other valid candidates"
      .                           );
      .                       }
      .           
      .                       // (*)
-- line 1582 ----------------------------------------
-- line 1623 ----------------------------------------
      .                       (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,
      .           
      .                       // If obligation is a sized predicate or the where-clause bound is
      .                       // global, prefer the projection or object candidate. See issue
      .                       // #50825 and #89352.
      .                       (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {
      .                           sized_predicate || is_global(cand)
      .                       }
     14 ( 0.00%)              (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {
     14 ( 0.00%)                  !(sized_predicate || is_global(cand))
      .                       }
      .           
      .                       // Global bounds from the where clause should be ignored
      .                       // here (see issue #50825). Otherwise, we have a where
      .                       // clause so don't go around looking for impls.
      .                       // Arbitrarily give param candidates priority
      .                       // over projection and object candidates.
      .                       (
-- line 1640 ----------------------------------------
-- line 1674 ----------------------------------------
      .                       }
      .                       (ObjectCandidate(_), ProjectionCandidate(_))
      .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
      .                           bug!("Have both object and projection candidate")
      .                       }
      .           
      .                       // Arbitrarily give projection and object candidates priority.
      .                       (
  1,928 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      .                           ImplCandidate(..)
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
      .                           | TraitAliasCandidate(..),
  3,856 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      .                       ) => false,
      .           
  9,640 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
      .                           // See if we can toss out `victim` based on specialization.
      .                           // This requires us to know *for sure* that the `other` impl applies
      .                           // i.e., `EvaluatedToOk`.
      .                           //
      .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
      .                           // to me but is required for `std` to compile, so I didn't change it
      .                           // for now.
      .                           let tcx = self.tcx();
  3,856 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
  7,712 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
      .                                   return true;
      .                               }
      .                           }
      .           
  4,820 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
  3,856 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
      .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
      .                                       // Subtle: If the predicate we are evaluating has inference
      .                                       // variables, do *not* allow discarding candidates due to
      .                                       // marker trait impls.
      .                                       //
      .                                       // Without this restriction, we could end up accidentally
      .                                       // constrainting inference variables based on an arbitrarily
      .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { has_nested: true }
      .                           | TraitAliasCandidate(..),
      .                       ) => false,
      .                   }
      .               }
      .           
  7,920 ( 0.00%)      fn sized_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
      .                   // NOTE: binder moved to (*)
  2,376 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
  3,968 ( 0.00%)          match self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
      .                       | ty::Ref(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => {
      .                           // safe for everything
     42 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
      .                       }
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
      .           
      .                       ty::Tuple(tys) => Where(
      .                           obligation
      .                               .predicate
      1 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
      .                       ),
      .           
      .                       ty::Adt(def, substs) => {
  1,456 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
      .                           // (*) binder moved here
  3,640 ( 0.00%)                  Where(
      .                               obligation.predicate.rebind({
    728 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
      .                               }),
      .                           )
      .                       }
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
      .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  6,336 ( 0.00%)      }
      .           
  1,904 ( 0.00%)      fn copy_clone_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   // NOTE: binder moved to (*)
    476 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
  1,190 ( 0.00%)          match *self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_))
      .                       | ty::Infer(ty::FloatVar(_))
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
      .           
      .                       ty::Uint(_)
      .                       | ty::Int(_)
-- line 1874 ----------------------------------------
-- line 1886 ----------------------------------------
      .                       ty::Dynamic(..)
      .                       | ty::Str
      .                       | ty::Slice(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Foreign(..)
      .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
      .           
      1 ( 0.00%)              ty::Tuple(tys) => {
      .                           // (*) binder moved here
      4 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
      .                       }
      .           
      .                       ty::Closure(_, substs) => {
      .                           // (*) binder moved here
      .                           let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      .                           if let ty::Infer(ty::TyVar(_)) = ty.kind() {
      .                               // Not yet resolved.
      .                               Ambiguous
-- line 1904 ----------------------------------------
-- line 1920 ----------------------------------------
      .                       }
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  1,428 ( 0.00%)      }
      .           
      .               /// For default impls, we need to break apart a type into its
      .               /// "constituent types" -- meaning, the types that it contains.
      .               ///
      .               /// Here are some (simple) examples:
      .               ///
      .               /// ```
      .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 2003 ----------------------------------------
      .                           // We can resolve the `impl Trait` to its concrete type,
      .                           // which enforces a DAG between the functions requiring
      .                           // the auto trait bounds in question.
      .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
      .                       }
      .                   }
      .               }
      .           
     96 ( 0.00%)      fn collect_predicates_for_types(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   trait_def_id: DefId,
      .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
      .               ) -> Vec<PredicateObligation<'tcx>> {
      .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
      .                   // 2. Produce something like `&'0 i32 : Copy`
      .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
      .           
      .                   types
      .                       .as_ref()
      .                       .skip_binder() // binder moved -\
      .                       .iter()
      .                       .flat_map(|ty| {
     24 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
      .           
     96 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
     24 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
     40 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
     80 ( 0.00%)                          ensure_sufficient_stack(|| {
      .                                       project::normalize_with_depth(
      .                                           self,
      8 ( 0.00%)                                  param_env,
      .                                           cause.clone(),
      8 ( 0.00%)                                  recursion_depth,
      8 ( 0.00%)                                  placeholder_ty,
      .                                       )
      .                                   });
     88 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
      .                                   self.tcx(),
      8 ( 0.00%)                          param_env,
      .                                   cause.clone(),
     16 ( 0.00%)                          trait_def_id,
      .                                   recursion_depth,
      .                                   normalized_ty,
      .                                   &[],
      .                               );
     48 ( 0.00%)                      obligations.push(placeholder_obligation);
      .                               obligations
      .                           })
      .                       })
      .                       .collect()
     48 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Matching
      .               //
      .               // Matching is a common path used for both evaluation and
      .               // confirmation.  It basically unifies types that appear in impls
      .               // and traits. This does affect the surrounding environment;
      .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
      .               // run inside of a `probe()` so that their side-effects are
      .               // contained.
      .           
      .               fn rematch_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
 26,540 ( 0.01%)          match self.match_impl(impl_def_id, obligation) {
 21,232 ( 0.00%)              Ok(substs) => substs,
      .                       Err(()) => {
      .                           bug!(
      .                               "Impl {:?} was matchable against {:?} but now is not",
      .                               impl_def_id,
      .                               obligation
      .                           );
      .                       }
      .                   }
      .               }
      .           
227,943 ( 0.05%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn match_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
      .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
      .           
      .                   // Before we create the substitutions and everything, first
      .                   // consider a "quick reject". This avoids creating more types
      .                   // and so forth that we need to.
      .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
  3,822 ( 0.00%)              return Err(());
      .                   }
      .           
      .                   let placeholder_obligation =
 70,602 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
 30,258 ( 0.01%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
      .           
 50,430 ( 0.01%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
      .           
 20,172 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
      .           
      .                   debug!(?impl_trait_ref);
      .           
 60,516 ( 0.01%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
 70,602 ( 0.01%)              ensure_sufficient_stack(|| {
      .                           project::normalize_with_depth(
      .                               self,
 10,086 ( 0.00%)                      obligation.param_env,
      .                               obligation.cause.clone(),
 30,258 ( 0.01%)                      obligation.recursion_depth + 1,
 20,172 ( 0.00%)                      impl_trait_ref,
      .                           )
      .                       });
      .           
      .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
      .           
      .                   let cause = ObligationCause::new(
 10,086 ( 0.00%)              obligation.cause.span,
 20,172 ( 0.00%)              obligation.cause.body_id,
 90,774 ( 0.02%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
      .                   );
      .           
 20,172 ( 0.00%)          let InferOk { obligations, .. } = self
      .                       .infcx
 10,086 ( 0.00%)              .at(&cause, obligation.param_env)
      .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
      .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
      .                   nested_obligations.extend(obligations);
      .           
 24,228 ( 0.00%)          if !self.intercrate
      .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
      .                   {
      .                       debug!("match_impl: reservation impls only apply in intercrate mode");
      .                       return Err(());
      .                   }
      .           
      .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
 48,456 ( 0.01%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
      .               }
      .           
      .               fn fast_reject_trait_refs(
      .                   &mut self,
      .                   obligation: &TraitObligation<'_>,
      .                   impl_trait_ref: &ty::TraitRef<'_>,
      .               ) -> bool {
      .                   // We can avoid creating type variables and doing the full
      .                   // substitution if we find that any of the input types, when
      .                   // simplified, do not match.
      .           
 35,991 ( 0.01%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
      .                       |(obligation_arg, impl_arg)| {
154,644 ( 0.03%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
      .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
      .                                   // Note, we simplify parameters for the obligation but not the
      .                                   // impl so that we do not reject a blanket impl but do reject
      .                                   // more concrete impls if we're searching for `T: Trait`.
206,192 ( 0.04%)                          let simplified_obligation_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       obligation_ty,
      .                                       SimplifyParams::Yes,
      .                                       StripReferences::No,
      .                                   );
154,644 ( 0.03%)                          let simplified_impl_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       impl_ty,
      .                                       SimplifyParams::No,
      .                                       StripReferences::No,
      .                                   );
      .           
 77,322 ( 0.02%)                          simplified_obligation_ty.is_some()
      .                                       && simplified_impl_ty.is_some()
      .                                       && simplified_obligation_ty != simplified_impl_ty
      .                               }
      .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
      .                                   // Lifetimes can never cause a rejection.
      .                                   false
      .                               }
      .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
      .                           }
      .                       },
      .                   )
      .               }
      .           
      .               /// Normalize `where_clause_trait_ref` and try to match it against
      .               /// `obligation`. If successful, return any predicates that
      .               /// result from the normalization.
 32,274 ( 0.01%)      fn match_where_clause_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
      .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
 28,688 ( 0.01%)      }
      .           
      .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
      .               /// obligation is satisfied.
      .               #[instrument(skip(self), level = "debug")]
      .               fn match_poly_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
  4,100 ( 0.00%)          self.infcx
  3,586 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
 12,300 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
      .                       .map(|InferOk { obligations, .. }| obligations)
      .                       .map_err(|_| ())
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Miscellany
      .           
      .               fn match_fresh_trait_refs(
      .                   &self,
      .                   previous: ty::PolyTraitPredicate<'tcx>,
      .                   current: ty::PolyTraitPredicate<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> bool {
     45 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
      .                   matcher.relate(previous, current).is_ok()
      .               }
      .           
      .               fn push_stack<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: &'o TraitObligation<'tcx>,
      .               ) -> TraitObligationStack<'o, 'tcx> {
197,142 ( 0.04%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
      .           
      .                   let dfn = previous_stack.cache.next_dfn();
 44,166 ( 0.01%)          let depth = previous_stack.depth() + 1;
163,215 ( 0.03%)          TraitObligationStack {
      .                       obligation,
149,563 ( 0.03%)              fresh_trait_pred,
      .                       reached_depth: Cell::new(depth),
      .                       previous: previous_stack,
      .                       dfn,
      .                       depth,
      .                   }
      .               }
      .           
      .               #[instrument(skip(self), level = "debug")]
-- line 2264 ----------------------------------------
-- line 2307 ----------------------------------------
      .                   )
      .                   .map_bound(|(trait_ref, ..)| trait_ref)
      .               }
      .           
      .               /// Returns the obligations that are implied by instantiating an
      .               /// impl or trait. The obligations are substituted and fully
      .               /// normalized. This is used when confirming an impl or default
      .               /// impl.
122,084 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
      .               fn impl_or_trait_obligations(
      .                   &mut self,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   def_id: DefId,           // of impl or trait
      .                   substs: SubstsRef<'tcx>, // for impl or trait
      .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
      .                   //    V: Iterator, V: Sized,
      .                   //    <U as Iterator>::Item: Copy
      .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
      .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
      .                   // `$1: Copy`, so we must ensure the obligations are emitted in
      .                   // that order.
      .                   let predicates = tcx.predicates_of(def_id);
      .                   debug!(?predicates);
  5,308 ( 0.00%)          assert_eq!(predicates.parent, None);
 15,924 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
      .                   for (predicate, _) in predicates.predicates {
      .                       debug!(?predicate);
102,905 ( 0.02%)              let predicate = normalize_with_depth_to(
      .                           self,
      .                           param_env,
      .                           cause.clone(),
      .                           recursion_depth,
 20,581 ( 0.00%)                  predicate.subst(tcx, substs),
      .                           &mut obligations,
      .                       );
205,810 ( 0.04%)              obligations.push(Obligation {
      .                           cause: cause.clone(),
      .                           recursion_depth,
      .                           param_env,
      .                           predicate,
      .                       });
      .                   }
      .           
      .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
      .                   // (#38528) from happening, but the real cause of the duplication is
      .                   // unknown. What we know is that the deduplication avoids exponential
      .                   // amount of predicates being propagated when processing deeply nested
      .                   // types.
      .                   //
      .                   // This code is hot enough that it's worth avoiding the allocation
      .                   // required for the FxHashSet when possible. Special-casing lengths 0,
      .                   // 1 and 2 covers roughly 75-80% of the cases.
 12,003 ( 0.00%)          if obligations.len() <= 1 {
      .                       // No possibility of duplicates.
  3,944 ( 0.00%)          } else if obligations.len() == 2 {
      .                       // Only two elements. Drop the second if they are equal.
      .                       if obligations[0] == obligations[1] {
      .                           obligations.truncate(1);
      .                       }
      .                   } else {
      .                       // Three or more elements. Use a general deduplication process.
      .                       let mut seen = FxHashSet::default();
  3,392 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
      .                   }
      .           
 21,232 ( 0.00%)          obligations
      .               }
      .           }
      .           
      .           trait TraitObligationExt<'tcx> {
      .               fn derived_cause(
      .                   &self,
      .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
      .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
      .                    */
      .           
      .                   let obligation = self;
      .           
      .                   // NOTE(flaper87): As of now, it keeps track of the whole error
      .                   // chain. Ideally, we should have a way to configure this either
      .                   // by using -Z verbose or just a CLI argument.
      .                   let derived_cause = DerivedObligationCause {
 21,264 ( 0.00%)              parent_trait_pred: obligation.predicate,
 10,624 ( 0.00%)              parent_code: obligation.cause.clone_code(),
      .                   };
      .                   let derived_code = variant(derived_cause);
 63,784 ( 0.01%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
      .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   TraitObligationStackList::with(self)
      .               }
      .           
      .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
  9,688 ( 0.00%)          self.previous.cache
      .               }
      .           
      .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   self.list()
      .               }
      .           
      .               /// Indicates that attempting to evaluate this stack entry
      .               /// required accessing something from the stack at depth `reached_depth`.
-- line 2438 ----------------------------------------
-- line 2540 ----------------------------------------
      .               /// evaluation. When we create an entry in the evaluation cache using this provisional
      .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
      .               /// the cache will have all of the necessary incr comp dependencies tracked.
      .               dep_node: DepNodeIndex,
      .           }
      .           
      .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
      .               fn default() -> Self {
  6,165 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
      .               }
      .           }
      .           
      .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
      .               /// Get the next DFN in sequence (basically a counter).
      .               fn next_dfn(&self) -> usize {
 22,083 ( 0.00%)          let result = self.dfn.get();
 88,332 ( 0.02%)          self.dfn.set(result + 1);
      .                   result
      .               }
      .           
      .               /// Check the provisional cache for any result for
      .               /// `fresh_trait_ref`. If there is a hit, then you must consider
      .               /// it an access to the stack slots at depth
      .               /// `reached_depth` (from the returned value).
      .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
      .               fn on_completion(
      .                   &self,
      .                   dfn: usize,
      .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
      .               ) {
      .                   debug!(?dfn, "on_completion");
      .           
      .                   for (fresh_trait_pred, eval) in
 20,720 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
      .                   {
      .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
      .           
      .                       op(fresh_trait_pred, eval.result, eval.dep_node);
      .                   }
      .               }
      .           }
      .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
      .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
      .               }
      .           
      .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
      .                   self.head
      .               }
      .           
      .               fn depth(&self) -> usize {
 64,503 ( 0.01%)          if let Some(head) = self.head { head.depth } else { 0 }
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
      .               type Item = &'o TraitObligationStack<'o, 'tcx>;
      .           
      .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
 28,682 ( 0.01%)          let o = self.head?;
  9,901 ( 0.00%)          *self = o.previous;
      .                   Some(o)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "TraitObligationStack({:?})", self.obligation)
      .               }
-- line 2717 ----------------------------------------

785,638 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .               const_freshen_count: u32,
      .               ty_freshen_map: FxHashMap<ty::InferTy, Ty<'tcx>>,
      .               const_freshen_map: FxHashMap<ty::InferConst<'tcx>, &'tcx ty::Const<'tcx>>,
      .               keep_static: bool,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {
      .               pub fn new(infcx: &'a InferCtxt<'a, 'tcx>, keep_static: bool) -> TypeFreshener<'a, 'tcx> {
 73,620 ( 0.01%)          TypeFreshener {
      .                       infcx,
      .                       ty_freshen_count: 0,
      .                       const_freshen_count: 0,
      .                       ty_freshen_map: Default::default(),
      .                       const_freshen_map: Default::default(),
      .                       keep_static,
      .                   }
      .               }
      .           
  5,504 ( 0.00%)      fn freshen_ty<F>(
      .                   &mut self,
      .                   opt_ty: Option<Ty<'tcx>>,
      .                   key: ty::InferTy,
      .                   freshener: F,
      .               ) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(u32) -> ty::InferTy,
      .               {
  1,376 ( 0.00%)          if let Some(ty) = opt_ty {
      .                       return ty.fold_with(self);
      .                   }
      .           
  1,048 ( 0.00%)          match self.ty_freshen_map.entry(key) {
     89 ( 0.00%)              Entry::Occupied(entry) => *entry.get(),
      .                       Entry::Vacant(entry) => {
    435 ( 0.00%)                  let index = self.ty_freshen_count;
  1,740 ( 0.00%)                  self.ty_freshen_count += 1;
    870 ( 0.00%)                  let t = self.infcx.tcx.mk_ty_infer(freshener(index));
      .                           entry.insert(t);
      .                           t
      .                       }
      .                   }
  4,716 ( 0.00%)      }
      .           
      .               fn freshen_const<F>(
      .                   &mut self,
      .                   opt_ct: Option<&'tcx ty::Const<'tcx>>,
      .                   key: ty::InferConst<'tcx>,
      .                   freshener: F,
      .                   ty: Ty<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx>
-- line 96 ----------------------------------------
-- line 111 ----------------------------------------
      .                           ct
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  2,648 ( 0.00%)          self.infcx.tcx
    816 ( 0.00%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  1,264 ( 0.00%)          match *r {
      .                       ty::ReLateBound(..) => {
      .                           // leave bound regions alone
      .                           r
      .                       }
      .           
      .                       ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReVar(_)
-- line 131 ----------------------------------------
-- line 140 ----------------------------------------
      .                               r
      .                           } else {
      .                               self.tcx().lifetimes.re_erased
      .                           }
      .                       }
      .                   }
      .               }
      .           
281,334 ( 0.06%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
140,667 ( 0.03%)          if !t.needs_infer() && !t.has_erasable_regions() {
      .                       return t;
      .                   }
      .           
      .                   let tcx = self.infcx.tcx;
      .           
  8,116 ( 0.00%)          match *t.kind() {
    556 ( 0.00%)              ty::Infer(ty::TyVar(v)) => {
  4,448 ( 0.00%)                  let opt_ty = self.infcx.inner.borrow_mut().type_variables().probe(v).known();
  5,004 ( 0.00%)                  self.freshen_ty(opt_ty, ty::TyVar(v), ty::FreshTy)
      .                       }
      .           
    528 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self.freshen_ty(
  1,056 ( 0.00%)                  self.infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .probe_value(v)
      .                               .map(|v| v.to_type(tcx)),
      .                           ty::IntVar(v),
      .                           ty::FreshIntTy,
      .                       ),
-- line 170 ----------------------------------------
-- line 210 ----------------------------------------
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Closure(..)
      .                       | ty::GeneratorWitness(..)
  3,296 ( 0.00%)              | ty::Opaque(..) => t.super_fold_with(self),
      .           
      .                       ty::Placeholder(..) | ty::Bound(..) => bug!("unexpected type {:?}", t),
      .                   }
321,447 ( 0.06%)      }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(ty::InferConst::Var(v)) => {
      .                           let opt_ct = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
-- line 230 ----------------------------------------

  5,389 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/freshen.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/set.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct SsoHashSet<T> {
      .               map: SsoHashMap<T, ()>,
      .           }
      .           
      .           /// Adapter function used ot return
      .           /// result if SsoHashMap functions into
      .           /// result SsoHashSet should return.
      .           #[inline(always)]
    163 ( 0.00%)  fn entry_to_key<K, V>((k, _v): (K, V)) -> K {
      .               k
    163 ( 0.00%)  }
      .           
      .           impl<T> SsoHashSet<T> {
      .               /// Creates an empty `SsoHashSet`.
      .               #[inline]
      .               pub fn new() -> Self {
  6,869 ( 0.00%)          Self { map: SsoHashMap::new() }
      .               }
      .           
      .               /// Creates an empty `SsoHashSet` with the specified capacity.
      .               #[inline]
      .               pub fn with_capacity(cap: usize) -> Self {
      .                   Self { map: SsoHashMap::with_capacity(cap) }
      .               }
      .           
-- line 50 ----------------------------------------
-- line 126 ----------------------------------------
      .           
      .               /// Adds a value to the set.
      .               ///
      .               /// If the set did not have this value present, `true` is returned.
      .               ///
      .               /// If the set did have this value present, `false` is returned.
      .               #[inline]
      .               pub fn insert(&mut self, elem: T) -> bool {
874,677 ( 0.18%)          self.map.insert(elem, ()).is_none()
      .               }
      .           
      .               /// Removes a value from the set. Returns whether the value was
      .               /// present in the set.
      .               #[inline]
      .               pub fn remove(&mut self, value: &T) -> bool {
      .                   self.map.remove(value).is_some()
      .               }
-- line 142 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    2,940 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   46,681 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       62 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   29,844 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   21,604 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    3,923 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
9,958,050 ( 2.00%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  227,484 ( 0.05%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
   14,898 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      137 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       73 ( 0.00%)                  while let Some(x) = self.next() {
    3,363 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   14,697 ( 0.00%)                  while let Some(x) = self.next() {
   73,578 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
      471 ( 0.00%)                  while let Some(x) = self.next() {
    6,554 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    1,664 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
   39,162 ( 0.01%)                  while let Some(x) = self.next() {
   94,424 ( 0.02%)                      if let Some(y) = f(x) {
    1,396 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      330 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
    6,943 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    1,330 ( 0.00%)                  while let Some(x) = self.next_back() {
   21,000 ( 0.00%)                      i -= 1;
   18,866 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
   90,798 ( 0.02%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
        .                       fn next_back(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
       12 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       31 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   41,584 ( 0.01%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,007,191 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .               ($byte_len:expr) => {
      .                   const BYTE_LEN: usize = $byte_len;
      .                   fn maybe_read_from_bytes_at(b: &[u8], i: usize) -> Option<Self> {
      .                       const BYTE_LEN: usize = $byte_len;
      .                       // HACK(eddyb) ideally this would be done with fully safe code,
      .                       // but slicing `[u8]` with `i * N..` is optimized worse, due to the
      .                       // possibility of `i * N` overflowing, than indexing `[[u8; N]]`.
      .                       let b = unsafe {
 63,159 ( 0.01%)                  std::slice::from_raw_parts(b.as_ptr() as *const [u8; BYTE_LEN], b.len() / BYTE_LEN)
      .                       };
      .                       b.get(i).map(|b| FixedSizeEncoding::from_bytes(b))
      .                   }
      .                   fn write_to_bytes_at(self, b: &mut [u8], i: usize) {
      .                       const BYTE_LEN: usize = $byte_len;
      .                       // HACK(eddyb) ideally this would be done with fully safe code,
      .                       // see similar comment in `read_from_bytes_at` for why it can't yet.
      .                       let b = unsafe {
      .                           std::slice::from_raw_parts_mut(
      .                               b.as_mut_ptr() as *mut [u8; BYTE_LEN],
    967 ( 0.00%)                      b.len() / BYTE_LEN,
      .                           )
      .                       };
  1,934 ( 0.00%)              self.write_to_bytes(&mut b[i]);
      .                   }
      .               };
      .           }
      .           
      .           impl FixedSizeEncoding for u32 {
      .               fixed_size_encoding_byte_len_and_defaults!(4);
      .           
      .               fn from_bytes(b: &[u8]) -> Self {
-- line 68 ----------------------------------------
-- line 78 ----------------------------------------
      .           
      .           // NOTE(eddyb) there could be an impl for `usize`, which would enable a more
      .           // generic `Lazy<T>` impl, but in the general case we might not need / want to
      .           // fit every `usize` in `u32`.
      .           impl<T> FixedSizeEncoding for Option<Lazy<T>> {
      .               fixed_size_encoding_byte_len_and_defaults!(u32::BYTE_LEN);
      .           
      .               fn from_bytes(b: &[u8]) -> Self {
  1,240 ( 0.00%)          Some(Lazy::from_position(NonZeroUsize::new(u32::from_bytes(b) as usize)?))
      .               }
      .           
      .               fn write_to_bytes(self, b: &mut [u8]) {
      .                   let position = self.map_or(0, |lazy| lazy.position.get());
      .                   let position: u32 = position.try_into().unwrap();
      .           
      .                   position.write_to_bytes(b)
      .               }
-- line 94 ----------------------------------------
-- line 143 ----------------------------------------
      .               _marker: PhantomData<(fn(&I), T)>,
      .           }
      .           
      .           impl<I: Idx, T> Default for TableBuilder<I, T>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn default() -> Self {
      3 ( 0.00%)          TableBuilder { bytes: vec![], _marker: PhantomData }
      .               }
      .           }
      .           
      .           impl<I: Idx, T> TableBuilder<I, T>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
  7,096 ( 0.00%)      pub(crate) fn set(&mut self, i: I, value: T) {
      .                   // FIXME(eddyb) investigate more compact encodings for sparse tables.
      .                   // On the PR @michaelwoerister mentioned:
      .                   // > Space requirements could perhaps be optimized by using the HAMT `popcnt`
      .                   // > trick (i.e. divide things into buckets of 32 or 64 items and then
      .                   // > store bit-masks of which item in each bucket is actually serialized).
      .                   let i = i.index();
  1,003 ( 0.00%)          let needed = (i + 1) * <Option<T>>::BYTE_LEN;
  3,002 ( 0.00%)          if self.bytes.len() < needed {
      .                       self.bytes.resize(needed, 0);
      .                   }
      .           
      .                   Some(value).write_to_bytes_at(&mut self.bytes, i);
  6,137 ( 0.00%)      }
      .           
      .               pub(crate) fn encode(&self, buf: &mut Encoder) -> Lazy<Table<I, T>> {
      .                   let pos = buf.position();
      .                   buf.emit_raw_bytes(&self.bytes).unwrap();
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(pos as usize).unwrap(), self.bytes.len())
      .               }
      .           }
      .           
-- line 180 ----------------------------------------
-- line 186 ----------------------------------------
      .           }
      .           
      .           impl<I: Idx, T> Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               /// Given the metadata, extract out the value at a particular index (if any).
      .               #[inline(never)]
 61,736 ( 0.01%)      pub(super) fn get<'a, 'tcx, M: Metadata<'a, 'tcx>>(&self, metadata: M, i: I) -> Option<T> {
      .                   debug!("Table::lookup: index={:?} len={:?}", i, self.meta);
      .           
123,472 ( 0.02%)          let start = self.position.get();
123,472 ( 0.02%)          let bytes = &metadata.blob()[start..start + self.meta];
      .                   <Option<T>>::maybe_read_from_bytes_at(bytes, i.index())?
123,472 ( 0.02%)      }
      .           
      .               /// Size of the table in entries, including possible gaps.
      .               pub(super) fn size(&self) -> usize {
      .                   self.meta / <Option<T>>::BYTE_LEN
      .               }
      .           }

125,667 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/table.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 299 ----------------------------------------
        .               #[inline(always)]
        .               pub const unsafe fn offset(self, count: isize) -> *mut T
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
        .                   // The obtained pointer is valid for writes since the caller must
        .                   // guarantee that it points to the same allocated object as `self`.
4,941,212 ( 0.99%)          unsafe { intrinsics::offset(self, count) as *mut T }
        .               }
        .           
        .               /// Calculates the offset from a pointer using wrapping arithmetic.
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
        .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
        .               #[must_use = "returns a new pointer rather than modifying its argument"]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline(always)]
        .               pub const fn wrapping_offset(self, count: isize) -> *mut T
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       35 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
        .               }
        .           
        .               /// Returns `None` if the pointer is null, or else returns a unique reference to
        .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
-- line 376 ----------------------------------------
-- line 496 ----------------------------------------
        .               /// of this issue.
        .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[inline]
        .               pub const fn guaranteed_eq(self, other: *mut T) -> bool
        .               where
        .                   T: Sized,
        .               {
      390 ( 0.00%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
        .               }
        .           
        .               /// Returns whether two pointers are guaranteed to be unequal.
        .               ///
        .               /// At runtime this function behaves like `self != other`.
        .               /// However, in some contexts (e.g., compile-time evaluation),
        .               /// it is not always possible to determine the inequality of two pointers, so this function may
        .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
-- line 512 ----------------------------------------
-- line 1055 ----------------------------------------
        .               ///
        .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[inline(always)]
        .               pub unsafe fn drop_in_place(self) {
        .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
      116 ( 0.00%)          unsafe { drop_in_place(self) }
        .               }
        .           
        .               /// Overwrites a memory location with the given value without reading or
        .               /// dropping the old value.
        .               ///
        .               /// See [`ptr::write`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1416 ----------------------------------------
        .               }
        .           }
        .           
        .           // Equality for pointers
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> PartialEq for *mut T {
        .               #[inline(always)]
        .               fn eq(&self, other: &*mut T) -> bool {
   11,716 ( 0.00%)          *self == *other
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Eq for *mut T {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

   44,293 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/maybe_uninit.rs
--------------------------------------------------------------------------------
Ir               

-- line 488 ----------------------------------------
      .               ///         unsafe { Pin::new_unchecked(ref_) }
      .               ///     }
      .               /// }
      .               /// ```
      .               #[stable(feature = "maybe_uninit_write", since = "1.55.0")]
      .               #[rustc_const_unstable(feature = "const_maybe_uninit_write", issue = "63567")]
      .               #[inline(always)]
      .               pub const fn write(&mut self, val: T) -> &mut T {
807,344 ( 0.16%)          *self = MaybeUninit::new(val);
      .                   // SAFETY: We just initialized this value.
      .                   unsafe { self.assume_init_mut() }
      .               }
      .           
      .               /// Gets a pointer to the contained value. Reading from this pointer or turning it
      .               /// into a reference is undefined behavior unless the `MaybeUninit<T>` is initialized.
      .               /// Writing to memory that this pointer (non-transitively) points to is undefined behavior
      .               /// (except inside an `UnsafeCell<T>`).
-- line 504 ----------------------------------------
-- line 626 ----------------------------------------
      .               #[inline(always)]
      .               #[rustc_diagnostic_item = "assume_init"]
      .               #[track_caller]
      .               pub const unsafe fn assume_init(self) -> T {
      .                   // SAFETY: the caller must guarantee that `self` is initialized.
      .                   // This also means that `self` must be a `value` variant.
      .                   unsafe {
      .                       intrinsics::assert_inhabited::<T>();
  1,125 ( 0.00%)              ManuallyDrop::into_inner(self.value)
      .                   }
      .               }
      .           
      .               /// Reads the value from the `MaybeUninit<T>` container. The resulting `T` is subject
      .               /// to the usual drop handling.
      .               ///
      .               /// Whenever possible, it is preferable to use [`assume_init`] instead, which
      .               /// prevents duplicating the content of the `MaybeUninit<T>`.
-- line 642 ----------------------------------------
-- line 696 ----------------------------------------
      .               #[rustc_const_unstable(feature = "const_maybe_uninit_assume_init_read", issue = "63567")]
      .               #[inline(always)]
      .               #[track_caller]
      .               pub const unsafe fn assume_init_read(&self) -> T {
      .                   // SAFETY: the caller must guarantee that `self` is initialized.
      .                   // Reading from `self.as_ptr()` is safe since `self` should be initialized.
      .                   unsafe {
      .                       intrinsics::assert_inhabited::<T>();
    262 ( 0.00%)              self.as_ptr().read()
      .                   }
      .               }
      .           
      .               /// Drops the contained value in place.
      .               ///
      .               /// If you have ownership of the `MaybeUninit`, you can also use
      .               /// [`assume_init`] as an alternative.
      .               ///
-- line 712 ----------------------------------------
-- line 723 ----------------------------------------
      .               /// this does not constitute a stable guarantee), because the only
      .               /// requirement the compiler knows about it is that the data pointer must be
      .               /// non-null. Dropping such a `Vec<T>` however will cause undefined
      .               /// behaviour.
      .               ///
      .               /// [`assume_init`]: MaybeUninit::assume_init
      .               /// [`Vec<T>`]: ../../std/vec/struct.Vec.html
      .               #[stable(feature = "maybe_uninit_extra", since = "1.60.0")]
    501 ( 0.00%)      pub unsafe fn assume_init_drop(&mut self) {
      .                   // SAFETY: the caller must guarantee that `self` is initialized and
      .                   // satisfies all invariants of `T`.
      .                   // Dropping the value in place is safe if that is the case.
      .                   unsafe { ptr::drop_in_place(self.as_mut_ptr()) }
    324 ( 0.00%)      }
      .           
      .               /// Gets a shared reference to the contained value.
      .               ///
      .               /// This can be useful when we want to access a `MaybeUninit` that has been
      .               /// initialized but don't have ownership of the `MaybeUninit` (preventing the use
      .               /// of `.assume_init()`).
      .               ///
      .               /// # Safety
-- line 744 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .           pub use rustc_middle::traits::*;
      .           
      .           /// An `Obligation` represents some trait reference (e.g., `i32: Eq`) for
      .           /// which the "impl_source" must be found. The process of finding an "impl_source" is
      .           /// called "resolving" the `Obligation`. This process consists of
      .           /// either identifying an `impl` (e.g., `impl Eq for i32`) that
      .           /// satisfies the obligation, or else finding a bound that is in
      .           /// scope. The eventual result is usually a `Selection` (defined below).
199,017 ( 0.04%)  #[derive(Clone, PartialEq, Eq, Hash)]
      .           pub struct Obligation<'tcx, T> {
      .               /// The reason we have to prove this thing.
      .               pub cause: ObligationCause<'tcx>,
      .           
      .               /// The environment in which we should prove this thing.
686,612 ( 0.14%)      pub param_env: ty::ParamEnv<'tcx>,
      .           
      .               /// The thing we are trying to prove.
508,438 ( 0.10%)      pub predicate: T,
      .           
      .               /// If we started proving this as a result of trying to prove
      .               /// something else, track the total depth to ensure termination.
      .               /// If this goes over a certain threshold, we abort compilation --
      .               /// in such cases, we can not say whether or not the predicate
      .               /// holds for certain. Stupid halting problem; such a drag.
619,944 ( 0.12%)      pub recursion_depth: usize,
      .           }
      .           
      .           pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;
      .           pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> PredicateObligation<'tcx> {
      .               /// Flips the polarity of the inner predicate.
      .               ///
-- line 60 ----------------------------------------
-- line 67 ----------------------------------------
      .                       recursion_depth: self.recursion_depth,
      .                   })
      .               }
      .           }
      .           
      .           impl TraitObligation<'_> {
      .               /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.
      .               pub fn is_const(&self) -> bool {
 14,500 ( 0.00%)          match (self.predicate.skip_binder().constness, self.param_env.constness()) {
      .                       (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,
      .                       _ => false,
      .                   }
  3,625 ( 0.00%)      }
      .           }
      .           
      .           // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(PredicateObligation<'_>, 48);
      .           
      .           pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;
      .           
-- line 87 ----------------------------------------
-- line 106 ----------------------------------------
      .           }
      .           
      .           impl<'tcx, O> Obligation<'tcx, O> {
      .               pub fn new(
      .                   cause: ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: O,
      .               ) -> Obligation<'tcx, O> {
  6,334 ( 0.00%)          Obligation { cause, param_env, recursion_depth: 0, predicate }
      .               }
      .           
      .               pub fn with_depth(
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: O,
      .               ) -> Obligation<'tcx, O> {
 36,264 ( 0.01%)          Obligation { cause, param_env, recursion_depth, predicate }
      .               }
      .           
      .               pub fn misc(
      .                   span: Span,
      .                   body_id: hir::HirId,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_ref: O,
      .               ) -> Obligation<'tcx, O> {
    168 ( 0.00%)          Obligation::new(ObligationCause::misc(span, body_id), param_env, trait_ref)
      .               }
      .           
      .               pub fn with<P>(&self, value: P) -> Obligation<'tcx, P> {
 20,823 ( 0.00%)          Obligation {
      .                       cause: self.cause.clone(),
 26,727 ( 0.01%)              param_env: self.param_env,
 26,757 ( 0.01%)              recursion_depth: self.recursion_depth,
 12,103 ( 0.00%)              predicate: value,
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> FulfillmentError<'tcx> {
      .               pub fn new(
      .                   obligation: PredicateObligation<'tcx>,
      .                   code: FulfillmentErrorCode<'tcx>,
-- line 148 ----------------------------------------
-- line 149 ----------------------------------------
      .                   root_obligation: PredicateObligation<'tcx>,
      .               ) -> FulfillmentError<'tcx> {
      .                   FulfillmentError { obligation, code, root_obligation }
      .               }
      .           }
      .           
      .           impl<'tcx> TraitObligation<'tcx> {
      .               pub fn polarity(&self) -> ty::ImplPolarity {
  8,981 ( 0.00%)          self.predicate.skip_binder().polarity
  8,981 ( 0.00%)      }
      .           
 11,382 ( 0.00%)      pub fn self_ty(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
 39,837 ( 0.01%)          self.predicate.map_bound(|p| p.self_ty())
 22,764 ( 0.00%)      }
      .           }

338,811 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
       48 ( 0.00%)      fn clone(&self) -> Self {
       72 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
       11 ( 0.00%)              table: self.table.clone(),
        .                   }
       54 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   32,954 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  181,826 ( 0.04%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   32,896 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        8 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
   15,273 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       46 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
      787 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
    5,039 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       72 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
       80 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   48,958 ( 0.01%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  117,340 ( 0.02%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   46,628 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
   56,906 ( 0.01%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       37 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      111 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
       74 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
       37 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,849,421 ( 0.37%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
       17 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       10 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
  764,566 ( 0.15%)              self.table
1,266,374 ( 0.25%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   31,948 ( 0.01%)              None
        .                   }
1,907,619 ( 0.38%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,865 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  111,708 ( 0.02%)          match self.remove_entry(k) {
   13,323 ( 0.00%)              Some((_, v)) => Some(v),
    1,627 ( 0.00%)              None => None,
        .                   }
    4,023 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   30,415 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  916,372 ( 0.18%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
2,079,936 ( 0.42%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
2,360,698 ( 0.47%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  280,752 ( 0.06%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
1,497,994 ( 0.30%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
   75,058 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  161,068 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  265,175 ( 0.05%)          self.from_hash(hash, equivalent(k))
  303,294 ( 0.06%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
  254,139 ( 0.05%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  124,308 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       44 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    1,297 ( 0.00%)          IntoIter {
      938 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
      132 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    6,816 ( 0.00%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
       16 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        1 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
       65 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
       12 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   12,067 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
    9,529 ( 0.00%)          let iter = iter.into_iter();
    1,895 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
       66 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
  116,362 ( 0.02%)              self.insert(k, v);
        .                   });
   10,031 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

  798,785 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
   853,472 ( 0.17%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
    40,114 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
10,471,648 ( 2.10%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   137,858 ( 0.03%)          self.stride += Group::WIDTH;
   137,858 ( 0.03%)          self.pos += self.stride;
    84,323 ( 0.02%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    36,488 ( 0.01%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
    55,675 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    42,654 ( 0.01%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   116,765 ( 0.02%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    30,012 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
    38,296 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    82,454 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
        32 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
        30 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        35 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     5,294 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     2,028 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     2,028 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
     4,056 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
       432 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     3,624 ( 0.00%)          self.erase_no_drop(&item);
         4 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
    88,622 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
        72 ( 0.00%)          match self.find(hash, eq) {
       337 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
     6,162 ( 0.00%)              None => None,
         .                   }
   128,271 ( 0.03%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    10,282 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    89,947 ( 0.02%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    54,446 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   139,785 ( 0.03%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
    62,800 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,474,500 ( 0.30%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     2,303 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
   815,294 ( 0.16%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         4 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,100,170 ( 0.22%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   178,320 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        34 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   133,740 ( 0.03%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
        41 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   110,264 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    11,172 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   230,946 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   185,664 ( 0.04%)          self.table.items += 1;
         .                   bucket
        72 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
       136 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
       212 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
     1,232 ( 0.00%)              eq(self.bucket(index).as_ref())
        64 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
        23 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
       136 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       710 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
         .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       497 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   123,667 ( 0.02%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    11,067 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
       448 ( 0.00%)          let allocation = self.into_allocation();
       336 ( 0.00%)          RawIntoIter {
       560 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
       156 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
        63 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   101,478 ( 0.02%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
    36,245 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    10,280 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    21,174 ( 0.00%)          Ok(Self {
         .                       ctrl,
    21,780 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
    26,516 ( 0.01%)      }
         .           
         .               #[inline]
    12,874 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     3,226 ( 0.00%)          if capacity == 0 {
     2,100 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
    16,704 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
     7,146 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    12,874 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    40,083 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    40,083 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
    80,166 ( 0.02%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
   557,334 ( 0.11%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 1,594,549 ( 0.32%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
   735,306 ( 0.15%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
     7,068 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 1,056,587 ( 0.21%)              for bit in group.match_byte(h2_hash) {
 2,053,015 ( 0.41%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
   866,777 ( 0.17%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
   340,717 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 2,183,712 ( 0.44%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
 7,210,182 ( 1.45%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 1,019,085 ( 0.20%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
   815,268 ( 0.16%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 1,550,685 ( 0.31%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
   516,895 ( 0.10%)          *self.ctrl(index) = ctrl;
   516,930 ( 0.10%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
    55,733 ( 0.01%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
    19,881 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
   221,225 ( 0.04%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
       861 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    35,908 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    17,340 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    34,680 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    34,680 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    82,224 ( 0.02%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    17,340 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     2,108 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   321,983 ( 0.06%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    17,340 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
     8,590 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
       408 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
       497 ( 0.00%)          self.items = 0;
       408 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    21,248 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
    84,992 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   104,255 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
    84,992 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
        96 ( 0.00%)      fn clone(&self) -> Self {
        18 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
       108 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        14 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   117,108 ( 0.02%)      fn drop(&mut self) {
    90,688 ( 0.02%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
    92,976 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       448 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
       560 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   162,591 ( 0.03%)                  if let Some(index) = self.current_group.lowest_set_bit() {
     4,320 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
     2,376 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
    50,529 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     3,109 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
       196 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     9,051 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
       184 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,505 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
     3,998 ( 0.00%)          if let Some(b) = self.iter.next() {
   253,417 ( 0.05%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
     5,010 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       364 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
       726 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
        64 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
        33 ( 0.00%)      fn next(&mut self) -> Option<T> {
        21 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
        67 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         2 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
         1 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

 4,366,510 ( 0.88%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs
--------------------------------------------------------------------------------
Ir                 

-- line 2075 ----------------------------------------
        .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
        .               // Therefore, compiletime_check and runtime_check are observably equivalent.
        .               unsafe {
        .                   const_eval_select((src, dst, count), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `copy_nonoverlapping` must be
        .               // upheld by the caller.
4,586,276 ( 0.92%)      unsafe { copy_nonoverlapping(src, dst, count) }
        .           }
        .           
        .           /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source
        .           /// and destination may overlap.
        .           ///
        .           /// If the source and destination will *never* overlap,
        .           /// [`copy_nonoverlapping`] can be used instead.
        .           ///
-- line 2091 ----------------------------------------
-- line 2165 ----------------------------------------
        .               #[cfg(debug_assertions)]
        .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
        .               // Therefore, compiletime_check and runtime_check are observably equivalent.
        .               unsafe {
        .                   const_eval_select((src, dst), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `copy` must be upheld by the caller.
   18,243 ( 0.00%)      unsafe { copy(src, dst, count) }
        .           }
        .           
        .           /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to
        .           /// `val`.
        .           ///
        .           /// `write_bytes` is similar to C's [`memset`], but sets `count *
        .           /// size_of::<T>()` bytes to `val`.
        .           ///
-- line 2181 ----------------------------------------
-- line 2266 ----------------------------------------
        .               #[cfg(debug_assertions)]
        .               // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to
        .               // not do them during compile time
        .               unsafe {
        .                   const_eval_select((dst,), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
   70,031 ( 0.01%)      unsafe { write_bytes(dst, val, count) }
        .           }
        .           
        .           /// Selects which function to call depending on the context.
        .           ///
        .           /// If this function is evaluated at compile-time, then a call to this
        .           /// intrinsic will be replaced with a call to `called_in_const`. It gets
        .           /// replaced with a call to `called_at_rt` otherwise.
        .           ///
-- line 2282 ----------------------------------------

   12,034 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           
      .           use super::BuiltinImplConditions;
      .           use super::IntercrateAmbiguityCause;
      .           use super::OverflowError;
      .           use super::SelectionCandidate::{self, *};
      .           use super::{EvaluatedCandidate, SelectionCandidateSet, SelectionContext, TraitObligationStack};
      .           
      .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 50,936 ( 0.01%)      #[instrument(level = "debug", skip(self))]
 63,670 ( 0.01%)      pub(super) fn candidate_from_obligation<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   // Watch out for overflow. This intentionally bypasses (and does
      .                   // not update) the cache.
 12,734 ( 0.00%)          self.check_recursion_limit(&stack.obligation, &stack.obligation)?;
      .           
      .                   // Check the cache. Note that we freshen the trait-ref
      .                   // separately rather than using `stack.fresh_trait_ref` --
      .                   // this is because we want the unbound variables to be
      .                   // replaced with fresh types starting from index 0.
 57,303 ( 0.01%)          let cache_fresh_trait_pred = self.infcx.freshen(stack.obligation.predicate);
      .                   debug!(?cache_fresh_trait_pred);
      .                   debug_assert!(!stack.obligation.predicate.has_escaping_bound_vars());
      .           
 55,164 ( 0.01%)          if let Some(c) =
 19,101 ( 0.00%)              self.check_candidate_cache(stack.obligation.param_env, cache_fresh_trait_pred)
      .                   {
      .                       debug!(candidate = ?c, "CACHE HIT");
      .                       return c;
      .                   }
      .           
      .                   // If no match, compute result and insert into cache.
      .                   //
      .                   // FIXME(nikomatsakis) -- this cache is not taking into
      .                   // account cycles that may have occurred in forming the
      .                   // candidate. I don't know of any specific problems that
      .                   // result but it seems awfully suspicious.
 19,554 ( 0.00%)          let (candidate, dep_node) =
  9,777 ( 0.00%)              self.in_task(|this| this.candidate_from_obligation_no_cache(stack));
      .           
      .                   debug!(?candidate, "CACHE MISS");
      .                   self.insert_candidate_cache(
  6,518 ( 0.00%)              stack.obligation.param_env,
 13,036 ( 0.00%)              cache_fresh_trait_pred,
      .                       dep_node,
      .                       candidate.clone(),
      .                   );
 39,108 ( 0.01%)          candidate
      .               }
      .           
 32,590 ( 0.01%)      fn candidate_from_obligation_no_cache<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
    110 ( 0.00%)          if let Some(conflict) = self.is_knowable(stack) {
      .                       debug!("coherence stage: not knowable");
     18 ( 0.00%)              if self.intercrate_ambiguity_causes.is_some() {
      .                           debug!("evaluate_stack: intercrate_ambiguity_causes is some");
      .                           // Heuristics: show the diagnostics when there are no candidates in crate.
     72 ( 0.00%)                  if let Ok(candidate_set) = self.assemble_candidates(stack) {
      .                               let mut no_candidates_apply = true;
      .           
      .                               for c in candidate_set.vec.iter() {
      .                                   if self.evaluate_candidate(stack, &c)?.may_apply() {
      .                                       no_candidates_apply = false;
      .                                       break;
      .                                   }
      .                               }
      .           
     16 ( 0.00%)                      if !candidate_set.ambiguous && no_candidates_apply {
     18 ( 0.00%)                          let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
     24 ( 0.00%)                          let self_ty = trait_ref.self_ty();
     48 ( 0.00%)                          let (trait_desc, self_desc) = with_no_trimmed_paths(|| {
     30 ( 0.00%)                              let trait_desc = trait_ref.print_only_trait_path().to_string();
      6 ( 0.00%)                              let self_desc = if self_ty.has_concrete_skeleton() {
     18 ( 0.00%)                                  Some(self_ty.to_string())
      .                                       } else {
      .                                           None
      .                                       };
     30 ( 0.00%)                              (trait_desc, self_desc)
      .                                   });
     18 ( 0.00%)                          let cause = if let Conflict::Upstream = conflict {
     12 ( 0.00%)                              IntercrateAmbiguityCause::UpstreamCrateUpdate { trait_desc, self_desc }
      .                                   } else {
      .                                       IntercrateAmbiguityCause::DownstreamCrate { trait_desc, self_desc }
      .                                   };
      .                                   debug!(?cause, "evaluate_stack: pushing cause");
     72 ( 0.00%)                          self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
      .                               }
      .                           }
      .                       }
     36 ( 0.00%)              return Ok(None);
      .                   }
      .           
  9,723 ( 0.00%)          let candidate_set = self.assemble_candidates(stack)?;
      .           
  6,482 ( 0.00%)          if candidate_set.ambiguous {
      .                       debug!("candidate set contains ambig");
     32 ( 0.00%)              return Ok(None);
      .                   }
      .           
      .                   let candidates = candidate_set.vec;
      .           
      .                   debug!(?stack, ?candidates, "assembled {} candidates", candidates.len());
      .           
      .                   // At this point, we know that each of the entries in the
      .                   // candidate set is *individually* applicable. Now we have to
      .                   // figure out if they contain mutual incompatibilities. This
      .                   // frequently arises if we have an unconstrained input type --
      .                   // for example, we are looking for `$0: Eq` where `$0` is some
      .                   // unconstrained type variable. In that case, we'll get a
      .                   // candidate which assumes $0 == int, one that assumes `$0 ==
      .                   // usize`, etc. This spells an ambiguity.
      .           
 12,900 ( 0.00%)          let mut candidates = self.filter_impls(candidates, stack.obligation);
      .           
      .                   // If there is more than one candidate, first winnow them down
      .                   // by considering extra conditions (nested obligations and so
      .                   // forth). We don't winnow if there is exactly one
      .                   // candidate. This is a relatively minor distinction but it
      .                   // can lead to better inference and error-reporting. An
      .                   // example would be if there was an impl:
      .                   //
      .                   //     impl<T:Clone> Vec<T> { fn push_clone(...) { ... } }
      .                   //
      .                   // and we were to see some code `foo.push_clone()` where `boo`
      .                   // is a `Vec<Bar>` and `Bar` does not implement `Clone`.  If
      .                   // we were to winnow, we'd wind up with zero candidates.
      .                   // Instead, we select the right impl now but report "`Bar` does
      .                   // not implement `Clone`".
  6,450 ( 0.00%)          if candidates.len() == 1 {
  8,670 ( 0.00%)              return self.filter_reservation_impls(candidates.pop().unwrap(), stack.obligation);
      .                   }
      .           
      .                   // Winnow, but record the exact outcome of evaluation, which
      .                   // is needed for specialization. Propagate overflow if it occurs.
  2,010 ( 0.00%)          let mut candidates = candidates
      .                       .into_iter()
      .                       .map(|c| match self.evaluate_candidate(stack, &c) {
  4,410 ( 0.00%)                  Ok(eval) if eval.may_apply() => {
  4,952 ( 0.00%)                      Ok(Some(EvaluatedCandidate { candidate: c, evaluation: eval }))
      .                           }
      .                           Ok(_) => Ok(None),
      .                           Err(OverflowError::Canonical) => Err(Overflow),
      .                           Err(OverflowError::ErrorReporting) => Err(ErrorReporting),
      .                       })
      .                       .flat_map(Result::transpose)
      .                       .collect::<Result<Vec<_>, _>>()?;
      .           
      .                   debug!(?stack, ?candidates, "winnowed to {} candidates", candidates.len());
      .           
    335 ( 0.00%)          let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();
      .           
  1,005 ( 0.00%)          let sized_predicate = self.tcx().lang_items().sized_trait()
    670 ( 0.00%)              == Some(stack.obligation.predicate.skip_binder().def_id());
      .           
      .                   // If there are STILL multiple candidates, we can further
      .                   // reduce the list by dropping duplicates -- including
      .                   // resolving specializations.
  1,005 ( 0.00%)          if candidates.len() > 1 {
      .                       let mut i = 0;
     42 ( 0.00%)              while i < candidates.len() {
    999 ( 0.00%)                  let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {
      .                               self.candidate_should_be_dropped_in_favor_of(
      .                                   sized_predicate,
      .                                   &candidates[i],
      .                                   &candidates[j],
      .                                   needs_infer,
      .                               )
      .                           });
      .                           if is_dup {
      .                               debug!(candidate = ?candidates[i], "Dropping candidate #{}/{}", i, candidates.len());
      .                               candidates.swap_remove(i);
      .                           } else {
      .                               debug!(candidate = ?candidates[i], "Retaining candidate #{}/{}", i, candidates.len());
     42 ( 0.00%)                      i += 1;
      .           
      .                               // If there are *STILL* multiple candidates, give up
      .                               // and report ambiguity.
     63 ( 0.00%)                      if i > 1 {
      .                                   debug!("multiple matches, ambig");
     84 ( 0.00%)                          return Err(Ambiguous(
      .                                       candidates
      .                                           .into_iter()
    489 ( 0.00%)                                  .filter_map(|c| match c.candidate {
      .                                               SelectionCandidate::ImplCandidate(def_id) => Some(def_id),
      .                                               _ => None,
      .                                           })
      .                                           .collect(),
      .                                   ));
      .                               }
      .                           }
      .                       }
-- line 215 ----------------------------------------
-- line 219 ----------------------------------------
      .                   // that we know of, anyway. Note that in the case where there
      .                   // are unbound type variables within the obligation, it might
      .                   // be the case that you could still satisfy the obligation
      .                   // from another crate by instantiating the type variables with
      .                   // a type from another crate that does have an impl. This case
      .                   // is checked for in `evaluate_stack` (and hence users
      .                   // who might care about this case, like coherence, should use
      .                   // that function).
    328 ( 0.00%)          if candidates.is_empty() {
      .                       // If there's an error type, 'downgrade' our result from
      .                       // `Err(Unimplemented)` to `Ok(None)`. This helps us avoid
      .                       // emitting additional spurious errors, since we're guaranteed
      .                       // to have emitted at least one.
    410 ( 0.00%)              if stack.obligation.references_error() {
      .                           debug!("no results for error type, treating as ambiguous");
    205 ( 0.00%)                  return Ok(None);
      .                       }
      .                       return Err(Unimplemented);
      .                   }
      .           
      .                   // Just one candidate left.
    369 ( 0.00%)          self.filter_reservation_impls(candidates.pop().unwrap().candidate, stack.obligation)
 29,987 ( 0.01%)      }
      .           
 26,016 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
 32,520 ( 0.01%)      pub(super) fn assemble_candidates<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> Result<SelectionCandidateSet<'tcx>, SelectionError<'tcx>> {
  3,252 ( 0.00%)          let TraitObligationStack { obligation, .. } = *stack;
 61,788 ( 0.01%)          let obligation = &Obligation {
  3,252 ( 0.00%)              param_env: obligation.param_env,
      .                       cause: obligation.cause.clone(),
  9,756 ( 0.00%)              recursion_depth: obligation.recursion_depth,
 39,024 ( 0.01%)              predicate: self.infcx().resolve_vars_if_possible(obligation.predicate),
      .                   };
      .           
  6,566 ( 0.00%)          if obligation.predicate.skip_binder().self_ty().is_ty_var() {
      .                       // Self is a type variable (e.g., `_: AsRef<str>`).
      .                       //
      .                       // This is somewhat problematic, as the current scheme can't really
      .                       // handle it turning to be a projection. This does end up as truly
      .                       // ambiguous in most cases anyway.
      .                       //
      .                       // Take the fast path out - this also improves
      .                       // performance by preventing assemble_candidates_from_impls from
      .                       // matching every impl for this trait.
     63 ( 0.00%)              return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });
      .                   }
      .           
  9,693 ( 0.00%)          let mut candidates = SelectionCandidateSet { vec: Vec::new(), ambiguous: false };
      .           
      .                   // The only way to prove a NotImplemented(T: Foo) predicate is via a negative impl.
      .                   // There are no compiler built-in rules for this.
  6,462 ( 0.00%)          if obligation.polarity() == ty::ImplPolarity::Negative {
      .                       self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
      .                       self.assemble_candidates_from_impls(obligation, &mut candidates);
      .                   } else {
  3,231 ( 0.00%)              self.assemble_candidates_for_trait_alias(obligation, &mut candidates);
      .           
      .                       // Other bounds. Consider both in-scope bounds from fn decl
      .                       // and applicable impls. There is a certain set of precedence rules here.
 19,386 ( 0.00%)              let def_id = obligation.predicate.def_id();
  3,231 ( 0.00%)              let lang_items = self.tcx().lang_items();
      .           
 10,117 ( 0.00%)              if lang_items.copy_trait() == Some(def_id) {
      .                           debug!(obligation_self_ty = ?obligation.predicate.skip_binder().self_ty());
      .           
      .                           // User-defined copy impls are permitted, but only for
      .                           // structs and enums.
    212 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
      .           
      .                           // For other types, we'll use the builtin rules.
    848 ( 0.00%)                  let copy_conditions = self.copy_clone_conditions(obligation);
  2,120 ( 0.00%)                  self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates);
  9,057 ( 0.00%)              } else if lang_items.discriminant_kind_trait() == Some(def_id) {
      .                           // `DiscriminantKind` is automatically implemented for every type.
      .                           candidates.vec.push(DiscriminantKindCandidate);
  9,057 ( 0.00%)              } else if lang_items.pointee_trait() == Some(def_id) {
      .                           // `Pointee` is automatically implemented for every type.
      .                           candidates.vec.push(PointeeCandidate);
 10,625 ( 0.00%)              } else if lang_items.sized_trait() == Some(def_id) {
      .                           // Sized is never implementable by end-users, it is
      .                           // always automatically computed.
    784 ( 0.00%)                  let sized_conditions = self.sized_conditions(obligation);
  7,840 ( 0.00%)                  self.assemble_builtin_bound_candidates(sized_conditions, &mut candidates);
  6,733 ( 0.00%)              } else if lang_items.unsize_trait() == Some(def_id) {
     28 ( 0.00%)                  self.assemble_candidates_for_unsizing(obligation, &mut candidates);
  6,663 ( 0.00%)              } else if lang_items.drop_trait() == Some(def_id)
      .                           && obligation.predicate.skip_binder().constness == ty::BoundConstness::ConstIfConst
      .                       {
      .                           self.assemble_const_drop_candidates(obligation, &mut candidates);
      .                       } else {
  6,715 ( 0.00%)                  if lang_items.clone_trait() == Some(def_id) {
      .                               // Same builtin conditions as `Copy`, i.e., every type which has builtin support
      .                               // for `Copy` also has builtin support for `Clone`, and tuples/arrays of `Clone`
      .                               // types have builtin support for `Clone`.
    104 ( 0.00%)                      let clone_conditions = self.copy_clone_conditions(obligation);
    234 ( 0.00%)                      self.assemble_builtin_bound_candidates(clone_conditions, &mut candidates);
      .                           }
      .           
  2,221 ( 0.00%)                  self.assemble_generator_candidates(obligation, &mut candidates);
  2,221 ( 0.00%)                  self.assemble_closure_candidates(obligation, &mut candidates);
  2,221 ( 0.00%)                  self.assemble_fn_pointer_candidates(obligation, &mut candidates);
  6,663 ( 0.00%)                  self.assemble_candidates_from_impls(obligation, &mut candidates);
      .                           self.assemble_candidates_from_object_ty(obligation, &mut candidates);
      .                       }
      .           
      .                       self.assemble_candidates_from_projected_tys(obligation, &mut candidates);
      .                       self.assemble_candidates_from_caller_bounds(stack, &mut candidates)?;
      .                       // Auto implementations have lower priority, so we only
      .                       // consider triggering a default if there is no other impl that can apply.
  3,231 ( 0.00%)              if candidates.vec.is_empty() {
      .                           self.assemble_candidates_from_auto_impls(obligation, &mut candidates);
      .                       }
      .                   }
      .                   debug!("candidate list size: {}", candidates.vec.len());
 42,003 ( 0.01%)          Ok(candidates)
      .               }
      .           
      .               #[tracing::instrument(level = "debug", skip(self, candidates))]
      .               fn assemble_candidates_from_projected_tys(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   // Before we go into the whole placeholder thing, just
      .                   // quickly check if the self-type is a projection at all.
 29,051 ( 0.01%)          match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {
      .                       ty::Projection(_) | ty::Opaque(..) => {}
      .                       ty::Infer(ty::TyVar(_)) => {
      .                           span_bug!(
      .                               obligation.cause.span,
      .                               "Self=_ should have been handled by assemble_candidates"
      .                           );
      .                       }
      .                       _ => return,
      .                   }
      .           
     48 ( 0.00%)          let result = self
      .                       .infcx
     24 ( 0.00%)              .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));
      .           
     48 ( 0.00%)          candidates.vec.extend(result.into_iter().map(ProjectionCandidate));
      .               }
      .           
      .               /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller
      .               /// supplied to find out whether it is listed among them.
      .               ///
      .               /// Never affects the inference environment.
      .               #[tracing::instrument(level = "debug", skip(self, stack, candidates))]
      .               fn assemble_candidates_from_caller_bounds<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) -> Result<(), SelectionError<'tcx>> {
      .                   debug!(?stack.obligation);
      .           
 12,924 ( 0.00%)          let all_bounds = stack
      .                       .obligation
      .                       .param_env
      .                       .caller_bounds()
      .                       .iter()
127,968 ( 0.03%)              .filter_map(|o| o.to_opt_poly_trait_pred());
      .           
      .                   // Micro-optimization: filter out predicates relating to different traits.
      .                   let matching_bounds =
658,044 ( 0.13%)              all_bounds.filter(|p| p.def_id() == stack.obligation.predicate.def_id());
      .           
      .                   // Keep only those bounds which may apply, and propagate overflow if it occurs.
      .                   for bound in matching_bounds {
      .                       // FIXME(oli-obk): it is suspicious that we are dropping the constness and
      .                       // polarity here.
  7,172 ( 0.00%)              let wc = self.evaluate_where_clause(stack, bound.map_bound(|t| t.trait_ref))?;
 14,344 ( 0.00%)              if wc.may_apply() {
      .                           candidates.vec.push(ParamCandidate(bound));
      .                       }
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
 17,768 ( 0.00%)      fn assemble_generator_candidates(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
 26,652 ( 0.01%)          if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {
      .                       return;
      .                   }
      .           
      .                   // Okay to skip binder because the substs on generator types never
      .                   // touch bound regions, they just capture the in-scope
      .                   // type/region parameters.
      .                   let self_ty = obligation.self_ty().skip_binder();
      .                   match self_ty.kind() {
-- line 414 ----------------------------------------
-- line 418 ----------------------------------------
      .                           candidates.vec.push(GeneratorCandidate);
      .                       }
      .                       ty::Infer(ty::TyVar(_)) => {
      .                           debug!("assemble_generator_candidates: ambiguous self-type");
      .                           candidates.ambiguous = true;
      .                       }
      .                       _ => {}
      .                   }
 15,547 ( 0.00%)      }
      .           
      .               /// Checks for the artificial impl that the compiler will create for an obligation like `X :
      .               /// FnMut<..>` where `X` is a closure type.
      .               ///
      .               /// Note: the type parameters on a closure candidate are modeled as *output* type
      .               /// parameters and hence do not affect whether this trait is a match or not. They will be
      .               /// unified during the confirmation step.
 15,547 ( 0.00%)      fn assemble_closure_candidates(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
 24,431 ( 0.00%)          let kind = match self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()) {
      .                       Some(k) => k,
      .                       None => {
      .                           return;
      .                       }
      .                   };
      .           
      .                   // Okay to skip binder because the substs on closure types never
      .                   // touch bound regions, they just capture the in-scope
-- line 447 ----------------------------------------
-- line 463 ----------------------------------------
      .                           }
      .                       }
      .                       ty::Infer(ty::TyVar(_)) => {
      .                           debug!("assemble_unboxed_closure_candidates: ambiguous self-type");
      .                           candidates.ambiguous = true;
      .                       }
      .                       _ => {}
      .                   }
 13,326 ( 0.00%)      }
      .           
      .               /// Implements one of the `Fn()` family for a fn pointer.
 19,989 ( 0.00%)      fn assemble_fn_pointer_candidates(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   // We provide impl of all fn traits for fn pointers.
 22,210 ( 0.00%)          if self.tcx().fn_trait_kind_from_lang_item(obligation.predicate.def_id()).is_none() {
      .                       return;
      .                   }
      .           
      .                   // Okay to skip binder because what we are inspecting doesn't involve bound regions.
      .                   let self_ty = obligation.self_ty().skip_binder();
      .                   match *self_ty.kind() {
      .                       ty::Infer(ty::TyVar(_)) => {
      .                           debug!("assemble_fn_pointer_candidates: ambiguous self-type");
-- line 488 ----------------------------------------
-- line 513 ----------------------------------------
      .                                   candidates
      .                                       .vec
      .                                       .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });
      .                               }
      .                           }
      .                       }
      .                       _ => {}
      .                   }
 17,768 ( 0.00%)      }
      .           
      .               /// Searches for impls that might apply to `obligation`.
 24,330 ( 0.00%)      fn assemble_candidates_from_impls(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   debug!(?obligation, "assemble_candidates_from_impls");
      .           
      .                   // Essentially any user-written impl will match with an error type,
      .                   // so creating `ImplCandidates` isn't useful. However, we might
      .                   // end up finding a candidate elsewhere (e.g. a `BuiltinCandidate` for `Sized)
      .                   // This helps us avoid overflow: see issue #72839
      .                   // Since compilation is already guaranteed to fail, this is just
      .                   // to try to show the 'nicest' possible errors to the user.
      .                   // We don't check for errors in the `ParamEnv` - in practice,
      .                   // it seems to cause us to be overly aggressive in deciding
      .                   // to give up searching for candidates, leading to spurious errors.
  4,866 ( 0.00%)          if obligation.predicate.references_error() {
      .                       return;
      .                   }
      .           
  7,299 ( 0.00%)          self.tcx().for_each_relevant_impl(
 19,464 ( 0.00%)              obligation.predicate.def_id(),
      .                       obligation.predicate.skip_binder().trait_ref.self_ty(),
 12,165 ( 0.00%)              |impl_def_id| {
 53,512 ( 0.01%)                  self.infcx.probe(|_| {
 51,206 ( 0.01%)                      if let Ok(_substs) = self.match_impl(impl_def_id, obligation) {
  5,536 ( 0.00%)                          candidates.vec.push(ImplCandidate(impl_def_id));
      .                               }
      .                           });
      .                       },
      .                   );
 19,464 ( 0.00%)      }
      .           
      .               fn assemble_candidates_from_auto_impls(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
    211 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
      .                   debug!(?self_ty, "assemble_candidates_from_auto_impls");
      .           
  1,266 ( 0.00%)          let def_id = obligation.predicate.def_id();
      .           
    844 ( 0.00%)          if self.tcx().trait_is_auto(def_id) {
      .                       match self_ty.kind() {
      .                           ty::Dynamic(..) => {
      .                               // For object types, we don't know what the closed
      .                               // over types are. This means we conservatively
      .                               // say nothing; a candidate may be added by
      .                               // `assemble_candidates_from_object_ty`.
      .                           }
      .                           ty::Foreign(..) => {
-- line 576 ----------------------------------------
-- line 625 ----------------------------------------
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   debug!(
      .                       self_ty = ?obligation.self_ty().skip_binder(),
      .                       "assemble_candidates_from_object_ty",
      .                   );
      .           
 17,768 ( 0.00%)          self.infcx.probe(|_snapshot| {
      .                       // The code below doesn't care about regions, and the
      .                       // self-ty here doesn't escape this probe, so just erase
      .                       // any LBR.
  2,221 ( 0.00%)              let self_ty = self.tcx().erase_late_bound_regions(obligation.self_ty());
 11,121 ( 0.00%)              let poly_trait_ref = match self_ty.kind() {
      .                           ty::Dynamic(ref data, ..) => {
      .                               if data.auto_traits().any(|did| did == obligation.predicate.def_id()) {
      .                                   debug!(
      .                                       "assemble_candidates_from_object_ty: matched builtin bound, \
      .                                        pushing candidate"
      .                                   );
      .                                   candidates.vec.push(BuiltinObjectCandidate);
      .                                   return;
-- line 646 ----------------------------------------
-- line 739 ----------------------------------------
      .                   };
      .           
      .                   let def_id = data.principal_def_id()?;
      .           
      .                   return Some((normalized_ty, def_id));
      .               }
      .           
      .               /// Searches for unsizing that might apply to `obligation`.
    140 ( 0.00%)      fn assemble_candidates_for_unsizing(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   // We currently never consider higher-ranked obligations e.g.
      .                   // `for<'a> &'a T: Unsize<Trait+'a>` to be implemented. This is not
      .                   // because they are a priori invalid, and we could potentially add support
      .                   // for them later, it's just that there isn't really a strong need for it.
-- line 755 ----------------------------------------
-- line 758 ----------------------------------------
      .                   //
      .                   // That said, one might try to write a fn with a where clause like
      .                   //     for<'a> Foo<'a, T>: Unsize<Foo<'a, Trait>>
      .                   // where the `'a` is kind of orthogonal to the relevant part of the `Unsize`.
      .                   // Still, you'd be more likely to write that where clause as
      .                   //     T: Trait
      .                   // so it seems ok if we (conservatively) fail to accept that `Unsize`
      .                   // obligation above. Should be possible to extend this in the future.
     70 ( 0.00%)          let source = match obligation.self_ty().no_bound_vars() {
     14 ( 0.00%)              Some(t) => t,
      .                       None => {
      .                           // Don't add any candidates if there are bound regions.
      .                           return;
      .                       }
      .                   };
     42 ( 0.00%)          let target = obligation.predicate.skip_binder().trait_ref.substs.type_at(1);
      .           
      .                   debug!(?source, ?target, "assemble_candidates_for_unsizing");
      .           
    200 ( 0.00%)          match (source.kind(), target.kind()) {
      .                       // Trait+Kx+'a -> Trait+Ky+'b (upcasts).
      .                       (&ty::Dynamic(ref data_a, ..), &ty::Dynamic(ref data_b, ..)) => {
      .                           // Upcast coercions permit several things:
      .                           //
      .                           // 1. Dropping auto traits, e.g., `Foo + Send` to `Foo`
      .                           // 2. Tightening the region bound, e.g., `Foo + 'a` to `Foo + 'b` if `'a: 'b`
      .                           // 3. Tightening trait to its super traits, eg. `Foo` to `Bar` if `Foo: Bar`
      .                           //
-- line 785 ----------------------------------------
-- line 852 ----------------------------------------
      .                       }
      .           
      .                       // `[T; n]` -> `[T]`
      .                       (&ty::Array(..), &ty::Slice(_)) => {
      .                           candidates.vec.push(BuiltinUnsizeCandidate);
      .                       }
      .           
      .                       // `Struct<T>` -> `Struct<U>`
     15 ( 0.00%)              (&ty::Adt(def_id_a, _), &ty::Adt(def_id_b, _)) if def_id_a.is_struct() => {
     25 ( 0.00%)                  if def_id_a == def_id_b {
      .                               candidates.vec.push(BuiltinUnsizeCandidate);
      .                           }
      .                       }
      .           
      .                       // `(.., T)` -> `(.., U)`
      .                       (&ty::Tuple(tys_a), &ty::Tuple(tys_b)) => {
      .                           if tys_a.len() == tys_b.len() {
      .                               candidates.vec.push(BuiltinUnsizeCandidate);
      .                           }
      .                       }
      .           
      .                       _ => {}
      .                   };
    112 ( 0.00%)      }
      .           
 45,234 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, obligation, candidates))]
      .               fn assemble_candidates_for_trait_alias(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
      .                   // Okay to skip binder here because the tests we do below do not involve bound regions.
  6,462 ( 0.00%)          let self_ty = obligation.self_ty().skip_binder();
      .                   debug!(?self_ty);
      .           
 25,848 ( 0.01%)          let def_id = obligation.predicate.def_id();
      .           
 12,924 ( 0.00%)          if self.tcx().is_trait_alias(def_id) {
      .                       candidates.vec.push(TraitAliasCandidate(def_id));
      .                   }
      .               }
      .           
      .               /// Assembles the trait which are built-in to the language itself:
      .               /// `Copy`, `Clone` and `Sized`.
  8,176 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, candidates))]
      .               fn assemble_builtin_bound_candidates(
      .                   &mut self,
      .                   conditions: BuiltinImplConditions<'tcx>,
      .                   candidates: &mut SelectionCandidateSet<'tcx>,
      .               ) {
  3,582 ( 0.00%)          match conditions {
      .                       BuiltinImplConditions::Where(nested) => {
      .                           candidates
      .                               .vec
      .                               .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });
      .                       }
      .                       BuiltinImplConditions::None => {}
      .                       BuiltinImplConditions::Ambiguous => {
      .                           candidates.ambiguous = true;
-- line 910 ----------------------------------------

288,733 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  100,192 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      838 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,120 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    1,692 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        1 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    4,478 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    5,061 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        4 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
      842 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       10 ( 0.00%)      pub lo: BytePos,
       10 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       30 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   11,151 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       21 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    6,968 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    5,226 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    6,968 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    2,160 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    1,440 ( 0.00%)      }
        .               #[inline]
      932 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      932 ( 0.00%)      }
        .               #[inline]
    2,196 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,464 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      210 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      126 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        6 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        4 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
       63 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
       42 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    1,101 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      734 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      297 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       88 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      140 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      252 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      216 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      180 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       10 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       12 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   17,501 ( 0.00%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    3,169 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       13 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       11 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   11,046 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   14,319 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       55 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       35 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       40 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      132 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       24 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       84 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      108 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
        8 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
       60 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
       35 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    3,168 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    2,112 ( 0.00%)          let mut span = self.data();
    1,742 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    3,168 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    3,502 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    3,008 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    2,632 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
       90 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       17 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
       90 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
       90 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       33 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      296 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      520 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      148 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      520 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      444 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      846 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,692 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       12 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       12 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    3,807 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      423 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  749,596 ( 0.15%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      846 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    4,653 ( 0.00%)              SourceFile {
    3,384 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,692 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,692 ( 0.00%)                  lines,
    1,692 ( 0.00%)                  multibyte_chars,
    1,692 ( 0.00%)                  non_narrow_chars,
    1,692 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    3,807 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       44 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       12 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        8 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        8 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       12 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       48 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        8 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       68 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       44 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       16 ( 0.00%)              lines,
       16 ( 0.00%)              multibyte_chars,
       16 ( 0.00%)              non_narrow_chars,
       16 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       36 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
       70 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       10 ( 0.00%)          if matches!(
       20 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       10 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      421 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    1,998 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
      562 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    1,140 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
      781 ( 0.00%)          assert!(line_index < self.lines.len());
    1,119 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        7 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
      740 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        4 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       40 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       36 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        4 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        4 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    2,744 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      254 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    4,836 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,521,206 ( 0.31%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  855,966 ( 0.17%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  348,724 ( 0.07%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   20,356 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    4,094 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   16,262 ( 0.00%)          let span = self.data_untracked();
    5,166 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
    8,724 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
    5,869 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    5,710 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   11,420 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    5,710 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    2,855 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    2,855 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   23,264 ( 0.00%)      }
        .           }

1,157,090 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .           #[derive(Copy, Clone, Debug)]
      .           pub enum RelationDir {
      .               SubtypeOf,
      .               SupertypeOf,
      .               EqTo,
      .           }
      .           
      .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
132,939 ( 0.03%)      pub fn super_combine_tys<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   R: TypeRelation<'tcx>,
      .               {
      .                   let a_is_expected = relation.a_is_expected();
      .           
111,773 ( 0.02%)          match (a.kind(), b.kind()) {
      .                       // Relate integral variables to other types
      2 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
     11 ( 0.00%)                  self.inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .unify_var_var(a_id, b_id)
      .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
      .                           Ok(a)
      .                       }
    720 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
  1,440 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
      .                       }
      .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
      .                       }
    743 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
  1,486 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
      .                       }
      .                       (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
      .                       }
      .           
      .                       // Relate floating-point variables to other types
      .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
      .                           self.inner
-- line 100 ----------------------------------------
-- line 108 ----------------------------------------
      .                           self.unify_float_variable(a_is_expected, v_id, v)
      .                       }
      .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
      .                           self.unify_float_variable(!a_is_expected, v_id, v)
      .                       }
      .           
      .                       // All other cases of inference are errors
      .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
  7,095 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
      .                       }
      .           
 72,726 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
      .                   }
132,939 ( 0.03%)      }
      .           
     48 ( 0.00%)      pub fn super_combine_consts<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
      .               where
      .                   R: ConstEquateRelation<'tcx>,
      .               {
      .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
     20 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
     12 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
     12 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
      .           
      .                   let a_is_expected = relation.a_is_expected();
      .           
     40 ( 0.00%)          match (a.val, b.val) {
      .                       (
      .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
      .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
      .                       ) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .const_unification_table()
      .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 158 ----------------------------------------
      .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
      .                       }
      .           
      .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
      .                           return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
      .                       }
      .           
      .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
     20 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
      .                       }
      .                       (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
      .                           // FIXME(#59490): Need to remove the leak check to accommodate
      .                           // escaping bound variables here.
      .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(b);
-- line 174 ----------------------------------------
-- line 180 ----------------------------------------
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(a);
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   ty::relate::super_relate_consts(relation, a, b)
     36 ( 0.00%)      }
      .           
      .               /// Unifies the const variable `target_vid` with the given constant.
      .               ///
      .               /// This also tests if the given const `ct` contains an inference variable which was previously
      .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
      .               /// would result in an infinite type as we continuously replace an inference variable
      .               /// in `ct` with `ct` itself.
      .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
      .               /// of `fn bind` (meaning that its substs contain `N`).
      .               ///
      .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
      .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
      .               ///
      .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
      .               ///
      .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
     76 ( 0.00%)      #[instrument(level = "debug", skip(self))]
      .               fn unify_const_variable(
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   target_vid: ty::ConstVid<'tcx>,
      .                   ct: &'tcx ty::Const<'tcx>,
      .                   vid_is_expected: bool,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   let (for_universe, span) = {
      .                       let mut inner = self.inner.borrow_mut();
     16 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
      8 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
      8 ( 0.00%)              match var_value.val {
      .                           ConstVariableValue::Known { value } => {
      .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
      .                           }
      .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
      .                       }
      .                   };
     32 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
      .                       .relate(ct, ct)?;
      .           
     16 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .const_unification_table()
      .                       .unify_var_value(
      .                           target_vid,
     24 ( 0.00%)                  ConstVarValue {
      .                               origin: ConstVariableOrigin {
      .                                   kind: ConstVariableOriginKind::ConstInference,
      .                                   span: DUMMY_SP,
      .                               },
      .                               val: ConstVariableValue::Known { value },
      .                           },
      .                       )
      .                       .map(|()| value)
      .                       .map_err(|e| const_unification_error(vid_is_expected, e))
      .               }
      .           
  8,778 ( 0.00%)      fn unify_integral_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::IntVid,
      .                   val: ty::IntVarValue,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 11,704 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .int_unification_table()
      .                       .unify_var_value(vid, Some(val))
      .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
  2,926 ( 0.00%)          match val {
    720 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
  2,949 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
      .                   }
 11,704 ( 0.00%)      }
      .           
      .               fn unify_float_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::FloatVid,
      .                   val: ty::FloatTy,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
      .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
      .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
      .                   Ok(self.tcx.mk_mach_float(val))
      .               }
      .           }
      .           
      .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 34,926 ( 0.01%)          self.infcx.tcx
      .               }
      .           
      .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
      .                   Equate::new(self, a_is_expected)
      .               }
      .           
 17,728 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
      .                   Sub::new(self, a_is_expected)
  8,864 ( 0.00%)      }
      .           
      .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
      .                   Lub::new(self, a_is_expected)
      .               }
      .           
 31,646 ( 0.01%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
      .                   Glb::new(self, a_is_expected)
 15,823 ( 0.00%)      }
      .           
      .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
      .               /// The idea is that we should ensure that the type `a_ty` is equal
      .               /// to, a subtype of, or a supertype of (respectively) the type
      .               /// to which `b_vid` is bound.
      .               ///
      .               /// Since `b_vid` has not yet been instantiated with a type, we
      .               /// will first instantiate `b_vid` with a *generalized* version
      .               /// of `a_ty`. Generalization introduces other inference
      .               /// variables wherever subtyping could occur.
171,292 ( 0.03%)      pub fn instantiate(
      .                   &mut self,
      .                   a_ty: Ty<'tcx>,
      .                   dir: RelationDir,
      .                   b_vid: ty::TyVid,
      .                   a_is_expected: bool,
      .               ) -> RelateResult<'tcx, ()> {
      .                   use self::RelationDir::*;
      .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
      .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
      .                   //   inference variable,
      .                   // - and `dir` == `SubtypeOf`.
      .                   //
      .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
      .                   // `'?2` and `?3` are fresh region/type inference
      .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
      .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
 15,571 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
      .                   debug!(
      .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
      .                       a_ty, dir, b_vid, b_ty
      .                   );
108,997 ( 0.02%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
      .           
 15,571 ( 0.00%)          if needs_wf {
      .                       self.obligations.push(Obligation::new(
      .                           self.trace.cause.clone(),
      .                           self.param_env,
      .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
      .                               .to_predicate(self.infcx.tcx),
      .                       ));
      .                   }
      .           
      .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
      .                   //
      .                   // FIXME(#16847): This code is non-ideal because all these subtype
      .                   // relations wind up attributed to the same spans. We need
      .                   // to associate causes/spans with each of the relations in
      .                   // the stack to get this right.
 62,040 ( 0.01%)          match dir {
 76,725 ( 0.02%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
    610 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
    208 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_ty,
      .                           b_ty,
      .                       ),
      .                   }?;
      .           
 15,571 ( 0.00%)          Ok(())
124,576 ( 0.03%)      }
      .           
      .               /// Attempts to generalize `ty` for the type variable `for_vid`.
      .               /// This checks for cycle -- that is, whether the type `ty`
      .               /// references `for_vid`. The `dir` is the "direction" for which we
      .               /// a performing the generalization (i.e., are we producing a type
      .               /// that can be used as a supertype etc).
      .               ///
      .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
      .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
      .                   // Determine the ambient variance within which `ty` appears.
      .                   // The surrounding equation is:
      .                   //
      .                   //     ty [op] ty2
      .                   //
      .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
      .                   // naturally.
 62,288 ( 0.01%)          let ambient_variance = match dir {
      .                       RelationDir::EqTo => ty::Invariant,
      .                       RelationDir::SubtypeOf => ty::Covariant,
      .                       RelationDir::SupertypeOf => ty::Contravariant,
      .                   };
      .           
      .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
      .           
155,720 ( 0.03%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
      .                       v @ TypeVariableValue::Known { .. } => {
      .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
      .                       }
      .                       TypeVariableValue::Unknown { universe } => universe,
      .                   };
      .           
      .                   debug!("generalize: for_universe = {:?}", for_universe);
      .                   debug!("generalize: trace = {:?}", self.trace);
      .           
155,720 ( 0.03%)          let mut generalize = Generalizer {
      .                       infcx: self.infcx,
      .                       cause: &self.trace.cause,
      .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
      .                       for_universe,
      .                       ambient_variance,
      .                       needs_wf: false,
      .                       root_ty: ty,
 15,572 ( 0.00%)              param_env: self.param_env,
      .                       cache: SsoHashMap::new(),
      .                   };
      .           
 31,144 ( 0.01%)          let ty = match generalize.relate(ty, ty) {
 15,571 ( 0.00%)              Ok(ty) => ty,
      .                       Err(e) => {
      .                           debug!("generalize: failure {:?}", e);
      6 ( 0.00%)                  return Err(e);
      .                       }
      .                   };
 15,571 ( 0.00%)          let needs_wf = generalize.needs_wf;
      .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
      .                   Ok(Generalization { ty, needs_wf })
      .               }
      .           
      .               pub fn add_const_equate_obligation(
      .                   &mut self,
      .                   a_is_expected: bool,
      .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
      .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
      .               /// holds, which in turn implies that `?C::Item == ?D`. So once
      .               /// `?C` is constrained, that should suffice to restrict `?D`.
      .               needs_wf: bool,
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 79,984 ( 0.02%)          self.infcx.tcx
      .               }
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
     21 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "Generalizer"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
-- line 547 ----------------------------------------
-- line 553 ----------------------------------------
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
      .                   T: Relate<'tcx>,
      .               {
      .                   Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
      .               }
      .           
438,064 ( 0.09%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 39,824 ( 0.01%)          if self.ambient_variance == ty::Variance::Invariant {
      .                       // Avoid fetching the variance if we are in an invariant
      .                       // context; no need, and it can induce dependency cycles
      .                       // (e.g., #41849).
 39,706 ( 0.01%)              relate::relate_substs(self, None, a_subst, b_subst)
      .                   } else {
      .                       let tcx = self.tcx();
      .                       let opt_variances = tcx.variances_of(item_def_id);
    590 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
      .                   }
358,416 ( 0.07%)      }
      .           
  3,645 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   let old_ambient_variance = self.ambient_variance;
156,140 ( 0.03%)          self.ambient_variance = self.ambient_variance.xform(variance);
      .           
      .                   let result = self.relate(a, b);
 31,147 ( 0.01%)          self.ambient_variance = old_ambient_variance;
      .                   result
  2,835 ( 0.00%)      }
      .           
417,627 ( 0.08%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
 46,403 ( 0.01%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
278,418 ( 0.06%)          if let Some(result) = self.cache.get(&t) {
 17,900 ( 0.00%)              return result.clone();
      .                   }
      .                   debug!("generalize: t={:?}", t);
      .           
      .                   // Check to see whether the type we are generalizing references
      .                   // any other type variable related to `vid` via
      .                   // subtyping. This is basically our "occurs check", preventing
      .                   // us from creating infinitely sized types.
125,948 ( 0.03%)          let result = match *t.kind() {
      8 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      8 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
      8 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
      8 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
      .                               // If sub-roots are equal, then `for_vid` and
      .                               // `vid` are related via subtyping.
      5 ( 0.00%)                      Err(TypeError::CyclicTy(self.root_ty))
      .                           } else {
     42 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
     14 ( 0.00%)                      match probe {
      .                                   TypeVariableValue::Known { value: u } => {
      .                                       debug!("generalize: known value {:?}", u);
      .                                       self.relate(u, u)
      .                                   }
      .                                   TypeVariableValue::Unknown { universe } => {
     35 ( 0.00%)                              match self.ambient_variance {
      .                                           // Invariant: no need to make a fresh type variable.
      .                                           ty::Invariant => {
     35 ( 0.00%)                                      if self.for_universe.can_name(universe) {
     28 ( 0.00%)                                          return Ok(t);
      .                                               }
      .                                           }
      .           
      .                                           // Bivariant: make a fresh var, but we
      .                                           // may need a WF predicate. See
      .                                           // comment on `needs_wf` field for
      .                                           // more info.
      .                                           ty::Bivariant => self.needs_wf = true,
-- line 634 ----------------------------------------
-- line 657 ----------------------------------------
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
      .                           // No matter what mode we are in,
      .                           // integer/floating-point types must be equal to be
      .                           // relatable.
     29 ( 0.00%)                  Ok(t)
      .                       }
125,673 ( 0.03%)              _ => relate::super_relate_tys(self, t, t),
      .                   };
      .           
419,210 ( 0.08%)          self.cache.insert(t, result.clone());
251,526 ( 0.05%)          return result;
417,627 ( 0.08%)      }
      .           
  3,240 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   r: ty::Region<'tcx>,
      .                   r2: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
    403 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   debug!("generalize: regions r={:?}", r);
      .           
    806 ( 0.00%)          match *r {
      .                       // Never make variables for regions bound within the type itself,
      .                       // nor for erased regions.
      .                       ty::ReLateBound(..) | ty::ReErased => {
      .                           return Ok(r);
      .                       }
      .           
      .                       ty::RePlaceholder(..)
      .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // If we are in an invariant context, we can re-use the region
      .                   // as is, unless it happens to be in some universe that we
      .                   // can't name. (In the case of a region *variable*, we could
      .                   // use it if we promoted it into our universe, but we don't
      .                   // bother.)
    806 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
  1,116 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
  2,604 ( 0.00%)              if self.for_universe.can_name(r_universe) {
      .                           return Ok(r);
      .                       }
      .                   }
      .           
      .                   // FIXME: This is non-ideal because we don't give a
      .                   // very descriptive origin for this region variable.
    310 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  3,240 ( 0.00%)      }
      .           
    189 ( 0.00%)      fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   c2: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
     63 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           let mut inner = self.infcx.inner.borrow_mut();
      .                           let variable_table = &mut inner.const_unification_table();
      .                           let var_value = variable_table.probe_value(vid);
      .                           match var_value.val {
      .                               ConstVariableValue::Known { value: u } => {
-- line 730 ----------------------------------------
-- line 754 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    105 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
    189 ( 0.00%)      }
      .           }
      .           
      .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
      .               /// Register an obligation that both constants must be equal to each other.
      .               ///
      .               /// If they aren't equal then the relation doesn't hold.
      .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
      .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
      .               target_vid: ty::ConstVid<'tcx>,
      .           }
      .           
      .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
      .           //
      .           // Both inputs are expected to be the same.
      .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
     16 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
      4 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "ConstInferUnifier"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
      .                       return Ok(r);
      .                   } else {
      .                       // FIXME: This is non-ideal because we don't give a
      .                       // very descriptive origin for this region variable.
      .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
      .                   }
      .               }
      .           
     76 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   _c: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   debug_assert_eq!(c, _c);
      .                   debug!("ConstInferUnifier: c={:?}", c);
      .           
     20 ( 0.00%)          match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           // Check if the current unification would end up
      .                           // unifying `target_vid` with a const which contains
      .                           // an inference variable which is unioned with `target_vid`.
      .                           //
      .                           // Not doing so can easily result in stack overflows.
      .                           if self
      .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
     20 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
      .               }
      .           }

233,378 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           
      .           use std::cell::Cell;
      .           use std::ptr;
      .           use tracing::debug;
      .           
      .           type Res = def::Res<NodeId>;
      .           
      .           impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {
     16 ( 0.00%)      fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
      .                   arenas.alloc_name_binding(NameBinding {
      2 ( 0.00%)              kind: NameBindingKind::Module(self.0),
      .                       ambiguity: None,
      6 ( 0.00%)              vis: self.1,
      2 ( 0.00%)              span: self.2,
      2 ( 0.00%)              expansion: self.3,
      .                   })
     16 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {
      .               fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
 41,838 ( 0.01%)          arenas.alloc_name_binding(NameBinding {
 27,892 ( 0.01%)              kind: NameBindingKind::Res(self.0, false),
      .                       ambiguity: None,
      .                       vis: self.1,
      .                       span: self.2,
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
-- line 66 ----------------------------------------
-- line 76 ----------------------------------------
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
      .               /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;
      .               /// otherwise, reports an error.
 87,086 ( 0.02%)      crate fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)
      .               where
      .                   T: ToNameBinding<'a>,
      .               {
 51,349 ( 0.01%)          let binding = def.to_name_binding(self.arenas);
      .                   let key = self.new_key(ident, ns);
 80,157 ( 0.02%)          if let Err(old_binding) = self.try_define(parent, key, binding) {
      .                       self.report_conflict(parent, ident, ns, old_binding, &binding);
      .                   }
 58,056 ( 0.01%)      }
      .           
      .               /// Walks up the tree of definitions starting at `def_id`,
      .               /// stopping at the first encountered module.
      .               /// Parent block modules for arbitrary def-ids are not recorded for the local crate,
      .               /// and are not preserved in metadata for foreign crates, so block modules are never
      .               /// returned by this function.
      .               ///
      .               /// For the local crate ignoring block modules may be incorrect, so use this method with care.
-- line 101 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// For foreign crates block modules can be ignored without introducing observable differences,
      .               /// moreover they has to be ignored right now because they are not kept in metadata.
      .               /// Foreign parent modules are used for resolving names used by foreign macros with def-site
      .               /// hygiene, therefore block module ignorability relies on macros with def-site hygiene and
      .               /// block module parents being unreachable from other crates.
      .               /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,
      .               /// but they cannot use def-site hygiene, so the assumption holds
      .               /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).
  3,575 ( 0.00%)      pub fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {
      .                   loop {
  1,555 ( 0.00%)              match self.get_module(def_id) {
      .                           Some(module) => return module,
      .                           None => {
      .                               def_id.index =
      .                                   self.def_key(def_id).parent.expect("non-root `DefId` without parent")
      .                           }
      .                       }
      .                   }
  2,200 ( 0.00%)      }
      .           
      2 ( 0.00%)      pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {
    884 ( 0.00%)          self.get_module(def_id).expect("argument `DefId` is not a module")
      4 ( 0.00%)      }
      .           
      .               /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,
      .               /// or trait), then this function returns that module's resolver representation, otherwise it
      .               /// returns `None`.
  6,740 ( 0.00%)      crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {
      .                   if let module @ Some(..) = self.module_map.get(&def_id) {
      .                       return module.copied();
      .                   }
      .           
    289 ( 0.00%)          if !def_id.is_local() {
  1,734 ( 0.00%)              let def_kind = self.cstore().def_kind(def_id);
    578 ( 0.00%)              match def_kind {
      .                           DefKind::Mod | DefKind::Enum | DefKind::Trait => {
  1,554 ( 0.00%)                      let def_key = self.cstore().def_key(def_id);
      .                               let parent = def_key.parent.map(|index| {
  1,225 ( 0.00%)                          self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })
      .                               });
    259 ( 0.00%)                      let name = if def_id.index == CRATE_DEF_INDEX {
     56 ( 0.00%)                          self.cstore().crate_name(def_id.krate)
      .                               } else {
    735 ( 0.00%)                          def_key.disambiguated_data.data.get_opt_name().expect("module without name")
      .                               };
      .           
  2,072 ( 0.00%)                      Some(self.new_module(
      .                                   parent,
      .                                   ModuleKind::Def(def_kind, def_id, name),
  1,813 ( 0.00%)                          self.cstore().module_expansion_untracked(def_id, &self.session),
  1,554 ( 0.00%)                          self.cstore().get_span_untracked(def_id, &self.session),
      .                                   // FIXME: Account for `#[no_implicit_prelude]` attributes.
    735 ( 0.00%)                          parent.map_or(false, |module| module.no_implicit_prelude),
      .                               ))
      .                           }
      .                           _ => None,
      .                       }
      .                   } else {
      .                       None
      .                   }
  5,392 ( 0.00%)      }
      .           
    369 ( 0.00%)      crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {
    123 ( 0.00%)          match expn_id.expn_data().macro_def_id {
     84 ( 0.00%)              Some(def_id) => self.macro_def_scope(def_id),
     13 ( 0.00%)              None => expn_id
      .                           .as_local()
      .                           .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))
     13 ( 0.00%)                  .unwrap_or(&self.graph_root),
      .                   }
    246 ( 0.00%)      }
      .           
     30 ( 0.00%)      crate fn macro_def_scope(&mut self, def_id: DefId) -> Module<'a> {
     30 ( 0.00%)          if let Some(id) = def_id.as_local() {
      .                       self.local_macro_def_scopes[&id]
      .                   } else {
     60 ( 0.00%)              self.get_nearest_non_block_module(def_id)
      .                   }
      .               }
      .           
      .               crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {
     36 ( 0.00%)          match res {
     14 ( 0.00%)              Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),
      .                       Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),
      .                       _ => None,
      .                   }
      .               }
      .           
     40 ( 0.00%)      crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {
      .                   if let Some(ext) = self.macro_map.get(&def_id) {
      2 ( 0.00%)              return ext.clone();
      .                   }
      .           
     27 ( 0.00%)          let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {
     33 ( 0.00%)              LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),
      .                       LoadedMacro::ProcMacro(ext) => ext,
      .                   });
      .           
      .                   self.macro_map.insert(def_id, ext.clone());
      .                   ext
     35 ( 0.00%)      }
      .           
      .               crate fn build_reduced_graph(
      .                   &mut self,
      .                   fragment: &AstFragment,
      .                   parent_scope: ParentScope<'a>,
      .               ) -> MacroRulesScopeRef<'a> {
     12 ( 0.00%)          collect_definitions(self, fragment, parent_scope.expansion);
     21 ( 0.00%)          let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };
      6 ( 0.00%)          fragment.visit_with(&mut visitor);
      3 ( 0.00%)          visitor.parent_scope.macro_rules
      .               }
      .           
      .               crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {
 58,400 ( 0.01%)          for child in self.cstore().module_children_untracked(module.def_id(), self.session) {
      .                       let parent_scope = ParentScope::module(module, self);
 72,460 ( 0.01%)              BuildReducedGraphVisitor { r: self, parent_scope }
 57,968 ( 0.01%)                  .build_reduced_graph_for_external_crate_res(child);
      .                   }
      .               }
      .           }
      .           
      .           struct BuildReducedGraphVisitor<'a, 'b> {
      .               r: &'b mut Resolver<'a>,
      .               parent_scope: ParentScope<'a>,
      .           }
      .           
      .           impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      2 ( 0.00%)          self.r
      .               }
      .           }
      .           
      .           impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {
      .               fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {
    171 ( 0.00%)          self.resolve_visibility_speculative(vis, false).unwrap_or_else(|err| {
      .                       self.r.report_vis_error(err);
      .                       ty::Visibility::Public
      .                   })
      .               }
      .           
    400 ( 0.00%)      fn resolve_visibility_speculative<'ast>(
      .                   &mut self,
      .                   vis: &'ast ast::Visibility,
      .                   speculative: bool,
      .               ) -> Result<ty::Visibility, VisResolutionError<'ast>> {
     40 ( 0.00%)          let parent_scope = &self.parent_scope;
    200 ( 0.00%)          match vis.kind {
     22 ( 0.00%)              ast::VisibilityKind::Public => Ok(ty::Visibility::Public),
      .                       ast::VisibilityKind::Crate(..) => {
      .                           Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))
      .                       }
      .                       ast::VisibilityKind::Inherited => {
    343 ( 0.00%)                  Ok(match self.parent_scope.module.kind {
      .                               // Any inherited visibility resolved directly inside an enum or trait
      .                               // (i.e. variants, fields, and trait items) inherits from the visibility
      .                               // of the enum or trait.
      .                               ModuleKind::Def(DefKind::Enum | DefKind::Trait, def_id, _) => {
      .                                   self.r.visibilities[&def_id.expect_local()]
      .                               }
      .                               // Otherwise, the visibility is restricted to the nearest parent `mod` item.
     58 ( 0.00%)                      _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),
      .                           })
      .                       }
      .                       ast::VisibilityKind::Restricted { ref path, id, .. } => {
      .                           // For visibilities we are not ready to provide correct implementation of "uniform
      .                           // paths" right now, so on 2018 edition we only allow module-relative paths for now.
      .                           // On 2015 edition visibilities are resolved as crate-relative by default,
      .                           // so we are prepending a root segment if necessary.
      .                           let ident = path.segments.get(0).expect("empty path in visibility").ident;
-- line 272 ----------------------------------------
-- line 326 ----------------------------------------
      .                               }
      .                               PathResult::Failed { span, label, suggestion, .. } => {
      .                                   Err(VisResolutionError::FailedToResolve(span, label, suggestion))
      .                               }
      .                               PathResult::Indeterminate => Err(VisResolutionError::Indeterminate(path.span)),
      .                           }
      .                       }
      .                   }
    320 ( 0.00%)      }
      .           
      .               fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {
      2 ( 0.00%)          let field_names = vdata
      .                       .fields()
      .                       .iter()
      6 ( 0.00%)              .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))
      .                       .collect();
      .                   self.insert_field_names(def_id, field_names);
      .               }
      .           
      .               fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {
      .                   self.r.field_names.insert(def_id, field_names);
      .               }
      .           
      .               fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {
      .                   // If any statements are items, we need to create an anonymous module
      .                   block
      .                       .stmts
      .                       .iter()
     94 ( 0.00%)              .any(|statement| matches!(statement.kind, StmtKind::Item(_) | StmtKind::MacCall(_)))
      .               }
      .           
      .               // Add an import to the current module.
    377 ( 0.00%)      fn add_import(
      .                   &mut self,
      .                   module_path: Vec<Segment>,
      .                   kind: ImportKind<'a>,
      .                   span: Span,
      .                   id: NodeId,
      .                   item: &ast::Item,
      .                   root_span: Span,
      .                   root_id: NodeId,
      .                   vis: ty::Visibility,
      .               ) {
     87 ( 0.00%)          let current_module = self.parent_scope.module;
    812 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind,
      .                       parent_scope: self.parent_scope,
    116 ( 0.00%)              module_path,
      .                       imported_module: Cell::new(None),
      .                       span,
      .                       id,
     58 ( 0.00%)              use_span: item.span,
     87 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      .                       has_attributes: !item.attrs.is_empty(),
      .                       root_span,
      .                       root_id,
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(false),
      .                   });
      .           
      .                   self.r.indeterminate_imports.push(import);
    147 ( 0.00%)          match import.kind {
      .                       // Don't add unresolved underscore imports to modules
      .                       ImportKind::Single { target: Ident { name: kw::Underscore, .. }, .. } => {}
    196 ( 0.00%)              ImportKind::Single { target, type_ns_only, .. } => {
    784 ( 0.00%)                  self.r.per_ns(|this, ns| {
    258 ( 0.00%)                      if !type_ns_only || ns == TypeNS {
    246 ( 0.00%)                          let key = this.new_key(target, ns);
    656 ( 0.00%)                          let mut resolution = this.resolution(current_module, key).borrow_mut();
     82 ( 0.00%)                          resolution.add_single_import(import);
      .                               }
    420 ( 0.00%)                  });
      .                       }
      .                       // We don't add prelude imports to the globs since they only affect lexical scopes,
      .                       // which are not relevant to import resolution.
      .                       ImportKind::Glob { is_prelude: true, .. } => {}
      .                       ImportKind::Glob { .. } => current_module.globs.borrow_mut().push(import),
      .                       _ => unreachable!(),
      .                   }
    232 ( 0.00%)      }
      .           
    324 ( 0.00%)      fn build_reduced_graph_for_use_tree(
      .                   &mut self,
      .                   // This particular use tree
      .                   use_tree: &ast::UseTree,
      .                   id: NodeId,
      .                   parent_prefix: &[Segment],
      .                   nested: bool,
      .                   // The whole `use` item
      .                   item: &Item,
-- line 415 ----------------------------------------
-- line 426 ----------------------------------------
      .                       .cloned()
      .                       .chain(use_tree.prefix.segments.iter().map(|seg| seg.into()))
      .                       .peekable();
      .           
      .                   // On 2015 edition imports are resolved as crate-relative by default,
      .                   // so prefixes are prepended with crate root segment if necessary.
      .                   // The root is prepended lazily, when the first non-empty prefix or terminating glob
      .                   // appears, so imports in braced groups can have roots prepended independently.
     36 ( 0.00%)          let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);
      9 ( 0.00%)          let crate_root = match prefix_iter.peek() {
    432 ( 0.00%)              Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {
      .                           Some(seg.ident.span.ctxt())
      .                       }
      .                       None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),
      .                       _ => None,
      .                   }
      .                   .map(|ctxt| {
      .                       Segment::from_ident(Ident::new(
      .                           kw::PathRoot,
      .                           use_tree.prefix.span.shrink_to_lo().with_ctxt(ctxt),
      .                       ))
      .                   });
      .           
    180 ( 0.00%)          let prefix = crate_root.into_iter().chain(prefix_iter).collect::<Vec<_>>();
      .                   debug!("build_reduced_graph_for_use_tree: prefix={:?}", prefix);
      .           
      .                   let empty_for_self = |prefix: &[Segment]| {
     18 ( 0.00%)              prefix.is_empty() || prefix.len() == 1 && prefix[0].ident.name == kw::PathRoot
      .                   };
    132 ( 0.00%)          match use_tree.kind {
    140 ( 0.00%)              ast::UseTreeKind::Simple(rename, id1, id2) => {
     28 ( 0.00%)                  let mut ident = use_tree.ident();
    112 ( 0.00%)                  let mut module_path = prefix;
      .                           let mut source = module_path.pop().unwrap();
      .                           let mut type_ns_only = false;
      .           
     56 ( 0.00%)                  if nested {
      .                               // Correctly handle `self`
     24 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   type_ns_only = true;
      .           
      1 ( 0.00%)                          if empty_for_self(&module_path) {
      .                                       self.r.report_error(
      .                                           use_tree.span,
      .                                           ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix,
      .                                       );
      .                                       return;
      .                                   }
      .           
      .                                   // Replace `use foo::{ self };` with `use foo;`
      .                                   source = module_path.pop().unwrap();
      6 ( 0.00%)                          if rename.is_none() {
      .                                       ident = source.ident;
      .                                   }
      .                               }
      .                           } else {
      .                               // Disallow `self`
      4 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   let parent = module_path.last();
      .           
      .                                   let span = match parent {
      .                                       // only `::self` from `use foo::self as bar`
      .                                       Some(seg) => seg.ident.span.shrink_to_hi().to(source.ident.span),
      .                                       None => source.ident.span,
      .                                   };
      .                                   let span_with_rename = match rename {
-- line 491 ----------------------------------------
-- line 506 ----------------------------------------
      .                                       source = parent;
      .                                       if rename.is_none() {
      .                                           ident = source.ident;
      .                                       }
      .                                   }
      .                               }
      .           
      .                               // Disallow `use $crate;`
      4 ( 0.00%)                      if source.ident.name == kw::DollarCrate && module_path.is_empty() {
      .                                   let crate_root = self.r.resolve_crate_root(source.ident);
      .                                   let crate_name = match crate_root.kind {
      .                                       ModuleKind::Def(.., name) => name,
      .                                       ModuleKind::Block(..) => unreachable!(),
      .                                   };
      .                                   // HACK(eddyb) unclear how good this is, but keeping `$crate`
      .                                   // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,
      .                                   // while the current crate doesn't have a valid `crate_name`.
-- line 522 ----------------------------------------
-- line 535 ----------------------------------------
      .           
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(item.span, "`$crate` may not be imported")
      .                                       .emit();
      .                               }
      .                           }
      .           
     33 ( 0.00%)                  if ident.name == kw::Crate {
      .                               self.r.session.span_err(
      .                                   ident.span,
      .                                   "crate root imports need to be explicitly named: \
      .                                    `use crate as name;`",
      .                               );
      .                           }
      .           
      .                           let kind = ImportKind::Single {
    140 ( 0.00%)                      source: source.ident,
      .                               target: ident,
      .                               source_bindings: PerNS {
      .                                   type_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   value_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   macro_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                               },
      .                               target_bindings: PerNS {
      .                                   type_ns: Cell::new(None),
-- line 560 ----------------------------------------
-- line 562 ----------------------------------------
      .                                   macro_ns: Cell::new(None),
      .                               },
      .                               type_ns_only,
      .                               nested,
      .                               additional_ids: (id1, id2),
      .                           };
      .           
      .                           self.add_import(
    112 ( 0.00%)                      module_path,
    672 ( 0.00%)                      kind,
     56 ( 0.00%)                      use_tree.span,
      .                               id,
      .                               item,
      .                               root_span,
    112 ( 0.00%)                      item.id,
      .                               vis,
      .                           );
      .                       }
      .                       ast::UseTreeKind::Glob => {
      .                           let kind = ImportKind::Glob {
      5 ( 0.00%)                      is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),
      .                               max_vis: Cell::new(ty::Visibility::Invisible),
      .                           };
     15 ( 0.00%)                  self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);
      .                       }
      .                       ast::UseTreeKind::Nested(ref items) => {
      .                           // Ensure there is at most one `self` in the list
      .                           let self_spans = items
      .                               .iter()
      .                               .filter_map(|&(ref use_tree, _)| {
     75 ( 0.00%)                          if let ast::UseTreeKind::Simple(..) = use_tree.kind {
     72 ( 0.00%)                              if use_tree.ident().name == kw::SelfLower {
      1 ( 0.00%)                                  return Some(use_tree.span);
      .                                       }
      .                                   }
      .           
      .                                   None
      .                               })
      .                               .collect::<Vec<_>>();
     21 ( 0.00%)                  if self_spans.len() > 1 {
      .                               let mut e = self.r.into_struct_error(
      .                                   self_spans[0],
      .                                   ResolutionError::SelfImportCanOnlyAppearOnceInTheList,
      .                               );
      .           
      .                               for other_span in self_spans.iter().skip(1) {
      .                                   e.span_label(*other_span, "another `self` import appears here");
      .                               }
      .           
      .                               e.emit();
      .                           }
      .           
     41 ( 0.00%)                  for &(ref tree, id) in items {
    405 ( 0.00%)                      self.build_reduced_graph_for_use_tree(
      .                                   // This particular use tree
      .                                   tree, id, &prefix, true, // The whole `use` item
      .                                   item, vis, root_span,
      .                               );
      .                           }
      .           
      .                           // Empty groups `a::b::{}` are turned into synthetic `self` imports
      .                           // `a::b::c::{self as _}`, so that their prefixes are correctly
      .                           // resolved and checked for privacy/stability/etc.
      7 ( 0.00%)                  if items.is_empty() && !empty_for_self(&prefix) {
      .                               let new_span = prefix[prefix.len() - 1].ident.span;
      .                               let tree = ast::UseTree {
      .                                   prefix: ast::Path::from_ident(Ident::new(kw::SelfLower, new_span)),
      .                                   kind: ast::UseTreeKind::Simple(
      .                                       Some(Ident::new(kw::Underscore, new_span)),
      .                                       ast::DUMMY_NODE_ID,
      .                                       ast::DUMMY_NODE_ID,
      .                                   ),
-- line 633 ----------------------------------------
-- line 642 ----------------------------------------
      .                                   // The whole `use` item
      .                                   item,
      .                                   ty::Visibility::Invisible,
      .                                   root_span,
      .                               );
      .                           }
      .                       }
      .                   }
    288 ( 0.00%)      }
      .           
      .               /// Constructs the reduced graph for one item.
      .               fn build_reduced_graph_for_item(&mut self, item: &'b Item) {
      .                   let parent_scope = &self.parent_scope;
      .                   let parent = parent_scope.module;
     52 ( 0.00%)          let expansion = parent_scope.expansion;
     78 ( 0.00%)          let ident = item.ident;
     52 ( 0.00%)          let sp = item.span;
     52 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
     78 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
      .                   self.r.visibilities.insert(local_def_id, vis);
      .           
    148 ( 0.00%)          match item.kind {
      9 ( 0.00%)              ItemKind::Use(ref use_tree) => {
     99 ( 0.00%)                  self.build_reduced_graph_for_use_tree(
      .                               // This particular use tree
      .                               use_tree,
      9 ( 0.00%)                      item.id,
      .                               &[],
      .                               false,
      .                               // The whole `use` item
      .                               item,
      .                               vis,
      .                               use_tree.span,
      .                           );
      .                       }
      .           
      2 ( 0.00%)              ItemKind::ExternCrate(orig_name) => {
      .                           self.build_reduced_graph_for_extern_crate(
      .                               orig_name,
      .                               item,
      .                               local_def_id,
      .                               vis,
      .                               parent,
      .                           );
      .                       }
-- line 688 ----------------------------------------
-- line 704 ----------------------------------------
      .           
      .                       // These items live in the value namespace.
      .                       ItemKind::Static(..) => {
      .                           let res = Res::Def(DefKind::Static, def_id);
      .                           self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Const(..) => {
      .                           let res = Res::Def(DefKind::Const, def_id);
     15 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Fn(..) => {
      .                           let res = Res::Def(DefKind::Fn, def_id);
      .                           self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .           
      .                           // Functions introducing procedural macros reserve a slot
      .                           // in the macro namespace as well (see #52225).
      .                           self.define_macro(item);
      .                       }
      .           
      .                       // These items live in the type namespace.
      .                       ItemKind::TyAlias(..) => {
      .                           let res = Res::Def(DefKind::TyAlias, def_id);
     20 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       ItemKind::Enum(_, _) => {
      .                           let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Enum, def_id, ident.name),
      .                               expansion.to_expn_id(),
      .                               item.span,
-- line 734 ----------------------------------------
-- line 739 ----------------------------------------
      .                       }
      .           
      .                       ItemKind::TraitAlias(..) => {
      .                           let res = Res::Def(DefKind::TraitAlias, def_id);
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       // These items live in both the type and value namespaces.
      1 ( 0.00%)              ItemKind::Struct(ref vdata, _) => {
      .                           // Define a name in the type namespace.
      .                           let res = Res::Def(DefKind::Struct, def_id);
     25 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .           
      .                           // Record field names for error reporting.
      .                           self.insert_field_names_local(def_id, vdata);
      .           
      .                           // If this is a tuple or unit struct, define a name
      .                           // in the value namespace as well.
      6 ( 0.00%)                  if let Some(ctor_node_id) = vdata.ctor_id() {
      .                               // If the structure is marked as non_exhaustive then lower the visibility
      .                               // to within the crate.
      .                               let mut ctor_vis = if vis == ty::Visibility::Public
      .                                   && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)
      .                               {
      .                                   ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))
      .                               } else {
      .                                   vis
-- line 765 ----------------------------------------
-- line 825 ----------------------------------------
      .               fn build_reduced_graph_for_extern_crate(
      .                   &mut self,
      .                   orig_name: Option<Symbol>,
      .                   item: &Item,
      .                   local_def_id: LocalDefId,
      .                   vis: ty::Visibility,
      .                   parent: Module<'a>,
      .               ) {
      8 ( 0.00%)          let ident = item.ident;
      4 ( 0.00%)          let sp = item.span;
      4 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
      .           
     14 ( 0.00%)          let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {
      .                       self.r
      .                           .session
      .                           .struct_span_err(item.span, "`extern crate self;` requires renaming")
      .                           .span_suggestion(
      .                               item.span,
      .                               "rename the `self` crate to be able to import it",
      .                               "extern crate self as name;".into(),
      .                               Applicability::HasPlaceholders,
      .                           )
      .                           .emit();
      .                       return;
      .                   } else if orig_name == Some(kw::SelfLower) {
      .                       Some(self.r.graph_root)
      .                   } else {
     12 ( 0.00%)              self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(
      2 ( 0.00%)                  |crate_id| {
      2 ( 0.00%)                      self.r.extern_crate_map.insert(local_def_id, crate_id);
     12 ( 0.00%)                      self.r.expect_module(crate_id.as_def_id())
      .                           },
      .                       )
      .                   }
      .                   .map(|module| {
      .                       let used = self.process_macro_use_imports(item, module);
      .                       let binding =
     22 ( 0.00%)                  (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);
      .                       (used, Some(ModuleOrUniformRoot::Module(module)), binding)
      .                   })
      4 ( 0.00%)          .unwrap_or((true, None, self.r.dummy_binding));
     62 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind: ImportKind::ExternCrate { source: orig_name, target: ident },
      2 ( 0.00%)              root_id: item.id,
      .                       id: item.id,
     12 ( 0.00%)              parent_scope: self.parent_scope,
      .                       imported_module: Cell::new(module),
      .                       has_attributes: !item.attrs.is_empty(),
      4 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      2 ( 0.00%)              use_span: item.span,
      .                       root_span: item.span,
      .                       span: item.span,
      .                       module_path: Vec::new(),
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(used),
      .                   });
      2 ( 0.00%)          self.r.potentially_unused_imports.push(import);
     10 ( 0.00%)          let imported_binding = self.r.import(binding, import);
      4 ( 0.00%)          if ptr::eq(parent, self.r.graph_root) {
     20 ( 0.00%)              if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
      .                           if expansion != LocalExpnId::ROOT
      .                               && orig_name.is_some()
      .                               && entry.extern_crate_item.is_none()
      .                           {
      .                               let msg = "macro-expanded `extern crate` items cannot \
      .                                                  shadow names passed with `--extern`";
      .                               self.r.session.span_err(item.span, msg);
      .                           }
      .                       }
     12 ( 0.00%)              let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(
      .                           ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },
      .                       );
      2 ( 0.00%)              entry.extern_crate_item = Some(imported_binding);
      2 ( 0.00%)              if orig_name.is_some() {
      .                           entry.introduced_by_item = true;
      .                       }
      .                   }
     12 ( 0.00%)          self.r.define(parent, ident, TypeNS, imported_binding);
      .               }
      .           
      .               /// Constructs the reduced graph for one foreign item.
      .               fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {
      .                   let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .                   let (def_kind, ns) = match item.kind {
      .                       ForeignItemKind::Fn(..) => (DefKind::Fn, ValueNS),
-- line 911 ----------------------------------------
-- line 918 ----------------------------------------
      .                   let vis = self.resolve_visibility(&item.vis);
      .                   let res = Res::Def(def_kind, def_id);
      .                   self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   self.r.visibilities.insert(local_def_id, vis);
      .               }
      .           
      .               fn build_reduced_graph_for_block(&mut self, block: &Block) {
      .                   let parent = self.parent_scope.module;
     13 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   if self.block_needs_anonymous_module(block) {
      3 ( 0.00%)              let module = self.r.new_module(
      .                           Some(parent),
      2 ( 0.00%)                  ModuleKind::Block(block.id),
      .                           expansion.to_expn_id(),
      .                           block.span,
      1 ( 0.00%)                  parent.no_implicit_prelude,
      .                       );
      .                       self.r.block_map.insert(block.id, module);
      1 ( 0.00%)              self.parent_scope.module = module; // Descend into the block.
      .                   }
      .               }
      .           
      .               /// Builds the reduced graph for a single item in an external crate.
 57,968 ( 0.01%)      fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {
  7,246 ( 0.00%)          let parent = self.parent_scope.module;
 43,476 ( 0.01%)          let ModChild { ident, res, vis, span } = child;
 36,230 ( 0.01%)          let res = res.expect_non_local();
 14,492 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   // Record primary definitions.
 36,230 ( 0.01%)          match res {
      .                       Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {
    282 ( 0.00%)                  let module = self.r.expect_module(def_id);
  3,948 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));
      .                       }
      .                       Res::Def(
      .                           DefKind::Struct
      .                           | DefKind::Union
      .                           | DefKind::Variant
      .                           | DefKind::TyAlias
      .                           | DefKind::ForeignTy
      .                           | DefKind::OpaqueTy
      .                           | DefKind::TraitAlias
      .                           | DefKind::AssocTy,
      .                           _,
      .                       )
      .                       | Res::PrimTy(..)
180,630 ( 0.04%)              | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),
      .                       Res::Def(
      .                           DefKind::Fn
      .                           | DefKind::AssocFn
      .                           | DefKind::Static
      .                           | DefKind::Const
      .                           | DefKind::AssocConst
      .                           | DefKind::Ctor(..),
      .                           _,
  5,452 ( 0.00%)              ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),
      .                       Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {
  2,408 ( 0.00%)                  self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))
      .                       }
      .                       Res::Def(
      .                           DefKind::TyParam
      .                           | DefKind::ConstParam
      .                           | DefKind::ExternCrate
      .                           | DefKind::Use
      .                           | DefKind::ForeignMod
      .                           | DefKind::AnonConst
-- line 983 ----------------------------------------
-- line 992 ----------------------------------------
      .                       )
      .                       | Res::Local(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::Err => bug!("unexpected resolution: {:?}", res),
      .                   }
      .                   // Record some extra data for better diagnostics.
      .                   let cstore = self.r.cstore();
 65,184 ( 0.01%)          match res {
    162 ( 0.00%)              Res::Def(DefKind::Struct, def_id) => {
      .                           let field_names =
    324 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
    378 ( 0.00%)                  let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);
    108 ( 0.00%)                  if let Some((ctor_def_id, ctor_kind)) = ctor {
      .                               let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
    125 ( 0.00%)                      let ctor_vis = cstore.visibility_untracked(ctor_def_id);
      .                               let field_visibilities =
    100 ( 0.00%)                          cstore.struct_field_visibilities_untracked(def_id).collect();
      .                               self.r
      .                                   .struct_constructors
      .                                   .insert(def_id, (ctor_res, ctor_vis, field_visibilities));
      .                           }
      .                           self.insert_field_names(def_id, field_names);
      .                       }
      3 ( 0.00%)              Res::Def(DefKind::Union, def_id) => {
      .                           let field_names =
      7 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
      .                           self.insert_field_names(def_id, field_names);
      .                       }
    286 ( 0.00%)              Res::Def(DefKind::AssocFn, def_id) => {
    858 ( 0.00%)                  if cstore.fn_has_self_parameter_untracked(def_id) {
      .                               self.r.has_self.insert(def_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   }
 56,968 ( 0.01%)      }
      .           
    272 ( 0.00%)      fn add_macro_use_binding(
      .                   &mut self,
      .                   name: Symbol,
      .                   binding: &'a NameBinding<'a>,
      .                   span: Span,
      .                   allow_shadowing: bool,
      .               ) {
    136 ( 0.00%)          if self.r.macro_use_prelude.insert(name, binding).is_some() && !allow_shadowing {
      .                       let msg = format!("`{}` is already in scope", name);
      .                       let note =
      .                           "macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)";
      .                       self.r.session.struct_span_err(span, &msg).note(note).emit();
      .                   }
    204 ( 0.00%)      }
      .           
      .               /// Returns `true` if we should consider the underlying `extern crate` to be used.
      .               fn process_macro_use_imports(&mut self, item: &Item, module: Module<'a>) -> bool {
      .                   let mut import_all = None;
      .                   let mut single_imports = Vec::new();
      .                   for attr in &item.attrs {
      2 ( 0.00%)              if attr.has_name(sym::macro_use) {
      4 ( 0.00%)                  if self.parent_scope.module.parent.is_some() {
      .                               struct_span_err!(
      .                                   self.r.session,
      .                                   item.span,
      .                                   E0468,
      .                                   "an `extern crate` loading macros must be at the crate root"
      .                               )
      .                               .emit();
      .                           }
      8 ( 0.00%)                  if let ItemKind::ExternCrate(Some(orig_name)) = item.kind {
      .                               if orig_name == kw::SelfLower {
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(
      .                                           attr.span,
      .                                           "`#[macro_use]` is not supported on `extern crate self`",
      .                                       )
      .                                       .emit();
      .                               }
      .                           }
      .                           let ill_formed =
      6 ( 0.00%)                      |span| struct_span_err!(self.r.session, span, E0466, "bad macro import").emit();
     10 ( 0.00%)                  match attr.meta() {
     44 ( 0.00%)                      Some(meta) => match meta.kind {
      .                                   MetaItemKind::Word => {
      4 ( 0.00%)                              import_all = Some(meta.span);
      .                                       break;
      .                                   }
      .                                   MetaItemKind::List(nested_metas) => {
      .                                       for nested_meta in nested_metas {
      .                                           match nested_meta.ident() {
      .                                               Some(ident) if nested_meta.is_word() => {
      .                                                   single_imports.push(ident)
      .                                               }
      .                                               _ => ill_formed(nested_meta.span()),
      .                                           }
      .                                       }
      .                                   }
      .                                   MetaItemKind::NameValue(..) => ill_formed(meta.span),
      4 ( 0.00%)                      },
      .                               None => ill_formed(attr.span),
      .                           }
      .                       }
      .                   }
      .           
      .                   let macro_use_import = |this: &Self, span| {
     40 ( 0.00%)              this.r.arenas.alloc_import(Import {
      .                           kind: ImportKind::MacroUse,
      2 ( 0.00%)                  root_id: item.id,
      .                           id: item.id,
     12 ( 0.00%)                  parent_scope: this.parent_scope,
      .                           imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),
      2 ( 0.00%)                  use_span_with_attributes: item.span_with_attributes(),
      .                           has_attributes: !item.attrs.is_empty(),
      2 ( 0.00%)                  use_span: item.span,
      .                           root_span: span,
      .                           span,
      .                           module_path: Vec::new(),
      .                           vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),
      .                           used: Cell::new(false),
      .                       })
      .                   };
      .           
      8 ( 0.00%)          let allow_shadowing = self.parent_scope.expansion == LocalExpnId::ROOT;
      6 ( 0.00%)          if let Some(span) = import_all {
      .                       let import = macro_use_import(self, span);
      2 ( 0.00%)              self.r.potentially_unused_imports.push(import);
     18 ( 0.00%)              module.for_each_child(self, |this, ident, ns, binding| {
    130 ( 0.00%)                  if ns == MacroNS {
    102 ( 0.00%)                      let imported_binding = this.r.import(binding, import);
    272 ( 0.00%)                      this.add_macro_use_binding(ident.name, imported_binding, span, allow_shadowing);
      .                           }
      .                       });
      .                   } else {
      .                       for ident in single_imports.iter().cloned() {
      .                           let result = self.r.resolve_ident_in_module(
      .                               ModuleOrUniformRoot::Module(module),
      .                               ident,
      .                               MacroNS,
-- line 1129 ----------------------------------------
-- line 1146 ----------------------------------------
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .                   import_all.is_some() || !single_imports.is_empty()
      .               }
      .           
      .               /// Returns `true` if this attribute list contains `macro_use`.
      5 ( 0.00%)      fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {
      .                   for attr in attrs {
     16 ( 0.00%)              if attr.has_name(sym::macro_escape) {
      .                           let msg = "`#[macro_escape]` is a deprecated synonym for `#[macro_use]`";
      .                           let mut err = self.r.session.struct_span_warn(attr.span, msg);
      .                           if let ast::AttrStyle::Inner = attr.style {
      .                               err.help("try an outer attribute: `#[macro_use]`").emit();
      .                           } else {
      .                               err.emit();
      .                           }
      .                       } else if !attr.has_name(sym::macro_use) {
-- line 1164 ----------------------------------------
-- line 1167 ----------------------------------------
      .           
      .                       if !attr.is_word() {
      .                           self.r.session.span_err(attr.span, "arguments to `macro_use` are not allowed here");
      .                       }
      .                       return true;
      .                   }
      .           
      .                   false
      7 ( 0.00%)      }
      .           
      .               fn visit_invoc(&mut self, id: NodeId) -> LocalExpnId {
      6 ( 0.00%)          let invoc_id = id.placeholder_to_expn_id();
      2 ( 0.00%)          let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);
      2 ( 0.00%)          assert!(old_parent_scope.is_none(), "invocation data is reset for an invocation");
      .                   invoc_id
      .               }
      .           
      .               /// Visit invocation in context in which it can emit a named item (possibly `macro_rules`)
      .               /// directly into its parent scope's module.
     12 ( 0.00%)      fn visit_invoc_in_module(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {
      .                   let invoc_id = self.visit_invoc(id);
      2 ( 0.00%)          self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);
      6 ( 0.00%)          self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id))
     12 ( 0.00%)      }
      .           
      .               fn proc_macro_stub(&self, item: &ast::Item) -> Option<(MacroKind, Ident, Span)> {
      .                   if self.r.session.contains_name(&item.attrs, sym::proc_macro) {
      .                       return Some((MacroKind::Bang, item.ident, item.span));
      .                   } else if self.r.session.contains_name(&item.attrs, sym::proc_macro_attribute) {
      .                       return Some((MacroKind::Attr, item.ident, item.span));
      .                   } else if let Some(attr) = self.r.session.find_by_name(&item.attrs, sym::proc_macro_derive)
      .                   {
-- line 1198 ----------------------------------------
-- line 1281 ----------------------------------------
      .                       self.r.visibilities.insert(def_id, vis);
      .                       self.parent_scope.macro_rules
      .                   }
      .               }
      .           }
      .           
      .           macro_rules! method {
      .               ($visit:ident: $ty:ty, $invoc:path, $walk:ident) => {
     24 ( 0.00%)          fn $visit(&mut self, node: &'b $ty) {
    939 ( 0.00%)              if let $invoc(..) = node.kind {
      .                           self.visit_invoc(node.id);
      .                       } else {
  1,142 ( 0.00%)                  visit::$walk(self, node);
      .                       }
      .                   }
      .               };
      .           }
      .           
      .           impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {
      .               method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);
      .               method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);
      .               method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);
      .           
    252 ( 0.00%)      fn visit_item(&mut self, item: &'b Item) {
     28 ( 0.00%)          let orig_module_scope = self.parent_scope.module;
    164 ( 0.00%)          self.parent_scope.macro_rules = match item.kind {
      .                       ItemKind::MacroDef(..) => {
      .                           let macro_rules_scope = self.define_macro(item);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       ItemKind::MacCall(..) => {
      6 ( 0.00%)                  let macro_rules_scope = self.visit_invoc_in_module(item.id);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       _ => {
     52 ( 0.00%)                  let orig_macro_rules_scope = self.parent_scope.macro_rules;
      .                           self.build_reduced_graph_for_item(item);
     78 ( 0.00%)                  visit::walk_item(self, item);
     52 ( 0.00%)                  match item.kind {
      .                               ItemKind::Mod(..) if self.contains_macro_use(&item.attrs) => {
      .                                   self.parent_scope.macro_rules
      .                               }
      .                               _ => orig_macro_rules_scope,
      .                           }
      .                       }
      .                   };
     28 ( 0.00%)          self.parent_scope.module = orig_module_scope;
    224 ( 0.00%)      }
      .           
      .               fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {
     96 ( 0.00%)          if let ast::StmtKind::MacCall(..) = stmt.kind {
      .                       self.parent_scope.macro_rules = self.visit_invoc_in_module(stmt.id);
      .                   } else {
    144 ( 0.00%)              visit::walk_stmt(self, stmt);
      .                   }
      .               }
      .           
      .               fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {
      .                   if let ForeignItemKind::MacCall(_) = foreign_item.kind {
      .                       self.visit_invoc_in_module(foreign_item.id);
      .                       return;
      .                   }
      .           
      .                   self.build_reduced_graph_for_foreign_item(foreign_item);
      .                   visit::walk_foreign_item(self, foreign_item);
      .               }
      .           
    117 ( 0.00%)      fn visit_block(&mut self, block: &'b Block) {
     13 ( 0.00%)          let orig_current_module = self.parent_scope.module;
     26 ( 0.00%)          let orig_current_macro_rules_scope = self.parent_scope.macro_rules;
      .                   self.build_reduced_graph_for_block(block);
      .                   visit::walk_block(self, block);
     26 ( 0.00%)          self.parent_scope.module = orig_current_module;
     13 ( 0.00%)          self.parent_scope.macro_rules = orig_current_macro_rules_scope;
    104 ( 0.00%)      }
      .           
    110 ( 0.00%)      fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {
     22 ( 0.00%)          if let AssocItemKind::MacCall(_) = item.kind {
      .                       match ctxt {
      .                           AssocCtxt::Trait => {
      .                               self.visit_invoc_in_module(item.id);
      .                           }
      .                           AssocCtxt::Impl => {
      .                               self.visit_invoc(item.id);
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
     22 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
     33 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
     66 ( 0.00%)          if !(ctxt == AssocCtxt::Impl
      .                       && matches!(item.vis.kind, ast::VisibilityKind::Inherited)
     11 ( 0.00%)              && self
      .                           .r
      .                           .trait_impl_items
     11 ( 0.00%)                  .contains(&ty::DefIdTree::parent(&*self.r, def_id).unwrap().expect_local()))
      .                   {
      .                       // Trait impl item visibility is inherited from its trait when not specified
      .                       // explicitly. In that case we cannot determine it here in early resolve,
      .                       // so we leave a hole in the visibility table to be filled later.
      .                       self.r.visibilities.insert(local_def_id, vis);
      .                   }
      .           
     22 ( 0.00%)          if ctxt == AssocCtxt::Trait {
      .                       let (def_kind, ns) = match item.kind {
      .                           AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),
      .                           AssocItemKind::Fn(box Fn { ref sig, .. }) => {
      .                               if sig.decl.has_self() {
      .                                   self.r.has_self.insert(def_id);
      .                               }
      .                               (DefKind::AssocFn, ValueNS)
      .                           }
-- line 1397 ----------------------------------------
-- line 1400 ----------------------------------------
      .                       };
      .           
      .                       let parent = self.parent_scope.module;
      .                       let expansion = self.parent_scope.expansion;
      .                       let res = Res::Def(def_kind, def_id);
      .                       self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   }
      .           
     44 ( 0.00%)          visit::walk_assoc_item(self, item, ctxt);
     88 ( 0.00%)      }
      .           
    870 ( 0.00%)      fn visit_attribute(&mut self, attr: &'b ast::Attribute) {
    636 ( 0.00%)          if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {
     14 ( 0.00%)              self.r
      .                           .builtin_attrs
    168 ( 0.00%)                  .push((attr.get_normal_item().path.segments[0].ident, self.parent_scope));
      .                   }
  1,015 ( 0.00%)          visit::walk_attribute(self, attr);
      .               }
      .           
      .               fn visit_arm(&mut self, arm: &'b ast::Arm) {
      8 ( 0.00%)          if arm.is_placeholder {
      .                       self.visit_invoc(arm.id);
      .                   } else {
      2 ( 0.00%)              visit::walk_arm(self, arm);
      .                   }
      .               }
      .           
      .               fn visit_expr_field(&mut self, f: &'b ast::ExprField) {
     24 ( 0.00%)          if f.is_placeholder {
      .                       self.visit_invoc(f.id);
      .                   } else {
     12 ( 0.00%)              visit::walk_expr_field(self, f);
      .                   }
      .               }
      .           
      .               fn visit_pat_field(&mut self, fp: &'b ast::PatField) {
     11 ( 0.00%)          if fp.is_placeholder {
      .                       self.visit_invoc(fp.id);
      .                   } else {
      9 ( 0.00%)              visit::walk_pat_field(self, fp);
      .                   }
      .               }
      .           
      .               fn visit_generic_param(&mut self, param: &'b ast::GenericParam) {
     77 ( 0.00%)          if param.is_placeholder {
      .                       self.visit_invoc(param.id);
      .                   } else {
     48 ( 0.00%)              visit::walk_generic_param(self, param);
      .                   }
      .               }
      .           
      .               fn visit_param(&mut self, p: &'b ast::Param) {
     69 ( 0.00%)          if p.is_placeholder {
      .                       self.visit_invoc(p.id);
      .                   } else {
     51 ( 0.00%)              visit::walk_param(self, p);
      .                   }
      .               }
      .           
     24 ( 0.00%)      fn visit_field_def(&mut self, sf: &'b ast::FieldDef) {
      6 ( 0.00%)          if sf.is_placeholder {
      .                       self.visit_invoc(sf.id);
      .                   } else {
      6 ( 0.00%)              let vis = self.resolve_visibility(&sf.vis);
      9 ( 0.00%)              self.r.visibilities.insert(self.r.local_def_id(sf.id), vis);
     27 ( 0.00%)              visit::walk_field_def(self, sf);
      .                   }
      .               }
      .           
      .               // Constructs the reduced graph for one variant. Variants exist in the
      .               // type and value namespaces.
      .               fn visit_variant(&mut self, variant: &'b ast::Variant) {
      .                   if variant.is_placeholder {
      .                       self.visit_invoc_in_module(variant.id);
-- line 1474 ----------------------------------------
-- line 1510 ----------------------------------------
      .                   }
      .                   // Record field names for error reporting.
      .                   self.insert_field_names_local(ctor_def_id.to_def_id(), &variant.data);
      .           
      .                   visit::walk_variant(self, variant);
      .               }
      .           
      .               fn visit_crate(&mut self, krate: &'b ast::Crate) {
      2 ( 0.00%)          if krate.is_placeholder {
      .                       self.visit_invoc_in_module(krate.id);
      .                   } else {
      .                       visit::walk_crate(self, krate);
     11 ( 0.00%)              self.contains_macro_use(&krate.attrs);
      .                   }
      .               }
      .           }

 26,380 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 270 ----------------------------------------
        .               ///
        .               /// let s = RandomState::new();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
        .               pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {
   84,889 ( 0.02%)          HashMap { base: base::HashMap::with_hasher(hash_builder) }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
-- line 286 ----------------------------------------
-- line 300 ----------------------------------------
        .               ///
        .               /// let s = RandomState::new();
        .               /// let mut map = HashMap::with_capacity_and_hasher(10, s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
        .               pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {
    1,326 ( 0.00%)          HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }
        .               }
        .           
        .               /// Returns the number of elements the map can hold without reallocating.
        .               ///
        .               /// This number is a lower bound; the `HashMap<K, V>` might be able to hold
        .               /// more, but is guaranteed to be able to hold at least this many.
        .               ///
        .               /// # Examples
-- line 316 ----------------------------------------
-- line 468 ----------------------------------------
        .               /// ]);
        .               ///
        .               /// for (key, val) in map.iter() {
        .               ///     println!("key: {} val: {}", key, val);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn iter(&self) -> Iter<'_, K, V> {
      670 ( 0.00%)          Iter { base: self.base.iter() }
        .               }
        .           
        .               /// An iterator visiting all key-value pairs in arbitrary order,
        .               /// with mutable references to the values.
        .               /// The iterator element type is `(&'a K, &'a mut V)`.
        .               ///
        .               /// # Examples
        .               ///
-- line 484 ----------------------------------------
-- line 643 ----------------------------------------
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
        1 ( 0.00%)          self.base.clear();
        .               }
        .           
        .               /// Returns a reference to the map's [`BuildHasher`].
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::HashMap;
-- line 659 ----------------------------------------
-- line 688 ----------------------------------------
        .               /// ```
        .               /// use std::collections::HashMap;
        .               /// let mut map: HashMap<&str, i32> = HashMap::new();
        .               /// map.reserve(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
        1 ( 0.00%)          self.base.reserve(additional)
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid
        .               /// frequent reallocations.
        .               ///
        .               /// # Errors
        .               ///
-- line 704 ----------------------------------------
-- line 784 ----------------------------------------
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
  223,115 ( 0.04%)          map_entry(self.base.rustc_entry(key))
        .               }
        .           
        .               /// Returns a reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 800 ----------------------------------------
-- line 805 ----------------------------------------
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.get(&1), Some(&"a"));
        .               /// assert_eq!(map.get(&2), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
   10,624 ( 0.00%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.base.get(k)
   14,898 ( 0.00%)      }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// # Examples
-- line 827 ----------------------------------------
-- line 862 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
    5,698 ( 0.00%)          self.base.contains_key(k)
        .               }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 878 ----------------------------------------
-- line 890 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
       77 ( 0.00%)          self.base.get_mut(k)
        .               }
        .           
        .               /// Inserts a key-value pair into the map.
        .               ///
        .               /// If the map did not have this key present, [`None`] is returned.
        .               ///
        .               /// If the map did have this key present, the value is updated, and the old
        .               /// value is returned. The key is not updated, though; this matters for
-- line 906 ----------------------------------------
-- line 920 ----------------------------------------
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn insert(&mut self, k: K, v: V) -> Option<V> {
1,334,835 ( 0.27%)          self.base.insert(k, v)
        .               }
        .           
        .               /// Tries to insert a key-value pair into the map, and returns
        .               /// a mutable reference to the value in the entry.
        .               ///
        .               /// If the map already had this key present, nothing is updated, and
        .               /// an error containing the occupied entry and the value is returned.
        .               ///
-- line 936 ----------------------------------------
-- line 978 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
    2,871 ( 0.00%)          self.base.remove(k)
        .               }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
-- line 994 ----------------------------------------
-- line 1083 ----------------------------------------
        .           impl<K, V, S> Clone for HashMap<K, V, S>
        .           where
        .               K: Clone,
        .               V: Clone,
        .               S: Clone,
        .           {
        .               #[inline]
        .               fn clone(&self) -> Self {
       57 ( 0.00%)          Self { base: self.base.clone() }
        .               }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, other: &Self) {
        .                   self.base.clone_from(&other.base);
        .               }
        .           }
        .           
-- line 1099 ----------------------------------------
-- line 1155 ----------------------------------------
        .               type Output = V;
        .           
        .               /// Returns a reference to the value corresponding to the supplied key.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the key is not present in the `HashMap`.
        .               #[inline]
       75 ( 0.00%)      fn index(&self, key: &Q) -> &V {
        .                   self.get(key).expect("no entry found for key")
      102 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "std_collections_from_array", since = "1.56.0")]
        .           // Note: as what is currently the most convenient built-in way to construct
        .           // a HashMap, a simple usage of this function must not *require* the user
        .           // to provide a type annotation in order to infer the third type parameter
        .           // (the hasher parameter, conventionally "S").
        .           // To that end, this impl is defined using RandomState as the concrete
-- line 1173 ----------------------------------------
-- line 1557 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  792,868 ( 0.16%)          map_raw_entry(self.map.base.raw_entry_mut().from_key_hashed_nocheck(hash, k))
        .               }
        .           
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[inline]
        .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
        .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
-- line 1573 ----------------------------------------
-- line 1594 ----------------------------------------
        .               /// Access an entry by a key and its hash.
        .               #[inline]
        .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  299,700 ( 0.06%)          self.map.base.raw_entry().from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[inline]
        .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
        .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
-- line 1610 ----------------------------------------
-- line 2338 ----------------------------------------
        .               /// assert_eq!(map["poneyland"], 3);
        .               ///
        .               /// *map.entry("poneyland").or_insert(10) *= 2;
        .               /// assert_eq!(map["poneyland"], 6);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn or_insert(self, default: V) -> &'a mut V {
    1,492 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
        .                       Vacant(entry) => entry.insert(default),
        .                   }
        .               }
        .           
        .               /// Ensures a value is in the entry by inserting the result of the default function if empty,
        .               /// and returns a mutable reference to the value in the entry.
        .               ///
-- line 2354 ----------------------------------------
-- line 2362 ----------------------------------------
        .               ///
        .               /// map.entry("poneyland").or_insert_with(|| s);
        .               ///
        .               /// assert_eq!(map["poneyland"], "hoho".to_string());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
   30,470 ( 0.01%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
        .                       Vacant(entry) => entry.insert(default()),
        .                   }
        .               }
        .           
        .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
        .               /// This method allows for generating key-derived values for insertion by providing the default
        .               /// function a reference to the key that was moved during the `.entry(key)` method call.
-- line 2378 ----------------------------------------
-- line 2443 ----------------------------------------
        .               /// assert_eq!(map["poneyland"], 43);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "entry_and_modify", since = "1.26.0")]
        .               pub fn and_modify<F>(self, f: F) -> Self
        .               where
        .                   F: FnOnce(&mut V),
        .               {
       28 ( 0.00%)          match self {
        .                       Occupied(mut entry) => {
        .                           f(entry.get_mut());
        .                           Occupied(entry)
        .                       }
        .                       Vacant(entry) => Vacant(entry),
        .                   }
        .               }
        .           
-- line 2459 ----------------------------------------
-- line 2496 ----------------------------------------
        .               /// map.entry("poneyland").or_default();
        .               ///
        .               /// assert_eq!(map["poneyland"], None);
        .               /// # }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "entry_or_default", since = "1.28.0")]
        .               pub fn or_default(self) -> &'a mut V {
    2,888 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
        .                       Vacant(entry) => entry.insert(Default::default()),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V> OccupiedEntry<'a, K, V> {
        .               /// Gets a reference to the key in the entry.
-- line 2512 ----------------------------------------
-- line 2790 ----------------------------------------
        .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn insert(self, value: V) -> &'a mut V {
   10,404 ( 0.00%)          self.base.insert(value)
        .               }
        .           
        .               /// Sets the value of the entry with the `VacantEntry`'s key,
        .               /// and returns an `OccupiedEntry`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2806 ----------------------------------------
-- line 2823 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher + Default,
        .           {
       22 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {
        .                   let mut map = HashMap::with_hasher(Default::default());
        .                   map.extend(iter);
        .                   map
       23 ( 0.00%)      }
        .           }
        .           
        .           /// Inserts all new key-values from the iterator and replaces values with existing
        .           /// keys with new values returned from the iterator.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .           {
        .               #[inline]
        .               fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
   12,136 ( 0.00%)          self.base.extend(iter)
        .               }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.base.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 2856 ----------------------------------------
-- line 2928 ----------------------------------------
        .                   // many hash maps are created on a thread. To solve this performance
        .                   // trap we cache the first set of randomly generated keys per-thread.
        .                   //
        .                   // Later in #36481 it was discovered that exposing a deterministic
        .                   // iteration order allows a form of DOS attack. To counter that we
        .                   // increment one of the seeds on every RandomState creation, giving
        .                   // every corresponding HashMap a different iteration order.
        .                   thread_local!(static KEYS: Cell<(u64, u64)> = {
        1 ( 0.00%)              Cell::new(sys::hashmap_random_keys())
        .                   });
        .           
        .                   KEYS.with(|keys| {
        3 ( 0.00%)              let (k0, k1) = keys.get();
        .                       keys.set((k0.wrapping_add(1), k1));
        .                       RandomState { k0, k1 }
        .                   })
        .               }
        .           }
        .           
        .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
        .           impl BuildHasher for RandomState {
-- line 2948 ----------------------------------------
-- line 2967 ----------------------------------------
        .               /// Creates a new `DefaultHasher`.
        .               ///
        .               /// This hasher is not guaranteed to be the same as all other
        .               /// `DefaultHasher` instances, but is the same as all other `DefaultHasher`
        .               /// instances created through `new` or `default`.
        .               #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
        .               #[allow(deprecated)]
        .               #[must_use]
        3 ( 0.00%)      pub fn new() -> DefaultHasher {
       12 ( 0.00%)          DefaultHasher(SipHasher13::new_with_keys(0, 0))
        3 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
        .           impl Default for DefaultHasher {
        .               /// Creates a new `DefaultHasher` using [`new`].
        .               /// See its documentation for more.
        .               ///
        .               /// [`new`]: DefaultHasher::new
-- line 2985 ----------------------------------------
-- line 2986 ----------------------------------------
        .               fn default() -> DefaultHasher {
        .                   DefaultHasher::new()
        .               }
        .           }
        .           
        .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
        .           impl Hasher for DefaultHasher {
        .               #[inline]
    1,076 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
        .                   self.0.write(msg)
    1,076 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn finish(&self) -> u64 {
        .                   self.0.finish()
        .               }
        .           }
        .           
        .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
-- line 3004 ----------------------------------------
-- line 3014 ----------------------------------------
        .           impl fmt::Debug for RandomState {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("RandomState").finish_non_exhaustive()
        .               }
        .           }
        .           
        .           #[inline]
        .           fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K, V> {
      599 ( 0.00%)      match raw {
        .                   base::RustcEntry::Occupied(base) => Entry::Occupied(OccupiedEntry { base }),
       25 ( 0.00%)          base::RustcEntry::Vacant(base) => Entry::Vacant(VacantEntry { base }),
        .               }
        .           }
        .           
        .           #[inline]
        .           pub(super) fn map_try_reserve_error(err: hashbrown::TryReserveError) -> TryReserveError {
        .               match err {
        .                   hashbrown::TryReserveError::CapacityOverflow => {
        .                       TryReserveErrorKind::CapacityOverflow.into()
-- line 3032 ----------------------------------------
-- line 3036 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[inline]
        .           fn map_raw_entry<'a, K: 'a, V: 'a, S: 'a>(
        .               raw: base::RawEntryMut<'a, K, V, S>,
        .           ) -> RawEntryMut<'a, K, V, S> {
  625,462 ( 0.13%)      match raw {
        .                   base::RawEntryMut::Occupied(base) => RawEntryMut::Occupied(RawOccupiedEntryMut { base }),
        .                   base::RawEntryMut::Vacant(base) => RawEntryMut::Vacant(RawVacantEntryMut { base }),
        .               }
        .           }
        .           
        .           #[allow(dead_code)]
        .           fn assert_covariance() {
        .               fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {
-- line 3052 ----------------------------------------

  453,930 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs
--------------------------------------------------------------------------------
Ir                 

-- line 193 ----------------------------------------
        .               /// assert_eq!(a.iter().count(), 5);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn count(self) -> usize
        .               where
        .                   Self: Sized,
        .               {
      137 ( 0.00%)          self.fold(
        .                       0,
        .                       #[rustc_inherit_overflow_checks]
      483 ( 0.00%)              |count, _| count + 1,
        .                   )
        .               }
        .           
        .               /// Consumes the iterator, returning the last element.
        .               ///
        .               /// This method will evaluate the iterator until it returns [`None`]. While
        .               /// doing so, it keeps track of the current element. After [`None`] is
        .               /// returned, `last()` will then return the last element it saw.
-- line 212 ----------------------------------------
-- line 267 ----------------------------------------
        .               /// assert_eq!(iter.next(), Some(&3));
        .               /// assert_eq!(iter.advance_by(0), Ok(()));
        .               /// assert_eq!(iter.advance_by(100), Err(1)); // only `&4` was skipped
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "iter_advance_by", reason = "recently added", issue = "77404")]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   for i in 0..n {
       38 ( 0.00%)              self.next().ok_or(i)?;
        .                   }
        .                   Ok(())
        .               }
        .           
        .               /// Returns the `n`th element of the iterator.
        .               ///
        .               /// Like most indexing operations, the count starts from zero, so `nth(0)`
        .               /// returns the first value, `nth(1)` the second, and so on.
-- line 283 ----------------------------------------
-- line 315 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert_eq!(a.iter().nth(10), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   self.advance_by(n).ok()?;
       74 ( 0.00%)          self.next()
        .               }
        .           
        .               /// Creates an iterator starting at the same point, but stepping by
        .               /// the given amount at each iteration.
        .               ///
        .               /// Note 1: The first element of the iterator will always be returned,
        .               /// regardless of the step given.
        .               ///
-- line 331 ----------------------------------------
-- line 441 ----------------------------------------
        .               /// [`OsStr`]: ../../std/ffi/struct.OsStr.html
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>
        .               where
        .                   Self: Sized,
        .                   U: IntoIterator<Item = Self::Item>,
        .               {
    3,704 ( 0.00%)          Chain::new(self, other.into_iter())
        .               }
        .           
        .               /// 'Zips up' two iterators into a single iterator of pairs.
        .               ///
        .               /// `zip()` returns a new iterator that will iterate over two other
        .               /// iterators, returning a tuple where the first element comes from the
        .               /// first iterator, and the second element comes from the second iterator.
        .               ///
-- line 457 ----------------------------------------
-- line 714 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn map<B, F>(self, f: F) -> Map<Self, F>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> B,
        .               {
    8,494 ( 0.00%)          Map::new(self, f)
        .               }
        .           
        .               /// Calls a closure on each element of an iterator.
        .               ///
        .               /// This is equivalent to using a [`for`] loop on the iterator, although
        .               /// `break` and `continue` are not possible from a closure. It's generally
        .               /// more idiomatic to use a `for` loop, but `for_each` may be more legible
        .               /// when processing items at the end of longer iterator chains. In some
-- line 730 ----------------------------------------
-- line 761 ----------------------------------------
        .               #[stable(feature = "iterator_for_each", since = "1.21.0")]
        .               fn for_each<F>(self, f: F)
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item),
        .               {
        .                   #[inline]
        .                   fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
       80 ( 0.00%)              move |(), item| f(item)
        .                   }
        .           
  110,577 ( 0.02%)          self.fold((), call(f));
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element
        .               /// should be yielded.
        .               ///
        .               /// Given an element the closure must return `true` or `false`. The returned
        .               /// iterator will yield only the elements for which the closure returns
        .               /// true.
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
        .               /// Note that `iter.filter(f).next()` is equivalent to `iter.find(f)`.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn filter<P>(self, predicate: P) -> Filter<Self, P>
        .               where
        .                   Self: Sized,
        .                   P: FnMut(&Self::Item) -> bool,
        .               {
    1,700 ( 0.00%)          Filter::new(self, predicate)
        .               }
        .           
        .               /// Creates an iterator that both filters and maps.
        .               ///
        .               /// The returned iterator yields only the `value`s for which the supplied
        .               /// closure returns `Some(value)`.
        .               ///
        .               /// `filter_map` can be used to make chains of [`filter`] and [`map`] more
-- line 850 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> Option<B>,
        .               {
      390 ( 0.00%)          FilterMap::new(self, f)
        .               }
        .           
        .               /// Creates an iterator which gives the current iteration count as well as
        .               /// the next value.
        .               ///
        .               /// The iterator returned yields pairs `(i, val)`, where `i` is the
        .               /// current index of iteration and `val` is the value returned by the
        .               /// iterator.
-- line 895 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// [`peek_mut`]: Peekable::peek_mut
        .               /// [`next`]: Iterator::next
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn peekable(self) -> Peekable<Self>
        .               where
        .                   Self: Sized,
        .               {
       13 ( 0.00%)          Peekable::new(self)
        .               }
        .           
        .               /// Creates an iterator that [`skip`]s elements based on a predicate.
        .               ///
        .               /// [`skip`]: Iterator::skip
        .               ///
        .               /// `skip_while()` takes a closure as an argument. It will call this
        .               /// closure on each element of the iterator, and ignore elements
-- line 1011 ----------------------------------------
-- line 1537 ----------------------------------------
        .               /// assert_eq!(iter.next(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn fuse(self) -> Fuse<Self>
        .               where
        .                   Self: Sized,
        .               {
      134 ( 0.00%)          Fuse::new(self)
        .               }
        .           
        .               /// Does something with each element of an iterator, passing the value on.
        .               ///
        .               /// When using iterators, you'll often chain several of them together.
        .               /// While working on such code, you might want to check out what's
        .               /// happening at various parts in the pipeline. To do that, insert
        .               /// a call to `inspect()`.
-- line 1553 ----------------------------------------
-- line 1769 ----------------------------------------
        .               /// [`char`]: type@char
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use = "if you really need to exhaust the iterator, consider `.for_each(drop)` instead"]
        .               fn collect<B: FromIterator<Self::Item>>(self) -> B
        .               where
        .                   Self: Sized,
        .               {
      819 ( 0.00%)          FromIterator::from_iter(self)
        .               }
        .           
        .               /// Consumes an iterator, creating two collections from it.
        .               ///
        .               /// The predicate passed to `partition()` can return `true`, or `false`.
        .               /// `partition()` returns a pair, all of the elements for which it returned
        .               /// `true`, and all of the elements for which it returned `false`.
        .               ///
-- line 1785 ----------------------------------------
-- line 1798 ----------------------------------------
        .               /// let (even, odd): (Vec<i32>, Vec<i32>) = a
        .               ///     .iter()
        .               ///     .partition(|&n| n % 2 == 0);
        .               ///
        .               /// assert_eq!(even, vec![2]);
        .               /// assert_eq!(odd, vec![1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        8 ( 0.00%)      fn partition<B, F>(self, f: F) -> (B, B)
        .               where
        .                   Self: Sized,
        .                   B: Default + Extend<Self::Item>,
        .                   F: FnMut(&Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn extend<'a, T, B: Extend<T>>(
        .                       mut f: impl FnMut(&T) -> bool + 'a,
-- line 1814 ----------------------------------------
-- line 1822 ----------------------------------------
        .                               right.extend_one(x);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut left: B = Default::default();
        .                   let mut right: B = Default::default();
        .           
        4 ( 0.00%)          self.fold((), extend(f, &mut left, &mut right));
        .           
        8 ( 0.00%)          (left, right)
        9 ( 0.00%)      }
        .           
        .               /// Reorders the elements of this iterator *in-place* according to the given predicate,
        .               /// such that all those that return `true` precede all those that return `false`.
        .               /// Returns the number of `true` elements found.
        .               ///
        .               /// The relative order of partitioned items is not maintained.
        .               ///
        .               /// # Current implementation
-- line 1841 ----------------------------------------
-- line 2011 ----------------------------------------
        .               ///     } else {
        .               ///         ControlFlow::Break(prev)
        .               ///     }
        .               /// });
        .               /// assert_eq!(triangular, ControlFlow::Continue(435));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iterator_try_fold", since = "1.27.0")]
      184 ( 0.00%)      fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
        .               where
        .                   Self: Sized,
        .                   F: FnMut(B, Self::Item) -> R,
        .                   R: Try<Output = B>,
        .               {
      208 ( 0.00%)          let mut accum = init;
  620,824 ( 0.12%)          while let Some(x) = self.next() {
3,635,306 ( 0.73%)              accum = f(accum, x)?;
        .                   }
      361 ( 0.00%)          try { accum }
      184 ( 0.00%)      }
        .           
        .               /// An iterator method that applies a fallible function to each item in the
        .               /// iterator, stopping at the first error and returning that error.
        .               ///
        .               /// This can also be thought of as the fallible form of [`for_each()`]
        .               /// or as the stateless version of [`try_fold()`].
        .               ///
        .               /// [`for_each()`]: Iterator::for_each
-- line 2038 ----------------------------------------
-- line 2080 ----------------------------------------
        .                   F: FnMut(Self::Item) -> R,
        .                   R: Try<Output = ()>,
        .               {
        .                   #[inline]
        .                   fn call<T, R>(mut f: impl FnMut(T) -> R) -> impl FnMut((), T) -> R {
        .                       move |(), x| f(x)
        .                   }
        .           
        9 ( 0.00%)          self.try_fold((), call(f))
        .               }
        .           
        .               /// Folds every element into an accumulator by applying an operation,
        .               /// returning the final result.
        .               ///
        .               /// `fold()` takes two arguments: an initial value, and a closure with two
        .               /// arguments: an 'accumulator', and an element. The closure returns the value that
        .               /// the accumulator should have for the next iteration.
-- line 2096 ----------------------------------------
-- line 2188 ----------------------------------------
        .               /// // they're the same
        .               /// assert_eq!(result, result2);
        .               /// ```
        .               ///
        .               /// [`reduce()`]: Iterator::reduce
        .               #[doc(alias = "inject", alias = "foldl")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      147 ( 0.00%)      fn fold<B, F>(mut self, init: B, mut f: F) -> B
        .               where
        .                   Self: Sized,
        .                   F: FnMut(B, Self::Item) -> B,
        .               {
      137 ( 0.00%)          let mut accum = init;
   87,852 ( 0.02%)          while let Some(x) = self.next() {
    9,532 ( 0.00%)              accum = f(accum, x);
        .                   }
        .                   accum
      169 ( 0.00%)      }
        .           
        .               /// Reduces the elements to a single one, by repeatedly applying a reducing
        .               /// operation.
        .               ///
        .               /// If the iterator is empty, returns [`None`]; otherwise, returns the
        .               /// result of the reduction.
        .               ///
        .               /// The reducing function is a closure with two arguments: an 'accumulator', and an element.
-- line 2214 ----------------------------------------
-- line 2240 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "iterator_fold_self", since = "1.51.0")]
        .               fn reduce<F>(mut self, f: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item, Self::Item) -> Self::Item,
        .               {
        .                   let first = self.next()?;
      259 ( 0.00%)          Some(self.fold(first, f))
        .               }
        .           
        .               /// Reduces the elements to a single one by repeatedly applying a reducing operation. If the
        .               /// closure returns a failure, the failure is propagated back to the caller immediately.
        .               ///
        .               /// The return type of this method depends on the return type of the closure. If the closure
        .               /// returns `Result<Self::Item, E>`, then this function will return `Result<Option<Self::Item>,
        .               /// E>`. If the closure returns `Option<Self::Item>`, then this function will return
-- line 2256 ----------------------------------------
-- line 2370 ----------------------------------------
        .               fn all<F>(&mut self, f: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(mut f: impl FnMut(T) -> bool) -> impl FnMut((), T) -> ControlFlow<()> {
        .                       move |(), x| {
       96 ( 0.00%)                  if f(x) { ControlFlow::CONTINUE } else { ControlFlow::BREAK }
        .                       }
        .                   }
       91 ( 0.00%)          self.try_fold((), check(f)) == ControlFlow::CONTINUE
        .               }
        .           
        .               /// Tests if any element of the iterator matches a predicate.
        .               ///
        .               /// `any()` takes a closure that returns `true` or `false`. It applies
        .               /// this closure to each element of the iterator, and if any of them return
        .               /// `true`, then so does `any()`. If they all return `false`, it
        .               /// returns `false`.
-- line 2389 ----------------------------------------
-- line 2483 ----------------------------------------
        .               fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   P: FnMut(&Self::Item) -> bool,
        .               {
        .                   #[inline]
        .                   fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
        .                       move |(), x| {
    8,168 ( 0.00%)                  if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::CONTINUE }
        .                       }
        .                   }
        .           
   12,514 ( 0.00%)          self.try_fold((), check(predicate)).break_value()
        .               }
        .           
        .               /// Applies function to the elements of iterator and returns
        .               /// the first non-none result.
        .               ///
        .               /// `iter.find_map(f)` is equivalent to `iter.filter_map(f).next()`.
        .               ///
        .               /// # Examples
-- line 2503 ----------------------------------------
-- line 2513 ----------------------------------------
        .               #[stable(feature = "iterator_find_map", since = "1.30.0")]
        .               fn find_map<B, F>(&mut self, f: F) -> Option<B>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(Self::Item) -> Option<B>,
        .               {
        .                   #[inline]
        .                   fn check<T, B>(mut f: impl FnMut(T) -> Option<B>) -> impl FnMut((), T) -> ControlFlow<B> {
   21,154 ( 0.00%)              move |(), x| match f(x) {
    1,036 ( 0.00%)                  Some(x) => ControlFlow::Break(x),
        .                           None => ControlFlow::CONTINUE,
        .                       }
        .                   }
        .           
      231 ( 0.00%)          self.try_fold((), check(f)).break_value()
        .               }
        .           
        .               /// Applies function to the elements of iterator and returns
        .               /// the first true result or the first error.
        .               ///
        .               /// The return type of this method depends on the return type of the closure.
        .               /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.
        .               /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.
-- line 2535 ----------------------------------------
-- line 2812 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [-3_i32, 0, 1, 5, -10];
        .               /// assert_eq!(*a.iter().max_by_key(|x| x.abs()).unwrap(), -10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "iter_cmp_by_key", since = "1.6.0")]
        7 ( 0.00%)      fn max_by_key<B: Ord, F>(self, f: F) -> Option<Self::Item>
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item) -> B,
        .               {
        .                   #[inline]
        .                   fn key<T, B>(mut f: impl FnMut(&T) -> B) -> impl FnMut(T) -> (B, T) {
       12 ( 0.00%)              move |x| (f(&x), x)
        .                   }
        .           
        .                   #[inline]
        .                   fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {
        .                       x_p.cmp(y_p)
        .                   }
        .           
       15 ( 0.00%)          let (_, x) = self.map(key(f)).max_by(compare)?;
        .                   Some(x)
        8 ( 0.00%)      }
        .           
        .               /// Returns the element that gives the maximum value with respect to the
        .               /// specified comparison function.
        .               ///
        .               /// If several elements are equally maximum, the last element is
        .               /// returned. If the iterator is empty, [`None`] is returned.
        .               ///
        .               /// # Examples
-- line 2845 ----------------------------------------
-- line 2855 ----------------------------------------
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Ordering,
        .               {
        .                   #[inline]
        .                   fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {
        .                       move |x, y| cmp::max_by(x, y, &mut compare)
        .                   }
        .           
      528 ( 0.00%)          self.reduce(fold(compare))
        .               }
        .           
        .               /// Returns the element that gives the minimum value from the
        .               /// specified function.
        .               ///
        .               /// If several elements are equally minimum, the first element is
        .               /// returned. If the iterator is empty, [`None`] is returned.
        .               ///
-- line 2871 ----------------------------------------
-- line 2946 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[doc(alias = "reverse")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn rev(self) -> Rev<Self>
        .               where
        .                   Self: Sized + DoubleEndedIterator,
        .               {
       13 ( 0.00%)          Rev::new(self)
        .               }
        .           
        .               /// Converts an iterator of pairs into a pair of containers.
        .               ///
        .               /// `unzip()` consumes an entire iterator of pairs, producing two
        .               /// collections: one from the left elements of the pairs, and one
        .               /// from the right elements.
        .               ///
-- line 2962 ----------------------------------------
-- line 2987 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB)
        .               where
        .                   FromA: Default + Extend<A>,
        .                   FromB: Default + Extend<B>,
        .                   Self: Sized + Iterator<Item = (A, B)>,
        .               {
        .                   let mut unzipped: (FromA, FromB) = Default::default();
        2 ( 0.00%)          unzipped.extend(self);
        .                   unzipped
        .               }
        .           
        .               /// Creates an iterator which copies all of its elements.
        .               ///
        .               /// This is useful when you have an iterator over `&T`, but you need an
        .               /// iterator over `T`.
        .               ///
-- line 3003 ----------------------------------------
-- line 3017 ----------------------------------------
        .               /// assert_eq!(v_map, vec![1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "iter_copied", since = "1.36.0")]
        .               fn copied<'a, T: 'a>(self) -> Copied<Self>
        .               where
        .                   Self: Sized + Iterator<Item = &'a T>,
        .                   T: Copy,
        .               {
    1,172 ( 0.00%)          Copied::new(self)
        .               }
        .           
        .               /// Creates an iterator which [`clone`]s all of its elements.
        .               ///
        .               /// This is useful when you have an iterator over `&T`, but you need an
        .               /// iterator over `T`.
        .               ///
        .               /// [`clone`]: Clone::clone
-- line 3033 ----------------------------------------
-- line 3048 ----------------------------------------
        .               /// assert_eq!(v_map, vec![1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn cloned<'a, T: 'a>(self) -> Cloned<Self>
        .               where
        .                   Self: Sized + Iterator<Item = &'a T>,
        .                   T: Clone,
        .               {
    2,109 ( 0.00%)          Cloned::new(self)
        .               }
        .           
        .               /// Repeats an iterator endlessly.
        .               ///
        .               /// Instead of stopping at [`None`], the iterator will instead start again,
        .               /// from the beginning. After iterating again, it will start at the
        .               /// beginning again. And again. And again. Forever. Note that in case the
        .               /// original iterator is empty, the resulting iterator will also be empty.
-- line 3064 ----------------------------------------
-- line 3313 ----------------------------------------
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!([1].iter().eq([1].iter()), true);
        .               /// assert_eq!([1].iter().eq([1, 2].iter()), false);
        .               /// ```
        .               #[stable(feature = "iter_order", since = "1.5.0")]
        7 ( 0.00%)      fn eq<I>(self, other: I) -> bool
        .               where
        .                   I: IntoIterator,
        .                   Self::Item: PartialEq<I::Item>,
        .                   Self: Sized,
        .               {
        8 ( 0.00%)          self.eq_by(other, |x, y| x == y)
        8 ( 0.00%)      }
        .           
        .               /// Determines if the elements of this [`Iterator`] are equal to those of
        .               /// another with respect to the specified equality function.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 3336 ----------------------------------------
-- line 3344 ----------------------------------------
        .               /// ```
        .               #[unstable(feature = "iter_order_by", issue = "64295")]
        .               fn eq_by<I, F>(mut self, other: I, mut eq: F) -> bool
        .               where
        .                   Self: Sized,
        .                   I: IntoIterator,
        .                   F: FnMut(Self::Item, I::Item) -> bool,
        .               {
       10 ( 0.00%)          let mut other = other.into_iter();
        .           
        .                   loop {
        3 ( 0.00%)              let x = match self.next() {
        .                           None => return other.next().is_none(),
       11 ( 0.00%)                  Some(val) => val,
        .                       };
        .           
        3 ( 0.00%)              let y = match other.next() {
        .                           None => return false,
        .                           Some(val) => val,
        .                       };
        .           
        .                       if !eq(x, y) {
        .                           return false;
        .                       }
        .                   }
-- line 3368 ----------------------------------------
-- line 3589 ----------------------------------------
        .                   unreachable!("Always specialized");
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I: Iterator + ?Sized> Iterator for &mut I {
        .               type Item = I::Item;
        .               #[inline]
        2 ( 0.00%)      fn next(&mut self) -> Option<I::Item> {
    3,041 ( 0.00%)          (**self).next()
        3 ( 0.00%)      }
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        4 ( 0.00%)          (**self).size_hint()
        .               }
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   (**self).advance_by(n)
        .               }
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   (**self).nth(n)
        .               }
        .           }
-- line 3609 ----------------------------------------

  155,169 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/traits/iterator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir               

-- line 39 ----------------------------------------
      .               pub fn canonicalize_query<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
    442 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
  2,160 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
      .               }
      .           
      .               /// Canonicalizes a query *response* `V`. When we canonicalize a
      .               /// query response, we only canonicalize unbound inference
      .               /// variables, and we leave other free regions alone. So,
      .               /// continuing with the example from `canonicalize_query`, if
      .               /// there was an input query `T: Trait<'static>`, it would have
      .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 73 ----------------------------------------
      .               /// To get a good understanding of what is happening here, check
      .               /// out the [chapter in the rustc dev guide][c].
      .               ///
      .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
      .               pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
    414 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
  1,449 ( 0.00%)          Canonicalizer::canonicalize(
  2,428 ( 0.00%)              value,
      .                       self,
    207 ( 0.00%)              self.tcx,
      .                       &CanonicalizeQueryResponse,
      .                       &mut query_state,
      .                   )
      .               }
      .           
    144 ( 0.00%)      pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
     36 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
    126 ( 0.00%)          Canonicalizer::canonicalize(
    106 ( 0.00%)              value,
      .                       self,
     18 ( 0.00%)              self.tcx,
      .                       &CanonicalizeUserTypeAnnotation,
      .                       &mut query_state,
      .                   )
    112 ( 0.00%)      }
      .           
      .               /// A variant of `canonicalize_query` that does not
      .               /// canonicalize `'static`. This is useful when
      .               /// the query implementation can perform more efficient
      .               /// handling of `'static` regions (e.g. trait evaluation).
    210 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
  3,338 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
 14,919 ( 0.00%)          Canonicalizer::canonicalize(
    318 ( 0.00%)              value,
      .                       self,
  1,669 ( 0.00%)              self.tcx,
      .                       &CanonicalizeFreeRegionsOtherThanStatic,
      .                       query_state,
      .                   )
    210 ( 0.00%)      }
      .           }
      .           
      .           /// Controls how we canonicalize "free regions" that are not inference
      .           /// variables. This depends on what we are canonicalizing *for* --
      .           /// e.g., if we are canonicalizing to create a query, we want to
      .           /// replace those with inference variables, since we want to make a
      .           /// maximally general query. But if we are canonicalizing a *query
      .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
      .               ) -> ty::Region<'tcx>;
      .           
      .               fn any(&self) -> bool;
      .           }
      .           
      .           struct CanonicalizeQueryResponse;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
  1,395 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
    837 ( 0.00%)          match r {
      .                       ty::ReFree(_)
      .                       | ty::ReErased
      .                       | ty::ReStatic
      .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
      .                       | ty::ReEarlyBound(..) => r,
      .           
      .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
      .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
      .                           r,
      .                       ),
      .           
      .                       ty::ReVar(vid) => {
    275 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
      .                           canonicalizer.canonical_var_for_region(
      .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
      .                               r,
      .                           )
      .                       }
      .           
      .                       ty::ReEmpty(ui) => {
      .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
      .                               tcx.sess.delay_span_bug(
      .                                   rustc_span::DUMMY_SP,
      .                                   &format!("unexpected region in query response: `{:?}`", r),
      .                               );
      .                           });
      .                           r
      .                       }
      .                   }
  1,395 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   false
      .               }
      .           }
      .           
      .           struct CanonicalizeUserTypeAnnotation;
      .           
-- line 204 ----------------------------------------
-- line 215 ----------------------------------------
      .                           // We only expect region names that the user can type.
      .                           bug!("unexpected region in query response: `{:?}`", r)
      .                       }
      .                   }
      .               }
      .           
      .               fn any(&self) -> bool {
      .                   false
    450 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeAllFreeRegions;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
  2,104 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
      .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
  1,578 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
  3,780 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeFreeRegionsOtherThanStatic;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
  9,408 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  6,272 ( 0.00%)          if let ty::ReStatic = r {
      .                       r
      .                   } else {
      .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
      .                   }
  9,408 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
      .               }
      .           }
      .           
      .           struct Canonicalizer<'cx, 'tcx> {
      .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
      .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
      .               needs_canonical_flags: TypeFlags,
      .           
      .               binder_index: ty::DebruijnIndex,
      .           }
      .           
      .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 38,926 ( 0.01%)          self.tcx
 37,383 ( 0.01%)      }
      .           
      .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
112,107 ( 0.02%)          self.binder_index.shift_in(1);
276,180 ( 0.06%)          let t = t.super_fold_with(self);
110,732 ( 0.02%)          self.binder_index.shift_out(1);
      .                   t
      .               }
      .           
 15,764 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 23,646 ( 0.00%)          match *r {
      .                       ty::ReLateBound(index, ..) => {
      .                           if index >= self.binder_index {
      .                               bug!("escaping late-bound region during canonicalization");
      .                           } else {
      .                               r
      .                           }
      .                       }
      .           
      .                       ty::ReVar(vid) => {
    810 ( 0.00%)                  let resolved_vid = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .unwrap_region_constraints()
      .                               .opportunistic_resolve_var(vid);
      .                           debug!(
      .                               "canonical: region var found with vid {:?}, \
      .                                opportunistically resolved to {:?}",
      .                               vid, r
      .                           );
  3,240 ( 0.00%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
  4,860 ( 0.00%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
      .                       }
      .           
      .                       ty::ReStatic
      .                       | ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReEmpty(_)
      .                       | ty::RePlaceholder(..)
 31,310 ( 0.01%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
      .                   }
  4,860 ( 0.00%)      }
      .           
260,286 ( 0.05%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
217,404 ( 0.04%)          match *t.kind() {
     93 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      .                           debug!("canonical: type var found with vid {:?}", vid);
    372 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
      .                               // `t` could be a float / int variable; canonicalize that instead.
      .                               Ok(t) => {
      .                                   debug!("(resolved to {:?})", t);
      .                                   self.fold_ty(t)
      .                               }
      .           
      .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
      .                               // result.
      .                               Err(mut ui) => {
      .                                   // FIXME: perf problem described in #55921.
      .                                   ui = ty::UniverseIndex::ROOT;
      .                                   self.canonicalize_ty_var(
     58 ( 0.00%)                              CanonicalVarInfo {
      .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
      .                                       },
      .                                       t,
      .                                   )
      .                               }
      .                           }
      .                       }
      .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
      .                       | ty::FnPtr(_)
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Opaque(..) => {
 86,628 ( 0.02%)                  if t.flags().intersects(self.needs_canonical_flags) {
  2,541 ( 0.00%)                      t.super_fold_with(self)
      .                           } else {
      .                               t
      .                           }
      .                       }
      .                   }
258,108 ( 0.05%)      }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           debug!("canonical: const var found with vid {:?}", vid);
      .                           match self.infcx.probe_const_var(vid) {
      .                               Ok(c) => {
      .                                   debug!("(resolved to {:?})", c);
-- line 418 ----------------------------------------
-- line 453 ----------------------------------------
      .                   let flags = FlagComputation::for_const(ct);
      .                   if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
      .               /// The main `canonicalize` method, shared impl of
      .               /// `canonicalize_query` and `canonicalize_response`.
 29,243 ( 0.01%)      fn canonicalize<V>(
      .                   value: V,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   tcx: TyCtxt<'tcx>,
      .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
 12,757 ( 0.00%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
      .                       TypeFlags::NEEDS_INFER |
      .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
      .                       TypeFlags::HAS_TY_PLACEHOLDER |
      .                       TypeFlags::HAS_CT_PLACEHOLDER
      .                   } else {
      .                       TypeFlags::NEEDS_INFER
      .                           | TypeFlags::HAS_RE_PLACEHOLDER
      .                           | TypeFlags::HAS_TY_PLACEHOLDER
      .                           | TypeFlags::HAS_CT_PLACEHOLDER
      .                   };
      .           
      .                   // Fast path: nothing that needs to be canonicalized.
  1,103 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
      .                       let canon_value = Canonical {
      .                           max_universe: ty::UniverseIndex::ROOT,
      .                           variables: List::empty(),
  1,106 ( 0.00%)                  value,
      .                       };
  1,361 ( 0.00%)              return canon_value;
      .                   }
      .           
 19,863 ( 0.00%)          let mut canonicalizer = Canonicalizer {
      .                       infcx,
      .                       tcx,
      .                       canonicalize_region_mode,
      .                       needs_canonical_flags,
      .                       variables: SmallVec::new(),
      .                       query_state,
      .                       indices: FxHashMap::default(),
      .                       binder_index: ty::INNERMOST,
      .                   };
  5,862 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
      .           
      .                   // Once we have canonicalized `out_value`, it should not
      .                   // contain anything that ties it to this inference context
      .                   // anymore, so it should live in the global arena.
      .                   debug_assert!(!out_value.needs_infer());
      .           
  3,591 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
      .           
      .                   let max_universe = canonical_variables
      .                       .iter()
  2,201 ( 0.00%)              .map(|cvar| cvar.universe())
      .                       .max()
      .                       .unwrap_or(ty::UniverseIndex::ROOT);
      .           
  8,771 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
 19,116 ( 0.00%)      }
      .           
      .               /// Creates a canonical variable replacing `kind` from the input,
      .               /// or returns an existing variable if `kind` has already been
      .               /// seen. `kind` is expected to be an unbound variable (or
      .               /// potentially a free region).
 13,930 ( 0.00%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
  2,786 ( 0.00%)          let Canonicalizer { variables, query_state, indices, .. } = self;
      .           
  2,786 ( 0.00%)          let var_values = &mut query_state.var_values;
      .           
      .                   // This code is hot. `variables` and `var_values` are usually small
      .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
      .                   // avoid allocations in those cases. We also don't use `indices` to
      .                   // determine if a kind has been seen before until the limit of 8 has
      .                   // been exceeded, to also avoid allocations for `indices`.
  2,786 ( 0.00%)          if !var_values.spilled() {
      .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
      .                       // direct linear search of `var_values`.
      .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
      .                           // `kind` is already present in `var_values`.
      .                           BoundVar::new(idx)
      .                       } else {
      .                           // `kind` isn't present in `var_values`. Append it. Likewise
      .                           // for `info` and `variables`.
      .                           variables.push(info);
      .                           var_values.push(kind);
  4,210 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
      .           
      .                           // If `var_values` has become big enough to be heap-allocated,
      .                           // fill up `indices` to facilitate subsequent lookups.
    842 ( 0.00%)                  if var_values.spilled() {
      .                               assert!(indices.is_empty());
      .                               *indices = var_values
      .                                   .iter()
      .                                   .enumerate()
      .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
      .                                   .collect();
      .                           }
      .                           // The cv is the index of the appended element.
  1,684 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
      .                       }
      .                   } else {
      .                       // `var_values` is large. Do a hashmap search via `indices`.
      .                       *indices.entry(kind).or_insert_with(|| {
      .                           variables.push(info);
      .                           var_values.push(kind);
      .                           assert_eq!(variables.len(), var_values.len());
      .                           BoundVar::new(variables.len() - 1)
      .                       })
      .                   }
 12,537 ( 0.00%)      }
      .           
      .               /// Shorthand helper that creates a canonical region variable for
      .               /// `r` (always in the root universe). The reason that we always
      .               /// put these variables into the root universe is because this
      .               /// method is used during **query construction:** in that case, we
      .               /// are taking all the regions and just putting them into the most
      .               /// generic context we can. This may generate solutions that don't
      .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
      .           
      .               /// Creates a canonical variable (with the given `info`)
      .               /// representing the region `r`; return a region referencing it.
      .               fn canonical_var_for_region(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  5,045 ( 0.00%)          let var = self.canonical_var(info, r.into());
      .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
  1,055 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
  7,385 ( 0.00%)          self.tcx().mk_region(region)
      .               }
      .           
      .               /// Given a type variable `ty_var` of the given kind, first check
      .               /// if `ty_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `ty_var`.
    536 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
     67 ( 0.00%)          let infcx = self.infcx;
      .                   let bound_to = infcx.shallow_resolve(ty_var);
     67 ( 0.00%)          if bound_to != ty_var {
     32 ( 0.00%)              self.fold_ty(bound_to)
      .                   } else {
    441 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
     63 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
      .                   }
    378 ( 0.00%)      }
      .           
      .               /// Given a type variable `const_var` of the given kind, first check
      .               /// if `const_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `const_var`.
      .               fn canonicalize_const_var(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

 18,309 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs
--------------------------------------------------------------------------------
Ir               

-- line 62 ----------------------------------------
      .               message = "expected a `{Fn}<{Args}>` closure, found `{Self}`",
      .               label = "expected an `Fn<{Args}>` closure, found `{Self}`"
      .           )]
      .           #[fundamental] // so that regex can rely that `&str: !FnMut`
      .           #[must_use = "closures are lazy and do nothing unless called"]
      .           pub trait Fn<Args>: FnMut<Args> {
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
      6 ( 0.00%)      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
      .           }
      .           
      .           /// The version of the call operator that takes a mutable receiver.
      .           ///
      .           /// Instances of `FnMut` can be called repeatedly and may mutate state.
      .           ///
      .           /// `FnMut` is implemented automatically by closures which take mutable
      .           /// references to captured variables, as well as all types that implement
-- line 78 ----------------------------------------
-- line 142 ----------------------------------------
      .               message = "expected a `{FnMut}<{Args}>` closure, found `{Self}`",
      .               label = "expected an `FnMut<{Args}>` closure, found `{Self}`"
      .           )]
      .           #[fundamental] // so that regex can rely that `&str: !FnMut`
      .           #[must_use = "closures are lazy and do nothing unless called"]
      .           pub trait FnMut<Args>: FnOnce<Args> {
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
  4,981 ( 0.00%)      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
      .           }
      .           
      .           /// The version of the call operator that takes a by-value receiver.
      .           ///
      .           /// Instances of `FnOnce` can be called, but might not be callable multiple
      .           /// times. Because of this, if the only thing known about a type is that it
      .           /// implements `FnOnce`, it can only be called once.
      .           ///
-- line 158 ----------------------------------------
-- line 219 ----------------------------------------
      .           pub trait FnOnce<Args> {
      .               /// The returned type after the call operator is used.
      .               #[lang = "fn_once_output"]
      .               #[stable(feature = "fn_once_output", since = "1.12.0")]
      .               type Output;
      .           
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
484,677 ( 0.10%)      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
      .           }
      .           
      .           mod impls {
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> Fn<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
      .                   extern "rust-call" fn call(&self, args: A) -> F::Output {
      4 ( 0.00%)              (**self).call(args)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnMut<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
-- line 245 ----------------------------------------
-- line 251 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnOnce<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
      .                   type Output = F::Output;
      .           
      .                   extern "rust-call" fn call_once(self, args: A) -> F::Output {
      2 ( 0.00%)              (*self).call(args)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnMut<A> for &mut F
      .               where
      .                   F: FnMut<A>,
      .               {
  3,440 ( 0.00%)          extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
 17,786 ( 0.00%)              (*self).call_mut(args)
  4,069 ( 0.00%)          }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnOnce<A> for &mut F
      .               where
      .                   F: FnMut<A>,
      .               {
      .                   type Output = F::Output;
694,124 ( 0.14%)          extern "rust-call" fn call_once(self, args: A) -> F::Output {
  6,555 ( 0.00%)              (*self).call_mut(args)
570,389 ( 0.11%)          }
      .               }
      .           }

  1,415 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .               pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
      615 ( 0.00%)      pub scope: DefId,
    1,380 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   13,482 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
      290 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
        .               BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
       54 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    3,580 ( 0.00%)      pub var: BoundVar,
    3,098 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
3,187,612 ( 0.64%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  846,454 ( 0.17%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
      771 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
   55,377 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
        3 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
       59 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
       60 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
        .               AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       15 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
       16 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
       18 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
        .                   match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
-- line 805 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
    6,509 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  865,405 ( 0.17%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
   45,626 ( 0.01%)      pub def_id: DefId,
  670,597 ( 0.13%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      175 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
      700 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      252 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      112 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      168 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      224 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      152 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       19 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      209 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
      966 ( 0.00%)          self.skip_binder().def_id
      322 ( 0.00%)      }
        .           
    2,743 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    5,486 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    2,743 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
        .               pub def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
        .               pub fn erase_self_ty(
-- line 966 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    1,813 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
       40 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  177,920 ( 0.04%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    1,175 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    3,919 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   27,328 ( 0.01%)          Binder(value, ty::List::empty())
    1,175 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    7,777 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  397,118 ( 0.08%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      959 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    4,107 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
        .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
  154,588 ( 0.03%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   44,336 ( 0.01%)          Binder(value, self.1)
        .               }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    1,778 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    6,237 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   16,860 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        .               }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      361 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   39,663 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   49,725 ( 0.01%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   43,185 ( 0.01%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
   19,803 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    5,658 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   22,632 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      770 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      330 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
      550 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      990 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   25,461 ( 0.01%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    2,829 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    2,829 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   31,119 ( 0.01%)      }
        .           
    5,442 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
   16,326 ( 0.00%)          self.substs.type_at(0)
   10,884 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    2,043 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    1,036 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
       55 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
      687 ( 0.00%)      pub c_variadic: bool,
      123 ( 0.00%)      pub unsafety: hir::Unsafety,
      864 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
      639 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    3,039 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    1,278 ( 0.00%)      }
        .           
      419 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    3,419 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
      838 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
       63 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
       84 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
        7 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      104 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
       14 ( 0.00%)          self.skip_binder().c_variadic
        7 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      132 ( 0.00%)          self.skip_binder().unsafety
       66 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
      632 ( 0.00%)          self.skip_binder().abi
      158 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       16 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
      110 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
       32 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       16 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       24 ( 0.00%)          ParamTy::new(def.index, def.name)
       12 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       72 ( 0.00%)      pub index: u32,
       72 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  231,988 ( 0.05%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       10 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
    6,196 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    8,022 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
       88 ( 0.00%)      pub def_id: DefId,
    5,538 ( 0.00%)      pub index: u32,
      513 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      155 ( 0.00%)      pub index: u32,
      128 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
       59 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    1,027 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      101 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    2,138 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   12,047 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      179 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
       64 ( 0.00%)          match self.kind() {
       19 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
      839 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    4,251 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    4,930 ( 0.00%)          match self.kind() {
      147 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
        .                   matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        3 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
       24 ( 0.00%)          *self.kind() == Bool
        .               }
        .           
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       93 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       29 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
-- line 1807 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
        7 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        .                   matches!(
        .                       self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      114 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    1,784 ( 0.00%)          match self.kind() {
      532 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       42 ( 0.00%)          matches!(
       96 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      167 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
       28 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
       56 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      266 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    4,700 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
       18 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
       18 ( 0.00%)          !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
      216 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    1,281 ( 0.00%)          match self.kind() {
       30 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
      756 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
      432 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       33 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        6 ( 0.00%)      }
        .           
    2,360 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    1,180 ( 0.00%)          match self.kind() {
      885 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    2,655 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
        .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
      562 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
        3 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
       44 ( 0.00%)          match self.kind() {
       26 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
        .               pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
-- line 2059 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
       50 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
       25 ( 0.00%)          match self.kind() {
       10 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
        5 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
        .               pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
-- line 2108 ----------------------------------------
-- line 2229 ----------------------------------------
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
    4,230 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    2,820 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
       66 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
      282 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    4,230 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
      930 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    1,395 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
      465 ( 0.00%)      }
        .           }

2,638,831 ( 0.53%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
315,639,223 (63.39%)  events annotated

