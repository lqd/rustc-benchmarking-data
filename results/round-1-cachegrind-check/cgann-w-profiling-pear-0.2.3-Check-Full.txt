--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name pear --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="color" --cfg feature="default" --cfg feature="yansi" -C metadata=fe23aae136f21f9c -C extra-filename=-fe23aae136f21f9c --out-dir /usr/home/liquid/tmp/.tmpJa6Hlk/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpJa6Hlk/target/debug/deps --extern inlinable_string=/usr/home/liquid/tmp/.tmpJa6Hlk/target/debug/deps/libinlinable_string-396fb0c28e8ec4a2.rmeta --extern pear_codegen=/usr/home/liquid/tmp/.tmpJa6Hlk/target/debug/deps/libpear_codegen-4f4b97b7cedd4ecf.so --extern yansi=/usr/home/liquid/tmp/.tmpJa6Hlk/target/debug/deps/libyansi-ff0988988905896a.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-pear-0.2.3-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,119,099,611 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
115,992,090 ( 3.72%)  ./malloc/malloc.c:_int_free
 70,162,620 ( 2.25%)  ./malloc/malloc.c:malloc
 59,308,799 ( 1.90%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 54,157,868 ( 1.74%)  ./malloc/malloc.c:_int_malloc
 38,319,937 ( 1.23%)  ./malloc/malloc.c:free
 30,788,604 ( 0.99%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
 30,698,173 ( 0.98%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 21,270,348 ( 0.68%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 20,138,921 ( 0.65%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 19,864,158 ( 0.64%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 18,456,983 ( 0.59%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 15,547,246 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs:core::str::traits::<impl core::cmp::PartialEq for str>::eq
 14,035,794 ( 0.45%)  ./elf/dl-lookup.c:do_lookup_x
 13,070,700 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 13,061,832 ( 0.42%)  ./elf/../elf/dl-tls.c:update_get_addr
 12,445,180 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<[A] as core::slice::cmp::SlicePartialEq<B>>::equal
 12,101,749 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 11,491,354 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 10,797,436 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 10,569,793 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 10,426,768 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 10,324,344 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 10,305,042 ( 0.33%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 10,172,939 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs:syn::token::parsing::peek_punct
  9,997,078 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
  9,730,538 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
  9,688,786 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:core::cmp::impls::<impl core::cmp::PartialEq<&B> for &A>::eq
  9,470,916 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  9,415,854 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
  9,275,728 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  9,029,094 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  8,743,293 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
  8,680,764 ( 0.28%)  ./malloc/malloc.c:realloc
  8,524,526 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  8,418,592 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
  8,316,607 ( 0.27%)  ./malloc/malloc.c:malloc_consolidate
  8,242,050 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::current_memory
  8,210,482 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
  8,148,041 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
  8,127,011 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
  8,079,125 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
  7,861,534 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
  7,606,872 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  7,366,282 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
  7,266,180 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:core::slice::cmp::<impl core::cmp::PartialEq<[B]> for [A]>::eq
  7,223,239 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  7,010,679 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
  6,956,649 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  6,928,119 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs:core::slice::iter::Iter<T>::new
  6,905,791 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
  6,847,243 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<core::result::Result<T,E> as core::ops::try_trait::Try>::branch
  6,619,357 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs:<core::iter::adapters::enumerate::Enumerate<I> as core::iter::traits::iterator::Iterator>::next
  6,432,780 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  6,298,348 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::guaranteed_eq
  6,103,551 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::converts::from_utf8
  6,078,645 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:core::option::Option<T>::map
  6,057,903 ( 0.19%)  ./malloc/malloc.c:_int_realloc
  6,026,372 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs:syn::ident::accept_as_ident
  5,997,634 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  5,848,466 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs:core::ptr::const_ptr::<impl *const T>::is_null
  5,821,492 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  5,752,570 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs:syn::buffer::Cursor::punct
  5,624,697 ( 0.18%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  5,525,770 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  5,307,505 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::option::Option<T> as core::ops::try_trait::Try>::branch
  5,233,172 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
  5,165,452 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  5,127,928 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_recursing
  5,100,766 ( 0.16%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  5,088,040 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  5,052,543 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::new_unchecked
  4,953,422 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
  4,854,093 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
  4,786,305 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
  4,783,768 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs:core::str::traits::<impl core::cmp::PartialEq for str>::eq
  4,735,458 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::closure::Closure<_, _> as core::convert::From<&mut _>>::from::call::<proc_macro::bridge::buffer::Buffer<u8>, proc_macro::bridge::buffer::Buffer<u8>, <proc_macro::bridge::server::SameThread as proc_macro::bridge::server::ExecutionStrategy>::run_bridge_and_client<fn(proc_macro::TokenStream) -> proc_macro::TokenStream, proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>>>::{closure#0}>
  4,666,572 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  4,664,940 ( 0.15%)  ./elf/../sysdeps/x86_64/dl-tls.c:__tls_get_addr_slow
  4,611,625 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:core::cell::Cell<T>::replace
  4,579,347 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:core::str::validations::next_code_point
  4,453,218 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
  4,416,111 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
  4,367,871 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  4,349,769 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<alloc::vec::Vec<(rustc_ast::tokenstream::TokenTree, rustc_ast::tokenstream::Spacing)>> as core::ops::drop::Drop>::drop
  4,335,788 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
  4,328,676 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs:<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_entry
  4,265,974 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::KV>>::remove_leaf_kv::<<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_kv::{closure#0}>
  4,144,658 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs:syn::buffer::Cursor::ignore_none
  4,099,258 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  4,028,719 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs:alloc::alloc::Global::alloc_impl
  4,026,945 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
  4,025,499 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:core::cell::Cell<T>::get
  3,999,233 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/alloc/layout.rs:core::alloc::layout::Layout::from_size_align_unchecked
  3,966,288 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
  3,882,224 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor as core::iter::traits::iterator::Iterator>::next
  3,846,197 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
  3,826,225 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs:syn::token::parsing::peek_keyword
  3,819,420 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_fit
  3,747,215 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/proc_macro_server.rs:<proc_macro::bridge::TokenTree<rustc_expand::proc_macro_server::Group, rustc_expand::proc_macro_server::Punct, rustc_expand::proc_macro_server::Ident, rustc_expand::proc_macro_server::Literal> as rustc_expand::proc_macro_server::ToInternal<rustc_ast::tokenstream::TokenStream>>::to_internal
  3,722,832 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs:core::str::<impl str>::chars
  3,683,134 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:<proc_macro::bridge::closure::Closure<_, _> as core::convert::From<&mut _>>::from::call::<proc_macro::bridge::buffer::Buffer<u8>, proc_macro::bridge::buffer::Buffer<u8>, <proc_macro::bridge::server::SameThread as proc_macro::bridge::server::ExecutionStrategy>::run_bridge_and_client<fn(proc_macro::TokenStream) -> proc_macro::TokenStream, proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>>>::{closure#0}>
  3,626,834 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
  3,610,116 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs:syn::buffer::Cursor::entry
  3,580,892 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs:syn::buffer::Cursor::ident
  3,551,811 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
  3,526,023 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/unique.rs:core::ptr::unique::Unique<T>::as_ptr
  3,470,175 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:<alloc::raw_vec::RawVec<_, _>>::reserve::do_reserve_and_handle::<u8, alloc::alloc::Global>
  3,469,341 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
  3,461,955 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::slice_from_raw_parts_mut
  3,437,482 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  3,426,213 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:alloc::raw_vec::finish_grow::<alloc::alloc::Global>
  3,371,222 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
  3,364,602 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:core::option::Option<T>::ok_or
  3,344,184 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs:<alloc::collections::btree::map::entry::VacantEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
  3,337,027 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::TokenTree<proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Group, proc_macro::bridge::client::Group>, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Punct, proc_macro::bridge::client::Punct>, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Literal, proc_macro::bridge::client::Literal>> as proc_macro::bridge::rpc::DecodeMut<proc_macro::bridge::client::HandleStore<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>>>>::decode
  3,330,198 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
  3,283,244 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/alloc.rs:__rdl_alloc
  3,279,428 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
  3,264,482 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
  3,210,240 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::grow_amortized
  3,209,200 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs:<alloc::alloc::Global as core::alloc::Allocator>::deallocate
  3,182,850 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
  3,168,815 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::KV>>::remove_leaf_kv::<<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_kv::{closure#0}>
  3,166,003 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::write
  3,153,252 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::vec::Vec<T,A>::push
  3,148,976 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                  

-- line 40 ----------------------------------------
         .           
         .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
 2,450,000 ( 0.08%)      pub fn search_tree<Q: ?Sized>(
         .                   mut self,
         .                   key: &Q,
         .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   loop {
         .                       self = match self.search_node(key) {
         .                           Found(handle) => return Found(handle),
   308,664 ( 0.01%)                  GoDown(handle) => match handle.force() {
         .                               Leaf(leaf) => return GoDown(leaf),
         .                               Internal(internal) => internal.descend(),
         .                           },
         .                       }
         .                   }
   994,347 ( 0.03%)      }
         .           
         .               /// Descends to the nearest node where the edge matching the lower bound
         .               /// of the range is different from the edge matching the upper bound, i.e.,
         .               /// the nearest node that has at least one key contained in the range.
         .               ///
         .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
         .               /// edge indices in the node delimiting the range, and the corresponding
         .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
         .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   let node = self.reborrow();
         .                   let keys = node.keys();
         .                   debug_assert!(start_index <= keys.len());
 4,375,618 ( 0.14%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
20,124,844 ( 0.65%)              match key.cmp(k.borrow()) {
         .                           Ordering::Greater => {}
         .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
         .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
         .                       }
         .                   }
         .                   IndexResult::Edge(keys.len())
         .               }
         .           
-- line 219 ----------------------------------------

   761,273 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  442,108 ( 0.01%)      ptr: NonZeroUsize,
1,375,020 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   52,128 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   13,662 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   13,662 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  142,939 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   13,662 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  102,072 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
  102,072 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  783,339 ( 0.03%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  783,339 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      575 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      575 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
8,102,899 ( 0.26%)              match ptr & TAG_MASK {
   95,598 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
2,012,582 ( 0.06%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
    1,951 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   23,998 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    5,739 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   68,310 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   68,310 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    4,418 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    4,418 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
   14,420 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    8,760 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
   12,978 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  193,805 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   69,867 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   43,326 ( 0.00%)          tcx.intern_substs(&substs)
  194,967 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  248,723 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
  101,534 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    8,300 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  198,312 ( 0.01%)      }
        .           
      216 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
  214,892 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
      216 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  232,062 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
   10,332 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    2,952 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
   11,808 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
  388,738 ( 0.01%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
2,492,538 ( 0.08%)          match self.len() {
        .                       1 => {
  404,217 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
1,101,605 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  248,995 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  608,940 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
  687,293 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  319,311 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   53,894 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    4,160 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    8,984 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
  478,286 ( 0.02%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  252,721 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  537,649 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  144,386 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  178,000 ( 0.01%)          self.binders_passed += 1;
   45,850 ( 0.00%)          let t = t.super_fold_with(self);
  178,000 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  180,024 ( 0.01%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   60,008 ( 0.00%)          match *r {
   47,614 ( 0.00%)              ty::ReEarlyBound(data) => {
   47,614 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
   23,807 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  210,028 ( 0.01%)      }
        .           
  608,595 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  202,865 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  347,182 ( 0.01%)          match *t.kind() {
  531,525 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
  403,716 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  677,895 ( 0.02%)      }
        .           
   78,288 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   25,468 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
   95,076 ( 0.00%)              c.super_fold_with(self)
        .                   }
    4,960 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  212,610 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
    1,240 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  384,343 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   52,293 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    4,635 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,044 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      489 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

3,339,256 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           
        .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
        .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
        .           }
        .           
        .           macro_rules! rpc_encode_decode {
        .               (le $ty:ty) => {
        .                   impl<S> Encode<S> for $ty {
2,792,243 ( 0.09%)              fn encode(self, w: &mut Writer, _: &mut S) {
      234 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
3,490,138 ( 0.11%)              }
        .                   }
        .           
        .                   impl<S> DecodeMut<'_, '_, S> for $ty {
      312 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
        .                           const N: usize = ::std::mem::size_of::<$ty>();
        .           
      390 ( 0.00%)                  let mut bytes = [0; N];
  507,242 ( 0.02%)                  bytes.copy_from_slice(&r[..N]);
1,831,791 ( 0.06%)                  *r = &r[N..];
        .           
      390 ( 0.00%)                  Self::from_le_bytes(bytes)
      156 ( 0.00%)              }
        .                   }
        .               };
        .               (struct $name:ident { $($field:ident),* $(,)? }) => {
        .                   impl<S> Encode<S> for $name {
        .                       fn encode(self, w: &mut Writer, s: &mut S) {
        .                           $(self.$field.encode(w, s);)*
        .                       }
        .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
        .                           $name {
        .                               $($field: DecodeMut::decode(r, s)),*
        .                           }
        .                       }
        .                   }
        .               };
        .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
        .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
8,217,783 ( 0.26%)              fn encode(self, w: &mut Writer, s: &mut S) {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
4,627,480 ( 0.15%)                  match self {
1,045,138 ( 0.03%)                      $($name::$variant $(($field))* => {
   26,896 ( 0.00%)                          tag::$variant.encode(w, s);
1,031,710 ( 0.03%)                          $($field.encode(w, s);)*
       78 ( 0.00%)                      })*
        .                           }
5,860,654 ( 0.19%)              }
        .                   }
        .           
        .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
        .                       for $name $(<$($T),+>)?
        .                   {
2,350,573 ( 0.08%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
1,980,868 ( 0.06%)                  match u8::decode(r, s) {
        .                               $(tag::$variant => {
   80,561 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
1,605,011 ( 0.05%)                          $name::$variant $(($field))*
   40,222 ( 0.00%)                      })*
        .                               _ => unreachable!(),
        .                           }
3,994,666 ( 0.13%)              }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for () {
        .               fn encode(self, _: &mut Writer, _: &mut S) {}
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for () {
        .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
        .           }
        .           
        .           impl<S> Encode<S> for u8 {
  131,613 ( 0.00%)      fn encode(self, w: &mut Writer, _: &mut S) {
       78 ( 0.00%)          w.push(self);
  109,528 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for u8 {
        .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
8,195,059 ( 0.26%)          let x = r[0];
4,559,988 ( 0.15%)          *r = &r[1..];
        .                   x
        .               }
        .           }
        .           
        .           rpc_encode_decode!(le u32);
        .           rpc_encode_decode!(le usize);
        .           
        .           impl<S> Encode<S> for bool {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   16,887 ( 0.00%)          (self as u8).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for bool {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   11,258 ( 0.00%)          match u8::decode(r, s) {
        .                       0 => false,
        .                       1 => true,
        .                       _ => unreachable!(),
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for char {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   25,484 ( 0.00%)          (self as u32).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for char {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                   char::from_u32(u32::decode(r, s)).unwrap()
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for NonZeroU32 {
      234 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
1,750,471 ( 0.06%)          self.get().encode(w, s);
       78 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
      234 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      546 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
      156 ( 0.00%)      }
        .           }
        .           
        .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
      429 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.0.encode(w, s);
        .                   self.1.encode(w, s);
        .               }
        .           }
        .           
        .           impl<'a, S, A: for<'s> DecodeMut<'a, 's, S>, B: for<'s> DecodeMut<'a, 's, S>> DecodeMut<'a, '_, S>
        .               for (A, B)
        .           {
      195 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
      546 ( 0.00%)          (DecodeMut::decode(r, s), DecodeMut::decode(r, s))
      117 ( 0.00%)      }
        .           }
        .           
        .           rpc_encode_decode!(
        .               enum Bound<T> {
        .                   Included(x),
        .                   Excluded(x),
        .                   Unbounded,
        .               }
-- line 192 ----------------------------------------
-- line 204 ----------------------------------------
        .                   Ok(x),
        .                   Err(e),
        .               }
        .           );
        .           
        .           impl<S> Encode<S> for &[u8] {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.len().encode(w, s);
  341,212 ( 0.01%)          w.write_all(self).unwrap();
        .               }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
        .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                   let len = usize::decode(r, s);
        .                   let xs = &r[..len];
  272,913 ( 0.01%)          *r = &r[len..];
        .                   xs
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for &str {
  341,212 ( 0.01%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.as_bytes().encode(w, s);
  426,515 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   90,971 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
  181,942 ( 0.01%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
  181,942 ( 0.01%)      }
        .           }
        .           
        .           impl<S> Encode<S> for String {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
  341,212 ( 0.01%)          self[..].encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for String {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
  426,515 ( 0.01%)          <&str>::decode(r, s).to_string()
        .               }
        .           }
        .           
        .           /// Simplified version of panic payloads, ignoring
        .           /// types other than `&'static str` and `String`.
        .           pub enum PanicMessage {
        .               StaticStr(&'static str),
        .               String(String),
-- line 253 ----------------------------------------

8,113,653 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/unique.rs
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           impl<T: ?Sized> Unique<T> {
        .               /// Creates a new `Unique`.
        .               ///
        .               /// # Safety
        .               ///
        .               /// `ptr` must be non-null.
        .               #[inline]
  406,530 ( 0.01%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
        .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
  207,038 ( 0.01%)          unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
  606,022 ( 0.02%)      }
        .           
        .               /// Creates a new `Unique` if `ptr` is non-null.
        .               #[inline]
        .               pub const fn new(ptr: *mut T) -> Option<Self> {
        .                   if !ptr.is_null() {
        .                       // SAFETY: The pointer has already been checked and is not null.
        .                       Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Acquires the underlying `*mut` pointer.
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[inline]
2,146,393 ( 0.07%)      pub const fn as_ptr(self) -> *mut T {
        .                   self.pointer as *mut T
1,379,630 ( 0.04%)      }
        .           
        .               /// Dereferences the content.
        .               ///
        .               /// The resulting lifetime is bound to self so this behaves "as if"
        .               /// it were actually an instance of T that is getting borrowed. If a longer
        .               /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.
        .               #[must_use]
        .               #[inline]
   63,760 ( 0.00%)      pub const unsafe fn as_ref(&self) -> &T {
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a reference.
   99,212 ( 0.00%)          unsafe { &*self.as_ptr() }
   56,616 ( 0.00%)      }
        .           
        .               /// Mutably dereferences the content.
        .               ///
        .               /// The resulting lifetime is bound to self so this behaves "as if"
        .               /// it were actually an instance of T that is getting borrowed. If a longer
        .               /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.
        .               #[must_use]
        .               #[inline]
-- line 130 ----------------------------------------
-- line 132 ----------------------------------------
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a mutable reference.
        .                   unsafe { &mut *self.as_ptr() }
        .               }
        .           
        .               /// Casts to a pointer of another type.
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[inline]
  274,140 ( 0.01%)      pub const fn cast<U>(self) -> Unique<U> {
        .                   // SAFETY: Unique::new_unchecked() creates a new unique and needs
        .                   // the given pointer to not be null.
        .                   // Since we are passing self as a pointer, it cannot be null.
  541,136 ( 0.02%)          unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
  270,568 ( 0.01%)      }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           impl<T: ?Sized> Clone for Unique<T> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   *self
        .               }
-- line 153 ----------------------------------------
-- line 174 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Pointer::fmt(&self.as_ptr(), f)
        .               }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           impl<T: ?Sized> const From<&mut T> for Unique<T> {
        .               #[inline]
   43,083 ( 0.00%)      fn from(reference: &mut T) -> Self {
        .                   // SAFETY: A mutable reference cannot be null
   28,481 ( 0.00%)          unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
   57,685 ( 0.00%)      }
        .           }

  306,020 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/unique.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
   53,984 ( 0.00%)      pub const fn new() -> Self {
4,706,154 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
   54,139 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
      288 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       72 ( 0.00%)          Self::with_capacity_in(capacity, Global)
      144 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      702 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
      117 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
      234 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
   11,774 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
1,017,301 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    3,364 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
  116,545 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
  170,519 ( 0.01%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
   17,930 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   10,996 ( 0.00%)      pub fn capacity(&self) -> usize {
  134,623 ( 0.00%)          self.buf.capacity()
    5,498 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  117,605 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
  607,412 ( 0.02%)          self.buf.reserve(self.len, additional);
   47,042 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
   15,370 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,545 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   29,262 ( 0.00%)          if self.capacity() > self.len {
   11,863 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
    5,030 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    5,030 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
   15,090 ( 0.00%)              self.shrink_to_fit();
   23,920 ( 0.00%)              let me = ManuallyDrop::new(self);
   25,150 ( 0.00%)              let buf = ptr::read(&me.buf);
   12,575 ( 0.00%)              let len = me.len();
   32,695 ( 0.00%)              buf.into_box(len).assume_init()
    2,515 ( 0.00%)          }
    5,030 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  223,652 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  191,560 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
      576 ( 0.00%)              let remaining_len = self.len - len;
      432 ( 0.00%)              let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  202,836 ( 0.01%)              self.len = len;
    6,454 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  268,166 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
  211,734 ( 0.01%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
4,149,416 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
  105,867 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
  211,734 ( 0.01%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
  467,932 ( 0.02%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
4,001,702 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
  233,966 ( 0.01%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
  467,932 ( 0.02%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
   15,290 ( 0.00%)      pub fn allocator(&self) -> &A {
   15,290 ( 0.00%)          self.buf.allocator()
   15,290 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   16,473 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  455,882 ( 0.01%)          self.len = new_len;
   15,237 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
       20 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,624 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      755 ( 0.00%)          let len = self.len();
    1,794 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    2,467 ( 0.00%)          if len == self.buf.capacity() {
       18 ( 0.00%)              self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
       70 ( 0.00%)                  let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    3,598 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
      110 ( 0.00%)                  ptr::write(p, element);
        .                       }
    2,518 ( 0.00%)              self.set_len(len + 1);
        .                   }
    3,932 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
    6,177 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
    2,252 ( 0.00%)          let len = self.len();
    6,878 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
   13,490 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
    4,618 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
    2,260 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
   10,295 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  209,437 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
   15,185 ( 0.00%)          self.retain_mut(|elem| f(elem));
  200,104 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   26,620 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   21,996 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   17,111 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  303,817 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   82,103 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      956 ( 0.00%)                      g.processed_len += 1;
      298 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
      278 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
    3,240 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
    2,160 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
   24,787 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    3,541 ( 0.00%)          let len = self.len();
    8,602 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    2,688 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
    2,056 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      900 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
   28,328 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  354,296 ( 0.01%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
5,411,091 ( 0.17%)          if self.len == self.buf.capacity() {
  518,265 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  844,909 ( 0.03%)              let end = self.as_mut_ptr().add(self.len);
  552,088 ( 0.02%)              ptr::write(end, value);
7,100,439 ( 0.23%)              self.len += 1;
        .                   }
  133,896 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
1,213,375 ( 0.04%)          if self.len == 0 {
       86 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
1,054,160 ( 0.03%)                  self.len -= 1;
  118,653 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
    1,274 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
    1,092 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
  234,400 ( 0.01%)      unsafe fn append_elements(&mut self, other: *const [T]) {
   23,440 ( 0.00%)          let count = unsafe { (*other).len() };
   23,440 ( 0.00%)          self.reserve(count);
  362,316 ( 0.01%)          let len = self.len();
   70,320 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
1,012,278 ( 0.03%)          self.len += count;
   46,880 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
   27,097 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   54,121 ( 0.00%)          let len = self.len();
   58,065 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
   11,613 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
   61,954 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   21,974 ( 0.00%)              Drain {
        .                           tail_start: end,
   19,373 ( 0.00%)                  tail_len: len - end,
   19,355 ( 0.00%)                  iter: range_slice.iter(),
   15,484 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
    7,742 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  396,311 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   97,106 ( 0.00%)      pub fn len(&self) -> usize {
   48,553 ( 0.00%)          self.len
   97,106 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   14,674 ( 0.00%)      pub fn is_empty(&self) -> bool {
  462,516 ( 0.01%)          self.len() == 0
   29,348 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
    1,797 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
    1,383 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   35,942 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    4,762 ( 0.00%)          let len = self.len();
    9,524 ( 0.00%)          if new_len > len {
   28,247 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   31,180 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
    4,122 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
    5,496 ( 0.00%)              slice::from_raw_parts_mut(
    9,622 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    6,970 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
    2,748 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    2,152 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    1,108 ( 0.00%)          let len = self.len();
        .           
      804 ( 0.00%)          if new_len > len {
    5,604 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
      216 ( 0.00%)              self.truncate(new_len);
        .                   }
      820 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
  214,742 ( 0.01%)      pub fn extend_from_slice(&mut self, other: &[T]) {
   78,088 ( 0.00%)          self.spec_extend(other.iter())
   39,044 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2270 ----------------------------------------
        .           // This code generalizes `extend_with_{element,default}`.
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
      144 ( 0.00%)      fn next(&mut self) -> T {
      144 ( 0.00%)          self.0.clone()
      144 ( 0.00%)      }
      216 ( 0.00%)      fn last(self) -> T {
        .                   self.0
      144 ( 0.00%)      }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
        .               fn next(&mut self) -> T {
        .                   (self.0)()
        .               }
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  146,964 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
      360 ( 0.00%)          self.reserve(n);
        .           
        .                   unsafe {
    7,417 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
      504 ( 0.00%)              let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
    2,664 ( 0.00%)              for _ in 1..n {
      792 ( 0.00%)                  ptr::write(ptr, value.next());
      432 ( 0.00%)                  ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
      144 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
  250,257 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
      864 ( 0.00%)                  ptr::write(ptr, value.last());
      144 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
      288 ( 0.00%)          }
  116,547 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    3,542 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   41,528 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  228,383 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   52,241 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
  317,601 ( 0.01%)      fn deref(&self) -> &[T] {
5,939,070 ( 0.19%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
  212,216 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
    9,672 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
1,368,209 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
    6,448 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  298,416 ( 0.01%)      fn clone(&self) -> Self {
    6,870 ( 0.00%)          let alloc = self.allocator().clone();
   12,368 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  388,901 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
      220 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
  189,204 ( 0.01%)          Index::index(&**self, index)
       88 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
      220 ( 0.00%)      fn index_mut(&mut self, index: I) -> &mut Self::Output {
      780 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
       88 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,902,880 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
   18,813 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  747,506 ( 0.02%)              let mut me = ManuallyDrop::new(self);
   12,542 ( 0.00%)              let alloc = ptr::read(me.allocator());
   31,355 ( 0.00%)              let begin = me.as_mut_ptr();
   18,813 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
   31,355 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
    6,271 ( 0.00%)              let cap = me.buf.capacity();
  361,154 ( 0.01%)              IntoIter {
   25,084 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
    6,271 ( 0.00%)                  end,
        .                       }
        .                   }
   12,542 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
    1,656 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
    5,179 ( 0.00%)          self.iter()
    1,656 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
    2,968 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
   10,004 ( 0.00%)          self.iter_mut()
    2,968 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
   44,514 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
1,039,524 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
   40,596 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       80 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
  250,445 ( 0.01%)          while let Some(element) = iterator.next() {
   37,485 ( 0.00%)              let len = self.len();
  296,314 ( 0.01%)              if len == self.capacity() {
      795 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  242,521 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
    4,425 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,747 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
   10,880 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
1,375,735 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
1,226,244 ( 0.04%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
1,423,798 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

4,203,532 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
    1,024 ( 0.00%)      fn clone(&self) -> Self {
    1,773 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      299 ( 0.00%)              table: self.table.clone(),
        .                   }
    1,152 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  140,520 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  295,670 ( 0.01%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  459,474 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
   14,820 ( 0.00%)      hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
  354,372 ( 0.01%)      hash_builder.hash_one(val)
        .           }
        .           
        .           #[cfg(feature = "ahash")]
        .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
        .               /// Creates an empty `HashMap`.
        .               ///
        .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
        .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  197,794 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       61 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   14,017 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   68,423 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      528 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       60 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      600 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      660 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  683,202 ( 0.02%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  808,937 ( 0.03%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  411,870 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  502,004 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      120 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      360 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      240 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      120 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
2,612,150 ( 0.08%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      601 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        2 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,224,687 ( 0.04%)              self.table
1,115,835 ( 0.04%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  128,487 ( 0.00%)              None
        .                   }
2,417,720 ( 0.08%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   60,237 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  563,417 ( 0.02%)          match self.remove_entry(k) {
   23,364 ( 0.00%)              Some((_, v)) => Some(v),
   49,531 ( 0.00%)              None => None,
        .                   }
  135,717 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  209,628 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,494,952 ( 0.08%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
6,547,753 ( 0.21%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
7,026,925 ( 0.23%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  782,196 ( 0.03%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
4,155,153 ( 0.13%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  334,323 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,064,861 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,314,707 ( 0.04%)          self.from_hash(hash, equivalent(k))
1,935,028 ( 0.06%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
1,855,355 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  552,318 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,547 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   32,617 ( 0.00%)          IntoIter {
   16,734 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    4,641 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  115,241 ( 0.00%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
    1,636 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      890 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      156 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      312 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       34 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   34,957 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   29,022 ( 0.00%)          let iter = iter.into_iter();
   18,334 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
    1,859 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   92,062 ( 0.00%)              self.insert(k, v);
        .                   });
   22,871 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

2,468,418 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 165 ----------------------------------------
        .           #[rustc_insignificant_dtor]
        .           pub struct BTreeMap<K, V> {
        .               root: Option<Root<K, V>>,
        .               length: usize,
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for BTreeMap<K, V> {
  471,154 ( 0.02%)      fn drop(&mut self) {
        .                   drop(unsafe { ptr::read(self) }.into_iter())
  480,197 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {
        .               fn clone(&self) -> BTreeMap<K, V> {
       60 ( 0.00%)          fn clone_subtree<'a, K: Clone, V: Clone>(
        .                       node: NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>,
        .                   ) -> BTreeMap<K, V>
        .                   where
        .                       K: 'a,
        .                       V: 'a,
        .                   {
        7 ( 0.00%)              match node.force() {
        .                           Leaf(leaf) => {
       19 ( 0.00%)                      let mut out_tree = BTreeMap { root: Some(Root::new()), length: 0 };
        .           
        .                               {
        .                                   let root = out_tree.root.as_mut().unwrap(); // unwrap succeeds because we just wrapped
        .                                   let mut out_node = match root.borrow_mut().force() {
        .                                       Leaf(leaf) => leaf,
        .                                       Internal(_) => unreachable!(),
        .                                   };
        .           
        .                                   let mut in_edge = leaf.first_edge();
        .                                   while let Ok(kv) = in_edge.right_kv() {
        .                                       let (k, v) = kv.into_kv();
        .                                       in_edge = kv.right_edge();
        .           
       19 ( 0.00%)                              out_node.push(k.clone(), v.clone());
       49 ( 0.00%)                              out_tree.length += 1;
        .                                   }
        .                               }
        .           
       29 ( 0.00%)                      out_tree
        .                           }
        .                           Internal(internal) => {
        .                               let mut out_tree = clone_subtree(internal.first_edge().descend());
        .           
        .                               {
        .                                   let out_root = BTreeMap::ensure_is_owned(&mut out_tree.root);
        .                                   let mut out_node = out_root.push_internal_level();
        .                                   let mut in_edge = internal.first_edge();
-- line 217 ----------------------------------------
-- line 235 ----------------------------------------
        .                                       out_node.push(k, v, subroot.unwrap_or_else(Root::new));
        .                                       out_tree.length += 1 + sublength;
        .                                   }
        .                               }
        .           
        .                               out_tree
        .                           }
        .                       }
       56 ( 0.00%)          }
        .           
        8 ( 0.00%)          if self.is_empty() {
        .                       BTreeMap::new()
        .                   } else {
       20 ( 0.00%)              clone_subtree(self.root.as_ref().unwrap().reborrow()) // unwrap succeeds because not empty
        .                   }
        .               }
        .           }
        .           
        .           impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>
        .           where
        .               K: Borrow<Q> + Ord,
        .               Q: Ord,
-- line 256 ----------------------------------------
-- line 515 ----------------------------------------
        .               ///
        .               /// // entries can now be inserted into the empty map
        .               /// map.insert(1, "a");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               #[must_use]
        .               pub const fn new() -> BTreeMap<K, V> {
  222,524 ( 0.01%)          BTreeMap { root: None, length: 0 }
        .               }
        .           
        .               /// Clears the map, removing all elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 531 ----------------------------------------
-- line 560 ----------------------------------------
        .               /// assert_eq!(map.get(&2), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
  324,688 ( 0.01%)          let root_node = self.root.as_ref()?.reborrow();
1,706,133 ( 0.05%)          match root_node.search_tree(key) {
       60 ( 0.00%)              Found(handle) => Some(handle.into_kv().1),
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
-- line 578 ----------------------------------------
-- line 814 ----------------------------------------
        .               /// ```
        .               // See `get` for implementation notes, this is basically a copy-paste with mut's added
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
   61,301 ( 0.00%)          let root_node = self.root.as_mut()?.borrow_mut();
  429,107 ( 0.01%)          match root_node.search_tree(key) {
        .                       Found(handle) => Some(handle.into_val_mut()),
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Inserts a key-value pair into the map.
        .               ///
        .               /// If the map did not have this key present, `None` is returned.
-- line 831 ----------------------------------------
-- line 848 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,253,988 ( 0.04%)      pub fn insert(&mut self, key: K, value: V) -> Option<V>
        .               where
        .                   K: Ord,
        .               {
        .                   match self.entry(key) {
        .                       Occupied(mut entry) => Some(entry.insert(value)),
        .                       Vacant(entry) => {
1,564,976 ( 0.05%)                  entry.insert(value);
   22,656 ( 0.00%)                  None
        .                       }
        .                   }
1,118,074 ( 0.04%)      }
        .           
        .               /// Tries to insert a key-value pair into the map, and returns
        .               /// a mutable reference to the value in the entry.
        .               ///
        .               /// If the map already had this key present, nothing is updated, and
        .               /// an error containing the occupied entry and the value is returned.
        .               ///
        .               /// # Examples
-- line 875 ----------------------------------------
-- line 914 ----------------------------------------
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map = BTreeMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  198,410 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
  213,500 ( 0.01%)          self.remove_entry(key).map(|(_, v)| v)
  229,849 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the key
        .               /// was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but the ordering
        .               /// on the borrowed form *must* match the ordering on the key type.
        .               ///
        .               /// # Examples
-- line 936 ----------------------------------------
-- line 947 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "btreemap_remove_entry", since = "1.45.0")]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q> + Ord,
        .                   Q: Ord,
        .               {
        .                   let (map, dormant_map) = DormantMutRef::new(self);
  158,967 ( 0.01%)          let root_node = map.root.as_mut()?.borrow_mut();
  472,619 ( 0.02%)          match root_node.search_tree(key) {
        .                       Found(handle) => {
1,125,773 ( 0.04%)                  Some(OccupiedEntry { handle, dormant_map, _marker: PhantomData }.remove_entry())
   25,081 ( 0.00%)              }
        .                       GoDown(_) => None,
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.
        .               /// The elements are visited in ascending key order.
-- line 967 ----------------------------------------
-- line 1135 ----------------------------------------
        .               /// // count the number of occurrences of letters in the vec
        .               /// for x in ["a", "b", "a", "c", "a", "b"] {
        .               ///     *count.entry(x).or_insert(0) += 1;
        .               /// }
        .               ///
        .               /// assert_eq!(count["a"], 3);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V>
        .               where
        .                   K: Ord,
        .               {
        .                   // FIXME(@porglezomp) Avoid allocating if we don't insert
        .                   let (map, dormant_map) = DormantMutRef::new(self);
        .                   let root_node = Self::ensure_is_owned(&mut map.root).borrow_mut();
  124,367 ( 0.00%)          match root_node.search_tree(&key) {
    1,020 ( 0.00%)              Found(handle) => Occupied(OccupiedEntry { handle, dormant_map, _marker: PhantomData }),
        .                       GoDown(handle) => {
   51,322 ( 0.00%)                  Vacant(VacantEntry { key, handle, dormant_map, _marker: PhantomData })
        .                       }
        .                   }
       27 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given key. Returns everything after the given key,
        .               /// including the key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 1164 ----------------------------------------
-- line 1307 ----------------------------------------
        .               }
        .           
        .               /// Makes a `BTreeMap` from a sorted iterator.
        .               pub(crate) fn bulk_build_from_sorted_iter<I>(iter: I) -> Self
        .               where
        .                   K: Ord,
        .                   I: IntoIterator<Item = (K, V)>,
        .               {
        6 ( 0.00%)          let mut root = Root::new();
        3 ( 0.00%)          let mut length = 0;
       15 ( 0.00%)          root.bulk_push(DedupSortedIter::new(iter.into_iter()), &mut length);
        6 ( 0.00%)          BTreeMap { root: Some(root), length }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> IntoIterator for &'a BTreeMap<K, V> {
        .               type Item = (&'a K, &'a V);
        .               type IntoIter = Iter<'a, K, V>;
        .           
-- line 1326 ----------------------------------------
-- line 1328 ----------------------------------------
        .                   self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
       12 ( 0.00%)      fn next(&mut self) -> Option<(&'a K, &'a V)> {
  153,646 ( 0.00%)          if self.length == 0 {
        .                       None
        .                   } else {
   67,855 ( 0.00%)              self.length -= 1;
        .                       Some(unsafe { self.range.next_unchecked() })
        .                   }
       20 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.length, Some(self.length))
        .               }
        .           
        .               fn last(mut self) -> Option<(&'a K, &'a V)> {
        .                   self.next_back()
        .               }
-- line 1351 ----------------------------------------
-- line 1460 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> IntoIterator for BTreeMap<K, V> {
        .               type Item = (K, V);
        .               type IntoIter = IntoIter<K, V>;
        .           
        .               fn into_iter(self) -> IntoIter<K, V> {
        .                   let mut me = ManuallyDrop::new(self);
  190,016 ( 0.01%)          if let Some(root) = me.root.take() {
        .                       let full_range = root.into_dying().full_range();
        .           
       18 ( 0.00%)              IntoIter { range: full_range, length: me.length }
        .                   } else {
  169,549 ( 0.01%)              IntoIter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "btree_drop", since = "1.7.0")]
        .           impl<K, V> Drop for IntoIter<K, V> {
    5,552 ( 0.00%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, K, V>(&'a mut IntoIter<K, V>);
        .           
        .                   impl<'a, K, V> Drop for DropGuard<'a, K, V> {
        .                       fn drop(&mut self) {
        .                           // Continue the same loop we perform below. This only runs when unwinding, so we
        .                           // don't have to care about panics this time (they'll abort).
        .                           while let Some(kv) = self.0.dying_next() {
        .                               // SAFETY: we consume the dying handle immediately.
        .                               unsafe { kv.drop_key_val() };
        .                           }
        .                       }
        .                   }
        .           
  182,122 ( 0.01%)          while let Some(kv) = self.dying_next() {
        .                       let guard = DropGuard(self);
        .                       // SAFETY: we don't touch the tree before consuming the dying handle.
    9,813 ( 0.00%)              unsafe { kv.drop_key_val() };
        .                       mem::forget(guard);
        .                   }
    5,552 ( 0.00%)      }
        .           }
        .           
        .           impl<K, V> IntoIter<K, V> {
        .               /// Core of a `next` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
  214,948 ( 0.01%)      fn dying_next(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
  315,438 ( 0.01%)          if self.length == 0 {
        .                       self.range.deallocating_end();
   38,498 ( 0.00%)              None
        .                   } else {
   71,090 ( 0.00%)              self.length -= 1;
   48,623 ( 0.00%)              Some(unsafe { self.range.deallocating_next_unchecked() })
        .                   }
  214,945 ( 0.01%)      }
        .           
        .               /// Core of a `next_back` method returning a dying KV handle,
        .               /// invalidated by further calls to this function and some others.
        .               fn dying_next_back(
        .                   &mut self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {
        .                   if self.length == 0 {
        .                       self.range.deallocating_end();
-- line 1524 ----------------------------------------
-- line 1529 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> Iterator for IntoIter<K, V> {
        .               type Item = (K, V);
        .           
    2,625 ( 0.00%)      fn next(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next().map(unsafe { |kv| kv.into_key_val() })
    3,000 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
      241 ( 0.00%)          (self.length, Some(self.length))
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<K, V> DoubleEndedIterator for IntoIter<K, V> {
        .               fn next_back(&mut self) -> Option<(K, V)> {
        .                   // SAFETY: we consume the dying handle immediately.
        .                   self.dying_next_back().map(unsafe { |kv| kv.into_key_val() })
-- line 1551 ----------------------------------------
-- line 1562 ----------------------------------------
        .           #[stable(feature = "fused", since = "1.26.0")]
        .           impl<K, V> FusedIterator for IntoIter<K, V> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               fn next(&mut self) -> Option<&'a K> {
        8 ( 0.00%)          self.inner.next().map(|(k, _)| k)
        .               }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           
        .               fn last(mut self) -> Option<&'a K> {
        .                   self.next_back()
-- line 1578 ----------------------------------------
-- line 2089 ----------------------------------------
        .               ///     println!("{}: {}", key, value);
        .               /// }
        .               ///
        .               /// let (first_key, first_value) = map.iter().next().unwrap();
        .               /// assert_eq!((*first_key, *first_value), (1, "a"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn iter(&self) -> Iter<'_, K, V> {
  151,438 ( 0.00%)          if let Some(root) = &self.root {
        .                       let full_range = root.reborrow().full_range();
        .           
       15 ( 0.00%)              Iter { range: full_range, length: self.length }
        .                   } else {
        6 ( 0.00%)              Iter { range: LazyLeafRange::none(), length: 0 }
        .                   }
        .               }
        .           
        .               /// Gets a mutable iterator over the entries of the map, sorted by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
-- line 2110 ----------------------------------------
-- line 2149 ----------------------------------------
        .               /// a.insert(2, "b");
        .               /// a.insert(1, "a");
        .               ///
        .               /// let keys: Vec<_> = a.keys().cloned().collect();
        .               /// assert_eq!(keys, [1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
    2,457 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// Gets an iterator over the values of the map, in order by key.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2165 ----------------------------------------
-- line 2217 ----------------------------------------
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn len(&self) -> usize {
        3 ( 0.00%)          self.length
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 2233 ----------------------------------------
-- line 2238 ----------------------------------------
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_btree_new", issue = "71835")]
        .               pub const fn is_empty(&self) -> bool {
   34,896 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// If the root node is the empty (non-allocated) root node, allocate our
        .               /// own node. Is an associated function to avoid borrowing the entire BTreeMap.
        .               fn ensure_is_owned(root: &mut Option<Root<K, V>>) -> &mut Root<K, V> {
        .                   root.get_or_insert_with(Root::new)
        .               }
        .           }
-- line 2254 ----------------------------------------

  727,378 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 146 ----------------------------------------
        .                   pub span: Span,
        .               }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl private::Sealed for Ident {}
        .           
        .           #[cfg(feature = "parsing")]
   35,945 ( 0.00%)  fn peek_impl(cursor: Cursor, peek: fn(ParseStream) -> bool) -> bool {
        .               use crate::parse::Unexpected;
        .               use std::cell::Cell;
        .               use std::rc::Rc;
        .           
   20,540 ( 0.00%)      let scope = Span::call_site();
   87,295 ( 0.00%)      let unexpected = Rc::new(Cell::new(Unexpected::None));
   25,675 ( 0.00%)      let buffer = crate::parse::new_parse_buffer(scope, cursor, unexpected);
   15,405 ( 0.00%)      peek(&buffer)
   35,945 ( 0.00%)  }
        .           
        .           macro_rules! impl_token {
        .               ($display:tt $name:ty) => {
        .                   #[cfg(feature = "parsing")]
        .                   impl Token for $name {
   15,405 ( 0.00%)              fn peek(cursor: Cursor) -> bool {
   15,405 ( 0.00%)                  fn peek(input: ParseStream) -> bool {
   35,945 ( 0.00%)                      <$name as Parse>::parse(input).is_ok()
   35,945 ( 0.00%)                  }
   15,405 ( 0.00%)                  peek_impl(cursor, peek)
   20,540 ( 0.00%)              }
        .           
        .                       fn display() -> &'static str {
        .                           $display
    2,280 ( 0.00%)              }
        .                   }
        .           
        .                   #[cfg(feature = "parsing")]
        .                   impl private::Sealed for $name {}
        .               };
        .           }
        .           
        .           impl_token!("lifetime" Lifetime);
-- line 186 ----------------------------------------
-- line 224 ----------------------------------------
        .               fn display() -> &'static str;
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl<T: CustomToken> private::Sealed for T {}
        .           
        .           #[cfg(feature = "parsing")]
        .           impl<T: CustomToken> Token for T {
      678 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
      452 ( 0.00%)          <Self as CustomToken>::peek(cursor)
      904 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   <Self as CustomToken>::display()
        .               }
        .           }
        .           
        .           macro_rules! define_keywords {
        .               ($($token:tt pub struct $name:ident #[$doc:meta])*) => {
-- line 242 ----------------------------------------
-- line 303 ----------------------------------------
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
        .                       impl Hash for $name {
        .                           fn hash<H: Hasher>(&self, _state: &mut H) {}
        .                       }
        .           
        .                       #[cfg(feature = "printing")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
        .                       impl ToTokens for $name {
    7,036 ( 0.00%)                  fn to_tokens(&self, tokens: &mut TokenStream) {
   10,554 ( 0.00%)                      printing::keyword($token, self.span, tokens);
    3,518 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
        .                       impl Parse for $name {
    5,896 ( 0.00%)                  fn parse(input: ParseStream) -> Result<Self> {
    6,890 ( 0.00%)                      Ok($name {
   21,884 ( 0.00%)                          span: parsing::keyword(input, $token)?,
        .                               })
    4,422 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       impl Token for $name {
  205,533 ( 0.01%)                  fn peek(cursor: Cursor) -> bool {
  274,044 ( 0.01%)                      parsing::peek_keyword(cursor, $token)
  274,044 ( 0.01%)                  }
        .           
        .                           fn display() -> &'static str {
        .                               concat!("`", $token, "`")
   15,216 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       impl private::Sealed for $name {}
        .                   )*
        .               };
        .           }
        .           
        .           macro_rules! impl_deref_if_len_is_1 {
        .               ($name:ident/1) => {
        .                   impl Deref for $name {
        .                       type Target = WithSpan;
        .           
      324 ( 0.00%)              fn deref(&self) -> &Self::Target {
        .                           unsafe { &*(self as *const Self as *const WithSpan) }
      216 ( 0.00%)              }
        .                   }
        .           
        .                   impl DerefMut for $name {
        .                       fn deref_mut(&mut self) -> &mut Self::Target {
        .                           unsafe { &mut *(self as *mut Self as *mut WithSpan) }
        .                       }
        .                   }
        .               };
-- line 358 ----------------------------------------
-- line 371 ----------------------------------------
        .                       ///
        .                       /// [`Token!`]: crate::token
        .                       pub struct $name {
        .                           pub spans: [Span; $len],
        .                       }
        .           
        .                       #[doc(hidden)]
        .                       #[allow(non_snake_case)]
      396 ( 0.00%)              pub fn $name<S: IntoSpans<[Span; $len]>>(spans: S) -> $name {
      198 ( 0.00%)                  $name {
      693 ( 0.00%)                      spans: spans.into_spans(),
        .                           }
      297 ( 0.00%)              }
        .           
        .                       impl std::default::Default for $name {
       10 ( 0.00%)                  fn default() -> Self {
       20 ( 0.00%)                      $name {
       90 ( 0.00%)                          spans: [Span::call_site(); $len],
        .                               }
       30 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "clone-impls")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
        .                       impl Copy for $name {}
        .           
        .                       #[cfg(feature = "clone-impls")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
        .                       impl Clone for $name {
    1,020 ( 0.00%)                  fn clone(&self) -> Self {
    1,020 ( 0.00%)                      *self
    1,530 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "extra-traits")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
        .                       impl Debug for $name {
        .                           fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                               f.write_str(stringify!($name))
        .                           }
-- line 410 ----------------------------------------
-- line 438 ----------------------------------------
        .                   $(
        .                       define_punctuation_structs! {
        .                           $token pub struct $name/$len #[$doc]
        .                       }
        .           
        .                       #[cfg(feature = "printing")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
        .                       impl ToTokens for $name {
   37,540 ( 0.00%)                  fn to_tokens(&self, tokens: &mut TokenStream) {
   30,032 ( 0.00%)                      printing::punct($token, &self.spans, tokens);
   15,016 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
        .                       impl Parse for $name {
   21,468 ( 0.00%)                  fn parse(input: ParseStream) -> Result<Self> {
   26,835 ( 0.00%)                      Ok($name {
   75,138 ( 0.00%)                          spans: parsing::punct(input, $token)?,
        .                               })
   16,101 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       impl Token for $name {
  423,759 ( 0.01%)                  fn peek(cursor: Cursor) -> bool {
  565,012 ( 0.02%)                      parsing::peek_punct(cursor, $token)
  565,012 ( 0.02%)                  }
        .           
        .                           fn display() -> &'static str {
        .                               concat!("`", $token, "`")
    6,246 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       impl private::Sealed for $name {}
        .                   )*
        .               };
        .           }
        .           
-- line 477 ----------------------------------------
-- line 480 ----------------------------------------
        .                   $(
        .                       #[$doc]
        .                       pub struct $name {
        .                           pub span: Span,
        .                       }
        .           
        .                       #[doc(hidden)]
        .                       #[allow(non_snake_case)]
    7,548 ( 0.00%)              pub fn $name<S: IntoSpans<[Span; 1]>>(span: S) -> $name {
    3,774 ( 0.00%)                  $name {
   16,983 ( 0.00%)                      span: span.into_spans()[0],
        .                           }
    5,661 ( 0.00%)              }
        .           
        .                       impl std::default::Default for $name {
        .                           fn default() -> Self {
        .                               $name {
        .                                   span: Span::call_site(),
        .                               }
        .                           }
        .                       }
-- line 500 ----------------------------------------
-- line 501 ----------------------------------------
        .           
        .                       #[cfg(feature = "clone-impls")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
        .                       impl Copy for $name {}
        .           
        .                       #[cfg(feature = "clone-impls")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
        .                       impl Clone for $name {
       36 ( 0.00%)                  fn clone(&self) -> Self {
       36 ( 0.00%)                      *self
       54 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "extra-traits")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
        .                       impl Debug for $name {
        .                           fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        .                               f.write_str(stringify!($name))
        .                           }
-- line 519 ----------------------------------------
-- line 534 ----------------------------------------
        .                       #[cfg(feature = "extra-traits")]
        .                       #[cfg_attr(doc_cfg, doc(cfg(feature = "extra-traits")))]
        .                       impl Hash for $name {
        .                           fn hash<H: Hasher>(&self, _state: &mut H) {}
        .                       }
        .           
        .                       impl $name {
        .                           #[cfg(feature = "printing")]
   14,688 ( 0.00%)                  pub fn surround<F>(&self, tokens: &mut TokenStream, f: F)
        .                           where
        .                               F: FnOnce(&mut TokenStream),
        .                           {
   14,688 ( 0.00%)                      printing::delim($token, self.span, tokens, f);
    4,896 ( 0.00%)                  }
        .                       }
        .           
        .                       #[cfg(feature = "parsing")]
        .                       impl private::Sealed for $name {}
        .                   )*
        .               };
        .           }
        .           
        .           define_punctuation_structs! {
        .               "_" pub struct Underscore/1 /// `_`
        .           }
        .           
        .           #[cfg(feature = "printing")]
        .           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
        .           impl ToTokens for Underscore {
      432 ( 0.00%)      fn to_tokens(&self, tokens: &mut TokenStream) {
    1,188 ( 0.00%)          tokens.append(Ident::new("_", self.span));
      216 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
        .           impl Parse for Underscore {
      396 ( 0.00%)      fn parse(input: ParseStream) -> Result<Self> {
      693 ( 0.00%)          input.step(|cursor| {
    2,772 ( 0.00%)              if let Some((ident, rest)) = cursor.ident() {
      792 ( 0.00%)                  if ident == "_" {
    2,673 ( 0.00%)                      return Ok((Underscore(ident.span()), rest));
        .                           }
      396 ( 0.00%)              }
        .                       if let Some((punct, rest)) = cursor.punct() {
        .                           if punct.as_char() == '_' {
        .                               return Ok((Underscore(punct.span()), rest));
        .                           }
        .                       }
        .                       Err(cursor.error("expected `_`"))
      198 ( 0.00%)          })
      198 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Underscore {
    5,523 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   15,770 ( 0.00%)          if let Some((ident, _rest)) = cursor.ident() {
    6,304 ( 0.00%)              return ident == "_";
    2,366 ( 0.00%)          }
       10 ( 0.00%)          if let Some((punct, _rest)) = cursor.punct() {
        .                       return punct.as_char() == '_';
        .                   }
        1 ( 0.00%)          false
    3,945 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "`_`"
    2,067 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl private::Sealed for Underscore {}
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Paren {
   23,154 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   30,872 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Parenthesis)
   30,872 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "parentheses"
    2,571 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Brace {
   10,794 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   14,392 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Brace)
   14,392 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "curly braces"
        .               }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Bracket {
    8,337 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   11,116 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::Bracket)
   11,116 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "square brackets"
      447 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Group {
   20,658 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
   27,544 ( 0.00%)          lookahead::is_delimiter(cursor, Delimiter::None)
   27,544 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "invisible group"
        .               }
        .           }
        .           
        .           define_keywords! {
        .               "abstract"    pub struct Abstract     /// `abstract`
-- line 653 ----------------------------------------
-- line 888 ----------------------------------------
        .           #[cfg(feature = "parsing")]
        .           pub mod parsing {
        .               use crate::buffer::Cursor;
        .               use crate::error::{Error, Result};
        .               use crate::parse::ParseStream;
        .               use crate::span::FromSpans;
        .               use proc_macro2::{Spacing, Span};
        .           
    8,844 ( 0.00%)      pub fn keyword(input: ParseStream, token: &str) -> Result<Span> {
   17,688 ( 0.00%)          input.step(|cursor| {
   41,272 ( 0.00%)              if let Some((ident, rest)) = cursor.ident() {
   10,414 ( 0.00%)                  if ident == token {
   26,182 ( 0.00%)                      return Ok((ident.span(), rest));
        .                           }
    6,856 ( 0.00%)              }
    3,744 ( 0.00%)              Err(cursor.error(format!("expected `{}`", token)))
    3,044 ( 0.00%)          })
    2,948 ( 0.00%)      }
        .           
  548,088 ( 0.02%)      pub fn peek_keyword(cursor: Cursor, token: &str) -> bool {
1,472,485 ( 0.05%)          if let Some((ident, _rest)) = cursor.ident() {
  472,984 ( 0.02%)              ident == token
  177,369 ( 0.01%)          } else {
    9,388 ( 0.00%)              false
        .                   }
1,086,788 ( 0.03%)      }
        .           
   59,037 ( 0.00%)      pub fn punct<S: FromSpans>(input: ParseStream, token: &str) -> Result<S> {
   48,303 ( 0.00%)          let mut spans = [input.span(); 3];
   59,037 ( 0.00%)          punct_helper(input, token, &mut spans)?;
   53,670 ( 0.00%)          Ok(S::from_spans(&spans))
   16,101 ( 0.00%)      }
        .           
   37,569 ( 0.00%)      fn punct_helper(input: ParseStream, token: &str, spans: &mut [Span; 3]) -> Result<()> {
   91,239 ( 0.00%)          input.step(|cursor| {
   26,835 ( 0.00%)              let mut cursor = *cursor;
   48,303 ( 0.00%)              assert!(token.len() <= spans.len());
        .           
  209,353 ( 0.01%)              for (i, ch) in token.chars().enumerate() {
   71,489 ( 0.00%)                  match cursor.punct() {
   64,990 ( 0.00%)                      Some((punct, rest)) => {
   77,988 ( 0.00%)                          spans[i] = punct.span();
   38,994 ( 0.00%)                          if punct.as_char() != ch {
        .                                       break;
   72,621 ( 0.00%)                          } else if i == token.len() - 1 {
   37,569 ( 0.00%)                              return Ok(((), rest));
   13,584 ( 0.00%)                          } else if punct.spacing() != Spacing::Joint {
        .                                       break;
        .                                   }
    2,264 ( 0.00%)                          cursor = rest;
        .                               }
        .                               None => break,
        .                           }
        .                       }
        .           
        .                       Err(Error::new(spans[0], format!("expected `{}`", token)))
   10,734 ( 0.00%)          })
   10,734 ( 0.00%)      }
        .           
1,836,289 ( 0.06%)      pub fn peek_punct(mut cursor: Cursor, token: &str) -> bool {
4,551,161 ( 0.15%)          for (i, ch) in token.chars().enumerate() {
1,399,370 ( 0.04%)              match cursor.punct() {
  566,890 ( 0.02%)                  Some((punct, rest)) => {
  283,445 ( 0.01%)                      if punct.as_char() != ch {
        .                                   break;
   72,361 ( 0.00%)                      } else if i == token.len() - 1 {
    4,639 ( 0.00%)                          return true;
   35,306 ( 0.00%)                      } else if punct.spacing() != Spacing::Joint {
        .                                   break;
        .                               }
    3,270 ( 0.00%)                      cursor = rest;
        .                           }
        .                           None => break,
        .                       }
        .                   }
  136,614 ( 0.00%)          false
  842,879 ( 0.03%)      }
        .           }
        .           
        .           // Not public API.
        .           #[doc(hidden)]
        .           #[cfg(feature = "printing")]
        .           pub mod printing {
        .               use proc_macro2::{Delimiter, Group, Ident, Punct, Spacing, Span, TokenStream};
        .               use quote::TokenStreamExt;
        .           
   82,588 ( 0.00%)      pub fn punct(s: &str, spans: &[Span], tokens: &mut TokenStream) {
  142,652 ( 0.00%)          assert_eq!(s.len(), spans.len());
        .           
   30,032 ( 0.00%)          let mut chars = s.chars();
   30,032 ( 0.00%)          let mut spans = spans.iter();
   52,556 ( 0.00%)          let ch = chars.next_back().unwrap();
   52,556 ( 0.00%)          let span = spans.next_back().unwrap();
  195,090 ( 0.01%)          for (ch, span) in chars.zip(spans) {
   14,498 ( 0.00%)              let mut op = Punct::new(ch, Spacing::Joint);
    6,590 ( 0.00%)              op.set_span(*span);
   13,180 ( 0.00%)              tokens.append(op);
        .                   }
        .           
   90,096 ( 0.00%)          let mut op = Punct::new(ch, Spacing::Alone);
   37,540 ( 0.00%)          op.set_span(*span);
   67,572 ( 0.00%)          tokens.append(op);
   15,016 ( 0.00%)      }
        .           
   19,349 ( 0.00%)      pub fn keyword(s: &str, span: Span, tokens: &mut TokenStream) {
   12,313 ( 0.00%)          tokens.append(Ident::new(s, span));
    3,518 ( 0.00%)      }
        .           
   24,480 ( 0.00%)      pub fn delim<F>(s: &str, span: Span, tokens: &mut TokenStream, f: F)
        .               where
        .                   F: FnOnce(&mut TokenStream),
        .               {
    9,792 ( 0.00%)          let delim = match s {
   24,480 ( 0.00%)              "(" => Delimiter::Parenthesis,
    9,211 ( 0.00%)              "[" => Delimiter::Bracket,
    7,821 ( 0.00%)              "{" => Delimiter::Brace,
        .                       " " => Delimiter::None,
        .                       _ => panic!("unknown delimiter: {}", s),
        .                   };
    9,792 ( 0.00%)          let mut inner = TokenStream::new();
   17,136 ( 0.00%)          f(&mut inner);
   34,272 ( 0.00%)          let mut g = Group::new(delim, inner);
   17,136 ( 0.00%)          g.set_span(span);
   26,928 ( 0.00%)          tokens.append(g);
    9,792 ( 0.00%)      }
        .           }

1,247,279 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/proc_macro_server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .           }
        .           
        .           trait ToInternal<T> {
        .               fn to_internal(self) -> T;
        .           }
        .           
        .           impl FromInternal<token::DelimToken> for Delimiter {
        .               fn from_internal(delim: token::DelimToken) -> Delimiter {
    6,753 ( 0.00%)          match delim {
        .                       token::Paren => Delimiter::Parenthesis,
        .                       token::Brace => Delimiter::Brace,
        .                       token::Bracket => Delimiter::Bracket,
        .                       token::NoDelim => Delimiter::None,
        .                   }
        .               }
        .           }
        .           
        .           impl ToInternal<token::DelimToken> for Delimiter {
        .               fn to_internal(self) -> token::DelimToken {
   10,557 ( 0.00%)          match self {
        .                       Delimiter::Parenthesis => token::Paren,
        .                       Delimiter::Brace => token::Brace,
        .                       Delimiter::Bracket => token::Bracket,
        .                       Delimiter::None => token::NoDelim,
        .                   }
        .               }
        .           }
        .           
        .           impl FromInternal<(TreeAndSpacing, &'_ mut Vec<Self>, &mut Rustc<'_, '_>)>
        .               for TokenTree<Group, Punct, Ident, Literal>
        .           {
  149,192 ( 0.00%)      fn from_internal(
  130,543 ( 0.00%)          ((tree, spacing), stack, rustc): (TreeAndSpacing, &mut Vec<Self>, &mut Rustc<'_, '_>),
        .               ) -> Self {
        .                   use rustc_ast::token::*;
        .           
        .                   let joint = spacing == Joint;
  119,288 ( 0.00%)          let Token { kind, span } = match tree {
        .                       tokenstream::TokenTree::Delimited(span, delim, tts) => {
        .                           let delimiter = Delimiter::from_internal(delim);
   15,757 ( 0.00%)                  return TokenTree::Group(Group { delimiter, stream: tts, span, flatten: false });
        .                       }
        .                       tokenstream::TokenTree::Token(token) => token,
        .                   };
        .           
        .                   macro_rules! tt {
        .                       ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)? }) => (
        .                           TokenTree::$ty(self::$ty {
        .                               $($field $(: $value)*,)+
-- line 76 ----------------------------------------
-- line 91 ----------------------------------------
        .                       }};
        .                       ($a:expr, $b:expr, $c:expr) => {{
        .                           stack.push(tt!(Punct::new($c, joint)));
        .                           stack.push(tt!(Punct::new($b, true)));
        .                           tt!(Punct::new($a, true))
        .                       }};
        .                   }
        .           
  147,063 ( 0.00%)          match kind {
        .                       Eq => op!('='),
        .                       Lt => op!('<'),
        .                       Le => op!('<', '='),
       98 ( 0.00%)              EqEq => op!('=', '='),
      104 ( 0.00%)              Ne => op!('!', '='),
        .                       Ge => op!('>', '='),
        .                       Gt => op!('>'),
       91 ( 0.00%)              AndAnd => op!('&', '&'),
        .                       OrOr => op!('|', '|'),
        .                       Not => op!('!'),
        .                       Tilde => op!('~'),
        .                       BinOp(Plus) => op!('+'),
        .                       BinOp(Minus) => op!('-'),
        .                       BinOp(Star) => op!('*'),
        .                       BinOp(Slash) => op!('/'),
        .                       BinOp(Percent) => op!('%'),
        .                       BinOp(Caret) => op!('^'),
        .                       BinOp(And) => op!('&'),
        .                       BinOp(Or) => op!('|'),
        .                       BinOp(Shl) => op!('<', '<'),
       16 ( 0.00%)              BinOp(Shr) => op!('>', '>'),
      112 ( 0.00%)              BinOpEq(Plus) => op!('+', '='),
       16 ( 0.00%)              BinOpEq(Minus) => op!('-', '='),
        .                       BinOpEq(Star) => op!('*', '='),
        .                       BinOpEq(Slash) => op!('/', '='),
        .                       BinOpEq(Percent) => op!('%', '='),
        .                       BinOpEq(Caret) => op!('^', '='),
        .                       BinOpEq(And) => op!('&', '='),
        .                       BinOpEq(Or) => op!('|', '='),
        .                       BinOpEq(Shl) => op!('<', '<', '='),
        .                       BinOpEq(Shr) => op!('>', '>', '='),
-- line 130 ----------------------------------------
-- line 131 ----------------------------------------
        .                       At => op!('@'),
        .                       Dot => op!('.'),
        .                       DotDot => op!('.', '.'),
        .                       DotDotDot => op!('.', '.', '.'),
        .                       DotDotEq => op!('.', '.', '='),
        .                       Comma => op!(','),
        .                       Semi => op!(';'),
        .                       Colon => op!(':'),
    6,760 ( 0.00%)              ModSep => op!(':', ':'),
    1,428 ( 0.00%)              RArrow => op!('-', '>'),
        .                       LArrow => op!('<', '-'),
    1,624 ( 0.00%)              FatArrow => op!('=', '>'),
        .                       Pound => op!('#'),
        .                       Dollar => op!('$'),
        .                       Question => op!('?'),
        .                       SingleQuote => op!('\''),
        .           
        .                       Ident(name, false) if name == kw::DollarCrate => tt!(Ident::dollar_crate()),
   80,793 ( 0.00%)              Ident(name, is_raw) => tt!(Ident::new(rustc.sess(), name, is_raw)),
        .                       Lifetime(name) => {
        .                           let ident = symbol::Ident::new(name, span).without_first_quote();
        .                           stack.push(tt!(Ident::new(rustc.sess(), ident.name, false)));
        .                           tt!(Punct::new('\'', true))
        .                       }
    1,085 ( 0.00%)              Literal(lit) => tt!(Literal { lit }),
      608 ( 0.00%)              DocComment(_, attr_style, data) => {
        .                           let mut escaped = String::new();
      152 ( 0.00%)                  for ch in data.as_str().chars() {
        .                               escaped.extend(ch.escape_debug());
        .                           }
        .                           let stream = [
        .                               Ident(sym::doc, false),
        .                               Eq,
      760 ( 0.00%)                      TokenKind::lit(token::Str, Symbol::intern(&escaped), None),
        .                           ]
        .                           .into_iter()
    2,584 ( 0.00%)                  .map(|kind| tokenstream::TokenTree::token(kind, span))
        .                           .collect();
    1,216 ( 0.00%)                  stack.push(TokenTree::Group(Group {
        .                               delimiter: Delimiter::Bracket,
      152 ( 0.00%)                      stream,
      304 ( 0.00%)                      span: DelimSpan::from_single(span),
        .                               flatten: false,
        .                           }));
      152 ( 0.00%)                  if attr_style == ast::AttrStyle::Inner {
        .                               stack.push(tt!(Punct::new('!', false)));
        .                           }
      608 ( 0.00%)                  tt!(Punct::new('#', false))
        .                       }
        .           
        .                       Interpolated(nt)
        .                           if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, rustc) =>
        .                       {
        .                           TokenTree::Ident(Ident::new(rustc.sess(), name.name, is_raw, name.span))
        .                       }
        .                       Interpolated(nt) => {
-- line 186 ----------------------------------------
-- line 191 ----------------------------------------
        .                               span: DelimSpan::from_single(span),
        .                               flatten: crate::base::pretty_printing_compatibility_hack(&nt, rustc.sess()),
        .                           })
        .                       }
        .           
        .                       OpenDelim(..) | CloseDelim(..) => unreachable!(),
        .                       Eof => unreachable!(),
        .                   }
  167,841 ( 0.01%)      }
        .           }
        .           
        .           impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {
  556,615 ( 0.02%)      fn to_internal(self) -> TokenStream {
        .                   use rustc_ast::token::*;
        .           
  557,791 ( 0.02%)          let (ch, joint, span) = match self {
   12,742 ( 0.00%)              TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),
    7,038 ( 0.00%)              TokenTree::Group(Group { delimiter, stream, span, .. }) => {
    7,038 ( 0.00%)                  return tokenstream::TokenTree::Delimited(span, delimiter.to_internal(), stream)
        .                               .into();
        .                       }
  284,544 ( 0.01%)              TokenTree::Ident(self::Ident { sym, is_raw, span }) => {
  663,936 ( 0.02%)                  return tokenstream::TokenTree::token(Ident(sym, is_raw), span).into();
        .                       }
        .                       TokenTree::Literal(self::Literal {
        .                           lit: token::Lit { kind: token::Integer, symbol, suffix },
        .                           span,
      108 ( 0.00%)              }) if symbol.as_str().starts_with('-') => {
        .                           let minus = BinOp(BinOpToken::Minus);
        .                           let symbol = Symbol::intern(&symbol.as_str()[1..]);
        .                           let integer = TokenKind::lit(token::Integer, symbol, suffix);
        .                           let a = tokenstream::TokenTree::token(minus, span);
        .                           let b = tokenstream::TokenTree::token(integer, span);
        .                           return [a, b].into_iter().collect();
        .                       }
        .                       TokenTree::Literal(self::Literal {
-- line 226 ----------------------------------------
-- line 229 ----------------------------------------
        .                       }) if symbol.as_str().starts_with('-') => {
        .                           let minus = BinOp(BinOpToken::Minus);
        .                           let symbol = Symbol::intern(&symbol.as_str()[1..]);
        .                           let float = TokenKind::lit(token::Float, symbol, suffix);
        .                           let a = tokenstream::TokenTree::token(minus, span);
        .                           let b = tokenstream::TokenTree::token(float, span);
        .                           return [a, b].into_iter().collect();
        .                       }
      642 ( 0.00%)              TokenTree::Literal(self::Literal { lit, span }) => {
      856 ( 0.00%)                  return tokenstream::TokenTree::token(Literal(lit), span).into();
        .                       }
        .                   };
        .           
   38,226 ( 0.00%)          let kind = match ch {
        .                       '=' => Eq,
        .                       '<' => Lt,
        .                       '>' => Gt,
        .                       '!' => Not,
        .                       '~' => Tilde,
        .                       '+' => BinOp(Plus),
        .                       '-' => BinOp(Minus),
        .                       '*' => BinOp(Star),
-- line 250 ----------------------------------------
-- line 260 ----------------------------------------
        .                       ':' => Colon,
        .                       '#' => Pound,
        .                       '$' => Dollar,
        .                       '?' => Question,
        .                       '\'' => SingleQuote,
        .                       _ => unreachable!(),
        .                   };
        .           
   89,194 ( 0.00%)          let tree = tokenstream::TokenTree::token(kind, span);
   63,710 ( 0.00%)          TokenStream::new(vec![(tree, if joint { Joint } else { Alone })])
  556,615 ( 0.02%)      }
        .           }
        .           
        .           impl ToInternal<rustc_errors::Level> for Level {
        .               fn to_internal(self) -> rustc_errors::Level {
        .                   match self {
        .                       Level::Error => rustc_errors::Level::Error { lint: false },
        .                       Level::Warning => rustc_errors::Level::Warning,
        .                       Level::Note => rustc_errors::Level::Note,
-- line 278 ----------------------------------------
-- line 287 ----------------------------------------
        .           #[derive(Clone)]
        .           pub struct TokenStreamIter {
        .               cursor: tokenstream::Cursor,
        .               stack: Vec<TokenTree<Group, Punct, Ident, Literal>>,
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct Group {
      123 ( 0.00%)      delimiter: Delimiter,
      123 ( 0.00%)      stream: TokenStream,
        .               span: DelimSpan,
        .               /// A hack used to pass AST fragments to attribute and derive macros
        .               /// as a single nonterminal token instead of a token stream.
        .               /// FIXME: It needs to be removed, but there are some compatibility issues (see #73345).
        .               flatten: bool,
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct Punct {
   69,932 ( 0.00%)      ch: char,
        .               // NB. not using `Spacing` here because it doesn't implement `Hash`.
  163,586 ( 0.01%)      joint: bool,
   31,218 ( 0.00%)      span: Span,
        .           }
        .           
        .           impl Punct {
        .               fn new(ch: char, joint: bool, span: Span) -> Punct {
        .                   const LEGAL_CHARS: &[char] = &[
        .                       '=', '<', '>', '!', '~', '+', '-', '*', '/', '%', '^', '&', '|', '@', '.', ',', ';',
        .                       ':', '#', '$', '?', '\'',
        .                   ];
        .                   if !LEGAL_CHARS.contains(&ch) {
        .                       panic!("unsupported character `{:?}`", ch)
        .                   }
        .                   Punct { ch, joint, span }
  104,682 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct Ident {
   62,553 ( 0.00%)      sym: Symbol,
   71,696 ( 0.00%)      is_raw: bool,
   12,617 ( 0.00%)      span: Span,
        .           }
        .           
        .           impl Ident {
  146,060 ( 0.00%)      fn new(sess: &ParseSess, sym: Symbol, is_raw: bool, span: Span) -> Ident {
  116,848 ( 0.00%)          let sym = nfc_normalize(sym.as_str());
   43,818 ( 0.00%)          let string = sym.as_str();
   73,030 ( 0.00%)          if !rustc_lexer::is_ident(string) {
        .                       panic!("`{:?}` is not a valid identifier", string)
        .                   }
   29,212 ( 0.00%)          if is_raw && !sym.can_be_raw() {
        .                       panic!("`{}` cannot be a raw identifier", string);
        .                   }
   73,030 ( 0.00%)          sess.symbol_gallery.insert(sym, span);
   14,606 ( 0.00%)          Ident { sym, is_raw, span }
  204,484 ( 0.01%)      }
        .               fn dollar_crate(span: Span) -> Ident {
        .                   // `$crate` is accepted as an ident only if it comes from the compiler.
        .                   Ident { sym: kw::DollarCrate, is_raw: false, span }
        .               }
        .           }
        .           
        .           // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.
        .           #[derive(Clone, Debug)]
-- line 352 ----------------------------------------
-- line 360 ----------------------------------------
        .               def_site: Span,
        .               call_site: Span,
        .               mixed_site: Span,
        .               krate: CrateNum,
        .               rebased_spans: FxHashMap<usize, Span>,
        .           }
        .           
        .           impl<'a, 'b> Rustc<'a, 'b> {
      351 ( 0.00%)      pub fn new(ecx: &'a mut ExtCtxt<'b>) -> Self {
      156 ( 0.00%)          let expn_data = ecx.current_expansion.id.expn_data();
      195 ( 0.00%)          Rustc {
       39 ( 0.00%)              def_site: ecx.with_def_site_ctxt(expn_data.def_site),
       39 ( 0.00%)              call_site: ecx.with_call_site_ctxt(expn_data.call_site),
        .                       mixed_site: ecx.with_mixed_site_ctxt(expn_data.call_site),
       39 ( 0.00%)              krate: expn_data.macro_def_id.unwrap().krate,
        .                       rebased_spans: FxHashMap::default(),
        .                       ecx,
        .                   }
      351 ( 0.00%)      }
        .           
        .               fn sess(&self) -> &ParseSess {
        .                   self.ecx.parse_sess()
        .               }
        .           
        .               fn lit(&mut self, kind: token::LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Literal {
      273 ( 0.00%)          Literal { lit: token::Lit::new(kind, symbol, suffix), span: server::Span::call_site(self) }
        .               }
        .           }
        .           
        .           impl server::Types for Rustc<'_, '_> {
        .               type FreeFunctions = FreeFunctions;
        .               type TokenStream = TokenStream;
        .               type TokenStreamBuilder = tokenstream::TokenStreamBuilder;
        .               type TokenStreamIter = TokenStreamIter;
-- line 393 ----------------------------------------
-- line 425 ----------------------------------------
        .                   parse_stream_from_source_str(
        .                       FileName::proc_macro_source_code(src),
        .                       src.to_string(),
        .                       self.sess(),
        .                       Some(self.call_site),
        .                   )
        .               }
        .               fn to_string(&mut self, stream: &Self::TokenStream) -> String {
  243,609 ( 0.01%)          pprust::tts_to_string(stream)
        .               }
        .               fn expand_expr(&mut self, stream: &Self::TokenStream) -> Result<Self::TokenStream, ()> {
        .                   // Parse the expression from our tokenstream.
        .                   let expr: PResult<'_, _> = try {
        .                       let mut p = rustc_parse::stream_to_parser(
        .                           self.sess(),
        .                           stream.clone(),
        .                           Some("proc_macro expand expr"),
-- line 441 ----------------------------------------
-- line 479 ----------------------------------------
        .                       },
        .                       _ => Err(()),
        .                   }
        .               }
        .               fn from_token_tree(
        .                   &mut self,
        .                   tree: TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>,
        .               ) -> Self::TokenStream {
  890,584 ( 0.03%)          tree.to_internal()
        .               }
        .               fn into_iter(&mut self, stream: Self::TokenStream) -> Self::TokenStreamIter {
    2,436 ( 0.00%)          TokenStreamIter { cursor: stream.trees(), stack: vec![] }
        .               }
        .           }
        .           
        .           impl server::TokenStreamBuilder for Rustc<'_, '_> {
        .               fn new(&mut self) -> Self::TokenStreamBuilder {
    4,638 ( 0.00%)          tokenstream::TokenStreamBuilder::new()
        .               }
        .               fn push(&mut self, builder: &mut Self::TokenStreamBuilder, stream: Self::TokenStream) {
  105,885 ( 0.00%)          builder.push(stream);
        .               }
        .               fn build(&mut self, builder: Self::TokenStreamBuilder) -> Self::TokenStream {
   18,552 ( 0.00%)          builder.build()
        .               }
        .           }
        .           
        .           impl server::TokenStreamIter for Rustc<'_, '_> {
  338,205 ( 0.01%)      fn next(
        .                   &mut self,
        .                   iter: &mut Self::TokenStreamIter,
        .               ) -> Option<TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>> {
        .                   loop {
   20,111 ( 0.00%)              let tree = iter.stack.pop().or_else(|| {
   63,255 ( 0.00%)                  let next = iter.cursor.next_with_spacing()?;
  354,331 ( 0.01%)                  Some(TokenTree::from_internal((next, &mut iter.stack, self)))
        .                       })?;
        .                       // A hack used to pass AST fragments to attribute and derive macros
        .                       // as a single nonterminal token instead of a token stream.
        .                       // Such token needs to be "unwrapped" and not represented as a delimited group.
        .                       // FIXME: It needs to be removed, but there are some compatibility issues (see #73345).
   45,028 ( 0.00%)              if let TokenTree::Group(ref group) = tree {
        .                           if group.flatten {
        .                               iter.cursor.append(group.stream.clone());
        .                               continue;
        .                           }
        .                       }
  221,221 ( 0.01%)              return Some(tree);
        .                   }
  180,376 ( 0.01%)      }
        .           }
        .           
        .           impl server::Group for Rustc<'_, '_> {
        .               fn new(&mut self, delimiter: Delimiter, stream: Self::TokenStream) -> Self::Group {
        .                   Group {
        .                       delimiter,
    3,519 ( 0.00%)              stream,
    3,519 ( 0.00%)              span: DelimSpan::from_single(server::Span::call_site(self)),
        .                       flatten: false,
        .                   }
        .               }
        .               fn delimiter(&mut self, group: &Self::Group) -> Delimiter {
        .                   group.delimiter
        .               }
        .               fn stream(&mut self, group: &Self::Group) -> Self::TokenStream {
    2,008 ( 0.00%)          group.stream.clone()
        .               }
        .               fn span(&mut self, group: &Self::Group) -> Self::Span {
   20,388 ( 0.00%)          group.span.entire()
        .               }
        .               fn span_open(&mut self, group: &Self::Group) -> Self::Span {
      721 ( 0.00%)          group.span.open
        .               }
        .               fn span_close(&mut self, group: &Self::Group) -> Self::Span {
    1,844 ( 0.00%)          group.span.close
        .               }
        .               fn set_span(&mut self, group: &mut Self::Group, span: Self::Span) {
   13,836 ( 0.00%)          group.span = DelimSpan::from_single(span);
        .               }
        .           }
        .           
        .           impl server::Punct for Rustc<'_, '_> {
   12,742 ( 0.00%)      fn new(&mut self, ch: char, spacing: Spacing) -> Self::Punct {
        .                   Punct::new(ch, spacing == Spacing::Joint, server::Span::call_site(self))
   25,484 ( 0.00%)      }
        .               fn as_char(&mut self, punct: Self::Punct) -> char {
        .                   punct.ch
        .               }
        .               fn spacing(&mut self, punct: Self::Punct) -> Spacing {
   17,152 ( 0.00%)          if punct.joint { Spacing::Joint } else { Spacing::Alone }
        .               }
        .               fn span(&mut self, punct: Self::Punct) -> Self::Span {
    8,576 ( 0.00%)          punct.span
        .               }
        .               fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {
        .                   Punct { span, ..punct }
   89,194 ( 0.00%)      }
        .           }
        .           
        .           impl server::Ident for Rustc<'_, '_> {
        .               fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {
   95,693 ( 0.00%)          Ident::new(self.sess(), Symbol::intern(string), is_raw, span)
        .               }
        .               fn span(&mut self, ident: Self::Ident) -> Self::Span {
   24,746 ( 0.00%)          ident.span
        .               }
        .               fn with_span(&mut self, ident: Self::Ident, span: Self::Span) -> Self::Ident {
        .                   Ident { span, ..ident }
    9,919 ( 0.00%)      }
        .           }
        .           
        .           impl server::Literal for Rustc<'_, '_> {
        .               fn from_str(&mut self, s: &str) -> Result<Self::Literal, ()> {
        .                   let name = FileName::proc_macro_source_code(s);
        .                   let mut parser = rustc_parse::new_parser_from_source_str(self.sess(), name, s.to_owned());
        .           
        .                   let first_span = parser.token.span.data();
-- line 595 ----------------------------------------
-- line 656 ----------------------------------------
        .                   self.lit(token::Float, Symbol::intern(n), None)
        .               }
        .               fn f32(&mut self, n: &str) -> Self::Literal {
        .                   self.lit(token::Float, Symbol::intern(n), Some(sym::f32))
        .               }
        .               fn f64(&mut self, n: &str) -> Self::Literal {
        .                   self.lit(token::Float, Symbol::intern(n), Some(sym::f64))
        .               }
      351 ( 0.00%)      fn string(&mut self, string: &str) -> Self::Literal {
        .                   let mut escaped = String::new();
        .                   for ch in string.chars() {
        .                       escaped.extend(ch.escape_debug());
        .                   }
       39 ( 0.00%)          self.lit(token::Str, Symbol::intern(&escaped), None)
      351 ( 0.00%)      }
        .               fn character(&mut self, ch: char) -> Self::Literal {
        .                   let mut escaped = String::new();
        .                   escaped.extend(ch.escape_unicode());
        .                   self.lit(token::Char, Symbol::intern(&escaped), None)
        .               }
        .               fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {
        .                   let string = bytes
        .                       .iter()
        .                       .cloned()
        .                       .flat_map(ascii::escape_default)
        .                       .map(Into::<char>::into)
        .                       .collect::<String>();
        .                   self.lit(token::ByteStr, Symbol::intern(&string), None)
        .               }
        .               fn span(&mut self, literal: &Self::Literal) -> Self::Span {
      103 ( 0.00%)          literal.span
        .               }
        .               fn set_span(&mut self, literal: &mut Self::Literal, span: Self::Span) {
        .                   literal.span = span;
        .               }
        .               fn subspan(
        .                   &mut self,
        .                   literal: &Self::Literal,
        .                   start: Bound<usize>,
-- line 694 ----------------------------------------
-- line 771 ----------------------------------------
        .                   diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);
        .               }
        .               fn emit(&mut self, diag: Self::Diagnostic) {
        .                   self.sess().span_diagnostic.emit_diagnostic(&diag);
        .               }
        .           }
        .           
        .           impl server::Span for Rustc<'_, '_> {
   23,652 ( 0.00%)      fn debug(&mut self, span: Self::Span) -> String {
   11,826 ( 0.00%)          if self.ecx.ecfg.span_debug {
        .                       format!("{:?}", span)
        .                   } else {
   70,956 ( 0.00%)              format!("{:?} bytes({}..{})", span.ctxt(), span.lo().0, span.hi().0)
        .                   }
   23,652 ( 0.00%)      }
        .               fn def_site(&mut self) -> Self::Span {
        .                   self.def_site
        .               }
        .               fn call_site(&mut self) -> Self::Span {
   29,042 ( 0.00%)          self.call_site
        .               }
        .               fn mixed_site(&mut self) -> Self::Span {
        .                   self.mixed_site
        .               }
        .               fn source_file(&mut self, span: Self::Span) -> Self::SourceFile {
        .                   self.sess().source_map().lookup_char_pos(span.lo()).file
        .               }
        .               fn parent(&mut self, span: Self::Span) -> Option<Self::Span> {
-- line 798 ----------------------------------------
-- line 810 ----------------------------------------
        .                   LineColumn { line: loc.line, column: loc.col.to_usize() }
        .               }
        .               fn before(&mut self, span: Self::Span) -> Self::Span {
        .                   span.shrink_to_lo()
        .               }
        .               fn after(&mut self, span: Self::Span) -> Self::Span {
        .                   span.shrink_to_hi()
        .               }
    1,728 ( 0.00%)      fn join(&mut self, first: Self::Span, second: Self::Span) -> Option<Self::Span> {
    1,728 ( 0.00%)          let self_loc = self.sess().source_map().lookup_char_pos(first.lo());
    1,296 ( 0.00%)          let other_loc = self.sess().source_map().lookup_char_pos(second.lo());
        .           
      864 ( 0.00%)          if self_loc.file.name != other_loc.file.name {
        .                       return None;
        .                   }
        .           
      648 ( 0.00%)          Some(first.to(second))
    2,592 ( 0.00%)      }
        .               fn resolved_at(&mut self, span: Self::Span, at: Self::Span) -> Self::Span {
        .                   span.with_ctxt(at.ctxt())
        .               }
        .               fn source_text(&mut self, span: Self::Span) -> Option<String> {
        .                   self.sess().source_map().span_to_snippet(span).ok()
        .               }
        .               /// Saves the provided span into the metadata of
        .               /// *the crate we are currently compiling*, which must
-- line 835 ----------------------------------------

1,121,434 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/proc_macro_server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                  

-- line 222 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               fn eq(&self, other: &Rhs) -> bool;
         .           
         .               /// This method tests for `!=`.
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
   140,493 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
   172,118 ( 0.01%)          !self.eq(other)
   187,324 ( 0.01%)      }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialEq`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics, structural_match)]
         .           pub macro PartialEq($item:item) {
         .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
         .           /// assert_eq!(Ordering::Less, result);
         .           ///
         .           /// let result = 1.cmp(&1);
         .           /// assert_eq!(Ordering::Equal, result);
         .           ///
         .           /// let result = 2.cmp(&1);
         .           /// assert_eq!(Ordering::Greater, result);
         .           /// ```
       454 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[repr(i8)]
         .           pub enum Ordering {
         .               /// An ordering where a compared value is less than another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Less = -1,
         .               /// An ordering where a compared value is equal to another.
         .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
         .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
         .               ///
         .               /// assert_eq!(result, Ordering::Less);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
         .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
       641 ( 0.00%)          match self {
         .                       Equal => f(),
         .                       _ => self,
         .                   }
         .               }
         .           }
         .           
         .           /// A helper struct for reverse ordering.
         .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
         .               ///
         .               /// ```
         .               /// assert_eq!(2, 1.max(2));
         .               /// assert_eq!(2, 2.max(2));
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
   218,880 ( 0.01%)      fn max(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
   219,720 ( 0.01%)          max_by(self, other, Ord::cmp)
   145,920 ( 0.00%)      }
         .           
         .               /// Compares and returns the minimum of two values.
         .               ///
         .               /// Returns the first argument if the comparison determines them to be equal.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(1, 1.min(2));
         .               /// assert_eq!(2, 2.min(2));
         .               /// ```
         .               #[stable(feature = "ord_max_min", since = "1.21.0")]
         .               #[inline]
         .               #[must_use]
       117 ( 0.00%)      fn min(self, other: Self) -> Self
         .               where
         .                   Self: Sized,
         .               {
     4,748 ( 0.00%)          min_by(self, other, Ord::cmp)
        78 ( 0.00%)      }
         .           
         .               /// Restrict a value to a certain interval.
         .               ///
         .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
         .               /// less than `min`. Otherwise this returns `self`.
         .               ///
         .               /// # Panics
         .               ///
-- line 829 ----------------------------------------
-- line 1097 ----------------------------------------
         .               /// let result = 2.0 < 1.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn lt(&self, other: &Rhs) -> bool {
    36,423 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
         .               }
         .           
         .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
         .               fn le(&self, other: &Rhs) -> bool {
         .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
         .                   // FIXME: The root cause was fixed upstream in LLVM with:
         .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
         .                   // Revert this workaround once support for LLVM 12 gets dropped.
   401,160 ( 0.01%)          !matches!(self.partial_cmp(other), None | Some(Greater))
         .               }
         .           
         .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1139 ----------------------------------------
         .               ///
         .               /// let result = 2.0 > 2.0;
         .               /// assert_eq!(result, false);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
       204 ( 0.00%)      fn gt(&self, other: &Rhs) -> bool {
 1,464,827 ( 0.05%)          matches!(self.partial_cmp(other), Some(Greater))
       340 ( 0.00%)      }
         .           
         .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
         .               /// operator.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let result = 2.0 >= 1.0;
-- line 1157 ----------------------------------------
-- line 1159 ----------------------------------------
         .               ///
         .               /// let result = 2.0 >= 2.0;
         .               /// assert_eq!(result, true);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[default_method_body_is_const]
    28,776 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
   134,692 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
    47,960 ( 0.00%)      }
         .           }
         .           
         .           /// Derive macro generating an impl of the trait `PartialOrd`.
         .           #[rustc_builtin_macro]
         .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
         .           #[allow_internal_unstable(core_intrinsics)]
         .           pub macro PartialOrd($item:item) {
         .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1190 ----------------------------------------
         .           ///
         .           /// assert_eq!(1, cmp::min(1, 2));
         .           /// assert_eq!(2, cmp::min(2, 2));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_min")]
       117 ( 0.00%)  pub fn min<T: Ord>(v1: T, v2: T) -> T {
        78 ( 0.00%)      v1.min(v2)
        78 ( 0.00%)  }
         .           
         .           /// Returns the minimum of two values with respect to the specified comparison function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1208 ----------------------------------------
-- line 1209 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
         .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
       117 ( 0.00%)  pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   598,951 ( 0.02%)      match compare(&v1, &v2) {
       156 ( 0.00%)          Ordering::Less | Ordering::Equal => v1,
         .                   Ordering::Greater => v2,
         .               }
       353 ( 0.00%)  }
         .           
         .           /// Returns the element that gives the minimum value from the specified function.
         .           ///
         .           /// Returns the first argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
         .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        12 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
         8 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
         8 ( 0.00%)  }
         .           
         .           /// Compares and returns the maximum of two values.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// Internally uses an alias to [`Ord::max`].
         .           ///
         .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1253 ----------------------------------------
         .           ///
         .           /// assert_eq!(2, cmp::max(1, 2));
         .           /// assert_eq!(2, cmp::max(2, 2));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
   218,880 ( 0.01%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
   145,920 ( 0.00%)      v1.max(v2)
   145,920 ( 0.00%)  }
         .           
         .           /// Returns the maximum of two values with respect to the specified comparison function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
         .           /// use std::cmp;
         .           ///
         .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
         .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
   218,880 ( 0.01%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
 2,151,516 ( 0.07%)      match compare(&v1, &v2) {
   184,417 ( 0.01%)          Ordering::Less | Ordering::Equal => v2,
    81,876 ( 0.00%)          Ordering::Greater => v1,
         .               }
   610,972 ( 0.02%)  }
         .           
         .           /// Returns the element that gives the maximum value from the specified function.
         .           ///
         .           /// Returns the second argument if the comparison determines them to be equal.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
         .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
         .               use crate::hint::unreachable_unchecked;
         .           
         .               macro_rules! partial_eq_impl {
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialEq for $t {
         .                           #[inline]
   112,067 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
         .                           #[inline]
    65,475 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl PartialEq for () {
         .                   #[inline]
         .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
         .                   ($($t:ty)*) => ($(
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl PartialOrd for $t {
         .                           #[inline]
         .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
         .                               Some(self.cmp(other))
         .                           }
         .                           #[inline]
 3,685,044 ( 0.12%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
         .                           #[inline]
    45,778 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
         .                           #[inline]
         .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
         .                           #[inline]
         .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
         .                       }
         .           
         .                       #[stable(feature = "rust1", since = "1.0.0")]
         .                       impl Ord for $t {
         .                           #[inline]
   413,295 ( 0.01%)                  fn cmp(&self, other: &$t) -> Ordering {
         .                               // The order here is important to generate more optimal assembly.
         .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
19,504,609 ( 0.63%)                      if *self < *other { Less }
   185,158 ( 0.01%)                      else if *self == *other { Equal }
    36,710 ( 0.00%)                      else { Greater }
   247,977 ( 0.01%)                  }
         .                       }
         .                   )*)
         .               }
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for () {
         .                   #[inline]
         .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl Ord for bool {
         .                   #[inline]
         .                   fn cmp(&self, other: &bool) -> Ordering {
         .                       // Casting to i8's and converting the difference to an Ordering generates
         .                       // more optimal assembly.
         .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
     1,910 ( 0.00%)              match (*self as i8) - (*other as i8) {
         .                           -1 => Less,
         .                           0 => Equal,
         .                           1 => Greater,
         .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
         .                           _ => unsafe { unreachable_unchecked() },
         .                       }
         .                   }
         .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
         .               // & pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
         .               where
         .                   A: PartialEq<B>,
         .               {
         .                   #[inline]
 3,080,603 ( 0.10%)          fn eq(&self, other: &&B) -> bool {
 4,943,168 ( 0.16%)              PartialEq::eq(*self, *other)
 2,672,922 ( 0.09%)          }
         .                   #[inline]
         .                   fn ne(&self, other: &&B) -> bool {
        66 ( 0.00%)              PartialEq::ne(*self, *other)
    35,421 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
         .               where
         .                   A: PartialOrd<B>,
         .               {
         .                   #[inline]
         .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
        10 ( 0.00%)              PartialOrd::partial_cmp(*self, *other)
         .                   }
         .                   #[inline]
         .                   fn lt(&self, other: &&B) -> bool {
         .                       PartialOrd::lt(*self, *other)
         .                   }
         .                   #[inline]
         .                   fn le(&self, other: &&B) -> bool {
         .                       PartialOrd::le(*self, *other)
-- line 1505 ----------------------------------------
-- line 1515 ----------------------------------------
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Ord for &A
         .               where
         .                   A: Ord,
         .               {
         .                   #[inline]
         .                   fn cmp(&self, other: &Self) -> Ordering {
         2 ( 0.00%)              Ord::cmp(*self, *other)
    14,560 ( 0.00%)          }
         .               }
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized> Eq for &A where A: Eq {}
         .           
         .               // &mut pointers
         .           
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

 4,630,883 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 79 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for Iter<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Send for Iter<'_, T> {}
        .           
        .           impl<'a, T> Iter<'a, T> {
        .               #[inline]
  839,772 ( 0.03%)      pub(super) fn new(slice: &'a [T]) -> Self {
  629,829 ( 0.02%)          let ptr = slice.as_ptr();
        .                   // SAFETY: Similar to `IterMut::new`.
        .                   unsafe {
  209,943 ( 0.01%)              assume(!ptr.is_null());
        .           
1,049,715 ( 0.03%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *const u8).wrapping_add(slice.len()) as *const T
        .                       } else {
  209,943 ( 0.01%)                  ptr.add(slice.len())
        .                       };
        .           
1,480,700 ( 0.05%)              Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
        .                   }
  839,772 ( 0.03%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// This has the same lifetime as the original slice, and so the
        .               /// iterator can continue to be used while this exists.
        .               ///
        .               /// # Examples
        .               ///
-- line 109 ----------------------------------------
-- line 121 ----------------------------------------
        .               ///
        .               /// // Next, we move to the second element of the slice:
        .               /// iter.next();
        .               /// // Now `as_slice` returns "[2, 3]":
        .               /// println!("{:?}", iter.as_slice());
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "iter_to_slice", since = "1.4.0")]
   78,088 ( 0.00%)      pub fn as_slice(&self) -> &'a [T] {
   28,120 ( 0.00%)          self.make_slice()
   39,044 ( 0.00%)      }
        .           }
        .           
        .           iterator! {struct Iter -> *const T, &'a T, const, {/* no mut */}, {
        .               fn is_sorted_by<F>(self, mut compare: F) -> bool
        .               where
        .                   Self: Sized,
        .                   F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,
        .               {
-- line 139 ----------------------------------------
-- line 141 ----------------------------------------
        .                       compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)
        .                   })
        .               }
        .           }}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Clone for Iter<'_, T> {
        .               fn clone(&self) -> Self {
   36,341 ( 0.00%)          Iter { ptr: self.ptr, end: self.end, _marker: self._marker }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
        .           impl<T> AsRef<[T]> for Iter<'_, T> {
        .               fn as_ref(&self) -> &[T] {
        .                   self.as_slice()
        .               }
-- line 157 ----------------------------------------
-- line 199 ----------------------------------------
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Sync> Sync for IterMut<'_, T> {}
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<T: Send> Send for IterMut<'_, T> {}
        .           
        .           impl<'a, T> IterMut<'a, T> {
        .               #[inline]
   12,720 ( 0.00%)      pub(super) fn new(slice: &'a mut [T]) -> Self {
    9,540 ( 0.00%)          let ptr = slice.as_mut_ptr();
        .                   // SAFETY: There are several things here:
        .                   //
        .                   // `ptr` has been obtained by `slice.as_ptr()` where `slice` is a valid
        .                   // reference thus it is non-NUL and safe to use and pass to
        .                   // `NonNull::new_unchecked` .
        .                   //
        .                   // Adding `slice.len()` to the starting pointer gives a pointer
        .                   // at the end of `slice`. `end` will never be dereferenced, only checked
-- line 216 ----------------------------------------
-- line 218 ----------------------------------------
        .                   // done.
        .                   //
        .                   // In the case of a ZST, the end pointer is just the start pointer plus
        .                   // the length, to also allows for the fast `ptr == end` check.
        .                   //
        .                   // See the `next_unchecked!` and `is_empty!` macros as well as the
        .                   // `post_inc_start` method for more information.
        .                   unsafe {
    3,180 ( 0.00%)              assume(!ptr.is_null());
        .           
   15,900 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
        .                       } else {
    3,180 ( 0.00%)                  ptr.add(slice.len())
        .                       };
        .           
   29,212 ( 0.00%)              Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
        .                   }
   12,720 ( 0.00%)      }
        .           
        .               /// Views the underlying data as a subslice of the original data.
        .               ///
        .               /// To avoid creating `&mut` references that alias, this is forced
        .               /// to consume the iterator.
        .               ///
        .               /// # Examples
        .               ///
-- line 244 ----------------------------------------
-- line 1711 ----------------------------------------
        .               v: &'a [T],
        .               rem: &'a [T],
        .               chunk_size: usize,
        .           }
        .           
        .           impl<'a, T> ChunksExact<'a, T> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {
       34 ( 0.00%)          let rem = slice.len() % chunk_size;
       51 ( 0.00%)          let fst_len = slice.len() - rem;
        .                   // SAFETY: 0 <= fst_len <= slice.len() by construction above
        .                   let (fst, snd) = unsafe { slice.split_at_unchecked(fst_len) };
        .                   Self { v: fst, rem: snd, chunk_size }
        .               }
        .           
        .               /// Returns the remainder of the original slice that is not going to be
        .               /// returned by the iterator. The returned slice has at most `chunk_size-1`
        .               /// elements.
-- line 1728 ----------------------------------------
-- line 1742 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "chunks_exact", since = "1.31.0")]
        .           impl<'a, T> Iterator for ChunksExact<'a, T> {
        .               type Item = &'a [T];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<&'a [T]> {
    2,372 ( 0.00%)          if self.v.len() < self.chunk_size {
        .                       None
        .                   } else {
        .                       let (fst, snd) = self.v.split_at(self.chunk_size);
        .                       self.v = snd;
        .                       Some(fst)
        .                   }
        .               }
        .           
-- line 1758 ----------------------------------------
-- line 2024 ----------------------------------------
        .               num: usize,
        .               marker: PhantomData<&'a [T; N]>,
        .           }
        .           
        .           impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {
        .               #[inline]
        .               pub(super) fn new(slice: &'a [T]) -> Self {
        .                   let num_windows = slice.len().saturating_sub(N - 1);
       42 ( 0.00%)          Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }
        .               }
        .           }
        .           
        .           #[unstable(feature = "array_windows", issue = "75027")]
        .           impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {
        .               type Item = &'a [T; N];
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
   19,960 ( 0.00%)          if self.num == 0 {
        .                       return None;
        .                   }
        .                   // SAFETY:
        .                   // This is safe because it's indexing into a slice guaranteed to be length > N.
        .                   let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };
        .                   // SAFETY: Guaranteed that there are at least 1 item remaining otherwise
        .                   // earlier branch would've been hit
        .                   self.slice_head = unsafe { self.slice_head.add(1) };
-- line 2050 ----------------------------------------

2,113,073 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
 14,494 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
 17,796 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    642 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    478 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    298 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    717 ( 0.00%)      pub prev_token: Token,
    357 ( 0.00%)      pub capture_cfg: bool,
    773 ( 0.00%)      restrictions: Restrictions,
    596 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    596 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    596 ( 0.00%)      unmatched_angle_bracket_count: u32,
    894 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    298 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    298 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
  1,297 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
  1,192 ( 0.00%)      capturing: Capturing,
    298 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  3,058 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 85,770 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
 19,603 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  6,197 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 38,407 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
 10,333 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
 20,666 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  3,060 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  6,671 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
609,612 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
291,804 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
  5,447 ( 0.00%)                  self.frame.open_delim = true;
 27,235 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
593,630 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 22,676 ( 0.00%)              } else if !self.frame.close_delim {
  5,321 ( 0.00%)                  self.frame.close_delim = true;
 26,605 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
 10,564 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 68,666 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
 13,230 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
112,496 ( 0.00%)              match tree {
      .                           TokenTree::Token(token) => {
406,408 ( 0.01%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
406,408 ( 0.01%)      }
      .           
 35,420 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 10,626 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 17,710 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
 31,878 ( 0.00%)      }
      .           }
      .           
 37,110 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
 29,688 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
    360 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    454 ( 0.00%)      Some(match token.kind {
    908 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    908 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    908 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  1,589 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    454 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  1,589 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  1,135 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  8,568 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    612 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
  1,224 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 18,972 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    612 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    612 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  3,672 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
  1,224 ( 0.00%)          parser.bump();
      .           
      .                   parser
  5,508 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
262,434 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
 14,168 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
120,591 ( 0.00%)                  self.token_cursor.next()
      .                       };
174,956 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 43,739 ( 0.00%)              self.token_cursor.break_last_token = false;
174,956 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  2,520 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
145,986 ( 0.00%)              if matches!(
 87,478 ( 0.00%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
174,956 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 44,352 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  4,928 ( 0.00%)          if self.expected_tokens.is_empty() {
  3,078 ( 0.00%)              if self.token == *t {
  2,565 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 52,980 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 73,920 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 63,516 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
 10,586 ( 0.00%)          if edible.contains(&self.token.kind) {
 13,725 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 79,395 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 43,666 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 33,021 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 76,748 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
 10,964 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 65,784 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
 43,856 ( 0.00%)          self.bump();
      .                   Ok(ident)
109,640 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
977,627 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
430,155 ( 0.01%)          let is_present = self.token == *tok;
290,794 ( 0.01%)          if !is_present {
626,991 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
977,627 ( 0.03%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    176 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
209,955 ( 0.01%)          let is_present = self.check(tok);
136,120 ( 0.00%)          if is_present {
 24,296 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    220 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
 38,225 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  8,140 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
265,471 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 83,460 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 57,146 ( 0.00%)          if self.check_keyword(kw) {
  6,106 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 83,460 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
 13,164 ( 0.00%)          if self.token.is_keyword(kw) {
  2,565 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
  1,120 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    896 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 33,016 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 16,508 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 37,143 ( 0.00%)      }
      .           
 71,460 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
 25,848 ( 0.00%)          if ok {
      .                       true
      .                   } else {
 14,136 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 71,460 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
 14,886 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
 22,004 ( 0.00%)      fn check_path(&mut self) -> bool {
 52,001 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
 27,505 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
  7,886 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
  6,560 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
 14,013 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  7,785 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
 14,013 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  8,228 ( 0.00%)          self.check_or_expected(
  4,114 ( 0.00%)              self.token.is_like_plus(),
  4,114 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
107,580 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 62,755 ( 0.00%)          if self.token.kind == expected {
  6,018 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
 29,780 ( 0.00%)          match self.token.kind.break_two_token_op() {
    390 ( 0.00%)              Some((first, second)) if first == expected => {
    216 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
    270 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
    486 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
     54 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
    756 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
 17,706 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
104,297 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
  1,644 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
  5,316 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
    720 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
  5,676 ( 0.00%)      fn eat_lt(&mut self) -> bool {
 21,038 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
 13,911 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  4,120 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
  4,419 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
  5,676 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  5,898 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  2,949 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
  1,966 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
 14,178 ( 0.00%)              TokenExpectType::Expect => self.check(k),
  2,280 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
 15,607 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
 11,378 ( 0.00%)              if let Some(ref t) = sep.sep {
 13,221 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  6,935 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  5,614 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  4,771 ( 0.00%)              let t = f(self)?;
  3,161 ( 0.00%)              v.push(t);
      .                   }
      .           
  8,564 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  8,602 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
 11,670 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  5,236 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  2,848 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
 13,367 ( 0.00%)          Ok((val, trailing))
  9,336 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  4,712 ( 0.00%)          self.expect(bra)?;
  9,336 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
  1,944 ( 0.00%)              &token::OpenDelim(delim),
  2,725 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
569,309 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
262,758 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
175,172 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 43,793 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 43,793 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
349,912 ( 0.01%)      pub fn bump(&mut self) {
174,956 ( 0.01%)          let next_token = self.next_tok(self.token.span);
262,434 ( 0.01%)          self.bump_with(next_token);
349,912 ( 0.01%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
    296 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  5,452 ( 0.00%)          if dist == 0 {
  2,265 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
 18,457 ( 0.00%)          let frame = &self.token_cursor.frame;
 20,227 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 53,556 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 70,755 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 86,968 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 30,484 ( 0.00%)                      Some(tree) => match tree {
 13,751 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
 11,727 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
 15,169 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
  2,950 ( 0.00%)          let mut token = Token::dummy();
  6,296 ( 0.00%)          while i < dist {
 24,485 ( 0.00%)              token = cursor.next().0;
 10,254 ( 0.00%)              if matches!(
  6,222 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
  3,265 ( 0.00%)              i += 1;
      .                   }
    222 ( 0.00%)          return looker(&token);
    333 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
 21,537 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  6,028 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
 21,537 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
  1,102 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  4,408 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
 10,832 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  3,299 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
      5 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
 18,956 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
      .                       id: DUMMY_NODE_ID,
      .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
    532 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
  2,558 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
    228 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    342 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    530 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
  1,017 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  4,752 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  4,224 ( 0.00%)          Ok(
  3,240 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    456 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    444 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
  1,596 ( 0.00%)                  match self.parse_token_tree() {
  1,995 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    798 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    258 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     76 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     76 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     76 ( 0.00%)                      let span = expr.span;
      .           
    380 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    684 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  3,696 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
 15,273 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  8,150 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  5,728 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  3,008 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 17,276 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
 12,138 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
  1,002 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
  1,002 ( 0.00%)                  let span = frame.span;
    501 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
  1,002 ( 0.00%)                  self.bump();
  2,505 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
    430 ( 0.00%)                  self.bump();
  1,075 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  5,012 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  4,893 ( 0.00%)          let old = self.restrictions;
  6,229 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  6,551 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
 14,336 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  8,960 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 16,128 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
 12,730 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  2,645 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
  1,273 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  5,092 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
  1,112 ( 0.00%)              return Ok(Visibility {
  3,336 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
    161 ( 0.00%)          let lo = self.prev_token.span;
      .           
    805 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    483 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
 11,457 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    343 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
  3,680 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    424 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
  3,680 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 69,280 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 34,640 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
 24,393 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 65,457 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  7,280 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  3,640 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  3,640 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  7,280 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

298,849 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
       173 ( 0.00%)      pub ty: Ty<'tcx>,
       865 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
    34,349 ( 0.00%)      pub scope: DefId,
    62,754 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   408,981 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    33,550 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       232 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     1,164 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
    79,367 ( 0.00%)      pub var: BoundVar,
    68,991 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
11,271,060 ( 0.36%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
         .           #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
   984,644 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
   166,267 ( 0.01%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 1,261,500 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    65,952 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     2,997 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        94 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
       188 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       376 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
       188 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
     2,375 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    16,410 ( 0.00%)              [
     4,553 ( 0.00%)                  ref parent_substs @ ..,
     5,104 ( 0.00%)                  closure_kind_ty,
     2,012 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     3,484 ( 0.00%)                  tupled_upvars_ty,
     9,500 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     7,125 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        20 ( 0.00%)      pub fn is_valid(self) -> bool {
        40 ( 0.00%)          self.substs.len() >= 3
        40 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        40 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       804 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       939 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       646 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       536 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    10,507 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     1,348 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     2,696 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        65 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       104 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       130 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       923 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,846 ( 0.00%)          match ty.kind() {
     3,692 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     2,769 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       318 ( 0.00%)          let tupled_tys = match self {
       412 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       665 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       571 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       506 ( 0.00%)          match self {
       746 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
    49,585 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    52,938 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
        18 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        70 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        80 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        84 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     3,897 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,165 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     3,464 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       341 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     2,699 ( 0.00%)          self[0]
     1,676 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     1,364 ( 0.00%)              })
         .                       .transpose()
     1,023 ( 0.00%)      }
         .           
       417 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       834 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
        20 ( 0.00%)                  .map_bound(|pred| match pred {
         .                               ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    22,498 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,855,143 ( 0.06%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     2,449 ( 0.00%)      pub def_id: DefId,
 1,000,895 ( 0.03%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     1,935 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
     7,740 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       855 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       380 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       570 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       760 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     1,928 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       241 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     2,651 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
    12,174 ( 0.00%)          self.skip_binder().def_id
     4,058 ( 0.00%)      }
         .           
     5,490 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    10,980 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     5,490 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        72 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    25,013 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     3,708 ( 0.00%)      pub def_id: DefId,
    30,421 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
       104 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
       104 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       114 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
        57 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       285 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       588 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       588 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       784 ( 0.00%)      }
         .           }
         .           
    58,990 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    64,869 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   349,762 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    31,155 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   106,863 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   269,011 ( 0.01%)          Binder(value, ty::List::empty())
    31,085 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    20,371 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,103,837 ( 0.04%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     1,932 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    13,955 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       932 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    28,302 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   252,578 ( 0.01%)          Binder(value, self.1)
       932 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    16,016 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    19,345 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   181,420 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       465 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,662 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   140,918 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   118,870 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   134,637 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    38,654 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    11,044 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    44,176 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    77,189 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    33,081 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
    55,135 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
    99,243 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    49,212 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     5,468 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     5,468 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    60,148 ( 0.00%)      }
         .           
    10,682 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    32,046 ( 0.00%)          self.substs.type_at(0)
    21,364 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    27,953 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    32,795 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     7,961 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    57,649 ( 0.00%)      pub c_variadic: bool,
    13,592 ( 0.00%)      pub unsafety: hir::Unsafety,
    43,385 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    18,142 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    83,062 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    36,284 ( 0.00%)      }
         .           
    11,665 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    87,580 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    23,330 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     2,621 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     7,496 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       396 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     4,499 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
       712 ( 0.00%)          self.skip_binder().c_variadic
       356 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     2,798 ( 0.00%)          self.skip_binder().unsafety
     1,399 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
     2,936 ( 0.00%)          self.skip_binder().abi
       734 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       160 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct ParamTy {
     1,370 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       716 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
       358 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       364 ( 0.00%)          ParamTy::new(def.index, def.name)
       182 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
        84 ( 0.00%)      pub index: u32,
        84 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 3,915,392 ( 0.13%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        18 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   137,322 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    14,652 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    30,938 ( 0.00%)      pub def_id: DefId,
    35,895 ( 0.00%)      pub index: u32,
    38,800 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     2,583 ( 0.00%)      pub index: u32,
     1,750 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     2,997 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    51,060 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     2,942 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    71,524 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   116,535 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
     5,169 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     2,764 ( 0.00%)          match self.kind() {
       890 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    25,433 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
    42,641 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    38,516 ( 0.00%)          match self.kind() {
     5,747 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       282 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       511 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       131 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       170 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       340 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       170 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1843 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
       120 ( 0.00%)          matches!(
        80 ( 0.00%)              self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
         .                   )
         .               }
         .           
         .               /// Get the mutability of the reference or `None` when not a reference
         .               #[inline]
         .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     3,384 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
    43,042 ( 0.00%)          match self.kind() {
     6,241 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
       810 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
       810 ( 0.00%)          match self.kind() {
     2,025 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
       810 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
       330 ( 0.00%)          matches!(
       733 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
        13 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
         .                   matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
         .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
     8,568 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
     2,404 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     2,334 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
     3,091 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     3,285 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
         2 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
       549 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     7,891 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    56,801 ( 0.00%)          match self.kind() {
     1,114 ( 0.00%)              Adt(def, _) if def.is_box() => {
       966 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
    34,862 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
         .                       RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
    15,782 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       324 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
        81 ( 0.00%)      }
         .           
    29,312 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    14,656 ( 0.00%)          match self.kind() {
    10,992 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
         .                       FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    32,976 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
       774 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     2,551 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       473 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     1,930 ( 0.00%)          match self.kind() {
     2,316 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       946 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       612 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
     1,224 ( 0.00%)          match self.kind() {
     1,224 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     1,224 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Returns the type of the discriminant of this type.
     4,000 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     2,000 ( 0.00%)          match self.kind() {
     3,200 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     3,200 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
         .               pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
         .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     3,200 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     6,400 ( 0.00%)          match self.kind() {
     6,072 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     3,200 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
   114,390 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    76,260 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     2,112 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
     5,652 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
   114,390 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
        18 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    44,034 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    66,051 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    22,017 ( 0.00%)      }
         .           }

15,341,910 ( 0.49%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .               fn cmp(&self, other: &str) -> Ordering {
        .                   self.as_bytes().cmp(other.as_bytes())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl PartialEq for str {
        .               #[inline]
5,381,739 ( 0.17%)      fn eq(&self, other: &str) -> bool {
4,783,768 ( 0.15%)          self.as_bytes() == other.as_bytes()
2,391,884 ( 0.08%)      }
        .               #[inline]
        .               fn ne(&self, other: &str) -> bool {
        .                   !(*self).eq(other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl Eq for str {}
-- line 38 ----------------------------------------
-- line 55 ----------------------------------------
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I> ops::Index<I> for str
        .           where
        .               I: SliceIndex<str>,
        .           {
        .               type Output = I::Output;
        .           
        .               #[inline]
  218,258 ( 0.01%)      fn index(&self, index: I) -> &I::Output {
  212,088 ( 0.01%)          index.index(self)
  141,392 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I> ops::IndexMut<I> for str
        .           where
        .               I: SliceIndex<str>,
        .           {
        .               #[inline]
-- line 73 ----------------------------------------
-- line 110 ----------------------------------------
        .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
        .                   slice
        .               }
        .               #[inline]
        .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
        .                   slice
        .               }
        .               #[inline]
  416,772 ( 0.01%)      fn index(self, slice: &str) -> &Self::Output {
        .                   slice
  138,924 ( 0.00%)      }
        .               #[inline]
        .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
        .                   slice
        .               }
        .           }
        .           
        .           /// Implements substring slicing with syntax `&self[begin .. end]` or `&mut
        .           /// self[begin .. end]`.
-- line 128 ----------------------------------------
-- line 159 ----------------------------------------
        .           /// // byte 100 is outside the string
        .           /// // &s[3 .. 100];
        .           /// ```
        .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
        .           unsafe impl SliceIndex<str> for ops::Range<usize> {
        .               type Output = str;
        .               #[inline]
        .               fn get(self, slice: &str) -> Option<&Self::Output> {
  199,660 ( 0.01%)          if self.start <= self.end
        .                       && slice.is_char_boundary(self.start)
        .                       && slice.is_char_boundary(self.end)
        .                   {
        .                       // SAFETY: just checked that `start` and `end` are on a char boundary,
        .                       // and we are passing in a safe reference, so the return value will also be one.
        .                       // We also checked char boundaries, so this is valid UTF-8.
        .                       Some(unsafe { &*self.get_unchecked(slice) })
        .                   } else {
-- line 175 ----------------------------------------
-- line 190 ----------------------------------------
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
        .                   let slice = slice as *const [u8];
        .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
        .                   // which satisfies all the conditions for `add`.
        .                   let ptr = unsafe { slice.as_ptr().add(self.start) };
  132,113 ( 0.00%)          let len = self.end - self.start;
        .                   ptr::slice_from_raw_parts(ptr, len) as *const str
        .               }
        .               #[inline]
        .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
        .                   let slice = slice as *mut [u8];
        .                   // SAFETY: see comments for `get_unchecked`.
        .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
        .                   let len = self.end - self.start;
-- line 206 ----------------------------------------
-- line 315 ----------------------------------------
        .           /// # Panics
        .           ///
        .           /// Panics if `begin` does not point to the starting byte offset of
        .           /// a character (as defined by `is_char_boundary`), or if `begin > len`.
        .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
        .           unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
        .               type Output = str;
        .               #[inline]
   16,042 ( 0.00%)      fn get(self, slice: &str) -> Option<&Self::Output> {
   14,139 ( 0.00%)          if slice.is_char_boundary(self.start) {
        .                       // SAFETY: just checked that `start` is on a char boundary,
        .                       // and we are passing in a safe reference, so the return value will also be one.
    6,170 ( 0.00%)              Some(unsafe { &*self.get_unchecked(slice) })
        .                   } else {
        .                       None
        .                   }
    4,936 ( 0.00%)      }
        .               #[inline]
        .               fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {
        .                   if slice.is_char_boundary(self.start) {
        .                       // SAFETY: just checked that `start` is on a char boundary,
        .                       // and we are passing in a safe reference, so the return value will also be one.
        .                       Some(unsafe { &mut *self.get_unchecked_mut(slice) })
        .                   } else {
        .                       None
        .                   }
        .               }
        .               #[inline]
   16,042 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
    2,468 ( 0.00%)          let slice = slice as *const [u8];
        .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
        .                   // which satisfies all the conditions for `add`.
    3,702 ( 0.00%)          let ptr = unsafe { slice.as_ptr().add(self.start) };
   24,859 ( 0.00%)          let len = slice.len() - self.start;
    4,936 ( 0.00%)          ptr::slice_from_raw_parts(ptr, len) as *const str
    2,468 ( 0.00%)      }
        .               #[inline]
        .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
        .                   let slice = slice as *mut [u8];
        .                   // SAFETY: identical to `get_unchecked`.
        .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
        .                   let len = slice.len() - self.start;
        .                   ptr::slice_from_raw_parts_mut(ptr, len) as *mut str
        .               }
        .               #[inline]
   17,276 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
   12,340 ( 0.00%)          let (start, end) = (self.start, slice.len());
   12,340 ( 0.00%)          match self.get(slice) {
    4,936 ( 0.00%)              Some(s) => s,
        .                       None => super::slice_error_fail(slice, start, end),
        .                   }
    2,468 ( 0.00%)      }
        .               #[inline]
        .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
        .                   if slice.is_char_boundary(self.start) {
        .                       // SAFETY: just checked that `start` is on a char boundary,
        .                       // and we are passing in a safe reference, so the return value will also be one.
        .                       unsafe { &mut *self.get_unchecked_mut(slice) }
        .                   } else {
        .                       super::slice_error_fail(slice, self.start, slice.len())
-- line 374 ----------------------------------------

3,182,237 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   44,465 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   51,522 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  112,004 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   11,474 ( 0.00%)          i += 2
        .               }
        .           
   51,522 ( 0.00%)      if i < count {
   40,234 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  526,429 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
3,492,571 ( 0.11%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
1,073,402 ( 0.03%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  173,240 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   52,013 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   52,013 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  520,130 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  416,104 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  468,117 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  241,849 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  208,052 ( 0.01%)          self.processed += BUFFER_SIZE;
  104,026 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    9,850 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  139,270 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   51,186 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   25,950 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   14,535 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
    9,715 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    1,943 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    5,829 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    1,943 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    3,886 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   15,001 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   16,944 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   30,002 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    3,886 ( 0.00%)          let input_left = length - processed;
    1,533 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      998 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      998 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      998 ( 0.00%)              self.state.v0 ^= elem;
    1,996 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    1,943 ( 0.00%)          self.nbuf = extra_bytes_left;
    9,715 ( 0.00%)          self.processed += nbuf + processed;
   11,658 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   20,151 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   26,868 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   18,023 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   18,023 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   18,023 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   13,434 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    5,760 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   19,194 ( 0.00%)          let length = self.processed + self.nbuf;
   13,432 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    6,716 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    6,716 ( 0.00%)          state.v0 ^= b;
        .           
    6,716 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   21,568 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    8,134 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    8,134 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,885,210 ( 0.06%)          compress!(state);
2,028,410 ( 0.07%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   43,132 ( 0.00%)          compress!(state);
   43,132 ( 0.00%)          compress!(state);
   43,132 ( 0.00%)          compress!(state);
   36,417 ( 0.00%)          compress!(state);
        .               }
        .           }

  410,678 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
6,566,488 ( 0.21%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
4,924,866 ( 0.16%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   89,220 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  133,830 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,663,915 ( 0.05%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  369,436 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  738,872 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  100,419 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  425,587 ( 0.01%)          match undo {
   76,508 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
   55,902 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
   68,428 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  200,838 ( 0.01%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
  547,050 ( 0.02%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
  351,904 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
   48,897 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    1,146 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   17,241 ( 0.00%)          self.eq_relations().union(a, b);
   14,778 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
    7,556 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  107,650 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  150,710 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  107,650 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  198,852 ( 0.01%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
  298,278 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  165,710 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
   33,142 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
  298,278 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  132,568 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  231,994 ( 0.01%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    1,045 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
   88,173 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      332 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
   69,744 ( 0.00%)          self.sub_relations().find(vid)
      664 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
1,237,005 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
1,237,005 ( 0.04%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
  752,002 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  325,594 ( 0.01%)          match *t.kind() {
  192,042 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
1,045,143 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
   62,897 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
    5,225 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
    6,270 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
    6,270 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
   56,420 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
  722,721 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
   98,435 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    2,463 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    2,463 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
    9,852 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

   74,310 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 246 ----------------------------------------
        .           // having an explicit negative impl is nice for documentation purposes
        .           // and results in nicer error messages.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> !Sync for Cell<T> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Copy> Clone for Cell<T> {
        .               #[inline]
   28,036 ( 0.00%)      fn clone(&self) -> Cell<T> {
   84,108 ( 0.00%)          Cell::new(self.get())
   28,036 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Default> Default for Cell<T> {
        .               /// Creates a `Cell<T>`, with the `Default` value for T.
        .               #[inline]
        .               fn default() -> Cell<T> {
        .                   Cell::new(Default::default())
-- line 264 ----------------------------------------
-- line 328 ----------------------------------------
        .               /// ```
        .               /// use std::cell::Cell;
        .               ///
        .               /// let c = Cell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_cell_new", since = "1.24.0")]
        .               #[inline]
  389,240 ( 0.01%)      pub const fn new(value: T) -> Cell<T> {
  414,710 ( 0.01%)          Cell { value: UnsafeCell::new(value) }
  348,621 ( 0.01%)      }
        .           
        .               /// Sets the contained value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::Cell;
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// c.set(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  635,151 ( 0.02%)      pub fn set(&self, val: T) {
2,973,484 ( 0.10%)          let old = self.replace(val);
  353,636 ( 0.01%)          drop(old);
  340,764 ( 0.01%)      }
        .           
        .               /// Swaps the values of two `Cell`s.
        .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::Cell;
-- line 364 ----------------------------------------
-- line 392 ----------------------------------------
        .               /// use std::cell::Cell;
        .               ///
        .               /// let cell = Cell::new(5);
        .               /// assert_eq!(cell.get(), 5);
        .               /// assert_eq!(cell.replace(10), 5);
        .               /// assert_eq!(cell.get(), 10);
        .               /// ```
        .               #[stable(feature = "move_cell", since = "1.17.0")]
1,197,654 ( 0.04%)      pub fn replace(&self, val: T) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
2,270,404 ( 0.07%)          mem::replace(unsafe { &mut *self.value.get() }, val)
  526,060 ( 0.02%)      }
        .           
        .               /// Unwraps the value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::Cell;
        .               ///
-- line 412 ----------------------------------------
-- line 431 ----------------------------------------
        .               /// use std::cell::Cell;
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// let five = c.get();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
2,323,780 ( 0.07%)      pub fn get(&self) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
  959,133 ( 0.03%)          unsafe { *self.value.get() }
  929,512 ( 0.03%)      }
        .           
        .               /// Updates the contained value using a function and returns the new value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(cell_update)]
        .               ///
-- line 451 ----------------------------------------
-- line 548 ----------------------------------------
        .               ///
        .               /// let c = Cell::new(5);
        .               /// let five = c.take();
        .               ///
        .               /// assert_eq!(five, 5);
        .               /// assert_eq!(c.into_inner(), 0);
        .               /// ```
        .               #[stable(feature = "move_cell", since = "1.17.0")]
  114,636 ( 0.00%)      pub fn take(&self) -> T {
  407,424 ( 0.01%)          self.replace(Default::default())
  112,792 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}
        .           
        .           impl<T> Cell<[T]> {
        .               /// Returns a `&[Cell<T>]` from a `&Cell<[T]>`
        .               ///
-- line 566 ----------------------------------------
-- line 689 ----------------------------------------
        .           
        .           #[inline(always)]
        .           fn is_writing(x: BorrowFlag) -> bool {
        .               x < UNUSED
        .           }
        .           
        .           #[inline(always)]
        .           fn is_reading(x: BorrowFlag) -> bool {
  316,296 ( 0.01%)      x > UNUSED
        .           }
        .           
        .           impl<T> RefCell<T> {
        .               /// Creates a new `RefCell` containing `value`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::RefCell;
        .               ///
        .               /// let c = RefCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
        .               #[inline]
    6,132 ( 0.00%)      pub const fn new(value: T) -> RefCell<T> {
   85,978 ( 0.00%)          RefCell {
   65,352 ( 0.00%)              value: UnsafeCell::new(value),
   10,220 ( 0.00%)              borrow: Cell::new(UNUSED),
        .                       #[cfg(feature = "debug_refcell")]
        .                       borrowed_at: Cell::new(None),
        .                   }
    4,088 ( 0.00%)      }
        .           
        .               /// Consumes the `RefCell`, returning the wrapped value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::RefCell;
        .               ///
-- line 728 ----------------------------------------
-- line 731 ----------------------------------------
        .               /// let five = c.into_inner();
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
        .               #[inline]
        .               pub const fn into_inner(self) -> T {
        .                   // Since this function takes `self` (the `RefCell`) by value, the
        .                   // compiler statically verifies that it is not currently borrowed.
    3,172 ( 0.00%)          self.value.into_inner()
        .               }
        .           
        .               /// Replaces the wrapped value with a new one, returning the old value,
        .               /// without deinitializing either one.
        .               ///
        .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
        .               ///
        .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               ///
        .               /// let m = c.borrow_mut();
        .               /// let b = c.borrow(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
    4,471 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
        .                   self.try_borrow().expect("already mutably borrowed")
   13,413 ( 0.00%)      }
        .           
        .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
        .               /// borrowed.
        .               ///
        .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
        .               /// taken out at the same time.
        .               ///
        .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               /// let m = c.borrow();
        .               ///
        .               /// let b = c.borrow_mut(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
   50,591 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
   78,688 ( 0.00%)          self.try_borrow_mut().expect("already borrowed")
   82,921 ( 0.00%)      }
        .           
        .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
        .               ///
        .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
        .               /// from it exit scope. The value cannot be borrowed while this borrow is
        .               /// active.
        .               ///
        .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 966 ----------------------------------------
        .               ///     assert!(c.try_borrow_mut().is_err());
        .               /// }
        .               ///
        .               /// assert!(c.try_borrow_mut().is_ok());
        .               /// ```
        .               #[stable(feature = "try_borrow", since = "1.13.0")]
        .               #[inline]
        .               #[cfg_attr(feature = "debug_refcell", track_caller)]
   29,508 ( 0.00%)      pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
   88,524 ( 0.00%)          match BorrowRefMut::new(&self.borrow) {
   19,672 ( 0.00%)              Some(b) => {
        .                           #[cfg(feature = "debug_refcell")]
        .                           {
        .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
        .                           }
        .           
        .                           // SAFETY: `BorrowRef` guarantees unique access.
   98,382 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
        .                       }
        .                       None => Err(BorrowMutError {
        .                           // If a borrow occurred, then we must already have an outstanding borrow,
        .                           // so `borrowed_at` will be `Some`
        .                           #[cfg(feature = "debug_refcell")]
        .                           location: self.borrowed_at.get().unwrap(),
        .                       }),
        .                   }
   39,344 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the underlying data in this cell.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::RefCell;
        .               ///
-- line 1000 ----------------------------------------
-- line 1254 ----------------------------------------
        .           
        .           struct BorrowRef<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl<'b> BorrowRef<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  436,051 ( 0.01%)          let b = borrow.get().wrapping_add(1);
  261,657 ( 0.01%)          if !is_reading(b) {
        .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
        .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
        .                       //    due to Rust's reference aliasing rules
        .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
        .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
        .                       //    an additional read borrow because isize can't represent so many read borrows
        .                       //    (this can only happen if you mem::forget more than a small constant amount of
        .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
        .                       Some(BorrowRef { borrow })
        .                   }
        .               }
        .           }
        .           
        .           impl Drop for BorrowRef<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  186,397 ( 0.01%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_reading(borrow));
  369,181 ( 0.01%)          self.borrow.set(borrow - 1);
        .               }
        .           }
        .           
        .           impl Clone for BorrowRef<'_> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   // Since this Ref exists, we know the borrow flag
        .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1644 ----------------------------------------
        .           }
        .           
        .           struct BorrowRefMut<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl Drop for BorrowRefMut<'_> {
        .               #[inline]
   29,508 ( 0.00%)      fn drop(&mut self) {
3,714,586 ( 0.12%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_writing(borrow));
7,341,660 ( 0.24%)          self.borrow.set(borrow + 1);
   19,672 ( 0.00%)      }
        .           }
        .           
        .           impl<'b> BorrowRefMut<'b> {
        .               #[inline]
   29,508 ( 0.00%)      fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        .                   // mutable reference, and so there must currently be no existing
        .                   // references. Thus, while clone increments the mutable refcount, here
        .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
7,844,878 ( 0.25%)          match borrow.get() {
        .                       UNUSED => {
   29,508 ( 0.00%)                  borrow.set(UNUSED - 1);
   39,344 ( 0.00%)                  Some(BorrowRefMut { borrow })
        .                       }
        .                       _ => None,
        .                   }
   29,508 ( 0.00%)      }
        .           
        .               // Clones a `BorrowRefMut`.
        .               //
        .               // This is only valid if each `BorrowRefMut` is used to track a mutable
        .               // reference to a distinct, nonoverlapping range of the original object.
        .               // This isn't in a Clone impl so that code doesn't call this implicitly.
        .               #[inline]
        .               fn clone(&self) -> BorrowRefMut<'b> {
-- line 1681 ----------------------------------------
-- line 1710 ----------------------------------------
        .               fn deref(&self) -> &T {
        .                   self.value
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
        .               #[inline]
   19,672 ( 0.00%)      fn deref_mut(&mut self) -> &mut T {
   10,416 ( 0.00%)          self.value
   19,672 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
        .           
        .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
        .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 1728 ----------------------------------------
-- line 1863 ----------------------------------------
        .               /// use std::cell::UnsafeCell;
        .               ///
        .               /// let uc = UnsafeCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafe_cell_new", since = "1.32.0")]
        .               #[inline(always)]
        .               pub const fn new(value: T) -> UnsafeCell<T> {
  206,595 ( 0.01%)          UnsafeCell { value }
  247,796 ( 0.01%)      }
        .           
        .               /// Unwraps the value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::cell::UnsafeCell;
        .               ///
-- line 1880 ----------------------------------------
-- line 1909 ----------------------------------------
        .               /// ```
        .               #[inline(always)]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
        .               pub const fn get(&self) -> *mut T {
        .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        .                   // #[repr(transparent)]. This exploits libstd's special status, there is
        .                   // no guarantee for user code that this will work in future versions of the compiler!
2,024,559 ( 0.06%)          self as *const UnsafeCell<T> as *const T as *mut T
        .               }
        .           
        .               /// Returns a mutable reference to the underlying data.
        .               ///
        .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
        .               /// guarantees that we possess the only reference.
        .               ///
        .               /// # Examples
-- line 1925 ----------------------------------------

6,299,563 ( 0.20%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               PushRegionObligation,
        .           }
        .           
        .           macro_rules! impl_from {
        .               ($($ctor: ident ($ty: ty),)*) => {
        .                   $(
        .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
        .                       fn from(x: $ty) -> Self {
    3,533 ( 0.00%)                  UndoLog::$ctor(x.into())
        .                       }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           // Upcast from a single kind of "undoable action" to the general enum
        .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
        .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
        .           
        .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
        .               ProjectionCache(traits::UndoLog<'tcx>),
        .           }
        .           
        .           /// The Rollback trait defines how to rollback a particular action.
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
  492,849 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  821,415 ( 0.03%)          match undo {
1,004,190 ( 0.03%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      714 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    1,028 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
        .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
        .                       UndoLog::RegionConstraintCollector(undo) => {
  236,698 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
        .                       }
        .                       UndoLog::RegionUnificationTable(undo) => {
   56,444 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
        .                       }
        .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
        .                       UndoLog::PushRegionObligation => {
        .                           self.region_obligations.pop();
        .                       }
        .                   }
  657,132 ( 0.02%)      }
        .           }
        .           
        .           /// The combined undo log for all the various unification tables. For each change to the storage
        .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
        .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
        .               logs: Vec<UndoLog<'tcx>>,
        .               num_open_snapshots: usize,
        .           }
        .           
        .           impl Default for InferCtxtUndoLogs<'_> {
        .               fn default() -> Self {
   32,598 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
        .               }
        .           }
        .           
        .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
        .           /// action that is convertable into an UndoLog (per the From impls above).
        .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
        .           where
        .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
        .           {
        .               #[inline]
        .               fn num_open_snapshots(&self) -> usize {
        .                   self.num_open_snapshots
        .               }
        .           
        .               #[inline]
        .               fn push(&mut self, undo: T) {
  117,841 ( 0.00%)          if self.in_snapshot() {
   28,264 ( 0.00%)              self.logs.push(undo.into())
        .                   }
        .               }
        .           
        .               fn clear(&mut self) {
        .                   self.logs.clear();
        .                   self.num_open_snapshots = 0;
        .               }
        .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
        .               {
        .                   if self.in_snapshot() {
        .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  360,024 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("rollback_to({})", snapshot.undo_len);
        .                   self.undo_log.assert_open_snapshot(&snapshot);
        .           
  612,857 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
        .                       let undo = self.undo_log.logs.pop().unwrap();
1,971,396 ( 0.06%)              self.reverse(undo);
        .                   }
        .           
  143,287 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   50,024 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  205,024 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
  420,028 ( 0.01%)      }
        .           
        .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("commit({})", snapshot.undo_len);
        .           
  251,994 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   64,384 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  284,186 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
        .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
  576,008 ( 0.02%)          self.num_open_snapshots += 1;
        .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
        .               }
        .           
        .               pub(crate) fn region_constraints_in_snapshot(
        .                   &self,
        .                   s: &Snapshot<'tcx>,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
   23,319 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               pub(crate) fn region_constraints(
        .                   &self,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
      205 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
        .                   // Failures here may indicate a failure to follow a stack discipline.
  180,012 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
  180,012 ( 0.01%)          assert!(self.num_open_snapshots > 0);
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
        .               type Output = UndoLog<'tcx>;
        .           
        .               fn index(&self, key: usize) -> &Self::Output {
        .                   &self.logs[key]
-- line 204 ----------------------------------------

  272,852 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                 

-- line 4 ----------------------------------------
        .           
        .           use super::Utf8Error;
        .           
        .           /// Returns the initial codepoint accumulator for the first byte.
        .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
        .           /// for width 3, and 3 bits for width 4.
        .           #[inline]
        .           const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
      114 ( 0.00%)      (byte & (0x7F >> width)) as u32
        .           }
        .           
        .           /// Returns the value of `ch` updated with continuation byte `byte`.
        .           #[inline]
        .           const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
      342 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
        .           }
        .           
        .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
        .           /// bits `10`).
        .           #[inline]
        .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
        .               (byte as i8) < -64
        .           }
-- line 26 ----------------------------------------
-- line 28 ----------------------------------------
        .           /// Reads the next code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[inline]
  477,609 ( 0.02%)  pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
        .               // Decode UTF-8
2,619,037 ( 0.08%)      let x = *bytes.next()?;
1,054,624 ( 0.03%)      if x < 128 {
  455,316 ( 0.01%)          return Some(x as u32);
        .               }
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [[[x y] z] w]
        .               // NOTE: Performance is sensitive to the exact formulation here
        .               let init = utf8_first_byte(x, 2);
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
        .               let y = unsafe { *bytes.next().unwrap_unchecked() };
        .               let mut ch = utf8_acc_cont_byte(init, y);
      114 ( 0.00%)      if x >= 0xE0 {
        .                   // [[x y z] w] case
        .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        .                   // SAFETY: `bytes` produces an UTF-8-like string,
        .                   // so the iterator must produce a value here.
        .                   let z = unsafe { *bytes.next().unwrap_unchecked() };
        .                   let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
        .                   ch = init << 12 | y_z;
      114 ( 0.00%)          if x >= 0xF0 {
        .                       // [x y z w] case
        .                       // use only the lower 3 bits of `init`
        .                       // SAFETY: `bytes` produces an UTF-8-like string,
        .                       // so the iterator must produce a value here.
        .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
        .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        .                   }
        .               }
        .           
        .               Some(ch)
  796,015 ( 0.03%)  }
        .           
        .           /// Reads the last code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[inline]
   22,524 ( 0.00%)  pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
        .           where
        .               I: DoubleEndedIterator<Item = &'a u8>,
        .           {
        .               // Decode UTF-8
   90,096 ( 0.00%)      let w = match *bytes.next_back()? {
   67,021 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
        .                   back_byte => back_byte,
        .               };
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [x [y [z w]]]
        .               let mut ch;
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 105 ----------------------------------------
        .                       ch = utf8_first_byte(x, 4);
        .                       ch = utf8_acc_cont_byte(ch, y);
        .                   }
        .                   ch = utf8_acc_cont_byte(ch, z);
        .               }
        .               ch = utf8_acc_cont_byte(ch, w);
        .           
        .               Some(ch)
   37,540 ( 0.00%)  }
        .           
        .           // use truncation to fit u64 into usize
        .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
        .           
        .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
        .           #[inline]
        .           const fn contains_nonascii(x: usize) -> bool {
    5,041 ( 0.00%)      (x & NONASCII_MASK) != 0
        .           }
        .           
        .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
        .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
        .           #[inline(always)]
        .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
        .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
        .               let mut index = 0;
        .               let len = v.len();
        .           
        .               let usize_bytes = mem::size_of::<usize>();
        .               let ascii_block_size = 2 * usize_bytes;
  273,450 ( 0.01%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
        .               let align = v.as_ptr().align_offset(usize_bytes);
        .           
  967,252 ( 0.03%)      while index < len {
        .                   let old_offset = index;
        .                   macro_rules! err {
        .                       ($error_len: expr) => {
        .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
        .                       };
        .                   }
        .           
        .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
        .                           // we needed data, but there was none: error!
        .                           if index >= len {
        .                               err!(None)
        .                           }
        .                           v[index]
        .                       }};
        .                   }
        .           
  411,999 ( 0.01%)          let first = v[index];
  823,998 ( 0.03%)          if first >= 128 {
        .                       let w = utf8_char_width(first);
        .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
        .                       //        first  C2 80        last DF BF
        .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
        .                       //        first  E0 A0 80     last EF BF BF
        .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
        .                       //               ED A0 80 to       ED BF BF
        .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
        .                       //
        .                       // https://tools.ietf.org/html/rfc3629
        .                       // UTF8-1      = %x00-7F
        .                       // UTF8-2      = %xC2-DF UTF8-tail
        .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
        .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
        .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
        .                       //               %xF4 %x80-8F 2( UTF8-tail )
       36 ( 0.00%)              match w {
        .                           2 => {
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(1))
        .                               }
        .                           }
        .                           3 => {
       72 ( 0.00%)                      match (first, next!()) {
        .                                   (0xE0, 0xA0..=0xBF)
       63 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
        .                                   | (0xED, 0x80..=0x9F)
        .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
        .                                   _ => err!(Some(1)),
        .                               }
       45 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(2))
        .                               }
        .                           }
        .                           4 => {
        .                               match (first, next!()) {
        .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
        .                                   _ => err!(Some(1)),
        .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
        .                                   err!(Some(2))
        .                               }
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(3))
        .                               }
        .                           }
        .                           _ => err!(Some(1)),
        .                       }
       27 ( 0.00%)              index += 1;
        .                   } else {
        .                       // Ascii case, try to skip forward quickly.
        .                       // When the pointer is aligned, read 2 words of data per iteration
        .                       // until we find a word containing a non-ascii byte.
1,255,513 ( 0.04%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
        .                           let ptr = v.as_ptr();
   49,158 ( 0.00%)                  while index < blocks_end {
        .                               // SAFETY: since `align - index` and `ascii_block_size` are
        .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
        .                               // always aligned with a `usize` so it's safe to dereference
        .                               // both `block` and `block.offset(1)`.
        .                               unsafe {
        .                                   let block = ptr.add(index) as *const usize;
        .                                   // break if there is a nonascii byte
    5,041 ( 0.00%)                          let zu = contains_nonascii(*block);
        .                                   let zv = contains_nonascii(*block.offset(1));
   10,082 ( 0.00%)                          if zu || zv {
        .                                       break;
        .                                   }
        .                               }
   10,072 ( 0.00%)                      index += ascii_block_size;
        .                           }
        .                           // step from the point where the wordwise loop stopped
  625,979 ( 0.02%)                  while index < len && v[index] < 128 {
  132,076 ( 0.00%)                      index += 1;
        .                           }
        .                       } else {
  392,447 ( 0.01%)                  index += 1;
        .                       }
        .                   }
        .               }
        .           
        .               Ok(())
        .           }
        .           
        .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
        .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
        .           ];
        .           
        .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[must_use]
        .           #[inline]
        .           pub const fn utf8_char_width(b: u8) -> usize {
       18 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
        .           }
        .           
        .           /// Mask of the value bits of a continuation byte.
        .           const CONT_MASK: u8 = 0b0011_1111;
        .           
        .           // truncate `&str` to length at most equal to `max`
        .           // return `true` if it were truncated, and the new str.
        .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

1,687,555 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                 

-- line 504 ----------------------------------------
        .           use crate::panicking::{panic, panic_str};
        .           use crate::pin::Pin;
        .           use crate::{
        .               convert, hint, mem,
        .               ops::{self, ControlFlow, Deref, DerefMut},
        .           };
        .           
        .           /// The `Option` type. See [the module level documentation](self) for more.
1,769,166 ( 0.06%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[rustc_diagnostic_item = "Option"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Option<T> {
        .               /// No value.
        .               #[lang = "None"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               None,
        .               /// Some value of type `T`.
        .               #[lang = "Some"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  105,960 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Type implementation
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           impl<T> Option<T> {
        .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 542 ----------------------------------------
        .               ///
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_some(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
  116,960 ( 0.00%)      pub const fn is_some(&self) -> bool {
2,051,869 ( 0.07%)          matches!(*self, Some(_))
  292,400 ( 0.01%)      }
        .           
        .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
        .               ///
-- line 560 ----------------------------------------
-- line 585 ----------------------------------------
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_none(), true);
        .               /// ```
        .               #[must_use = "if you intended to assert that this doesn't have a value, consider \
        .                             `.and_then(|_| panic!(\"`Option` had a value when expected `None`\"))` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
   57,704 ( 0.00%)      pub const fn is_none(&self) -> bool {
   86,556 ( 0.00%)          !self.is_some()
  115,408 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Adapter for working with references
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Converts from `&Option<T>` to `Option<&T>`.
        .               ///
        .               /// # Examples
-- line 603 ----------------------------------------
-- line 615 ----------------------------------------
        .               /// // First, cast `Option<String>` to `Option<&String>` with `as_ref`,
        .               /// // then consume *that* with `map`, leaving `text` on the stack.
        .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
        .               /// println!("still can print text: {:?}", text);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   28,143 ( 0.00%)      pub const fn as_ref(&self) -> Option<&T> {
5,788,212 ( 0.19%)          match *self {
   18,292 ( 0.00%)              Some(ref x) => Some(x),
      586 ( 0.00%)              None => None,
        .                   }
   28,143 ( 0.00%)      }
        .           
        .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut x = Some(2);
        .               /// match x.as_mut() {
-- line 636 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///     Some(v) => *v = 42,
        .               ///     None => {},
        .               /// }
        .               /// assert_eq!(x, Some(42));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
    5,439 ( 0.00%)      pub const fn as_mut(&mut self) -> Option<&mut T> {
3,512,555 ( 0.11%)          match *self {
    3,328 ( 0.00%)              Some(ref mut x) => Some(x),
      298 ( 0.00%)              None => None,
        .                   }
    5,439 ( 0.00%)      }
        .           
        .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
        .               ///
        .               /// [&]: reference "shared reference"
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "pin", since = "1.33.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
-- line 658 ----------------------------------------
-- line 705 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn expect(self, msg: &str) -> T {
1,149,539 ( 0.04%)          match self {
  320,489 ( 0.01%)              Some(val) => val,
        .                       None => expect_failed(msg),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 741 ----------------------------------------
        .               /// ```should_panic
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.unwrap(), "air"); // fails
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
  113,381 ( 0.00%)      pub const fn unwrap(self) -> T {
5,319,678 ( 0.17%)          match self {
  638,687 ( 0.02%)              Some(val) => val,
        .                       None => panic("called `Option::unwrap()` on a `None` value"),
        .                   }
   75,430 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
        .               /// which is lazily evaluated.
        .               ///
        .               /// [`unwrap_or_else`]: Option::unwrap_or_else
-- line 762 ----------------------------------------
-- line 765 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(Some("car").unwrap_or("bike"), "car");
        .               /// assert_eq!(None.unwrap_or("bike"), "bike");
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    5,619 ( 0.00%)      pub const fn unwrap_or(self, default: T) -> T
        .               where
        .                   T: ~const Drop,
        .               {
  669,582 ( 0.02%)          match self {
    3,834 ( 0.00%)              Some(x) => x,
    2,700 ( 0.00%)              None => default,
        .                   }
    8,610 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or computes it from a closure.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 10;
        .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
        .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      321 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
  668,619 ( 0.02%)          match self {
   81,125 ( 0.00%)              Some(x) => x,
    5,260 ( 0.00%)              None => f(),
        .                   }
      532 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a default.
        .               ///
        .               /// Consumes the `self` argument then, if [`Some`], returns the contained
        .               /// value, otherwise if [`None`], returns the [default value] for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or_default(self) -> T
        .               where
        .                   T: ~const Default,
        .               {
    6,171 ( 0.00%)          match self {
    6,547 ( 0.00%)              Some(x) => x,
        .                       None => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value,
        .               /// without checking that the value is not [`None`].
        .               ///
        .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
        .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
        .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
        .               ///
        .               /// assert_eq!(maybe_some_len, Some(13));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  760,688 ( 0.02%)      pub const fn map<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
4,524,379 ( 0.15%)          match self {
3,933,249 ( 0.13%)              Some(x) => Some(f(x)),
  251,670 ( 0.01%)              None => None,
        .                   }
1,363,675 ( 0.04%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 917 ----------------------------------------
-- line 954 ----------------------------------------
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
   41,890 ( 0.00%)      pub const fn map_or<U, F>(self, default: U, f: F) -> U
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .                   U: ~const Drop,
        .               {
  715,576 ( 0.02%)          match self {
   58,415 ( 0.00%)              Some(t) => f(t),
   69,659 ( 0.00%)              None => default,
        .                   }
   45,546 ( 0.00%)      }
        .           
        .               /// Computes a default function result (if none), or
        .               /// applies a different function to the contained value (if any).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 21;
-- line 980 ----------------------------------------
-- line 990 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
        .               where
        .                   D: ~const FnOnce() -> U,
        .                   D: ~const Drop,
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
   12,745 ( 0.00%)          match self {
      704 ( 0.00%)              Some(t) => f(t),
        .                       None => default(),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
        .               ///
        .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1020 ----------------------------------------
        .               /// assert_eq!(x.ok_or(0), Ok("foo"));
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.ok_or(0), Err(0));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  600,630 ( 0.02%)      pub const fn ok_or<E>(self, err: E) -> Result<T, E>
        .               where
        .                   E: ~const Drop,
        .               {
1,775,117 ( 0.06%)          match self {
  537,492 ( 0.02%)              Some(v) => Ok(v),
    1,094 ( 0.00%)              None => Err(err),
        .                   }
  923,006 ( 0.03%)      }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
        .               ///
        .               /// [`Ok(v)`]: Ok
        .               /// [`Err(err())`]: Err
        .               /// [`Some(v)`]: Some
        .               ///
-- line 1044 ----------------------------------------
-- line 1049 ----------------------------------------
        .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    6,354 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
        .               where
        .                   F: ~const FnOnce() -> E,
        .                   F: ~const Drop,
        .               {
   57,403 ( 0.00%)          match self {
   42,120 ( 0.00%)              Some(v) => Ok(v),
   25,675 ( 0.00%)              None => Err(err()),
        .                   }
    5,295 ( 0.00%)      }
        .           
        .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
        .               ///
        .               /// Leaves the original Option in-place, creating a new one with a reference
        .               /// to the original one, additionally coercing the contents via [`Deref`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
        .               /// assert_eq!(x.as_deref(), None);
        .               /// ```
        .               #[stable(feature = "option_deref", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn as_deref(&self) -> Option<&T::Target>
        .               where
        .                   T: ~const Deref,
        .               {
   15,353 ( 0.00%)          match self.as_ref() {
        .                       Some(t) => Some(t.deref()),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
        .               ///
        .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
        .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
        .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
        .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
        .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
    6,889 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> Option<U>,
        .                   F: ~const Drop,
        .               {
  117,936 ( 0.00%)          match self {
   30,307 ( 0.00%)              Some(x) => f(x),
       42 ( 0.00%)              None => None,
        .                   }
   27,904 ( 0.00%)      }
        .           
        .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
        .               /// with the wrapped value and returns:
        .               ///
        .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
        .               ///   value), and
        .               /// - [`None`] if `predicate` returns `false`.
        .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
        .               #[stable(feature = "option_filter", since = "1.27.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn filter<P>(self, predicate: P) -> Self
        .               where
        .                   T: ~const Drop,
        .                   P: ~const FnOnce(&T) -> bool,
        .                   P: ~const Drop,
        .               {
    2,735 ( 0.00%)          if let Some(x) = self {
    2,411 ( 0.00%)              if predicate(&x) {
        .                           return Some(x);
        .                       }
        .                   }
        .                   None
        3 ( 0.00%)      }
        .           
        .               /// Returns the option if it contains a value, otherwise returns `optb`.
        .               ///
        .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
        .               /// result of a function call, it is recommended to use [`or_else`], which is
        .               /// lazily evaluated.
        .               ///
        .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1299 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or(self, optb: Option<T>) -> Option<T>
        .               where
        .                   T: ~const Drop,
        .               {
    5,884 ( 0.00%)          match self {
      952 ( 0.00%)              Some(x) => Some(x),
        .                       None => optb,
        .                   }
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise calls `f` and
        .               /// returns the result.
        .               ///
        .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1321 ----------------------------------------
        .               ///
        .               /// assert_eq!(Some("barbarians").or_else(vikings), Some("barbarians"));
        .               /// assert_eq!(None.or_else(vikings), Some("vikings"));
        .               /// assert_eq!(None.or_else(nobody), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  137,288 ( 0.00%)      pub const fn or_else<F>(self, f: F) -> Option<T>
        .               where
        .                   F: ~const FnOnce() -> Option<T>,
        .                   F: ~const Drop,
        .               {
  198,552 ( 0.01%)          match self {
   74,501 ( 0.00%)              Some(x) => Some(x),
   77,995 ( 0.00%)              None => f(),
        .                   }
  117,444 ( 0.00%)      }
        .           
        .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = Some(2);
        .               /// let y: Option<u32> = None;
-- line 1346 ----------------------------------------
-- line 1431 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
        .               where
        .                   T: ~const Drop,
        .               {
   50,229 ( 0.00%)          if let None = *self {
  117,097 ( 0.00%)              *self = Some(value);
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
1,024,118 ( 0.03%)          if let None = *self {
        .                       // the compiler isn't smart enough to know that we are not dropping a `T`
        .                       // here and wants us to ensure `T` can be dropped at compile time.
       18 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1532 ----------------------------------------
        .               /// let mut x: Option<u32> = None;
        .               /// let y = x.take();
        .               /// assert_eq!(x, None);
        .               /// assert_eq!(y, None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
  305,790 ( 0.01%)      pub const fn take(&mut self) -> Option<T> {
        .                   // FIXME replace `mem::replace` by `mem::take` when the latter is const ready
  324,444 ( 0.01%)          mem::replace(self, None)
  192,746 ( 0.01%)      }
        .           
        .               /// Replaces the actual value in the option by the value given in parameter,
        .               /// returning the old value if present,
        .               /// leaving a [`Some`] in its place without deinitializing either one.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1551 ----------------------------------------
-- line 1558 ----------------------------------------
        .               /// let old = x.replace(3);
        .               /// assert_eq!(x, Some(3));
        .               /// assert_eq!(old, None);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               #[stable(feature = "option_replace", since = "1.31.0")]
        .               pub const fn replace(&mut self, value: T) -> Option<T> {
    2,732 ( 0.00%)          mem::replace(self, Some(value))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] value containing the given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
        .               #[stable(feature = "copied", since = "1.35.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn copied(self) -> Option<T>
        .               where
        .                   T: Copy,
        .               {
        .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        .                   // ready yet, should be reverted when possible to avoid code repetition
   40,878 ( 0.00%)          match self {
  634,953 ( 0.02%)              Some(&v) => Some(v),
    3,329 ( 0.00%)              None => None,
        .                   }
       46 ( 0.00%)      }
        .           
        .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
        .               /// let opt_x = Some(&x);
        .               /// assert_eq!(opt_x, Some(&12));
        .               /// let cloned = opt_x.cloned();
        .               /// assert_eq!(cloned, Some(12));
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
   16,407 ( 0.00%)      pub const fn cloned(self) -> Option<T>
        .               where
        .                   T: ~const Clone,
        .               {
  136,785 ( 0.00%)          match self {
  234,836 ( 0.01%)              Some(t) => Some(t.clone()),
   10,432 ( 0.00%)              None => None,
        .                   }
   37,903 ( 0.00%)      }
        .           }
        .           
        .           impl<T> Option<&mut T> {
        .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1757 ----------------------------------------
-- line 1842 ----------------------------------------
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone> Clone for Option<T> {
        .               #[inline]
   66,353 ( 0.00%)      fn clone(&self) -> Self {
1,974,370 ( 0.06%)          match self {
  147,884 ( 0.00%)              Some(x) => Some(x.clone()),
    3,540 ( 0.00%)              None => None,
        .                   }
  566,881 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Some(to), Some(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
        .               }
-- line 1863 ----------------------------------------
-- line 1870 ----------------------------------------
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let opt: Option<u32> = Option::default();
        .               /// assert!(opt.is_none());
        .               /// ```
        .               #[inline]
   20,145 ( 0.00%)      fn default() -> Option<T> {
   20,145 ( 0.00%)          None
   60,435 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> IntoIterator for Option<T> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T>;
        .           
        .               /// Returns a consuming iterator over the possibly contained value.
-- line 1888 ----------------------------------------
-- line 1894 ----------------------------------------
        .               /// let v: Vec<&str> = x.into_iter().collect();
        .               /// assert_eq!(v, ["string"]);
        .               ///
        .               /// let x = None;
        .               /// let v: Vec<&str> = x.into_iter().collect();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
  131,404 ( 0.00%)      fn into_iter(self) -> IntoIter<T> {
  425,586 ( 0.01%)          IntoIter { inner: Item { opt: self } }
  107,377 ( 0.00%)      }
        .           }
        .           
        .           #[stable(since = "1.4.0", feature = "option_iter")]
        .           impl<'a, T> IntoIterator for &'a Option<T> {
        .               type Item = &'a T;
        .               type IntoIter = Iter<'a, T>;
        .           
        .               fn into_iter(self) -> Iter<'a, T> {
-- line 1912 ----------------------------------------
-- line 2000 ----------------------------------------
        .           struct Item<A> {
        .               opt: Option<A>,
        .           }
        .           
        .           impl<A> Iterator for Item<A> {
        .               type Item = A;
        .           
        .               #[inline]
  302,330 ( 0.01%)      fn next(&mut self) -> Option<A> {
  137,638 ( 0.00%)          self.opt.take()
  189,520 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
   48,118 ( 0.00%)          match self.opt {
        .                       Some(_) => (1, Some(1)),
        .                       None => (0, Some(0)),
        .                   }
        .               }
        .           }
        .           
        .           impl<A> DoubleEndedIterator for Item<A> {
        .               #[inline]
-- line 2022 ----------------------------------------
-- line 2131 ----------------------------------------
        .               inner: Item<A>,
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A> Iterator for IntoIter<A> {
        .               type Item = A;
        .           
        .               #[inline]
  302,330 ( 0.01%)      fn next(&mut self) -> Option<A> {
  137,638 ( 0.00%)          self.inner.next()
  189,520 ( 0.01%)      }
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       94 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A> {
        .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::Try for Option<T> {
        .               type Output = T;
        .               type Residual = Option<convert::Infallible>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
        .                   Some(output)
    3,415 ( 0.00%)      }
        .           
        .               #[inline]
  746,026 ( 0.02%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
3,058,466 ( 0.10%)          match self {
1,327,087 ( 0.04%)              Some(v) => ControlFlow::Continue(v),
   35,168 ( 0.00%)              None => ControlFlow::Break(None),
        .                   }
1,050,126 ( 0.03%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::FromResidual for Option<T> {
        .               #[inline]
   20,059 ( 0.00%)      fn from_residual(residual: Option<convert::Infallible>) -> Self {
        .                   match residual {
   97,099 ( 0.00%)              None => None,
        .                   }
   65,386 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
        .               type TryType = Option<T>;
        .           }
        .           
        .           impl<T> Option<Option<T>> {
-- line 2276 ----------------------------------------

4,952,844 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .               type Env;
        .           }
        .           
        .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
        .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
        .           
        .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
        .               fn from(f: &'a mut F) -> Self {
1,578,486 ( 0.05%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
        .                       (*(env as *mut _ as *mut F))(arg)
2,104,648 ( 0.07%)          }
        .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
        .               }
        .           }
        .           
        .           impl<'a, A, R> Closure<'a, A, R> {
        .               pub fn call(&mut self, arg: A) -> R {
8,418,592 ( 0.27%)          unsafe { (self.call)(self.env, arg) }
        .               }
        .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs
--------------------------------------------------------------------------------
Ir                  

-- line 123 ----------------------------------------
         .                   // `cap: 0` means "unallocated". zero-sized types are ignored.
         .                   Self { ptr: Unique::dangling(), cap: 0, alloc }
         .               }
         .           
         .               /// Like `with_capacity`, but parameterized over the choice of
         .               /// allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
     3,364 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    11,816 ( 0.00%)          Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
     3,364 ( 0.00%)      }
         .           
         .               /// Like `with_capacity_zeroed`, but parameterized over the choice
         .               /// of allocator for the returned `RawVec`.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
         .                   Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
         .               }
-- line 141 ----------------------------------------
-- line 147 ----------------------------------------
         .               ///
         .               /// # Safety
         .               ///
         .               /// * `len` must be greater than or equal to the most recently requested capacity, and
         .               /// * `len` must be less than or equal to `self.capacity()`.
         .               ///
         .               /// Note, that the requested capacity and `self.capacity()` could differ, as
         .               /// an allocator could overallocate and return a greater memory block than requested.
    12,604 ( 0.00%)      pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>], A> {
         .                   // Sanity-check one half of the safety requirement (we cannot check the other half).
     5,030 ( 0.00%)          debug_assert!(
         .                       len <= self.capacity(),
         .                       "`len` must be smaller than or equal to `self.capacity()`"
         .                   );
         .           
    22,635 ( 0.00%)          let me = ManuallyDrop::new(self);
         .                   unsafe {
    35,210 ( 0.00%)              let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
    22,635 ( 0.00%)              Box::from_raw_in(slice, ptr::read(&me.alloc))
         .                   }
     5,059 ( 0.00%)      }
         .           
         .               #[cfg(not(no_global_oom_handling))]
    10,176 ( 0.00%)      fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
    10,092 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       Self::new_in(alloc)
         .                   } else {
         .                       // We avoid `unwrap_or_else` here because it bloats the amount of
         .                       // LLVM IR generated.
    20,184 ( 0.00%)              let layout = match Layout::array::<T>(capacity) {
    11,774 ( 0.00%)                  Ok(layout) => layout,
         .                           Err(_) => capacity_overflow(),
         .                       };
    13,456 ( 0.00%)              match alloc_guard(layout.size()) {
         .                           Ok(_) => {}
         .                           Err(_) => capacity_overflow(),
         .                       }
     5,088 ( 0.00%)              let result = match init {
    16,820 ( 0.00%)                  AllocInit::Uninitialized => alloc.allocate(layout),
         .                           AllocInit::Zeroed => alloc.allocate_zeroed(layout),
         .                       };
     8,410 ( 0.00%)              let ptr = match result {
    10,092 ( 0.00%)                  Ok(ptr) => ptr,
         .                           Err(_) => handle_alloc_error(layout),
         .                       };
         .           
         .                       // Allocators currently return a `NonNull<[u8]>` whose length
         .                       // matches the size requested. If that ever changes, the capacity
         .                       // here should change to `ptr.len() / mem::size_of::<T>()`.
     3,364 ( 0.00%)              Self {
    20,184 ( 0.00%)                  ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
         .                           cap: capacity,
     1,682 ( 0.00%)                  alloc,
         .                       }
         .                   }
     6,833 ( 0.00%)      }
         .           
         .               /// Reconstitutes a `RawVec` from a pointer, capacity, and allocator.
         .               ///
         .               /// # Safety
         .               ///
         .               /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given
         .               /// `capacity`.
         .               /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit
         .               /// systems). ZST vectors may have a capacity up to `usize::MAX`.
         .               /// If the `ptr` and `capacity` come from a `RawVec` created via `alloc`, then this is
         .               /// guaranteed.
         .               #[inline]
    60,944 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
    91,416 ( 0.00%)          Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc }
    60,944 ( 0.00%)      }
         .           
         .               /// Gets a raw pointer to the start of the allocation. Note that this is
         .               /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must
         .               /// be careful.
         .               #[inline]
   684,696 ( 0.02%)      pub fn ptr(&self) -> *mut T {
 1,027,044 ( 0.03%)          self.ptr.as_ptr()
   684,696 ( 0.02%)      }
         .           
         .               /// Gets the capacity of the allocation.
         .               ///
         .               /// This will always be `usize::MAX` if `T` is zero-sized.
         .               #[inline(always)]
         .               pub fn capacity(&self) -> usize {
   497,875 ( 0.02%)          if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
   199,160 ( 0.01%)      }
         .           
         .               /// Returns a shared reference to the allocator backing this `RawVec`.
    22,935 ( 0.00%)      pub fn allocator(&self) -> &A {
         .                   &self.alloc
    15,290 ( 0.00%)      }
         .           
   879,495 ( 0.03%)      fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
 8,719,283 ( 0.28%)          if mem::size_of::<T>() == 0 || self.cap == 0 {
   439,786 ( 0.01%)              None
         .                   } else {
         .                       // We have an allocated chunk of memory, so we can bypass runtime
         .                       // checks to get our current layout.
         .                       unsafe {
   242,260 ( 0.01%)                  let align = mem::align_of::<T>();
 3,203,966 ( 0.10%)                  let size = mem::size_of::<T>() * self.cap;
   847,910 ( 0.03%)                  let layout = Layout::from_size_align_unchecked(size, align);
 2,009,200 ( 0.06%)                  Some((self.ptr.cast().into(), layout))
         .                       }
         .                   }
   351,798 ( 0.01%)      }
         .           
         .               /// Ensures that the buffer contains at least enough space to hold `len +
         .               /// additional` elements. If it doesn't already have enough capacity, will
         .               /// reallocate enough space plus comfortable slack space to get amortized
         .               /// *O*(1) behavior. Will limit this behavior if it would needlessly cause
         .               /// itself to panic.
         .               ///
         .               /// If `len` exceeds `self.capacity()`, this may fail to actually allocate
-- line 261 ----------------------------------------
-- line 268 ----------------------------------------
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
   164,647 ( 0.01%)      pub fn reserve(&mut self, len: usize, additional: usize) {
         .                   // Callers expect this function to be very cheap when there is already sufficient capacity.
         .                   // Therefore, we move all the resizing and error-handling logic from grow_amortized and
         .                   // handle_reserve behind a call, while making sure that this function is likely to be
         .                   // inlined as just a comparison and a call if the comparison fails.
         .                   #[cold]
   974,458 ( 0.03%)          fn do_reserve_and_handle<T, A: Allocator>(
         .                       slf: &mut RawVec<T, A>,
         .                       len: usize,
         .                       additional: usize,
         .                   ) {
    81,402 ( 0.00%)              handle_reserve(slf.grow_amortized(len, additional));
 1,125,042 ( 0.04%)          }
         .           
   893,982 ( 0.03%)          if self.needs_to_grow(len, additional) {
 1,015,213 ( 0.03%)              do_reserve_and_handle(self, len, additional);
         .                   }
    47,042 ( 0.00%)      }
         .           
         .               /// A specialized version of `reserve()` used only by the hot and
         .               /// oft-instantiated `Vec::push()`, which does its own capacity check.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline(never)]
   894,904 ( 0.03%)      pub fn reserve_for_push(&mut self, len: usize) {
    84,370 ( 0.00%)          handle_reserve(self.grow_amortized(len, 1));
 1,028,731 ( 0.03%)      }
         .           
         .               /// The same as `reserve`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if self.needs_to_grow(len, additional) {
         .                       self.grow_amortized(len, additional)
         .                   } else {
         .                       Ok(())
         .                   }
-- line 309 ----------------------------------------
-- line 322 ----------------------------------------
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
    31,910 ( 0.00%)      pub fn reserve_exact(&mut self, len: usize, additional: usize) {
         .                   handle_reserve(self.try_reserve_exact(len, additional));
    31,910 ( 0.00%)      }
         .           
         .               /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.
         .               pub fn try_reserve_exact(
         .                   &mut self,
         .                   len: usize,
         .                   additional: usize,
         .               ) -> Result<(), TryReserveError> {
    12,999 ( 0.00%)          if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }
         .               }
         .           
         .               /// Shrinks the buffer down to the specified capacity. If the given amount
         .               /// is 0, actually completely deallocates.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the given amount is *larger* than the current capacity.
         .               ///
         .               /// # Aborts
         .               ///
         .               /// Aborts on OOM.
         .               #[cfg(not(no_global_oom_handling))]
    15,495 ( 0.00%)      pub fn shrink_to_fit(&mut self, cap: usize) {
     7,272 ( 0.00%)          handle_reserve(self.shrink(cap));
    11,322 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator> RawVec<T, A> {
         .               /// Returns if the buffer needs to grow to fulfill the needed extra capacity.
         .               /// Mainly used to make inlining reserve-calls possible without inlining `grow`.
   188,168 ( 0.01%)      fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
 1,428,458 ( 0.05%)          additional > self.capacity().wrapping_sub(len)
    94,084 ( 0.00%)      }
         .           
   497,874 ( 0.02%)      fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
         .                   // Allocators currently return a `NonNull<[u8]>` whose length matches
         .                   // the size requested. If that ever changes, the capacity here should
         .                   // change to `ptr.len() / mem::size_of::<T>()`.
   733,141 ( 0.02%)          self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
   503,976 ( 0.02%)          self.cap = cap;
    76,596 ( 0.00%)      }
         .           
         .               // This method is usually instantiated many times. So we want it to be as
         .               // small as possible, to improve compile times. But we also want as much of
         .               // its contents to be statically computable as possible, to make the
         .               // generated code run faster. Therefore, this method is carefully written
         .               // so that all of the code that depends on `T` is within it, while as much
         .               // of the code that doesn't depend on `T` as possible is in functions that
         .               // are non-generic over `T`.
   332,058 ( 0.01%)      fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   // This is ensured by the calling contexts.
         .                   debug_assert!(additional > 0);
         .           
   109,440 ( 0.00%)          if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when `elem_size` is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   // Nothing we can really do about these checks, sadly.
   656,640 ( 0.02%)          let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .           
         .                   // This guarantees exponential growth. The doubling cannot overflow
         .                   // because `cap <= isize::MAX` and the type of `cap` is `usize`.
 2,270,404 ( 0.07%)          let cap = cmp::max(self.cap * 2, required_cap);
   145,920 ( 0.00%)          let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
         .           
   182,400 ( 0.01%)          let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
 2,005,125 ( 0.06%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
    72,960 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
    36,480 ( 0.00%)          Ok(())
   113,178 ( 0.00%)      }
         .           
         .               // The constraints on this method are much the same as those on
         .               // `grow_amortized`, but this method is usually instantiated less often so
         .               // it's less critical.
         .               fn grow_exact(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
         .                   if mem::size_of::<T>() == 0 {
         .                       // Since we return a capacity of `usize::MAX` when the type size is
         .                       // 0, getting to here necessarily means the `RawVec` is overfull.
         .                       return Err(CapacityOverflow.into());
         .                   }
         .           
         .                   let cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
         .                   let new_layout = Layout::array::<T>(cap);
         .           
         .                   // `finish_grow` is non-generic over `T`.
    16,825 ( 0.00%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
         .                   self.set_ptr_and_cap(ptr, cap);
         .                   Ok(())
         .               }
         .           
    14,544 ( 0.00%)      fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {
    12,933 ( 0.00%)          assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
         .           
    50,904 ( 0.00%)          let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
    18,387 ( 0.00%)          let new_size = cap * mem::size_of::<T>();
         .           
         .                   let ptr = unsafe {
    12,726 ( 0.00%)              let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
    32,724 ( 0.00%)              self.alloc
     7,272 ( 0.00%)                  .shrink(ptr, layout, new_layout)
     3,636 ( 0.00%)                  .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
         .                   };
     3,636 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
     1,818 ( 0.00%)          Ok(())
     5,454 ( 0.00%)      }
         .           }
         .           
         .           // This function is outside `RawVec` to minimize compile times. See the comment
         .           // above `RawVec::grow_amortized` for details. (The `A` parameter isn't
         .           // significant, because the number of different `A` types seen in practice is
         .           // much smaller than the number of `T` types.)
         .           #[inline(never)]
 2,610,685 ( 0.08%)  fn finish_grow<A>(
         .               new_layout: Result<Layout, LayoutError>,
         .               current_memory: Option<(NonNull<u8>, Layout)>,
         .               alloc: &mut A,
         .           ) -> Result<NonNull<[u8]>, TryReserveError>
         .           where
         .               A: Allocator,
         .           {
         .               // Check for the error here to minimize the size of `RawVec::grow_*`.
   510,720 ( 0.02%)      let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
         .           
   437,760 ( 0.01%)      alloc_guard(new_layout.size())?;
         .           
 1,802,665 ( 0.06%)      let memory = if let Some((ptr, old_layout)) = current_memory {
         .                   debug_assert_eq!(old_layout.align(), new_layout.align());
         .                   unsafe {
         .                       // The allocator checks for alignment equality
    34,650 ( 0.00%)              intrinsics::assume(old_layout.align() == new_layout.align());
    48,510 ( 0.00%)              alloc.grow(ptr, old_layout, new_layout)
         .                   }
         .               } else {
   147,750 ( 0.00%)          alloc.allocate(new_layout)
         .               };
         .           
   255,360 ( 0.01%)      memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
 1,964,516 ( 0.06%)  }
         .           
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
         .               /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
   559,325 ( 0.02%)      fn drop(&mut self) {
 3,847,340 ( 0.12%)          if let Some((ptr, layout)) = self.current_memory() {
   224,764 ( 0.01%)              unsafe { self.alloc.deallocate(ptr, layout) }
         .                   }
   283,720 ( 0.01%)      }
         .           }
         .           
         .           // Central function for reserve error handling.
         .           #[cfg(not(no_global_oom_handling))]
         .           #[inline]
    38,298 ( 0.00%)  fn handle_reserve(result: Result<(), TryReserveError>) {
   459,576 ( 0.01%)      match result.map_err(|e| e.kind()) {
         .                   Err(CapacityOverflow) => capacity_overflow(),
         .                   Err(AllocError { layout, .. }) => handle_alloc_error(layout),
         .                   Ok(()) => { /* yay */ }
         .               }
    76,596 ( 0.00%)  }
         .           
         .           // We need to guarantee the following:
         .           // * We don't ever allocate `> isize::MAX` byte-size objects.
         .           // * We don't overflow `usize::MAX` and actually allocate too little.
         .           //
         .           // On 64-bit we just need to check for overflow since trying to allocate
         .           // `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
         .           // an extra guard for this in case we're running on a platform which can use
         .           // all 4GB in user-space, e.g., PAE or x32.
         .           
         .           #[inline]
   152,648 ( 0.00%)  fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
   152,648 ( 0.00%)      if usize::BITS < 64 && alloc_size > isize::MAX as usize {
         .                   Err(CapacityOverflow.into())
         .               } else {
    38,162 ( 0.00%)          Ok(())
         .               }
    76,324 ( 0.00%)  }
         .           
         .           // One central function responsible for reporting capacity overflows. This'll
         .           // ensure that the code generation related to these panics is minimal as there's
         .           // only one location which panics rather than a bunch throughout the module.
         .           #[cfg(not(no_global_oom_handling))]
         .           fn capacity_overflow() -> ! {
         .               panic!("capacity overflow");
         .           }
-- line 519 ----------------------------------------

11,062,780 ( 0.35%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/alloc/layout.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           use crate::ptr::NonNull;
        .           
        .           // While this function is used in one place and its implementation
        .           // could be inlined, the previous attempts to do so made rustc
        .           // slower:
        .           //
        .           // * https://github.com/rust-lang/rust/pull/72189
        .           // * https://github.com/rust-lang/rust/pull/79827
    1,446 ( 0.00%)  const fn size_align<T>() -> (usize, usize) {
    4,338 ( 0.00%)      (mem::size_of::<T>(), mem::align_of::<T>())
    5,784 ( 0.00%)  }
        .           
        .           /// Layout of a block of memory.
        .           ///
        .           /// An instance of `Layout` describes a particular layout of memory.
        .           /// You build a `Layout` up as an input to give to an allocator.
        .           ///
        .           /// All layouts have an associated size and a power-of-two alignment.
        .           ///
-- line 23 ----------------------------------------
-- line 91 ----------------------------------------
        .               /// # Safety
        .               ///
        .               /// This function is unsafe as it does not verify the preconditions from
        .               /// [`Layout::from_size_align`].
        .               #[stable(feature = "alloc_layout", since = "1.28.0")]
        .               #[rustc_const_stable(feature = "alloc_layout", since = "1.36.0")]
        .               #[must_use]
        .               #[inline]
1,646,743 ( 0.05%)      pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
        .                   // SAFETY: the caller must ensure that `align` is greater than zero.
  940,996 ( 0.03%)          Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
  940,996 ( 0.03%)      }
        .           
        .               /// The minimum size in bytes for a memory block of this layout.
        .               #[stable(feature = "alloc_layout", since = "1.28.0")]
        .               #[rustc_const_stable(feature = "const_alloc_layout", since = "1.50.0")]
        .               #[must_use]
        .               #[inline]
1,008,356 ( 0.03%)      pub const fn size(&self) -> usize {
  504,178 ( 0.02%)          self.size_
1,008,356 ( 0.03%)      }
        .           
        .               /// The minimum byte alignment for a memory block of this layout.
        .               #[stable(feature = "alloc_layout", since = "1.28.0")]
        .               #[rustc_const_stable(feature = "const_alloc_layout", since = "1.50.0")]
        .               #[must_use = "this returns the minimum alignment, \
        .                             without modifying the layout"]
        .               #[inline]
  517,588 ( 0.02%)      pub const fn align(&self) -> usize {
  776,382 ( 0.02%)          self.align_.get()
  517,588 ( 0.02%)      }
        .           
        .               /// Constructs a `Layout` suitable for holding a value of type `T`.
        .               #[stable(feature = "alloc_layout", since = "1.28.0")]
        .               #[rustc_const_stable(feature = "alloc_layout_const_new", since = "1.42.0")]
        .               #[must_use]
        .               #[inline]
    1,446 ( 0.00%)      pub const fn new<T>() -> Self {
    7,230 ( 0.00%)          let (size, align) = size_align::<T>();
        .                   // SAFETY: the align is guaranteed by Rust to be a power of two and
        .                   // the size+align combo is guaranteed to fit in our address space. As a
        .                   // result use the unchecked constructor here to avoid inserting code
        .                   // that panics if it isn't optimized well enough.
    4,338 ( 0.00%)          unsafe { Layout::from_size_align_unchecked(size, align) }
    2,892 ( 0.00%)      }
        .           
        .               /// Produces layout describing a record that could be used to
        .               /// allocate backing structure for `T` (which could be a trait
        .               /// or other unsized type like a slice).
        .               #[stable(feature = "alloc_layout", since = "1.28.0")]
        .               #[must_use]
        .               #[inline]
   58,161 ( 0.00%)      pub fn for_value<T: ?Sized>(t: &T) -> Self {
  193,870 ( 0.01%)          let (size, align) = (mem::size_of_val(t), mem::align_of_val(t));
        .                   debug_assert!(Layout::from_size_align(size, align).is_ok());
        .                   // SAFETY: see rationale in `new` for why this is using the unsafe variant
   58,161 ( 0.00%)          unsafe { Layout::from_size_align_unchecked(size, align) }
   38,774 ( 0.00%)      }
        .           
        .               /// Produces layout describing a record that could be used to
        .               /// allocate backing structure for `T` (which could be a trait
        .               /// or other unsized type like a slice).
        .               ///
        .               /// # Safety
        .               ///
        .               /// This function is only safe to call if the following conditions hold:
-- line 156 ----------------------------------------
-- line 171 ----------------------------------------
        .               ///     - otherwise, it is conservatively not allowed to call this function.
        .               ///
        .               /// [trait object]: ../../book/ch17-02-trait-objects.html
        .               /// [extern type]: ../../unstable-book/language-features/extern-types.html
        .               #[unstable(feature = "layout_for_ptr", issue = "69835")]
        .               #[must_use]
        .               pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
        .                   // SAFETY: we pass along the prerequisites of these functions to the caller
        4 ( 0.00%)          let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
        .                   debug_assert!(Layout::from_size_align(size, align).is_ok());
        .                   // SAFETY: see rationale in `new` for why this is using the unsafe variant
        .                   unsafe { Layout::from_size_align_unchecked(size, align) }
        .               }
        .           
        .               /// Creates a `NonNull` that is dangling, but well-aligned for this Layout.
        .               ///
        .               /// Note that the pointer value may potentially represent a valid pointer,
        .               /// which means this must not be used as a "not yet initialized"
        .               /// sentinel value. Types that lazily allocate must track initialization by
        .               /// some other means.
        .               #[unstable(feature = "alloc_layout_extra", issue = "55724")]
        .               #[rustc_const_unstable(feature = "alloc_layout_extra", issue = "55724")]
        .               #[must_use]
        .               #[inline]
    2,120 ( 0.00%)      pub const fn dangling(&self) -> NonNull<u8> {
        .                   // SAFETY: align is guaranteed to be non-zero
    4,240 ( 0.00%)          unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
    2,120 ( 0.00%)      }
        .           
        .               /// Creates a layout describing the record that can hold a value
        .               /// of the same layout as `self`, but that also is aligned to
        .               /// alignment `align` (measured in bytes).
        .               ///
        .               /// If `self` already meets the prescribed alignment, then returns
        .               /// `self`.
        .               ///
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
        .                   //    case of overflow, `len_rounded_up` will itself be 0.
        .                   //    Thus the returned padding, when added to `len`, yields 0,
        .                   //    which trivially satisfies the alignment `align`.
        .                   //
        .                   // (Of course, attempts to allocate blocks of memory whose
        .                   // size and padding overflow in the above manner should cause
        .                   // the allocator to yield an error anyway.)
        .           
      544 ( 0.00%)          let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
        .                   len_rounded_up.wrapping_sub(len)
        .               }
        .           
        .               /// Creates a layout by rounding the size of this layout up to a multiple
        .               /// of the layout's alignment.
        .               ///
        .               /// This is equivalent to adding the result of `padding_needed_for`
        .               /// to the layout's current size.
-- line 271 ----------------------------------------
-- line 274 ----------------------------------------
        .                             without modifying the original"]
        .               #[inline]
        .               pub fn pad_to_align(&self) -> Layout {
        .                   let pad = self.padding_needed_for(self.align());
        .                   // This cannot overflow. Quoting from the invariant of Layout:
        .                   // > `size`, when rounded up to the nearest multiple of `align`,
        .                   // > must not overflow (i.e., the rounded value must be less than
        .                   // > `usize::MAX`)
    1,044 ( 0.00%)          let new_size = self.size() + pad;
        .           
        .                   // SAFETY: self.align is already known to be valid and new_size has been
        .                   // padded already.
        .                   unsafe { Layout::from_size_align_unchecked(new_size, self.align()) }
        .               }
        .           
        .               /// Creates a layout describing the record for `n` instances of
        .               /// `self`, with a suitable amount of padding between each to
-- line 290 ----------------------------------------
-- line 355 ----------------------------------------
        .               /// # assert_eq!(repr_c(&[u64, u32, u16, u32]), Ok((s, vec![0, 8, 12, 16])));
        .               /// ```
        .               #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
        .               #[inline]
        .               pub fn extend(&self, next: Self) -> Result<(Self, usize), LayoutError> {
        .                   let new_align = cmp::max(self.align(), next.align());
        .                   let pad = self.padding_needed_for(next.align());
        .           
       11 ( 0.00%)          let offset = self.size().checked_add(pad).ok_or(LayoutError)?;
   38,400 ( 0.00%)          let new_size = offset.checked_add(next.size()).ok_or(LayoutError)?;
        .           
        .                   let layout = Layout::from_size_align(new_size, new_align)?;
        .                   Ok((layout, offset))
        .               }
        .           
        .               /// Creates a layout describing the record for `n` instances of
        .               /// `self`, with no padding between each instance.
        .               ///
-- line 372 ----------------------------------------
-- line 399 ----------------------------------------
        .                   Layout::from_size_align(new_size, self.align())
        .               }
        .           
        .               /// Creates a layout describing the record for a `[T; n]`.
        .               ///
        .               /// On arithmetic overflow, returns `LayoutError`.
        .               #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
        .               #[inline]
  152,648 ( 0.00%)      pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
1,619,771 ( 0.05%)          let array_size = mem::size_of::<T>().checked_mul(n).ok_or(LayoutError)?;
        .           
        .                   // SAFETY:
        .                   // - Size: `array_size` cannot be too big because `size_of::<T>()` must
        .                   //   be a multiple of `align_of::<T>()`. Therefore, `array_size`
        .                   //   rounded up to the nearest multiple of `align_of::<T>()` is just
        .                   //   `array_size`. And `array_size` cannot be too big because it was
        .                   //   just checked by the `checked_mul()`.
        .                   // - Alignment: `align_of::<T>()` will always give an acceptable
        .                   //   (non-zero, power of two) alignment.
  267,134 ( 0.01%)          Ok(unsafe { Layout::from_size_align_unchecked(array_size, mem::align_of::<T>()) })
  190,810 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "alloc_layout", since = "1.28.0")]
        .           #[rustc_deprecated(
        .               since = "1.52.0",
        .               reason = "Name does not follow std convention, use LayoutError",
        .               suggestion = "LayoutError"
        .           )]
-- line 427 ----------------------------------------

2,218,630 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/alloc/layout.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 29 ----------------------------------------
        .               /// ```
        .               /// let s: &str = "Follow the rabbit";
        .               /// let ptr: *const u8 = s.as_ptr();
        .               /// assert!(!ptr.is_null());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
        .               #[inline]
1,799,528 ( 0.06%)      pub const fn is_null(self) -> bool {
        .                   // Compare via a cast to a thin pointer, so fat pointers are only
        .                   // considering their "data" part for null-ness.
1,799,528 ( 0.06%)          (self as *const u8).guaranteed_eq(null())
1,799,528 ( 0.06%)      }
        .           
        .               /// Casts to a pointer of another type.
        .               #[stable(feature = "ptr_cast", since = "1.38.0")]
        .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
        .               #[inline]
  414,840 ( 0.01%)      pub const fn cast<U>(self) -> *const U {
        .                   self as _
  276,560 ( 0.01%)      }
        .           
        .               /// Changes constness without changing the type.
        .               ///
        .               /// This is a bit safer than `as` because it wouldn't silently change the type if the code is
        .               /// refactored.
        .               #[unstable(feature = "ptr_const_cast", issue = "92675")]
        .               #[rustc_const_unstable(feature = "ptr_const_cast", issue = "92675")]
        .               pub const fn as_mut(self) -> *mut T {
-- line 57 ----------------------------------------
-- line 287 ----------------------------------------
        .               #[must_use = "returns a new pointer rather than modifying its argument"]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline(always)]
        .               pub const unsafe fn offset(self, count: isize) -> *const T
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
8,009,032 ( 0.26%)          unsafe { intrinsics::offset(self, count) }
        .               }
        .           
        .               /// Calculates the offset from a pointer using wrapping arithmetic.
        .               ///
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
-- line 303 ----------------------------------------
-- line 436 ----------------------------------------
        .               /// // they point to the same address!
        .               /// unsafe {
        .               ///     let zero = ptr2_other.offset_from(ptr2); // Undefined Behavior
        .               /// }
        .               /// ```
        .               #[stable(feature = "ptr_offset_from", since = "1.47.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset_from", issue = "92980")]
        .               #[inline]
   50,945 ( 0.00%)      pub const unsafe fn offset_from(self, origin: *const T) -> isize
        .               where
        .                   T: Sized,
        .               {
   10,189 ( 0.00%)          let pointee_size = mem::size_of::<T>();
  132,457 ( 0.00%)          assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);
        .                   // SAFETY: the caller must uphold the safety contract for `ptr_offset_from`.
1,446,136 ( 0.05%)          unsafe { intrinsics::ptr_offset_from(self, origin) }
   20,378 ( 0.00%)      }
        .           
        .               /// Returns whether two pointers are guaranteed to be equal.
        .               ///
        .               /// At runtime this function behaves like `self == other`.
        .               /// However, in some contexts (e.g., compile-time evaluation),
        .               /// it is not always possible to determine equality of two pointers, so this function may
        .               /// spuriously return `false` for pointers that later actually turn out to be equal.
        .               /// But when it returns `true`, the pointers are guaranteed to be equal.
-- line 460 ----------------------------------------
-- line 470 ----------------------------------------
        .               /// affect the outcome, but just the performance.
        .               /// The consequences of using this method to make runtime and compile-time code behave
        .               /// differently have not been explored. This method should not be used to introduce such
        .               /// differences, and it should also not be stabilized before we have a better understanding
        .               /// of this issue.
        .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[inline]
1,349,646 ( 0.04%)      pub const fn guaranteed_eq(self, other: *const T) -> bool
        .               where
        .                   T: Sized,
        .               {
2,699,320 ( 0.09%)          intrinsics::ptr_guaranteed_eq(self, other)
1,799,528 ( 0.06%)      }
        .           
        .               /// Returns whether two pointers are guaranteed to be unequal.
        .               ///
        .               /// At runtime this function behaves like `self != other`.
        .               /// However, in some contexts (e.g., compile-time evaluation),
        .               /// it is not always possible to determine the inequality of two pointers, so this function may
        .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
        .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 491 ----------------------------------------
-- line 569 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline(always)]
        .               pub const unsafe fn add(self, count: usize) -> Self
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
        .                   unsafe { self.offset(count as isize) }
    1,965 ( 0.00%)      }
        .           
        .               /// Calculates the offset from a pointer (convenience for
        .               /// `.offset((count as isize).wrapping_neg())`).
        .               ///
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
-- line 585 ----------------------------------------
-- line 886 ----------------------------------------
        .               /// NOTE: this has the *same* argument order as [`ptr::copy_nonoverlapping`].
        .               ///
        .               /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()
        .               #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[inline]
    1,100 ( 0.00%)      pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `copy_nonoverlapping`.
      275 ( 0.00%)          unsafe { copy_nonoverlapping(self, dest, count) }
      550 ( 0.00%)      }
        .           
        .               /// Computes the offset that needs to be applied to the pointer in order to make it aligned to
        .               /// `align`.
        .               ///
        .               /// If it is not possible to align the pointer, the implementation returns
        .               /// `usize::MAX`. It is permissible for the implementation to *always*
        .               /// return `usize::MAX`. Only your algorithm's performance can depend
        .               /// on getting a usable offset here, not its correctness.
-- line 908 ----------------------------------------
-- line 983 ----------------------------------------
        .               /// use std::ptr;
        .               ///
        .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
        .               /// assert_eq!(slice.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "slice_ptr_len", issue = "71146")]
        .               #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
   16,194 ( 0.00%)      pub const fn len(self) -> usize {
   10,796 ( 0.00%)          metadata(self)
   10,796 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// This is equivalent to casting `self` to `*const T`, but more type-safe.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```rust
-- line 1001 ----------------------------------------
-- line 1003 ----------------------------------------
        .               /// use std::ptr;
        .               ///
        .               /// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);
        .               /// assert_eq!(slice.as_ptr(), 0 as *const i8);
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
   40,040 ( 0.00%)      pub const fn as_ptr(self) -> *const T {
        .                   self as *const T
   20,020 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to an element or subslice, without doing bounds
        .               /// checking.
        .               ///
        .               /// Calling this method with an out-of-bounds index or when `self` is not dereferenceable
        .               /// is *[undefined behavior]* even if the resulting pointer is not used.
        .               ///
        .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
-- line 1021 ----------------------------------------

1,520,856 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/const_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
43,056,795 ( 1.38%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
         .           #[inline(always)]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_promotable]
         .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
         .           #[rustc_diagnostic_item = "ptr_null"]
         .           pub const fn null<T>() -> *const T {
         .               0 as *const T
     1,965 ( 0.00%)  }
         .           
         .           /// Creates a null mutable raw pointer.
         .           ///
         .           /// # Examples
         .           ///
         .           /// ```
         .           /// use std::ptr;
         .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
         .           /// let x = [5, 6, 7];
         .           /// let raw_pointer = x.as_ptr();
         .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
         .           /// assert_eq!(unsafe { &*slice }[2], 7);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   553,120 ( 0.02%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   691,400 ( 0.02%)      from_raw_parts(data.cast(), len)
   276,560 ( 0.01%)  }
         .           
         .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
         .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
         .           ///
         .           /// See the documentation of [`slice_from_raw_parts`] for more details.
         .           ///
         .           /// This function is safe, but actually using the return value is unsafe.
         .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
         .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
         .           /// };
         .           ///
         .           /// assert_eq!(unsafe { &*slice }[2], 99);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
         .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
 1,846,376 ( 0.06%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   692,391 ( 0.02%)      from_raw_parts_mut(data.cast(), len)
   461,594 ( 0.01%)  }
         .           
         .           /// Swaps the values at two mutable locations of the same type, without
         .           /// deinitializing either.
         .           ///
         .           /// But for the following two exceptions, this function is semantically
         .           /// equivalent to [`mem::swap`]:
         .           ///
         .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
       119 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
       119 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        22 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
         .           ///
         .           /// assert_eq!(s, "bar");
         .           /// ```
         .           ///
         .           /// [valid]: self#safety
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
 1,460,145 ( 0.05%)  pub const unsafe fn read<T>(src: *const T) -> T {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
   660,882 ( 0.02%)      let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
 2,107,461 ( 0.07%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
18,610,632 ( 0.60%)          tmp.assume_init()
         .               }
   915,045 ( 0.03%)  }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
         .           /// # Safety
         .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
         .           /// swap(&mut foo, &mut bar);
         .           ///
         .           /// assert_eq!(foo, "bar");
         .           /// assert_eq!(bar, "foo");
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
 1,440,811 ( 0.05%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
         .               // We are calling the intrinsics directly to avoid function calls in the generated code
         .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
         .               extern "rust-intrinsic" {
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
28,270,439 ( 0.91%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
   763,456 ( 0.02%)  }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
         .           ///
         .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
         .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     3,482 ( 0.00%)          return wrapping_sub(
     9,752 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 2,109,884 ( 0.07%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 8,190,817 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .               /// use std::ptr::NonNull;
        .               ///
        .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
        .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
        .               #[inline]
1,684,181 ( 0.05%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
        .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
2,921,467 ( 0.09%)          unsafe { NonNull { pointer: ptr as _ } }
2,486,344 ( 0.08%)      }
        .           
        .               /// Creates a new `NonNull` if `ptr` is non-null.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::ptr::NonNull;
        .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
        .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
        .               ///
        .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
        .               ///     unreachable!();
        .               /// }
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[inline]
  236,385 ( 0.01%)      pub fn new(ptr: *mut T) -> Option<Self> {
  393,975 ( 0.01%)          if !ptr.is_null() {
        .                       // SAFETY: The pointer is already checked and is not null
  236,385 ( 0.01%)              Some(unsafe { Self::new_unchecked(ptr) })
        .                   } else {
        .                       None
        .                   }
  236,385 ( 0.01%)      }
        .           
        .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
        .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
        .               ///
        .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
        .               ///
        .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
        .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
        .               /// unsafe { *ptr.as_ptr() += 2; }
        .               /// let x_value = unsafe { *ptr.as_ptr() };
        .               /// assert_eq!(x_value, 2);
        .               /// ```
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
        .               #[must_use]
        .               #[inline]
4,911,359 ( 0.16%)      pub const fn as_ptr(self) -> *mut T {
        .                   self.pointer as *mut T
3,167,766 ( 0.10%)      }
        .           
        .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
        .               /// must be used instead.
        .               ///
        .               /// For the mutable counterpart see [`as_mut`].
        .               ///
        .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
        .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
        .               /// println!("{}", ref_x);
        .               /// ```
        .               ///
        .               /// [the module documentation]: crate::ptr#safety
        .               #[stable(feature = "nonnull", since = "1.25.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
        .               #[must_use]
        .               #[inline]
  421,388 ( 0.01%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   // SAFETY: the caller must guarantee that `self` meets all the
        .                   // requirements for a reference.
  632,082 ( 0.02%)          unsafe { &*self.as_ptr() }
  421,388 ( 0.01%)      }
        .           
        .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
        .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
        .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
        .               /// let casted_ptr = ptr.cast::<i8>();
        .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
        .               /// ```
        .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
        .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
        .               #[must_use = "this returns the result of the operation, \
        .                             without modifying the original"]
        .               #[inline]
  160,883 ( 0.01%)      pub const fn cast<U>(self) -> NonNull<U> {
        .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
  240,616 ( 0.01%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
  120,180 ( 0.00%)      }
        .           }
        .           
        .           impl<T> NonNull<[T]> {
        .               /// Creates a non-null raw slice from a thin pointer and a length.
        .               ///
        .               /// The `len` argument is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
        .               /// ```
        .               ///
        .               /// (Note that this example artificially demonstrates a use of this method,
        .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
        .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
        .               #[must_use]
        .               #[inline]
  319,420 ( 0.01%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
        .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
  638,840 ( 0.02%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
  159,710 ( 0.01%)      }
        .           
        .               /// Returns the length of a non-null raw slice.
        .               ///
        .               /// The returned value is the number of **elements**, not the number of bytes.
        .               ///
        .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
        .               /// because the pointer does not have a valid address.
        .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
  117,456 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
        .                   // SAFETY: We know `self` is non-null.
  195,760 ( 0.01%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
   78,304 ( 0.00%)      }
        .           
        .               /// Returns a raw pointer to the slice's buffer.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```rust
        .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
        .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
        .               ///
        .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
        .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
        .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
  117,456 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
  156,608 ( 0.01%)          self.as_non_null_ptr().as_ptr()
   78,304 ( 0.00%)      }
        .           
        .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
        .               /// [`as_ref`], this does not require that the value has to be initialized.
        .               ///
        .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
        .               ///
        .               /// [`as_ref`]: NonNull::as_ref
        .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
        .                   self.as_ptr().hash(state)
        .               }
        .           }
        .           
        .           #[unstable(feature = "ptr_internals", issue = "none")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
        .               #[inline]
  270,568 ( 0.01%)      fn from(unique: Unique<T>) -> Self {
        .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
        .                   // new_unchecked() are respected.
  541,136 ( 0.02%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
  270,568 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
        .               #[inline]
   46,516 ( 0.00%)      fn from(reference: &mut T) -> Self {
        .                   // SAFETY: A mutable reference cannot be null.
   54,169 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
   69,774 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "nonnull", since = "1.25.0")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T: ?Sized> const From<&T> for NonNull<T> {
        .               #[inline]
        .               fn from(reference: &T) -> Self {
        .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

1,686,695 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
2,876,152 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,797,595 ( 0.06%)              .intern(kind, |kind| {
   68,178 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  136,356 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
3,235,671 ( 0.10%)      }
        .           
        .               #[inline(never)]
  855,136 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  748,244 ( 0.02%)              .intern(kind, |kind| {
  135,840 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  962,028 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
  221,656 ( 0.01%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  167,663 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   33,599 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   33,599 ( 0.00%)          self.data.get(&id.local_id)
  134,460 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
    2,376 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
    1,584 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    8,364 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   98,974 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    8,364 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   37,677 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   25,118 ( 0.00%)          match *qpath {
   64,320 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   11,034 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   62,795 ( 0.00%)      }
        .           
      188 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    1,815 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      188 ( 0.00%)      }
        .           
    2,938 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    6,479 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    5,876 ( 0.00%)      }
        .           
    6,808 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    6,808 ( 0.00%)      }
        .           
   13,581 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   13,581 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   13,581 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    3,527 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      865 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    4,608 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    2,304 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    5,794 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    2,897 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      968 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      484 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   31,788 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   15,894 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   52,870 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   26,435 ( 0.00%)      }
        .           
  220,476 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   36,746 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
  183,730 ( 0.01%)      }
        .           
   50,601 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   50,601 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  101,202 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    6,708 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    3,354 ( 0.00%)      }
        .           
   16,369 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   16,369 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   32,738 ( 0.00%)      }
        .           
   11,053 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   11,053 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
   22,106 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    4,780 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   41,330 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   50,259 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   20,198 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   10,099 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   33,730 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   16,865 ( 0.00%)      }
        .           
   21,061 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   42,122 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   42,122 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
    3,570 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      714 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    1,616 ( 0.00%)      }
        .           
    1,620 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      324 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      972 ( 0.00%)      }
        .           
    1,627 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    3,254 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    4,782 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    3,254 ( 0.00%)      }
        .           
   12,258 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
   16,344 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   10,614 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    3,264 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    5,256 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    2,628 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   13,036 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    6,518 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    3,830 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    1,915 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    4,008 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    5,010 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      804 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      402 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      156 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
       78 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    2,388 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    1,194 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    1,584 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      792 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      804 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      402 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       39 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       13 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       26 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      402 ( 0.00%)          &self.coercion_casts
      402 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      162 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      296 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
    1,140 ( 0.00%)      pub fn is_identity(&self) -> bool {
    2,280 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
    1,140 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    3,042 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    1,509 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
       24 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    2,280 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,776 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   12,722 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
   19,860 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    7,944 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   15,888 ( 0.00%)      }
        .           
    1,488 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      496 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    1,984 ( 0.00%)      }
        .           
    7,940 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    1,588 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   11,116 ( 0.00%)      }
        .           
    1,984 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      496 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    2,480 ( 0.00%)      }
        .           
      738 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    1,312 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      328 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    6,688 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    3,344 ( 0.00%)          let attrs = self.get_attrs(def_id);
   14,212 ( 0.00%)          let get = |name| {
    3,344 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
        8 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
        4 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
        2 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   16,720 ( 0.00%)          };
    5,016 ( 0.00%)          (
    5,016 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    2,508 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    6,688 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
      105 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       15 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
      120 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
      120 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  697,928 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  897,336 ( 0.03%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       84 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       96 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   15,092 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   17,248 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   25,032 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   28,608 ( 0.00%)      }
        .           
    7,322 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    9,414 ( 0.00%)      }
        .           
  245,126 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  280,144 ( 0.01%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   12,990 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
   10,081 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    3,479 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      164 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   46,278 ( 0.00%)          &*self.untracked_resolutions.cstore
   23,139 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      101 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      504 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      804 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
    1,206 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      402 ( 0.00%)          self.sess.opts.borrowck_mode
    1,608 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      499 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
      297 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    1,771 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    1,288 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    2,898 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
    1,449 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  289,954 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  331,376 ( 0.01%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
       42 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
       48 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   75,745 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  291,414 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  143,684 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  143,646 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  331,412 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  172,020 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   87,159 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   28,668 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  306,995 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   44,408 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
  105,710 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   16,740 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  879,721 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  447,383 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    5,137 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  989,073 ( 0.03%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
3,375,217 ( 0.11%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
3,020,238 ( 0.10%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
    1,884 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
    1,413 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
      314 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
    1,413 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      490 ( 0.00%)              let trait_did = stack.pop()?;
      245 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
      498 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
      332 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  119,396 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
2,515,954 ( 0.08%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,144,889 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
2,026,360 ( 0.06%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
  189,096 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
2,026,360 ( 0.06%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      269 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      269 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      528 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      528 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      290 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
    1,955 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    2,040 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      208 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      764 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   16,880 ( 0.00%)          iter.intern_with(|ts| {
    5,335 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   18,280 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   14,814 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      499 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    1,744 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    2,934 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
   22,260 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   14,328 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
    4,716 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    4,788 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
   22,260 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
       60 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
       60 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      120 ( 0.00%)      }
        .           
        .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Deref)
        .               }
        .           
        6 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        6 ( 0.00%)          self.mk_place_elem(
        .                       place,
       12 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
       12 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
      594 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
      660 ( 0.00%)      }
        .           
   12,551 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    1,864 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
    7,456 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   14,344 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    6,195 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    4,005 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    4,392 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   37,779 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
      158 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  552,410 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   18,168 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    9,015 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    3,650 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   28,016 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      280 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   14,152 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   16,824 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    3,084 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      725 ( 0.00%)              c_variadic,
      877 ( 0.00%)              unsafety,
    1,146 ( 0.00%)              abi,
      540 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    7,144 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       18 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    3,038 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  341,217 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       36 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   17,403 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   34,806 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   58,614 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  123,648 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  123,648 ( 0.00%)          let hir = self.hir();
        .                   loop {
  237,411 ( 0.01%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  310,479 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  184,419 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
  176,640 ( 0.01%)      }
        .           
    7,248 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   59,682 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    5,222 ( 0.00%)              let next = self.hir().get_parent_node(id);
   15,666 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    7,248 ( 0.00%)      }
        .           
      112 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    2,911 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      698 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       64 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    4,970 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    1,420 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
    1,420 ( 0.00%)          Some(&*candidates)
    5,680 ( 0.00%)      }
        .           
   16,891 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   21,717 ( 0.00%)      }
        .           
    2,322 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       94 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    2,064 ( 0.00%)      }
        .           
   12,243 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
   15,741 ( 0.00%)      }
        .           
   13,977 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
   13,977 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      320 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       32 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        4 ( 0.00%)              match self.lookup_const_stability(def_id) {
        8 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      288 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   84,936 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
1,564,295 ( 0.05%)          E::intern_with(self, f)
   87,705 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  203,845 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  246,024 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        3 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        3 ( 0.00%)                  assert!(iter.next().is_none());
   41,029 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      246 ( 0.00%)                  assert!(iter.next().is_none());
   20,673 ( 0.00%)                  f(&[t0, t1])
        .                       }
    2,076 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  205,258 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    8,747 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      216 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    7,208 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  513,767 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  395,904 ( 0.01%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
    5,247 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   41,387 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      262 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      262 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      393 ( 0.00%)                  assert!(iter.next().is_none());
   30,868 ( 0.00%)                  f(&[t0, t1])
        .                       }
    5,013 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  576,361 ( 0.02%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  143,684 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
        .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    8,352 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

1,144,373 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .                   (type SourceFile: 'static + Clone;);
        .               (type MultiSpan) =>
        .                   (type MultiSpan: 'static;);
        .               (type Diagnostic) =>
        .                   (type Diagnostic: 'static;);
        .               (type Span) =>
        .                   (type Span: 'static + Copy + Eq + Hash;);
        .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
   48,438 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
        .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
      674 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
        .               ($($item:tt)*) => ($($item)*;)
        .           }
        .           
        .           macro_rules! declare_server_traits {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 64 ----------------------------------------
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
        .               }),* $(,)?) => {
        .                   impl<S: Types> Types for MarkedTypes<S> {
        .                       $(type $name = Marked<S::$name, client::$name>;)*
        .                   }
        .           
        .                   $(impl<S: $name> $name for MarkedTypes<S> {
        .                       $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
2,056,162 ( 0.07%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
        .                       })*
        .                   })*
        .               }
        .           }
        .           with_api!(Self, self_, define_mark_types_impls);
        .           
        .           struct Dispatcher<S: Types> {
        .               handle_store: HandleStore<S>,
-- line 80 ----------------------------------------
-- line 89 ----------------------------------------
        .                   pub trait DispatcherTrait {
        .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
        .                       $(type $name;)*
        .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
        .                   }
        .           
        .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
        .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
5,261,620 ( 0.17%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
        .                           let Dispatcher { handle_store, server } = self;
        .           
1,578,486 ( 0.05%)                  let mut reader = &b[..];
3,683,134 ( 0.12%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
2,557,905 ( 0.08%)                      $(api_tags::Method::$name(m) => match m {
        .                                   $(api_tags::$name::$method => {
        .                                       let mut call_method = || {
1,420,117 ( 0.05%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
        .                                           $name::$method(server, $($arg),*)
        .                                       };
        .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
        .                                       // If client and server happen to use the same `libstd`,
        .                                       // `catch_unwind` asserts that the panic counter was 0,
        .                                       // even when the closure passed to it didn't panic.
        .                                       let r = if thread::panicking() {
        .                                           Ok(call_method())
        .                                       } else {
2,678,284 ( 0.09%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
        .                                               .map_err(PanicMessage::from)
        .                                       };
        .           
        .                                       b.clear();
5,883,525 ( 0.19%)                              r.encode(&mut b, handle_store);
        .                                   })*
        .                               }),*
        .                           }
3,156,972 ( 0.10%)                  b
4,735,458 ( 0.15%)              }
        .                   }
        .               }
        .           }
        .           with_api!(Self, self_, define_dispatcher_impl);
        .           
        .           pub trait ExecutionStrategy {
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
        .               fn run_bridge_and_client<D: Copy + Send + 'static>(
        .                   &self,
        .                   dispatcher: &mut impl DispatcherTrait,
        .                   input: Buffer<u8>,
        .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .                   client_data: D,
        .                   force_show_panics: bool,
        .               ) -> Buffer<u8> {
4,735,497 ( 0.15%)          let mut dispatch = |b| dispatcher.dispatch(b);
        .           
      390 ( 0.00%)          run_client(
      429 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
        .                       client_data,
        .                   )
        .               }
        .           }
        .           
        .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
        .           // faster but neither is anywhere near as fast as same-thread execution.
        .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
        .                       *state.lock().unwrap() = State::Res(b);
        .                       join_handle.thread().unpark();
        .                   }
        .           
        .                   join_handle.join().unwrap()
        .               }
        .           }
        .           
      546 ( 0.00%)  fn run_server<
        .               S: Server,
        .               I: Encode<HandleStore<MarkedTypes<S>>>,
        .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
        .               D: Copy + Send + 'static,
        .           >(
        .               strategy: &impl ExecutionStrategy,
        .               handle_counters: &'static client::HandleCounters,
        .               server: S,
        .               input: I,
        .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
        .               client_data: D,
        .               force_show_panics: bool,
        .           ) -> Result<O, PanicMessage> {
        .               let mut dispatcher =
      663 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
        .           
        .               let mut b = Buffer::new();
      156 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
        .           
      234 ( 0.00%)      b = strategy.run_bridge_and_client(
        .                   &mut dispatcher,
        .                   b,
        .                   run_client,
        .                   client_data,
        .                   force_show_panics,
        .               );
        .           
      195 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
      390 ( 0.00%)  }
        .           
        .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   force_show_panics: bool,
-- line 308 ----------------------------------------
-- line 325 ----------------------------------------
        .               pub fn run<S: Server>(
        .                   &self,
        .                   strategy: &impl ExecutionStrategy,
        .                   server: S,
        .                   input: S::TokenStream,
        .                   input2: S::TokenStream,
        .                   force_show_panics: bool,
        .               ) -> Result<S::TokenStream, PanicMessage> {
       78 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
      507 ( 0.00%)          run_server(
        .                       strategy,
       39 ( 0.00%)              get_handle_counters(),
      390 ( 0.00%)              server,
        .                       (
        .                           <MarkedTypes<S> as Types>::TokenStream::mark(input),
        .                           <MarkedTypes<S> as Types>::TokenStream::mark(input2),
        .                       ),
        .                       run,
        .                       f,
        .                       force_show_panics,
        .                   )
-- line 345 ----------------------------------------

1,192,569 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A, B> PartialEq<[B]> for [A]
        .           where
        .               A: PartialEq<B>,
        .           {
3,118,096 ( 0.10%)      fn eq(&self, other: &[B]) -> bool {
1,211,030 ( 0.04%)          SlicePartialEq::equal(self, other)
2,532,355 ( 0.08%)      }
        .           
        .               fn ne(&self, other: &[B]) -> bool {
        .                   SlicePartialEq::not_equal(self, other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Eq> Eq for [T] {}
-- line 36 ----------------------------------------
-- line 41 ----------------------------------------
        .               fn cmp(&self, other: &[T]) -> Ordering {
        .                   SliceOrd::compare(self, other)
        .               }
        .           }
        .           
        .           /// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialOrd> PartialOrd for [T] {
       30 ( 0.00%)      fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {
        .                   SlicePartialOrd::partial_compare(self, other)
       24 ( 0.00%)      }
        .           }
        .           
        .           #[doc(hidden)]
        .           // intermediate trait for specialization of slice's PartialEq
        .           trait SlicePartialEq<B> {
        .               fn equal(&self, other: &[B]) -> bool;
        .           
        .               fn not_equal(&self, other: &[B]) -> bool {
-- line 59 ----------------------------------------
-- line 62 ----------------------------------------
        .           }
        .           
        .           // Generic slice equality
        .           impl<A, B> SlicePartialEq<B> for [A]
        .           where
        .               A: PartialEq<B>,
        .           {
        .               default fn equal(&self, other: &[B]) -> bool {
  638,632 ( 0.02%)          if self.len() != other.len() {
        .                       return false;
        .                   }
        .           
   35,883 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
        .               }
        .           }
        .           
        .           // Use memcmp for bytewise equality when the types allow
        .           impl<A, B> SlicePartialEq<B> for [A]
        .           where
        .               A: BytewiseEquality<B>,
        .           {
5,449,635 ( 0.17%)      fn equal(&self, other: &[B]) -> bool {
1,323,076 ( 0.04%)          if self.len() != other.len() {
  519,458 ( 0.02%)              return false;
        .                   }
        .           
        .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
        .                   // The two slices have been checked to have the same size above.
        .                   unsafe {
  344,228 ( 0.01%)              let size = mem::size_of_val(self);
1,224,352 ( 0.04%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
        .                   }
3,113,632 ( 0.10%)      }
        .           }
        .           
        .           #[doc(hidden)]
        .           // intermediate trait for specialization of slice's PartialOrd
        .           trait SlicePartialOrd: Sized {
        .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
        .           }
        .           
-- line 102 ----------------------------------------
-- line 104 ----------------------------------------
        .               default fn partial_compare(left: &[A], right: &[A]) -> Option<Ordering> {
        .                   let l = cmp::min(left.len(), right.len());
        .           
        .                   // Slice to the loop iteration range to enable bound check
        .                   // elimination in the compiler
        .                   let lhs = &left[..l];
        .                   let rhs = &right[..l];
        .           
       18 ( 0.00%)          for i in 0..l {
        4 ( 0.00%)              match lhs[i].partial_cmp(&rhs[i]) {
        .                           Some(Ordering::Equal) => (),
        .                           non_eq => return non_eq,
        .                       }
        .                   }
        .           
        .                   left.len().partial_cmp(&right.len())
        .               }
        .           }
-- line 121 ----------------------------------------
-- line 168 ----------------------------------------
        .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
        .                   let l = cmp::min(left.len(), right.len());
        .           
        .                   // Slice to the loop iteration range to enable bound check
        .                   // elimination in the compiler
        .                   let lhs = &left[..l];
        .                   let rhs = &right[..l];
        .           
        2 ( 0.00%)          for i in 0..l {
        .                       match lhs[i].cmp(&rhs[i]) {
        .                           Ordering::Equal => (),
        .                           non_eq => return non_eq,
        .                       }
        .                   }
        .           
        .                   left.len().cmp(&right.len())
        .               }
-- line 184 ----------------------------------------
-- line 188 ----------------------------------------
        .           // this matches the order we want for [u8], but no others (not even [i8]).
        .           impl SliceOrd for u8 {
        .               #[inline]
        .               fn compare(left: &[Self], right: &[Self]) -> Ordering {
        .                   let order =
        .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
        .                       // We use the minimum of both lengths which guarantees that both regions are
        .                       // valid for reads in that interval.
    2,072 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
    4,144 ( 0.00%)          if order == 0 {
        .                       left.len().cmp(&right.len())
      704 ( 0.00%)          } else if order < 0 {
        .                       Less
        .                   } else {
        .                       Greater
        .                   }
        .               }
        .           }
        .           
        .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
-- line 207 ----------------------------------------
-- line 230 ----------------------------------------
        .           pub(super) trait SliceContains: Sized {
        .               fn slice_contains(&self, x: &[Self]) -> bool;
        .           }
        .           
        .           impl<T> SliceContains for T
        .           where
        .               T: PartialEq,
        .           {
      308 ( 0.00%)      default fn slice_contains(&self, x: &[Self]) -> bool {
   48,103 ( 0.00%)          x.iter().any(|y| *y == *self)
      462 ( 0.00%)      }
        .           }
        .           
        .           impl SliceContains for u8 {
        .               #[inline]
        .               fn slice_contains(&self, x: &[Self]) -> bool {
        .                   memchr::memchr(*self, x).is_some()
        .               }
        .           }
-- line 248 ----------------------------------------

2,137,027 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 333 ----------------------------------------
        .           #[unstable(feature = "dispatch_from_dyn", issue = "none")]
        .           impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T> {}
        .           
        .           impl<T: ?Sized> Rc<T> {
        .               #[inline(always)]
        .               fn inner(&self) -> &RcBox<T> {
        .                   // This unsafety is ok because while this Rc is alive we're guaranteed
        .                   // that the inner pointer is valid.
  419,804 ( 0.01%)          unsafe { self.ptr.as_ref() }
        .               }
        .           
   78,830 ( 0.00%)      unsafe fn from_inner(ptr: NonNull<RcBox<T>>) -> Self {
   39,415 ( 0.00%)          Self { ptr, phantom: PhantomData }
  118,245 ( 0.00%)      }
        .           
        .               unsafe fn from_ptr(ptr: *mut RcBox<T>) -> Self {
        .                   unsafe { Self::from_inner(NonNull::new_unchecked(ptr)) }
        .               }
        .           }
        .           
        .           impl<T> Rc<T> {
        .               /// Constructs a new `Rc<T>`.
-- line 354 ----------------------------------------
-- line 357 ----------------------------------------
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
        .               ///
        .               /// let five = Rc::new(5);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  112,145 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
        .                   // There is an implicit weak pointer owned by all the strong
        .                   // pointers, which ensures that the weak destructor never frees
        .                   // the allocation while the strong destructor is running, even
        .                   // if the weak pointer is stored inside the strong one.
        .                   unsafe {
   77,548 ( 0.00%)              Self::from_inner(
1,755,382 ( 0.06%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
        .                       )
        .                   }
   53,984 ( 0.00%)      }
        .           
        .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
        .               /// weak reference to the constructing `Rc<T>`.
        .               ///
        .               /// Generally, a structure circularly referencing itself, either directly or
        .               /// indirectly, should not hold a strong reference to prevent a memory leak.
        .               /// In `data_fn`, initialization of `T` can make use of the weak reference
        .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 474 ----------------------------------------
        .               ///
        .               /// let five = unsafe { five.assume_init() };
        .               ///
        .               /// assert_eq!(*five, 5)
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[unstable(feature = "new_uninit", issue = "63291")]
        .               #[must_use]
      314 ( 0.00%)      pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {
        .                   unsafe {
        .                       Rc::from_ptr(Rc::allocate_for_layout(
        .                           Layout::new::<T>(),
        .                           |layout| Global.allocate(layout),
        .                           |mem| mem as *mut RcBox<mem::MaybeUninit<T>>,
        .                       ))
        .                   }
      628 ( 0.00%)      }
        .           
        .               /// Constructs a new `Rc` with uninitialized contents, with the memory
        .               /// being filled with `0` bytes.
        .               ///
        .               /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and
        .               /// incorrect usage of this method.
        .               ///
        .               /// # Examples
-- line 498 ----------------------------------------
-- line 637 ----------------------------------------
        .               ///
        .               /// let x = Rc::new(4);
        .               /// let _y = Rc::clone(&x);
        .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
        2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
        .                       unsafe {
        .                           let val = ptr::read(&*this); // copy the contained object
        .           
        .                           // Indicate to Weaks that they can't be promoted by decrementing
        .                           // the strong count, and then remove the implicit "strong weak"
        .                           // pointer while also handling drop logic by just crafting a
        .                           // fake Weak.
        .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let _weak_five = Rc::downgrade(&five);
        .               ///
        .               /// assert_eq!(1, Rc::weak_count(&five));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_counts", since = "1.15.0")]
        .               pub fn weak_count(this: &Self) -> usize {
   29,415 ( 0.00%)          this.inner().weak() - 1
        .               }
        .           
        .               /// Gets the number of strong (`Rc`) pointers to this allocation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
        .               pub unsafe fn decrement_strong_count(ptr: *const T) {
        .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
        .               }
        .           
        .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
        .               /// this allocation.
        .               #[inline]
        .               fn is_unique(this: &Self) -> bool {
      834 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`, if there are
        .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
        .               ///
        .               /// Returns [`None`] otherwise, because it is not safe to
        .               /// mutate a shared value.
        .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
        .               /// assert_eq!(*x, 4);
        .               ///
        .               /// let _y = Rc::clone(&x);
        .               /// assert!(Rc::get_mut(&mut x).is_none());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
        .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
      278 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
        .               }
        .           
        .               /// Returns a mutable reference into the given `Rc`,
        .               /// without any check.
        .               ///
        .               /// See also [`get_mut`], which is safe and does appropriate checks.
        .               ///
        .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1085 ----------------------------------------
        .               /// let mut x = Rc::new(String::new());
        .               /// unsafe {
        .               ///     Rc::get_mut_unchecked(&mut x).push_str("foo")
        .               /// }
        .               /// assert_eq!(*x, "foo");
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
   38,774 ( 0.00%)      pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
        .                   // We are careful to *not* create a reference covering the "count" fields, as
        .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
  140,690 ( 0.00%)          unsafe { &mut (*this.ptr.as_ptr()).value }
   38,774 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[stable(feature = "ptr_eq", since = "1.17.0")]
        .               /// Returns `true` if the two `Rc`s point to the same allocation
        .               /// (in a vein similar to [`ptr::eq`]).
        .               ///
        .               /// # Examples
        .               ///
-- line 1105 ----------------------------------------
-- line 1109 ----------------------------------------
        .               /// let five = Rc::new(5);
        .               /// let same_five = Rc::clone(&five);
        .               /// let other_five = Rc::new(5);
        .               ///
        .               /// assert!(Rc::ptr_eq(&five, &same_five));
        .               /// assert!(!Rc::ptr_eq(&five, &other_five));
        .               /// ```
        .               pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    5,296 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
        .               }
        .           }
        .           
        .           impl<T: Clone> Rc<T> {
        .               /// Makes a mutable reference into the given `Rc`.
        .               ///
        .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
        .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
-- line 1125 ----------------------------------------
-- line 1167 ----------------------------------------
        .               /// *Rc::make_mut(&mut data) += 1;
        .               ///
        .               /// assert!(76 == *data);
        .               /// assert!(weak.upgrade().is_none());
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rc_unique", since = "1.4.0")]
   52,266 ( 0.00%)      pub fn make_mut(this: &mut Self) -> &mut T {
   31,086 ( 0.00%)          if Rc::strong_count(this) != 1 {
        .                       // Gotta clone the data, there are other Rcs.
        .                       // Pre-allocate memory to allow writing the cloned value directly.
    1,720 ( 0.00%)              let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           (**this).write_clone_into_raw(data.as_mut_ptr());
    1,556 ( 0.00%)                  *this = rc.assume_init();
        .                       }
   19,054 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
        .                       // Can just steal the data, all that's left is Weaks
        .                       let mut rc = Self::new_uninit();
        .                       unsafe {
        .                           let data = Rc::get_mut_unchecked(&mut rc);
        .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
        .           
        .                           this.inner().dec_strong();
        .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
        .                           ptr::write(this, rc.assume_init());
        .                       }
        .                   }
        .                   // This unsafety is ok because we're guaranteed that the pointer
        .                   // returned is the *only* pointer that will ever be returned to T. Our
        .                   // reference count is guaranteed to be 1 at this point, and we required
        .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
        .                   // reference to the allocation.
   10,619 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
   62,628 ( 0.00%)      }
        .           }
        .           
        .           impl Rc<dyn Any> {
        .               #[inline]
        .               #[stable(feature = "rc_downcast", since = "1.29.0")]
        .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
        .               ///
        .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Copy elements from slice into newly allocated Rc<\[T\]>
        .               ///
        .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
        .               #[cfg(not(no_global_oom_handling))]
    7,100 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
        .                   unsafe {
        .                       let ptr = Self::allocate_for_slice(v.len());
    1,514 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
        .                       Self::from_ptr(ptr)
        .                   }
    9,136 ( 0.00%)      }
        .           
        .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
        .               ///
        .               /// Behavior is undefined should the size be wrong.
        .               #[cfg(not(no_global_oom_handling))]
        .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
        .                   // Panic guard while cloning T elements.
        .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
        .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
        .               #[inline]
        .               fn from_slice(v: &[T]) -> Self {
       13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Deref for Rc<T> {
        .               type Target = T;
        .           
        .               #[inline(always)]
        .               fn deref(&self) -> &T {
  274,252 ( 0.01%)          &self.inner().value
        .               }
        .           }
        .           
        .           #[unstable(feature = "receiver_trait", issue = "none")]
        .           impl<T: ?Sized> Receiver for Rc<T> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
-- line 1445 ----------------------------------------
-- line 1463 ----------------------------------------
        .               /// }
        .               ///
        .               /// let foo  = Rc::new(Foo);
        .               /// let foo2 = Rc::clone(&foo);
        .               ///
        .               /// drop(foo);    // Doesn't print anything
        .               /// drop(foo2);   // Prints "dropped!"
        .               /// ```
2,076,243 ( 0.07%)      fn drop(&mut self) {
        .                   unsafe {
  464,690 ( 0.01%)              self.inner().dec_strong();
1,421,030 ( 0.05%)              if self.inner().strong() == 0 {
        .                           // destroy the contained object
  136,723 ( 0.00%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
        .           
        .                           // remove the implicit "strong weak" pointer now that we've
        .                           // destroyed the contents.
   19,388 ( 0.00%)                  self.inner().dec_weak();
        .           
  501,407 ( 0.02%)                  if self.inner().weak() == 0 {
  214,543 ( 0.01%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
        .                           }
        .                       }
        .                   }
1,408,430 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Clone for Rc<T> {
        .               /// Makes a clone of the `Rc` pointer.
        .               ///
        .               /// This creates another pointer to the same allocation, increasing the
        .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1499 ----------------------------------------
        .               /// ```
        .               /// use std::rc::Rc;
        .               ///
        .               /// let five = Rc::new(5);
        .               ///
        .               /// let _ = Rc::clone(&five);
        .               /// ```
        .               #[inline]
   80,112 ( 0.00%)      fn clone(&self) -> Rc<T> {
        .                   unsafe {
   20,028 ( 0.00%)              self.inner().inc_strong();
   60,084 ( 0.00%)              Self::from_inner(self.ptr)
        .                   }
   40,056 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Default> Default for Rc<T> {
        .               /// Creates a new `Rc<T>`, with the `Default` value for `T`.
        .               ///
        .               /// # Examples
-- line 1520 ----------------------------------------
-- line 1562 ----------------------------------------
        .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
        .           /// the same value, than two `&T`s.
        .           ///
        .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
        .               #[inline]
        .               fn eq(&self, other: &Rc<T>) -> bool {
    6,246 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
        .               }
        .           
        .               #[inline]
        .               fn ne(&self, other: &Rc<T>) -> bool {
        .                   !Rc::ptr_eq(self, other) && **self != **other
        .               }
        .           }
        .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
        .               /// # use std::rc::Rc;
        .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
        .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
        .               /// assert_eq!(vec![1, 2, 3], *shared);
        .               /// ```
        .               #[inline]
        .               fn from(mut v: Vec<T>) -> Rc<[T]> {
        .                   unsafe {
    2,050 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
        .           
        .                       // Allow the Vec to free its memory, but not destroy its contents
        .                       v.set_len(0);
        .           
        .                       rc
        .                   }
        .               }
        .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[must_use]
        .               pub fn new() -> Weak<T> {
        .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
        .               }
        .           }
        .           
        .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
        .               let address = ptr as *mut () as usize;
       28 ( 0.00%)      address == usize::MAX
        .           }
        .           
        .           /// Helper type to allow accessing the reference counts without
        .           /// making any assertions about the data field.
        .           struct WeakInner<'a> {
        .               weak: &'a Cell<usize>,
        .               strong: &'a Cell<usize>,
        .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
        .                       })
        .                       .unwrap_or(0)
        .               }
        .           
        .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
        .               /// (i.e., when this `Weak` was created by `Weak::new`).
        .               #[inline]
        .               fn inner(&self) -> Option<WeakInner<'_>> {
        1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
        .                       None
        .                   } else {
        .                       // We are careful to *not* create a reference covering the "data" field, as
        .                       // the field may be mutated concurrently (for example, if the last `Rc`
        .                       // is dropped, the data field will be dropped in-place).
        .                       Some(unsafe {
        .                           let ptr = self.ptr.as_ptr();
        .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
        .               /// assert!(other_weak_foo.upgrade().is_none());
        .               /// ```
        .               fn drop(&mut self) {
        .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
        .           
        .                   inner.dec_weak();
        .                   // the weak count starts at 1, and will only go to zero if all
        .                   // the strong pointers have disappeared.
        2 ( 0.00%)          if inner.weak() == 0 {
        .                       unsafe {
        .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2463 ----------------------------------------
        .           // clone these much in Rust thanks to ownership and move-semantics.
        .           
        .           #[doc(hidden)]
        .           trait RcInnerPtr {
        .               fn weak_ref(&self) -> &Cell<usize>;
        .               fn strong_ref(&self) -> &Cell<usize>;
        .           
        .               #[inline]
  494,290 ( 0.02%)      fn strong(&self) -> usize {
  197,716 ( 0.01%)          self.strong_ref().get()
  197,716 ( 0.01%)      }
        .           
        .               #[inline]
   60,084 ( 0.00%)      fn inc_strong(&self) {
  473,751 ( 0.02%)          let strong = self.strong();
        .           
        .                   // We want to abort on overflow instead of dropping the value.
        .                   // The reference count will never be zero when this is called;
        .                   // nevertheless, we insert an abort here to hint LLVM at
        .                   // an otherwise missed optimization.
1,424,989 ( 0.05%)          if strong == 0 || strong == usize::MAX {
        .                       abort();
        .                   }
  163,496 ( 0.01%)          self.strong_ref().set(strong + 1);
   40,056 ( 0.00%)      }
        .           
        .               #[inline]
  236,490 ( 0.01%)      fn dec_strong(&self) {
2,187,059 ( 0.07%)          self.strong_ref().set(self.strong() - 1);
   78,830 ( 0.00%)      }
        .           
        .               #[inline]
  116,322 ( 0.00%)      fn weak(&self) -> usize {
   77,548 ( 0.00%)          self.weak_ref().get()
   77,548 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn inc_weak(&self) {
        .                   let weak = self.weak();
        .           
        .                   // We want to abort on overflow instead of dropping the value.
        .                   // The reference count will never be zero when this is called;
        .                   // nevertheless, we insert an abort here to hint LLVM at
-- line 2505 ----------------------------------------
-- line 2506 ----------------------------------------
        .                   // an otherwise missed optimization.
        .                   if weak == 0 || weak == usize::MAX {
        .                       abort();
        .                   }
        .                   self.weak_ref().set(weak + 1);
        .               }
        .           
        .               #[inline]
   77,548 ( 0.00%)      fn dec_weak(&self) {
  769,591 ( 0.02%)          self.weak_ref().set(self.weak() - 1);
   38,774 ( 0.00%)      }
        .           }
        .           
        .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
        .               #[inline(always)]
        .               fn weak_ref(&self) -> &Cell<usize> {
  116,322 ( 0.00%)          &self.weak
        .               }
        .           
        .               #[inline(always)]
        .               fn strong_ref(&self) -> &Cell<usize> {
        .                   &self.strong
        .               }
        .           }
        .           
-- line 2530 ----------------------------------------

1,600,887 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           ///
        .           /// This type implements the [`Allocator`] trait by forwarding calls
        .           /// to the allocator registered with the `#[global_allocator]` attribute
        .           /// if there is one, or the `std` crate’s default.
        .           ///
        .           /// Note: while this type is unstable, the functionality it provides can be
        .           /// accessed through the [free functions in `alloc`](self#functions).
        .           #[unstable(feature = "allocator_api", issue = "32838")]
    8,388 ( 0.00%)  #[derive(Copy, Clone, Default, Debug)]
        .           #[cfg(not(test))]
        .           pub struct Global;
        .           
        .           #[cfg(test)]
        .           pub use std::alloc::Global;
        .           
        .           /// Allocate memory with the global allocator.
        .           ///
-- line 56 ----------------------------------------
-- line 78 ----------------------------------------
        .           ///     assert_eq!(*(ptr as *mut u16), 42);
        .           ///
        .           ///     dealloc(ptr, layout);
        .           /// }
        .           /// ```
        .           #[stable(feature = "global_alloc", since = "1.28.0")]
        .           #[must_use = "losing the pointer will leak memory"]
        .           #[inline]
  210,141 ( 0.01%)  pub unsafe fn alloc(layout: Layout) -> *mut u8 {
4,418,785 ( 0.14%)      unsafe { __rust_alloc(layout.size(), layout.align()) }
  140,094 ( 0.00%)  }
        .           
        .           /// Deallocate memory with the global allocator.
        .           ///
        .           /// This function forwards calls to the [`GlobalAlloc::dealloc`] method
        .           /// of the allocator registered with the `#[global_allocator]` attribute
        .           /// if there is one, or the `std` crate’s default.
        .           ///
        .           /// This function is expected to be deprecated in favor of the `dealloc` method
        .           /// of the [`Global`] type when it and the [`Allocator`] trait become stable.
        .           ///
        .           /// # Safety
        .           ///
        .           /// See [`GlobalAlloc::dealloc`].
        .           #[stable(feature = "global_alloc", since = "1.28.0")]
        .           #[inline]
  728,825 ( 0.02%)  pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
8,560,536 ( 0.27%)      unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
  291,530 ( 0.01%)  }
        .           
        .           /// Reallocate memory with the global allocator.
        .           ///
        .           /// This function forwards calls to the [`GlobalAlloc::realloc`] method
        .           /// of the allocator registered with the `#[global_allocator]` attribute
        .           /// if there is one, or the `std` crate’s default.
        .           ///
        .           /// This function is expected to be deprecated in favor of the `realloc` method
-- line 114 ----------------------------------------
-- line 115 ----------------------------------------
        .           /// of the [`Global`] type when it and the [`Allocator`] trait become stable.
        .           ///
        .           /// # Safety
        .           ///
        .           /// See [`GlobalAlloc::realloc`].
        .           #[stable(feature = "global_alloc", since = "1.28.0")]
        .           #[must_use = "losing the pointer will leak memory"]
        .           #[inline]
   61,236 ( 0.00%)  pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  337,610 ( 0.01%)      unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
   17,496 ( 0.00%)  }
        .           
        .           /// Allocate zero-initialized memory with the global allocator.
        .           ///
        .           /// This function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method
        .           /// of the allocator registered with the `#[global_allocator]` attribute
        .           /// if there is one, or the `std` crate’s default.
        .           ///
        .           /// This function is expected to be deprecated in favor of the `alloc_zeroed` method
-- line 133 ----------------------------------------
-- line 150 ----------------------------------------
        .           ///
        .           ///     dealloc(ptr, layout);
        .           /// }
        .           /// ```
        .           #[stable(feature = "global_alloc", since = "1.28.0")]
        .           #[must_use = "losing the pointer will leak memory"]
        .           #[inline]
        .           pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
   71,751 ( 0.00%)      unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
        .           }
        .           
        .           #[cfg(not(test))]
        .           impl Global {
        .               #[inline]
  568,856 ( 0.02%)      fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
  971,243 ( 0.03%)          match layout.size() {
   12,720 ( 0.00%)              0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
        .                       // SAFETY: `layout` is non-zero in size,
   70,047 ( 0.00%)              size => unsafe {
  560,376 ( 0.02%)                  let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
3,364,613 ( 0.11%)                  let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
  420,282 ( 0.01%)                  Ok(NonNull::slice_from_raw_parts(ptr, size))
        .                       },
        .                   }
  355,535 ( 0.01%)      }
        .           
        .               // SAFETY: Same as `Allocator::grow`
        .               #[inline]
   90,090 ( 0.00%)      unsafe fn grow_impl(
        .                   &self,
        .                   ptr: NonNull<u8>,
        .                   old_layout: Layout,
        .                   new_layout: Layout,
        .                   zeroed: bool,
        .               ) -> Result<NonNull<[u8]>, AllocError> {
        .                   debug_assert!(
        .                       new_layout.size() >= old_layout.size(),
        .                       "`new_layout.size()` must be greater than or equal to `old_layout.size()`"
        .                   );
        .           
  192,154 ( 0.01%)          match old_layout.size() {
        .                       0 => self.alloc_impl(new_layout, zeroed),
        .           
        .                       // SAFETY: `new_size` is non-zero as `old_size` is greater than or equal to `new_size`
        .                       // as required by safety conditions. Other conditions must be upheld by the caller
   90,090 ( 0.00%)              old_size if old_layout.align() == new_layout.align() => unsafe {
   27,720 ( 0.00%)                  let new_size = new_layout.size();
        .           
        .                           // `realloc` probably checks for `new_size >= old_layout.size()` or something similar.
   13,860 ( 0.00%)                  intrinsics::assume(new_size >= old_layout.size());
        .           
   48,510 ( 0.00%)                  let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
  103,950 ( 0.00%)                  let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
   20,790 ( 0.00%)                  if zeroed {
        .                               raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
        .                           }
   41,580 ( 0.00%)                  Ok(NonNull::slice_from_raw_parts(ptr, new_size))
        .                       },
        .           
        .                       // SAFETY: because `new_layout.size()` must be greater than or equal to `old_size`,
        .                       // both the old and new memory allocation are valid for reads and writes for `old_size`
        .                       // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap
        .                       // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract
        .                       // for `dealloc` must be upheld by the caller.
        .                       old_size => unsafe {
        .                           let new_ptr = self.alloc_impl(new_layout, zeroed)?;
        .                           ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
        .                           self.deallocate(ptr, old_layout);
        .                           Ok(new_ptr)
        .                       },
        .                   }
   34,650 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           #[cfg(not(test))]
        .           unsafe impl Allocator for Global {
        .               #[inline]
  284,428 ( 0.01%)      fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
  284,428 ( 0.01%)          self.alloc_impl(layout, false)
  142,214 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
        .                   self.alloc_impl(layout, true)
        .               }
        .           
        .               #[inline]
  875,538 ( 0.03%)      unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
1,079,507 ( 0.03%)          if layout.size() != 0 {
        .                       // SAFETY: `layout` is non-zero in size,
        .                       // other conditions must be upheld by the caller
  728,825 ( 0.02%)              unsafe { dealloc(ptr.as_ptr(), layout) }
        .                   }
  291,846 ( 0.01%)      }
        .           
        .               #[inline]
   48,510 ( 0.00%)      unsafe fn grow(
        .                   &self,
        .                   ptr: NonNull<u8>,
        .                   old_layout: Layout,
        .                   new_layout: Layout,
        .               ) -> Result<NonNull<[u8]>, AllocError> {
        .                   // SAFETY: all conditions must be upheld by the caller
   34,650 ( 0.00%)          unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
   13,860 ( 0.00%)      }
        .           
        .               #[inline]
        .               unsafe fn grow_zeroed(
        .                   &self,
        .                   ptr: NonNull<u8>,
        .                   old_layout: Layout,
        .                   new_layout: Layout,
        .               ) -> Result<NonNull<[u8]>, AllocError> {
        .                   // SAFETY: all conditions must be upheld by the caller
        .                   unsafe { self.grow_impl(ptr, old_layout, new_layout, true) }
        .               }
        .           
        .               #[inline]
   16,362 ( 0.00%)      unsafe fn shrink(
        .                   &self,
        .                   ptr: NonNull<u8>,
        .                   old_layout: Layout,
        .                   new_layout: Layout,
        .               ) -> Result<NonNull<[u8]>, AllocError> {
        .                   debug_assert!(
        .                       new_layout.size() <= old_layout.size(),
        .                       "`new_layout.size()` must be smaller than or equal to `old_layout.size()`"
        .                   );
        .           
   11,662 ( 0.00%)          match new_layout.size() {
        .                       // SAFETY: conditions must be upheld by the caller
        .                       0 => unsafe {
        .                           self.deallocate(ptr, old_layout);
        .                           Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))
        .                       },
        .           
        .                       // SAFETY: `new_size` is non-zero. Other conditions must be upheld by the caller
   23,634 ( 0.00%)              new_size if old_layout.align() == new_layout.align() => unsafe {
        .                           // `realloc` probably checks for `new_size <= old_layout.size()` or something similar.
    3,636 ( 0.00%)                  intrinsics::assume(new_size <= old_layout.size());
        .           
   12,726 ( 0.00%)                  let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
   28,024 ( 0.00%)                  let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
   10,908 ( 0.00%)                  Ok(NonNull::slice_from_raw_parts(ptr, new_size))
        .                       },
        .           
        .                       // SAFETY: because `new_size` must be smaller than or equal to `old_layout.size()`,
        .                       // both the old and new memory allocation are valid for reads and writes for `new_size`
        .                       // bytes. Also, because the old allocation wasn't yet deallocated, it cannot overlap
        .                       // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract
        .                       // for `dealloc` must be upheld by the caller.
        .                       new_size => unsafe {
        .                           let new_ptr = self.allocate(new_layout)?;
        .                           ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), new_size);
        .                           self.deallocate(ptr, old_layout);
        .                           Ok(new_ptr)
        .                       },
        .                   }
    9,090 ( 0.00%)      }
        .           }
        .           
        .           /// The allocator for unique pointers.
        .           #[cfg(all(not(no_global_oom_handling), not(test)))]
        .           #[lang = "exchange_malloc"]
        .           #[inline]
  119,119 ( 0.00%)  unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
  195,760 ( 0.01%)      let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
  383,096 ( 0.01%)      match Global.allocate(layout) {
  274,064 ( 0.01%)          Ok(ptr) => ptr.as_mut_ptr(),
        .                   Err(_) => handle_alloc_error(layout),
        .               }
   81,570 ( 0.00%)  }
        .           
        .           #[cfg_attr(not(test), lang = "box_free")]
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_box", issue = "92521")]
        .           // This signature has to be the same as `Box`, otherwise an ICE will happen.
        .           // When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as
        .           // well.
        .           // For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,
        .           // this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.
   31,958 ( 0.00%)  pub(crate) const unsafe fn box_free<T: ?Sized, A: ~const Allocator + ~const Drop>(
        .               ptr: Unique<T>,
        .               alloc: A,
        .           ) {
        .               unsafe {
  145,905 ( 0.00%)          let size = size_of_val(ptr.as_ref());
  125,016 ( 0.00%)          let align = min_align_of_val(ptr.as_ref());
  141,540 ( 0.00%)          let layout = Layout::from_size_align_unchecked(size, align);
  159,188 ( 0.01%)          alloc.deallocate(From::from(ptr.cast()), layout)
        .               }
   42,462 ( 0.00%)  }
        .           
        .           // # Allocation error handler
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           extern "Rust" {
        .               // This is the magic symbol to call the global alloc error handler.  rustc generates
        .               // it to call `__rg_oom` if there is a `#[alloc_error_handler]`, or to call the
        .               // default implementations below (`__rdl_oom`) otherwise.
-- line 350 ----------------------------------------
-- line 417 ----------------------------------------
        .           /// Specialize clones into pre-allocated, uninitialized memory.
        .           /// Used by `Box::clone` and `Rc`/`Arc::make_mut`.
        .           pub(crate) trait WriteCloneIntoRaw: Sized {
        .               unsafe fn write_clone_into_raw(&self, target: *mut Self);
        .           }
        .           
        .           impl<T: Clone> WriteCloneIntoRaw for T {
        .               #[inline]
    7,839 ( 0.00%)      default unsafe fn write_clone_into_raw(&self, target: *mut Self) {
        .                   // Having allocated *first* may allow the optimizer to create
        .                   // the cloned value in-place, skipping the local and move.
    2,315 ( 0.00%)          unsafe { target.write(self.clone()) };
    4,558 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> WriteCloneIntoRaw for T {
        .               #[inline]
        .               unsafe fn write_clone_into_raw(&self, target: *mut Self) {
        .                   // We can always copy in-place, without ever involving a local value.
        .                   unsafe { target.copy_from_nonoverlapping(self, 1) };
        .               }
-- line 437 ----------------------------------------

3,376,139 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
1,828,255 ( 0.06%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  582,521 ( 0.02%)      Token(Token),
        .               /// A delimited sequence of token trees.
   26,512 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
        .                           delim == delim2 && tts.eq_unspanned(&tts2)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
      786 ( 0.00%)          match self {
      352 ( 0.00%)              TokenTree::Token(token) => token.span,
      384 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
      297 ( 0.00%)      }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
      786 ( 0.00%)          match self {
      297 ( 0.00%)              TokenTree::Token(token) => token.span = span,
      192 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
      393 ( 0.00%)      }
        .           
  108,626 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  477,576 ( 0.02%)          TokenTree::Token(Token::new(kind, span))
  108,626 ( 0.00%)      }
        .           
        .               /// Returns the opening delimiter as a token tree.
    5,447 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   16,341 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
    5,447 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
    5,321 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   15,963 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
    5,321 ( 0.00%)      }
        .           
    1,728 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    1,152 ( 0.00%)          match self {
    5,184 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
    2,304 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
    6,876 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
   38,390 ( 0.00%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
    6,112 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
        .           
        .           /// A lazy version of [`TokenStream`], which defers creation
        .           /// of an actual `TokenStream` until it is needed.
        .           /// `Box` is here only to reduce the structure size.
        .           #[derive(Clone)]
        .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
        .           
        .           impl LazyTokenStream {
      144 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
        .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      144 ( 0.00%)      }
        .           
        .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
      460 ( 0.00%)          self.0.create_token_stream()
        .               }
        .           }
        .           
        .           impl fmt::Debug for LazyTokenStream {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
        .               }
        .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
   33,028 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   33,028 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
      115 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
      513 ( 0.00%)          let trees: Vec<_> = self
        .                       .0
        .                       .iter()
   12,223 ( 0.00%)              .flat_map(|tree| match &tree.0 {
    6,692 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
   16,730 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
        .                           }
    7,960 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
    1,194 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
      398 ( 0.00%)                      tree.1,
        .                           )]
        .                           .into_iter(),
        .                           AttrAnnotatedTokenTree::Attributes(data) => {
        .                               let mut outer_attrs = Vec::new();
        .                               let mut inner_attrs = Vec::new();
        .                               for attr in &data.attrs {
      152 ( 0.00%)                          match attr.style {
        .                                       crate::AttrStyle::Outer => {
        .                                           outer_attrs.push(attr);
        .                                       }
        .                                       crate::AttrStyle::Inner => {
        .                                           inner_attrs.push(attr);
        .                                       }
        .                                   }
        .                               }
        .           
       78 ( 0.00%)                      let mut target_tokens: Vec<_> = data
        .                                   .tokens
        .                                   .create_token_stream()
        .                                   .to_tokenstream()
        .                                   .0
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect();
       39 ( 0.00%)                      if !inner_attrs.is_empty() {
        .                                   let mut found = false;
        .                                   // Check the last two trees (to account for a trailing semi)
        .                                   for (tree, _) in target_tokens.iter_mut().rev().take(2) {
        .                                       if let TokenTree::Delimited(span, delim, delim_tokens) = tree {
        .                                           // Inner attributes are only supported on extern blocks, functions, impls,
        .                                           // and modules. All of these have their inner attributes placed at
        .                                           // the beginning of the rightmost outermost braced group:
        .                                           // e.g. fn foo() { #![my_attr} }
-- line 248 ----------------------------------------
-- line 269 ----------------------------------------
        .           
        .                                   assert!(
        .                                       found,
        .                                       "Failed to find trailing delimited group in: {:?}",
        .                                       target_tokens
        .                                   );
        .                               }
        .                               let mut flat: SmallVec<[_; 1]> = SmallVec::new();
      659 ( 0.00%)                      for attr in outer_attrs {
        .                                   // FIXME: Make this more efficient
      456 ( 0.00%)                          flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
        .                               }
      312 ( 0.00%)                      flat.extend(target_tokens);
      390 ( 0.00%)                      flat.into_iter()
       39 ( 0.00%)                  }
        .                       })
        .                       .collect();
        .                   TokenStream::new(trees)
      230 ( 0.00%)      }
        .           }
        .           
        .           /// Stores the tokens for an attribute target, along
        .           /// with its attributes.
        .           ///
        .           /// This is constructed during parsing when we need to capture
        .           /// tokens.
        .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  104,302 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 365 ----------------------------------------
        .                       return Some((TokenStream::new(new_stream), sp));
        .                   }
        .                   None
        .               }
        .           }
        .           
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      380 ( 0.00%)          AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
  494,145 ( 0.02%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
   20,242 ( 0.00%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
      304 ( 0.00%)      fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      304 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      456 ( 0.00%)      }
        .           }
        .           
        .           impl Eq for TokenStream {}
        .           
        .           impl PartialEq<TokenStream> for TokenStream {
        .               fn eq(&self, other: &TokenStream) -> bool {
        .                   self.trees().eq(other.trees())
        .               }
-- line 400 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
    3,929 ( 0.00%)          self.0.is_empty()
    3,929 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  281,559 ( 0.01%)          self.0.len()
      257 ( 0.00%)      }
        .           
   37,104 ( 0.00%)      pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
   18,474 ( 0.00%)          match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
        .                           // the elements from the subsequent streams. This requires
        .                           // using `make_mut()` on the first stream, and in practice this
        .                           // doesn't cause cloning 99.9% of the time.
        .                           //
-- line 425 ----------------------------------------
-- line 430 ----------------------------------------
        .           
        .                           // Determine how much the first stream will be extended.
        .                           // Needed to avoid quadratic blow up from on-the-fly
        .                           // reallocations (#57735).
        .                           let num_appends = streams.iter().skip(1).map(|ts| ts.len()).sum();
        .           
        .                           // Get the first stream. If it's `None`, create an empty
        .                           // stream.
    9,198 ( 0.00%)                  let mut iter = streams.drain(..);
    9,198 ( 0.00%)                  let mut first_stream_lrc = iter.next().unwrap().0;
        .           
        .                           // Append the elements to the first stream, after reserving
        .                           // space for them.
    4,599 ( 0.00%)                  let first_vec_mut = Lrc::make_mut(&mut first_stream_lrc);
        .                           first_vec_mut.reserve(num_appends);
  113,505 ( 0.00%)                  for stream in iter {
        .                               first_vec_mut.extend(stream.0.iter().cloned());
        .                           }
        .           
        .                           // Create the final `TokenStream`.
    9,198 ( 0.00%)                  TokenStream(first_stream_lrc)
        .                       }
        .                   }
   41,742 ( 0.00%)      }
        .           
        .               pub fn trees(&self) -> Cursor {
   85,395 ( 0.00%)          self.clone().into_trees()
  170,790 ( 0.01%)      }
        .           
    6,572 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
   13,144 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
        .                       }
        .                   }
        .                   t1.next().is_none() && t2.next().is_none()
        .               }
        .           
        .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
      100 ( 0.00%)          TokenStream(Lrc::new(
        .                       self.0
        .                           .iter()
        .                           .enumerate()
    2,358 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
        .                           .collect(),
        .                   ))
        .               }
        .           }
        .           
        .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
        .           #[derive(Clone)]
        .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
        .           
        .           impl TokenStreamBuilder {
    4,638 ( 0.00%)      pub fn new() -> TokenStreamBuilder {
    4,638 ( 0.00%)          TokenStreamBuilder(SmallVec::new())
    4,638 ( 0.00%)      }
        .           
  317,655 ( 0.01%)      pub fn push<T: Into<TokenStream>>(&mut self, stream: T) {
   35,295 ( 0.00%)          let mut stream = stream.into();
        .           
        .                   // If `self` is not empty and the last tree within the last stream is a
        .                   // token tree marked with `Joint`...
  105,885 ( 0.00%)          if let Some(TokenStream(ref mut last_stream_lrc)) = self.0.last_mut() {
  190,745 ( 0.01%)              if let Some((TokenTree::Token(last_token), Spacing::Joint)) = last_stream_lrc.last() {
        .                           // ...and `stream` is not empty and the first tree within it is
        .                           // a token tree...
        .                           let TokenStream(ref mut stream_lrc) = stream;
   14,413 ( 0.00%)                  if let Some((TokenTree::Token(token), spacing)) = stream_lrc.first() {
        .                               // ...and the two tokens can be glued together...
   14,413 ( 0.00%)                      if let Some(glued_tok) = last_token.glue(&token) {
        .                                   // ...then do so, by overwriting the last token
        .                                   // tree in `self` and removing the first token tree
        .                                   // from `stream`. This requires using `make_mut()`
        .                                   // on the last stream in `self` and on `stream`,
        .                                   // and in practice this doesn't cause cloning 99.9%
        .                                   // of the time.
        .           
        .                                   // Overwrite the last token tree with the merged
        .                                   // token.
    2,059 ( 0.00%)                          let last_vec_mut = Lrc::make_mut(last_stream_lrc);
   47,357 ( 0.00%)                          *last_vec_mut.last_mut().unwrap() = (TokenTree::Token(glued_tok), *spacing);
        .           
        .                                   // Remove the first token tree from `stream`. (This
        .                                   // is almost always the only tree in `stream`.)
    2,059 ( 0.00%)                          let stream_vec_mut = Lrc::make_mut(stream_lrc);
   12,354 ( 0.00%)                          stream_vec_mut.remove(0);
        .           
        .                                   // Don't push `stream` if it's empty -- that could
        .                                   // block subsequent token gluing, by getting
        .                                   // between two token trees that should be glued
        .                                   // together.
    6,177 ( 0.00%)                          if !stream.is_empty() {
        .                                       self.0.push(stream);
        .                                   }
        .                                   return;
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self.0.push(stream);
  282,360 ( 0.01%)      }
        .           
    4,638 ( 0.00%)      pub fn build(self) -> TokenStream {
   27,828 ( 0.00%)          TokenStream::from_streams(self.0)
    9,276 ( 0.00%)      }
        .           }
        .           
        .           /// By-reference iterator over a [`TokenStream`].
        .           #[derive(Clone)]
        .           pub struct CursorRef<'t> {
        .               stream: &'t TokenStream,
        .               index: usize,
        .           }
-- line 550 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
  520,440 ( 0.02%)      fn next(&mut self) -> Option<TokenTree> {
  548,366 ( 0.02%)          self.next_with_spacing().map(|(tree, _)| tree)
  693,920 ( 0.02%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
  394,640 ( 0.01%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
  757,224 ( 0.02%)          if self.index < self.stream.len() {
  308,476 ( 0.01%)              self.index += 1;
  448,546 ( 0.01%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
   29,700 ( 0.00%)              None
        .                   }
  473,568 ( 0.02%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
   35,613 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
   71,226 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
   71,226 ( 0.00%)      }
        .           }
        .           
   43,655 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
    7,206 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
   14,412 ( 0.00%)      }
        .           
    4,536 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
    2,268 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
    2,343 ( 0.00%)      }
        .           
   45,008 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
   33,756 ( 0.00%)      }
        .           }

  279,905 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                 

-- line 491 ----------------------------------------
        .           
        .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
        .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
        .           use crate::{convert, fmt, hint};
        .           
        .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
        .           ///
        .           /// See the [module documentation](self) for details.
      302 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
        .           #[rustc_diagnostic_item = "Result"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Result<T, E> {
        .               /// Contains the success value
        .               #[lang = "Ok"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       63 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           
        .               /// Contains the error value
        .               #[lang = "Err"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 533 ----------------------------------------
        .               ///
        .               /// let x: Result<i32, &str> = Err("Some error message");
        .               /// assert_eq!(x.is_ok(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   10,286 ( 0.00%)      pub const fn is_ok(&self) -> bool {
   18,917 ( 0.00%)          matches!(*self, Ok(_))
   25,715 ( 0.00%)      }
        .           
        .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
        .               ///
-- line 551 ----------------------------------------
-- line 627 ----------------------------------------
        .               /// let x: Result<u32, &str> = Ok(2);
        .               /// assert_eq!(x.ok(), Some(2));
        .               ///
        .               /// let x: Result<u32, &str> = Err("Nothing here");
        .               /// assert_eq!(x.ok(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    4,908 ( 0.00%)      pub fn ok(self) -> Option<T> {
   52,435 ( 0.00%)          match self {
   12,093 ( 0.00%)              Ok(x) => Some(x),
    2,386 ( 0.00%)              Err(_) => None,
        .                   }
   21,950 ( 0.00%)      }
        .           
        .               /// Converts from `Result<T, E>` to [`Option<E>`].
        .               ///
        .               /// Converts `self` into an [`Option<E>`], consuming `self`,
        .               /// and discarding the success value, if any.
        .               ///
        .               /// # Examples
        .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn err(self) -> Option<E> {
        .                   match self {
        .                       Ok(_) => None,
        .                       Err(x) => Some(x),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Adapter for working with references
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
        .               ///
        .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
        .               ///
        .               /// let x: Result<u32, &str> = Err("Error");
        .               /// assert_eq!(x.as_ref(), Err(&"Error"));
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Result<&T, &E> {
       62 ( 0.00%)          match *self {
        .                       Ok(ref x) => Ok(x),
        .                       Err(ref x) => Err(x),
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
        .               ///
        .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
        .               /// let mut x: Result<i32, i32> = Err(13);
        .               /// mutate(&mut x);
        .               /// assert_eq!(x.unwrap_err(), 0);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
        .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
       27 ( 0.00%)          match *self {
        .                       Ok(ref mut x) => Ok(x),
        .                       Err(ref mut x) => Err(x),
        .                   }
        .               }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Transforming contained values
        .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 746 ----------------------------------------
        .               ///     match num.parse::<i32>().map(|i| i * 2) {
        .               ///         Ok(n) => println!("{}", n),
        .               ///         Err(..) => {}
        .               ///     }
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   17,584 ( 0.00%)      pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
  390,459 ( 0.01%)          match self {
  448,442 ( 0.01%)              Ok(t) => Ok(op(t)),
  104,582 ( 0.00%)              Err(e) => Err(e),
        .                   }
   21,980 ( 0.00%)      }
        .           
        .               /// Returns the provided default (if [`Err`]), or
        .               /// applies a function to the contained value (if [`Ok`]),
        .               ///
        .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`map_or_else`],
        .               /// which is lazily evaluated.
        .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
        .               ///
        .               /// let x: Result<&str, _> = Err("bar");
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "result_map_or", since = "1.41.0")]
        .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
    1,550 ( 0.00%)          match self {
      712 ( 0.00%)              Ok(t) => f(t),
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
        .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
        .               ///
        .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// let x: Result<u32, u32> = Ok(2);
        .               /// assert_eq!(x.map_err(stringify), Ok(2));
        .               ///
        .               /// let x: Result<u32, u32> = Err(13);
        .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
  605,412 ( 0.02%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
2,711,545 ( 0.09%)          match self {
3,125,007 ( 0.10%)              Ok(t) => Ok(t),
   10,887 ( 0.00%)              Err(e) => Err(op(e)),
        .                   }
  569,815 ( 0.02%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 852 ----------------------------------------
-- line 1008 ----------------------------------------
        .               ///
        .               /// ```should_panic
        .               /// let x: Result<u32, &str> = Err("emergency failure");
        .               /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "result_expect", since = "1.4.0")]
  255,601 ( 0.01%)      pub fn expect(self, msg: &str) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
  993,172 ( 0.03%)          match self {
  295,478 ( 0.01%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed(msg, &e),
        .                   }
   58,986 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`Err`]
        .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
        .               /// [`unwrap_or_default`].
        .               ///
-- line 1032 ----------------------------------------
-- line 1051 ----------------------------------------
        .               ///
        .               /// ```should_panic
        .               /// let x: Result<u32, &str> = Err("emergency failure");
        .               /// x.unwrap(); // panics with `emergency failure`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      398 ( 0.00%)      pub fn unwrap(self) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
  381,321 ( 0.01%)          match self {
  185,387 ( 0.01%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
        .                   }
      168 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value or a default
        .               ///
        .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
        .               /// value, otherwise if [`Err`], returns the default value for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
        .               /// [`parse`]: str::parse
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
        .               pub fn unwrap_or_default(self) -> T
        .               where
        .                   T: Default,
        .               {
    3,359 ( 0.00%)          match self {
    2,100 ( 0.00%)              Ok(x) => x,
        .                       Err(_) => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, consuming the `self` value.
        .               ///
        .               /// # Panics
        .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_err(self) -> E
        .               where
        .                   T: fmt::Debug,
        .               {
      664 ( 0.00%)          match self {
        .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
        .                       Err(e) => e,
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value, but never panics.
        .               ///
        .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
        .               /// ```
        .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
        .               #[inline]
        .               pub fn into_ok(self) -> T
        .               where
        .                   E: Into<!>,
        .               {
        .                   match self {
1,497,755 ( 0.05%)              Ok(x) => x,
        .                       Err(e) => e.into(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, but never panics.
        .               ///
        .               /// Unlike [`unwrap_err`], this method is known to never panic on the
        .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
        .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
        .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   11,520 ( 0.00%)          match self {
   17,549 ( 0.00%)              Ok(t) => op(t),
    2,932 ( 0.00%)              Err(e) => Err(e),
        .                   }
        .               }
        .           
        .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
        .               ///
        .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
        .               /// result of a function call, it is recommended to use [`or_else`], which is
        .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
        .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
        .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
        .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
        .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
    1,696 ( 0.00%)          match self {
    5,931 ( 0.00%)              Ok(t) => Ok(t),
        .                       Err(e) => op(e),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
        .               /// assert_eq!(x.unwrap_or(default), 9);
        .               ///
        .               /// let x: Result<u32, &str> = Err("error");
        .               /// assert_eq!(x.unwrap_or(default), default);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_or(self, default: T) -> T {
    1,591 ( 0.00%)          match self {
        6 ( 0.00%)              Ok(t) => t,
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or computes it from a closure.
        .               ///
        .               ///
        .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1405 ----------------------------------------
        .               /// ```
        .               /// fn count(x: &str) -> usize { x.len() }
        .               ///
        .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
        .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      156 ( 0.00%)      pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
1,129,178 ( 0.04%)          match self {
  492,222 ( 0.02%)              Ok(t) => t,
        .                       Err(e) => op(e),
        .                   }
      195 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value,
        .               /// without checking that the value is not an [`Err`].
        .               ///
        .               /// # Safety
        .               ///
        .               /// Calling this method on an [`Err`] is *[undefined behavior]*.
        .               ///
-- line 1426 ----------------------------------------
-- line 1647 ----------------------------------------
        .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
        .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
        .               /// assert_eq!(x.transpose(), y);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "transpose_result", since = "1.33.0")]
        .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
        .               pub const fn transpose(self) -> Option<Result<T, E>> {
      630 ( 0.00%)          match self {
        .                       Ok(Some(x)) => Some(Ok(x)),
        .                       Ok(None) => None,
        .                       Err(e) => Some(Err(e)),
        .                   }
        .               }
        .           }
        .           
        .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
        .               #[inline]
   43,692 ( 0.00%)      fn clone(&self) -> Self {
  219,580 ( 0.01%)          match self {
  183,380 ( 0.01%)              Ok(x) => Ok(x.clone()),
   47,840 ( 0.00%)              Err(x) => Err(x.clone()),
        .                   }
   90,212 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Ok(to), Ok(from)) => to.clone_from(from),
        .                       (Err(to), Err(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
        .               ///
        .               /// Since the third element caused an underflow, no further elements were taken,
        .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
        .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
        .                   // performance bug is closed.
        .           
   14,404 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E> const ops::Try for Result<T, E> {
        .               type Output = T;
        .               type Residual = Result<convert::Infallible, E>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
    1,524 ( 0.00%)          Ok(output)
        .               }
        .           
        .               #[inline]
1,270,859 ( 0.04%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
3,834,951 ( 0.12%)          match self {
4,662,330 ( 0.15%)              Ok(v) => ControlFlow::Continue(v),
  350,664 ( 0.01%)              Err(e) => ControlFlow::Break(Err(e)),
        .                   }
  890,466 ( 0.03%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
        .               for Result<T, F>
        .           {
        .               #[inline]
        .               #[track_caller]
   15,642 ( 0.00%)      fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
        .                   match residual {
  244,351 ( 0.01%)              Err(e) => Err(From::from(e)),
        .                   }
   10,428 ( 0.00%)      }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
        .               type TryType = Result<T, E>;
        .           }

2,649,282 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 136 ----------------------------------------
         .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
         .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
         .           /// [`mem::drop`]: drop
         .           /// [ub]: ../../reference/behavior-considered-undefined.html
         .           #[inline]
         .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
     7,728 ( 0.00%)  pub const fn forget<T>(t: T) {
     2,457 ( 0.00%)      let _ = ManuallyDrop::new(t);
     3,762 ( 0.00%)  }
         .           
         .           /// Like [`forget`], but also accepts unsized values.
         .           ///
         .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
         .           /// stabilized.
         .           #[inline]
         .           #[unstable(feature = "forget_unsized", issue = "none")]
         .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// let y: &[u8] = &x;
         .           /// assert_eq!(13, mem::size_of_val(y));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   296,945 ( 0.01%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   443,715 ( 0.01%)      unsafe { intrinsics::size_of_val(val) }
   210,888 ( 0.01%)  }
         .           
         .           /// Returns the size of the pointed-to value in bytes.
         .           ///
         .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
         .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
         .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
         .           ///
         .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
         .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
         .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
         .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
         .               // SAFETY: the caller must provide a valid raw pointer
        14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
         .           }
         .           
         .           /// Returns the [ABI]-required minimum alignment of a type.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
         .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
         .           ///
         .           /// assert_eq!(4, mem::align_of_val(&5i32));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
         .           #[allow(deprecated)]
    38,774 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: val is a reference, so it's a valid raw pointer
    58,161 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
    38,774 ( 0.00%)  }
         .           
         .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
         .           ///
         .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
         .           ///     }
         .           /// }
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "needs_drop", since = "1.21.0")]
         .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
         .           #[rustc_diagnostic_item = "needs_drop"]
         1 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
         3 ( 0.00%)      intrinsics::needs_drop::<T>()
         4 ( 0.00%)  }
         .           
         .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
         .           ///
         .           /// This means that, for example, the padding byte in `(u8, u16)` is not
         .           /// necessarily zeroed.
         .           ///
         .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
         .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 759 ----------------------------------------
         .           /// let mut buffer = Buffer { buf: vec![0, 1] };
         .           /// assert_eq!(buffer.buf.len(), 2);
         .           ///
         .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
         .           /// assert_eq!(buffer.buf.len(), 0);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "mem_take", since = "1.40.0")]
     1,170 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
       936 ( 0.00%)      replace(dest, T::default())
       468 ( 0.00%)  }
         .           
         .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a default value, see [`take`].
         .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
         .           /// assert_eq!(buffer.replace_index(0, 2), 0);
         .           /// assert_eq!(buffer.buf[0], 2);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
         .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
 1,843,242 ( 0.06%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
         .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
         .               // such that the old value is not duplicated. Nothing is dropped and
         .               // nothing here can panic.
         .               unsafe {
 2,658,114 ( 0.09%)          let result = ptr::read(dest);
21,352,645 ( 0.68%)          ptr::write(dest, src);
         .                   result
         .               }
   797,795 ( 0.03%)  }
         .           
         .           /// Disposes of a value.
         .           ///
         .           /// This does so by calling the argument's implementation of [`Drop`][drop].
         .           ///
         .           /// This effectively does nothing for types which implement `Copy`, e.g.
         .           /// integers. Such values are copied and _then_ moved into the function, so the
         .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
         .           ///
         .           /// println!("x: {}, y: {}", x, y.0); // still available
         .           /// ```
         .           ///
         .           /// [`RefCell`]: crate::cell::RefCell
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
   990,610 ( 0.03%)  pub fn drop<T>(_x: T) {}
         .           
         .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
         .           /// the contained value.
         .           ///
         .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
         .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
         .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
         .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
         .           ///
         .           /// // The contents of 'foo_array' should not have changed
         .           /// assert_eq!(foo_array, [10]);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
       585 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
         .               // If U has a higher alignment requirement, src might not be suitably aligned.
       234 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // The caller must guarantee that the actual transmutation is safe.
         .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
         .               } else {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // We just checked that `src as *const U` was properly aligned.
         .                   // The caller must guarantee that the actual transmutation is safe.
       234 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
         .               }
       234 ( 0.00%)  }
         .           
         .           /// Opaque type representing the discriminant of an enum.
         .           ///
         .           /// See the [`discriminant`] function in this module for more information.
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
         .           
         .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> cmp::Eq for Discriminant<T> {}
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> hash::Hash for Discriminant<T> {
     1,422 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
         .                   self.0.hash(state);
     2,550 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> fmt::Debug for Discriminant<T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
         .               }
         .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
         .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
         .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
         .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
         .           /// ```
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
         .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
    15,912 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
         .           }
         .           
         .           /// Returns the number of variants in the enum type `T`.
         .           ///
         .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
         .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
         .           /// the return value is unspecified. Uninhabited variants will be counted.
         .           ///
-- line 1047 ----------------------------------------

 1,222,703 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
       78 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
      234 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
    2,301 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
      312 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    5,052 ( 0.00%)                  fn drop(&mut self) {
   93,826 ( 0.00%)                      $oty(self.0).drop();
    7,578 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
      312 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
      117 ( 0.00%)                      let handle = self.0;
      156 ( 0.00%)                      mem::forget(self);
       39 ( 0.00%)                      handle.encode(w, s);
       78 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  381,942 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  509,256 ( 0.02%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  373,425 ( 0.01%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
  124,475 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
  248,950 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
  183,903 ( 0.01%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
   61,301 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
  122,602 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  687,606 ( 0.02%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
   69,200 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
      234 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      234 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
      234 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
  612,423 ( 0.02%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
   92,254 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
  184,508 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  614,142 ( 0.02%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
    2,022 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    2,022 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
      369 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      369 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
      999 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      999 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
        .           impl Clone for SourceFile {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl fmt::Debug for Span {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   19,710 ( 0.00%)          f.write_str(&self.debug())
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
  211,770 ( 0.01%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
  109,404 ( 0.00%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
1,578,486 ( 0.05%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
  303,243 ( 0.01%)                      reverse_encode!(b; $($arg),*);
        .           
3,156,972 ( 0.10%)                      b = bridge.dispatch.call(b);
        .           
2,240,648 ( 0.07%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
6,313,944 ( 0.20%)                      bridge.cached_buffer = b;
        .           
  929,088 ( 0.03%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
  176,475 ( 0.01%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
  467,255 ( 0.01%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
  567,991 ( 0.02%)          BRIDGE_STATE.with(|state| {
2,779,971 ( 0.09%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
      936 ( 0.00%)                  f(&mut *state)
      156 ( 0.00%)              })
      156 ( 0.00%)          })
  378,442 ( 0.01%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        3 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
      234 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
      273 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
      197 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
    1,443 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       78 ( 0.00%)      }
        .           
      195 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
3,773,663 ( 0.12%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
      507 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
      156 ( 0.00%)          })
      156 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
      273 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
      234 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
    1,404 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
      585 ( 0.00%)          bridge.enter(|| {
      741 ( 0.00%)              let reader = &mut &b[..];
      273 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
      780 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
      624 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
      741 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
      117 ( 0.00%)              b.clear();
      390 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
      156 ( 0.00%)          })
       78 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
       39 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
       78 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
        .                   extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
        .                       run_client(bridge, |input| f(crate::TokenStream(input)).0)
        .                   }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
      273 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
      702 ( 0.00%)              run_client(bridge, |(input, input2)| {
      780 ( 0.00%)                  f(crate::TokenStream(input), crate::TokenStream(input2)).0
      117 ( 0.00%)              })
       78 ( 0.00%)          }
        .                   Client { get_handle_counters: HandleCounters::get, run, f }
        .               }
        .           }
        .           
        .           #[repr(C)]
        .           #[derive(Copy, Clone)]
        .           pub enum ProcMacro {
        .               CustomDerive {
-- line 435 ----------------------------------------

1,463,174 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
        .               type Target = <T as ApplyL<'b>>::Out;
        .               fn deref(&self) -> &Self::Target {
        .                   self.0
        .               }
        .           }
        .           
        .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
      156 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
       78 ( 0.00%)          self.0
      156 ( 0.00%)      }
        .           }
        .           
        .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
        .           
        .           impl<T: LambdaL> ScopedCell<T> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
       10 ( 0.00%)          ScopedCell(Cell::new(value))
        2 ( 0.00%)      }
        .           
        .               /// Sets the value in `self` to `replacement` while
        .               /// running `f`, which gets the old value, mutably.
        .               /// The old value will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
3,907,545 ( 0.13%)      pub fn replace<'a, R>(
        .                   &self,
        .                   replacement: <T as ApplyL<'a>>::Out,
        .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
        .               ) -> R {
        .                   /// Wrapper that ensures that the cell always gets filled
        .                   /// (with the original state, optionally changed by `f`),
        .                   /// even if `f` had panicked.
        .                   struct PutBackOnDrop<'a, T: LambdaL> {
        .                       cell: &'a ScopedCell<T>,
        .                       value: Option<<T as ApplyL<'static>>::Out>,
        .                   }
        .           
        .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
      351 ( 0.00%)              fn drop(&mut self) {
  527,450 ( 0.02%)                  self.cell.0.set(self.value.take().unwrap());
      234 ( 0.00%)              }
        .                   }
        .           
1,054,314 ( 0.03%)          let mut put_back_on_drop = PutBackOnDrop {
        .                       cell: self,
    1,170 ( 0.00%)              value: Some(self.0.replace(unsafe {
      234 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
    1,404 ( 0.00%)                  mem::forget(replacement);
    1,170 ( 0.00%)                  erased
        .                       })),
        .                   };
        .           
  193,493 ( 0.01%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
5,132,035 ( 0.16%)      }
        .           
        .               /// Sets the value in `self` to `value` while running `f`.
      273 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
      624 ( 0.00%)          self.replace(value, |_| f())
       78 ( 0.00%)      }
        .           }

  135,640 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 140 ----------------------------------------
        .               /// let mut map: BTreeMap<&str, String> = BTreeMap::new();
        .               /// let s = "hoho".to_string();
        .               ///
        .               /// map.entry("poneyland").or_insert_with(|| s);
        .               ///
        .               /// assert_eq!(map["poneyland"], "hoho".to_string());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  156,226 ( 0.01%)      pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
   74,990 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
  529,941 ( 0.02%)              Vacant(entry) => entry.insert(default()),
        .                   }
  187,603 ( 0.01%)      }
        .           
        .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
        .               /// This method allows for generating key-derived values for insertion by providing the default
        .               /// function a reference to the key that was moved during the `.entry(key)` method call.
        .               ///
        .               /// The reference to the moved key is provided so that cloning or copying the key is
        .               /// unnecessary, unlike with `.or_insert_with(|| ... )`.
        .               ///
-- line 161 ----------------------------------------
-- line 245 ----------------------------------------
        .               /// ```
        .               /// use std::collections::BTreeMap;
        .               ///
        .               /// let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();
        .               /// map.entry("poneyland").or_default();
        .               ///
        .               /// assert_eq!(map["poneyland"], None);
        .               /// ```
      579 ( 0.00%)      pub fn or_default(self) -> &'a mut V {
      386 ( 0.00%)          match self {
        .                       Occupied(entry) => entry.into_mut(),
       79 ( 0.00%)              Vacant(entry) => entry.insert(Default::default()),
        .                   }
      965 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K: Ord, V> VacantEntry<'a, K, V> {
        .               /// Gets a reference to the key that would be used when inserting a value
        .               /// through the VacantEntry.
        .               ///
        .               /// # Examples
        .               ///
-- line 266 ----------------------------------------
-- line 306 ----------------------------------------
        .               /// let mut map: BTreeMap<&str, u32> = BTreeMap::new();
        .               ///
        .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  905,248 ( 0.03%)      pub fn insert(self, value: V) -> &'a mut V {
2,352,236 ( 0.08%)          let out_ptr = match self.handle.insert_recursing(self.key, value) {
  185,278 ( 0.01%)              (Fit(_), val_ptr) => {
        .                           // SAFETY: We have consumed self.handle and the handle returned.
  161,242 ( 0.01%)                  let map = unsafe { self.dormant_map.awaken() };
  712,060 ( 0.02%)                  map.length += 1;
        .                           val_ptr
        .                       }
   22,742 ( 0.00%)              (Split(ins), val_ptr) => {
        .                           drop(ins.left);
        .                           // SAFETY: We have consumed self.handle and the reference returned.
    2,804 ( 0.00%)                  let map = unsafe { self.dormant_map.awaken() };
        .                           let root = map.root.as_mut().unwrap();
   20,417 ( 0.00%)                  root.push_internal_level().push(ins.kv.0, ins.kv.1, ins.right);
   14,492 ( 0.00%)                  map.length += 1;
        .                           val_ptr
        .                       }
        .                   };
        .                   // Now that we have finished growing the tree using borrowed references,
        .                   // dereference the pointer to a part of it, that we picked up along the way.
        .                   unsafe { &mut *out_ptr }
  912,474 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {
        .               /// Gets a reference to the key in the entry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 343 ----------------------------------------
-- line 368 ----------------------------------------
        .               ///     // We delete the entry from the map.
        .               ///     o.remove_entry();
        .               /// }
        .               ///
        .               /// // If now try to get the value, it will panic:
        .               /// // println!("{}", map["poneyland"]);
        .               /// ```
        .               #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
  706,709 ( 0.02%)      pub fn remove_entry(self) -> (K, V) {
  140,960 ( 0.00%)          self.remove_kv()
1,102,297 ( 0.04%)      }
        .           
        .               /// Gets a reference to the value in the entry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::BTreeMap;
        .               /// use std::collections::btree_map::Entry;
-- line 386 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// if let Entry::Occupied(o) = map.entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_mut(self) -> &'a mut V {
      934 ( 0.00%)          self.handle.into_val_mut()
        .               }
        .           
        .               /// Sets the value of the entry with the `OccupiedEntry`'s key,
        .               /// and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 464 ----------------------------------------
-- line 497 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn remove(self) -> V {
        .                   self.remove_kv().1
        .               }
        .           
        .               // Body of `remove_entry`, probably separate because the name reflects the returned pair.
        .               pub(super) fn remove_kv(self) -> (K, V) {
  158,967 ( 0.01%)          let mut emptied_internal_root = false;
2,126,671 ( 0.07%)          let (old_kv, _) = self.handle.remove_kv_tracking(|| emptied_internal_root = true);
        .                   // SAFETY: we consumed the intermediate root borrow, `self.handle`.
        .                   let map = unsafe { self.dormant_map.awaken() };
  635,868 ( 0.02%)          map.length -= 1;
  317,934 ( 0.01%)          if emptied_internal_root {
        .                       let root = map.root.as_mut().unwrap();
        .                       root.pop_internal_level();
        .                   }
        .                   old_kv
        .               }
        .           }

  422,075 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      402 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      402 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      804 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   81,495 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  554,166 ( 0.02%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   48,897 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   97,794 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
   31,124 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  489,193 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    3,790 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   14,223 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   97,496 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
  121,516 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
  162,440 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
  211,059 ( 0.01%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
   11,117 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
    2,283 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
    2,220 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
    2,835 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   16,299 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   48,897 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   16,299 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    8,928 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
   10,912 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    4,960 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    6,944 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      992 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      496 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    2,976 ( 0.00%)          self
    1,488 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   28,832 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   50,862 ( 0.00%)              let (value, subst) =
    3,384 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   74,879 ( 0.00%)              f(infcx, value, subst)
        .                   })
   31,180 ( 0.00%)      }
        .           
   70,284 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   45,499 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  676,422 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   16,299 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   16,299 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   78,059 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      492 ( 0.00%)          let InferOk { value, obligations } = self;
    2,016 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   15,465 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   61,860 ( 0.00%)          self.obligations
   15,465 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   24,383 ( 0.00%)      }
        .           
  213,272 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  239,931 ( 0.01%)          t.fold_with(&mut self.freshener())
  239,931 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      598 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    1,196 ( 0.00%)          match *ty.kind() {
      294 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    1,176 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        5 ( 0.00%)              _ => None,
        .                   }
    1,196 ( 0.00%)      }
        .           
   26,659 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   26,659 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   83,705 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   83,705 ( 0.00%)      }
        .           
    2,120 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    1,060 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    1,060 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      588 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      100 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        5 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    3,710 ( 0.00%)      }
        .           
   52,233 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  217,172 ( 0.01%)          CombineFields {
        .                       infcx: self,
  542,930 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   52,233 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    6,270 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        .               }
        .           
  288,004 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  864,012 ( 0.03%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  144,002 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  576,008 ( 0.02%)      }
        .           
  660,044 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   60,004 ( 0.00%)              undo_snapshot,
   60,004 ( 0.00%)              region_constraints_snapshot,
   60,004 ( 0.00%)              universe,
   60,004 ( 0.00%)              was_in_snapshot,
  120,008 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   60,004 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
1,259,970 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   83,998 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   83,998 ( 0.00%)              was_in_snapshot,
  167,996 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   59,288 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   74,503 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    6,773 ( 0.00%)          let snapshot = self.start_snapshot();
   24,401 ( 0.00%)          let r = f(&snapshot);
   47,411 ( 0.00%)          self.commit_from(snapshot);
   50,337 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  693,985 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
  853,430 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  115,703 ( 0.00%)          let snapshot = self.start_snapshot();
  396,951 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   85,806 ( 0.00%)          match r {
        .                       Ok(_) => {
  576,457 ( 0.02%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  262,010 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  572,850 ( 0.02%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  211,943 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  253,203 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   63,222 ( 0.00%)          let snapshot = self.start_snapshot();
  105,350 ( 0.00%)          let r = f(&snapshot);
  288,818 ( 0.01%)          self.rollback_to("probe", snapshot);
   23,864 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
   15,615 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   20,820 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    3,470 ( 0.00%)          let snapshot = self.start_snapshot();
    1,735 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
    3,470 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
    6,940 ( 0.00%)          let r = f(&snapshot);
   15,615 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
   20,820 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   17,362 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   34,724 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   26,043 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
    1,140 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      855 ( 0.00%)      }
        .           
    6,108 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    4,581 ( 0.00%)      }
        .           
   45,250 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   40,725 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
        .               #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
      171 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
      114 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      285 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      228 ( 0.00%)      }
        .           
   13,788 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
    1,149 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
    1,149 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    7,794 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    1,648 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    1,648 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
      325 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
      650 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
   10,341 ( 0.00%)      }
        .           
   10,800 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
    9,000 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    7,200 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
      128 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
      256 ( 0.00%)      }
        .           
   13,888 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   69,440 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   20,832 ( 0.00%)      }
        .           
   12,362 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   47,847 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   18,543 ( 0.00%)      }
        .           
    1,710 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    9,405 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      855 ( 0.00%)          self.tcx.mk_ty_var(vid)
    2,565 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      175 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      105 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      140 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    8,904 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  219,289 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   17,808 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   92,476 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  601,094 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  231,190 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
  138,714 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    6,680 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   10,020 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    4,156 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    6,234 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
   13,933 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   27,866 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      626 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    4,562 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    1,252 ( 0.00%)      }
        .           
  311,288 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  166,693 ( 0.01%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
   13,931 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   97,964 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
  122,455 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   24,491 ( 0.00%)                              param.name,
   24,491 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   24,491 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    5,379 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      489 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    3,912 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   58,716 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  302,972 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   39,144 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
    1,402 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   29,057 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
    2,103 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   28,175 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   76,475 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    4,025 ( 0.00%)              assert!(
   12,075 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    4,025 ( 0.00%)          };
        .           
        .                   let region_rels =
    4,025 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   36,225 ( 0.00%)          let (lexical_region_resolutions, errors) =
   96,600 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   16,100 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    4,025 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   36,225 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   40,250 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    8,050 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
   12,075 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    8,050 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   20,125 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
        .               }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
   19,092 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
    2,480 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    9,424 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      496 ( 0.00%)              .into_infos_and_data();
      496 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    3,968 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    7,688 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   23,064 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   26,908 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  165,458 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
   12,296 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   18,444 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
   35,456 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  174,846 ( 0.01%)          if !value.needs_infer() {
  158,571 ( 0.01%)              return value; // Avoid duplicated subst-folding.
        .                   }
  164,358 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  203,775 ( 0.01%)          value.fold_with(&mut r)
   32,168 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
    8,712 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
  108,357 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  305,154 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    5,808 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
   26,192 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    9,822 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
   55,658 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
   22,918 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    2,616 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    5,232 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    3,924 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  367,430 ( 0.01%)          self.universe.get()
  106,911 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
    1,798 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    2,020 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
    1,798 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
2,325,072 ( 0.07%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
1,192,576 ( 0.04%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  630,204 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    2,864 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
      939 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
2,615,706 ( 0.08%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  648,615 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    1,440 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    5,700 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    5,700 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    1,624 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   64,528 ( 0.00%)          match *ty.kind() {
   14,220 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       44 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
    1,624 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  451,980 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    3,872 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    3,044 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    2,770 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
    1,662 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    4,840 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       28 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       70 ( 0.00%)          match *self {
       14 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
   17,762 ( 0.00%)          match *cause.code() {
    3,536 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   17,680 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

2,020,059 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs
--------------------------------------------------------------------------------
Ir                 

        .           use super::map::MIN_LEN;
        .           use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {
        .               /// Removes a key-value pair from the tree, and returns that pair, as well as
        .               /// the leaf edge corresponding to that former pair. It's possible this empties
        .               /// a root node that is internal, which the caller should pop from the map
        .               /// holding the tree. The caller should also decrement the map's length.
  817,203 ( 0.03%)      pub fn remove_kv_tracking<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
  635,868 ( 0.02%)          match self.force() {
1,111,341 ( 0.04%)              Leaf(node) => node.remove_leaf_kv(handle_emptied_internal_root),
        .                       Internal(node) => node.remove_internal_kv(handle_emptied_internal_root),
        .                   }
  976,170 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
1,112,769 ( 0.04%)      fn remove_leaf_kv<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
  724,874 ( 0.02%)          let (old_kv, mut pos) = self.remove();
        .                   let len = pos.reborrow().into_node().len();
  317,934 ( 0.01%)          if len < MIN_LEN {
        .                       let idx = pos.idx();
        .                       // We have to temporarily forget the child type, because there is no
        .                       // distinct node type for the immediate parents of a leaf.
        .                       let new_pos = match pos.into_node().forget_type().choose_parent_kv() {
        .                           Ok(Left(left_parent_kv)) => {
        .                               debug_assert!(left_parent_kv.right_child_len() == MIN_LEN - 1);
    3,117 ( 0.00%)                      if left_parent_kv.can_merge() {
   42,928 ( 0.00%)                          left_parent_kv.merge_tracking_child_edge(Right(idx))
        .                               } else {
        .                                   debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);
      347 ( 0.00%)                          left_parent_kv.steal_left(idx)
        .                               }
        .                           }
        .                           Ok(Right(right_parent_kv)) => {
        .                               debug_assert!(right_parent_kv.left_child_len() == MIN_LEN - 1);
      346 ( 0.00%)                      if right_parent_kv.can_merge() {
    3,006 ( 0.00%)                          right_parent_kv.merge_tracking_child_edge(Left(idx))
        .                               } else {
        .                                   debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);
      914 ( 0.00%)                          right_parent_kv.steal_right(idx)
        .                               }
        .                           }
        .                           Err(pos) => unsafe { Handle::new_edge(pos, idx) },
        .                       };
        .                       // SAFETY: `new_pos` is the leaf we started from or a sibling.
  250,170 ( 0.01%)              pos = unsafe { new_pos.cast_to_leaf_unchecked() };
        .           
        .                       // Only if we merged, the parent (if any) has shrunk, but skipping
        .                       // the following step otherwise does not pay off in benchmarks.
        .                       //
        .                       // SAFETY: We won't destroy or rearrange the leaf where `pos` is at
        .                       // by handling its parent recursively; at worst we will destroy or
        .                       // rearrange the parent through the grandparent, thus change the
        .                       // link to the parent inside the leaf.
        .                       if let Ok(parent) = unsafe { pos.reborrow_mut() }.into_node().ascend() {
    3,335 ( 0.00%)                  if !parent.into_node().forget_type().fix_node_and_affected_ancestors() {
        .                               handle_emptied_internal_root();
        .                           }
        .                       }
        .                   }
1,208,736 ( 0.04%)          (old_kv, pos)
1,271,736 ( 0.04%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
        .               fn remove_internal_kv<F: FnOnce()>(
        .                   self,
        .                   handle_emptied_internal_root: F,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
        .                   // Remove an adjacent KV from its leaf and then put it back in place of
        .                   // the element we were asked to remove. Prefer the left adjacent KV,
        .                   // for the reasons listed in `choose_parent_kv`.
        .                   let left_leaf_kv = self.left_edge().descend().last_leaf_edge().left_kv();
        .                   let left_leaf_kv = unsafe { left_leaf_kv.ok().unwrap_unchecked() };
    3,194 ( 0.00%)          let (left_kv, left_hole) = left_leaf_kv.remove_leaf_kv(handle_emptied_internal_root);
        .           
        .                   // The internal node may have been stolen from or merged. Go back right
        .                   // to find where the original KV ended up.
        .                   let mut internal = unsafe { left_hole.next_kv().ok().unwrap_unchecked() };
      154 ( 0.00%)          let old_kv = internal.replace_kv(left_kv.0, left_kv.1);
        .                   let pos = internal.next_leaf_edge();
    2,078 ( 0.00%)          (old_kv, pos)
        .               }
        .           }

  881,249 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
        .               drop: extern "C" fn(Buffer<T>),
        .           }
        .           
        .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
        .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
        .           
        .           impl<T: Copy> Default for Buffer<T> {
      702 ( 0.00%)      fn default() -> Self {
      936 ( 0.00%)          Self::from(vec![])
      468 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> Deref for Buffer<T> {
        .               type Target = [T];
      117 ( 0.00%)      fn deref(&self) -> &[T] {
1,182,612 ( 0.04%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
       78 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> DerefMut for Buffer<T> {
        .               fn deref_mut(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
        .               }
        .           }
        .           
        .           impl<T: Copy> Buffer<T> {
        .               pub(super) fn new() -> Self {
        .                   Self::default()
        .               }
        .           
       78 ( 0.00%)      pub(super) fn clear(&mut self) {
2,505,783 ( 0.08%)          self.len = 0;
       78 ( 0.00%)      }
        .           
      936 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
      234 ( 0.00%)          mem::take(self)
      468 ( 0.00%)      }
        .           
        .               // We have the array method separate from extending from a slice. This is
        .               // because in the case of small arrays, codegen can be more efficient
        .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
        .               // currently is not able to make that optimization.
      195 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
5,278,982 ( 0.17%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
    1,638 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
  898,460 ( 0.03%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
2,699,683 ( 0.09%)              self.len += xs.len();
        .                   }
       78 ( 0.00%)      }
        .           
   34,008 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
  545,826 ( 0.02%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
    1,638 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
       78 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
  272,913 ( 0.01%)              self.len += xs.len();
        .                   }
   39,676 ( 0.00%)      }
        .           
      234 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
        .                   // The code here is taken from Vec::push, and we know that reserve()
        .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
        .                   // to check for overflow.
6,178,228 ( 0.20%)          if self.len == self.capacity {
        .                       let b = self.take();
        .                       *self = (b.reserve)(b, 1);
        .                   }
        .                   unsafe {
4,181,146 ( 0.13%)              *self.data.add(self.len) = v;
3,613,854 ( 0.12%)              self.len += 1;
        .                   }
       78 ( 0.00%)      }
        .           }
        .           
        .           impl Write for Buffer<u8> {
        .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
        .                   self.extend_from_slice(xs);
        .                   Ok(xs.len())
        .               }
        .           
  511,818 ( 0.02%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
   17,004 ( 0.00%)          self.extend_from_slice(xs);
        .                   Ok(())
  767,727 ( 0.02%)      }
        .           
        .               fn flush(&mut self) -> io::Result<()> {
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<T: Copy> Drop for Buffer<T> {
      351 ( 0.00%)      fn drop(&mut self) {
      234 ( 0.00%)          let b = self.take();
6,316,167 ( 0.20%)          (b.drop)(b);
      234 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
    1,404 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
    6,084 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
    1,872 ( 0.00%)          mem::forget(v);
        .           
        .                   // This utility function is nested in here because it can *only*
        .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
      351 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
        .                       unsafe {
    1,053 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
      585 ( 0.00%)                  mem::forget(b);
      117 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
        .                       }
      234 ( 0.00%)          }
        .           
      624 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
      468 ( 0.00%)              let mut v = to_vec(b);
        .                       v.reserve(additional);
      468 ( 0.00%)              Buffer::from(v)
      624 ( 0.00%)          }
        .           
      234 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
  527,176 ( 0.02%)              mem::drop(to_vec(b));
  526,396 ( 0.02%)          }
        .           
    3,042 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
      468 ( 0.00%)      }
        .           }

2,849,723 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 124 ----------------------------------------
        .           /// sizes and avoid calling `memcpy`, which is good for speed.
        .           ///
        .           /// Unsafe because: unchecked indexing at start..start+len
        .           #[inline]
        .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
        .               debug_assert!(len < 8);
        .               let mut i = 0; // current byte index (from LSB) in the output u64
        .               let mut out = 0;
1,259,872 ( 0.04%)      if i + 3 < len {
        .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
        .                   // that the index start..start+len is in bounds.
        .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
        .                   i += 4;
        .               }
2,603,145 ( 0.08%)      if i + 1 < len {
        .                   // SAFETY: same as above.
1,301,564 ( 0.04%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
  650,560 ( 0.02%)          i += 2
        .               }
1,487,615 ( 0.05%)      if i < len {
        .                   // SAFETY: same as above.
1,658,895 ( 0.05%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
        .                   i += 1;
        .               }
        .               debug_assert_eq!(i, len);
        .               out
        .           }
        .           
        .           impl SipHasher {
        .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
        .               /// Creates a `SipHasher13` that is keyed off the provided keys.
        .               #[inline]
        .               #[unstable(feature = "hashmap_internals", issue = "none")]
        .               #[rustc_deprecated(
        .                   since = "1.13.0",
        .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
        .               )]
        .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
  265,891 ( 0.01%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
        .               }
        .           }
        .           
        .           impl<S: Sip> Hasher<S> {
        .               #[inline]
        .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
        9 ( 0.00%)          let mut state = Hasher {
        .                       k0: key0,
        .                       k1: key1,
        .                       length: 0,
        .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
        .                       tail: 0,
        .                       ntail: 0,
        .                       _marker: PhantomData,
        .                   };
        .                   state.reset();
        .                   state
        .               }
        .           
        .               #[inline]
        .               fn reset(&mut self) {
        .                   self.length = 0;
  398,832 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  419,683 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
        .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
        .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
        .                   self.ntail = 0;
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
        .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
        .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
        .               // greatly speed up integer hashing by those hashers, at the cost of
        .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
        .               // details.
        .               #[inline]
        .               fn write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
1,573,404 ( 0.05%)          self.length += length;
        .           
        .                   let mut needed = 0;
        .           
1,552,542 ( 0.05%)          if self.ntail != 0 {
  769,010 ( 0.02%)              needed = 8 - self.ntail;
        .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
3,845,000 ( 0.12%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  769,000 ( 0.02%)              if length < needed {
  502,494 ( 0.02%)                  self.ntail += length;
        .                           return;
        .                       } else {
  133,253 ( 0.00%)                  self.state.v3 ^= self.tail;
        .                           S::c_rounds(&mut self.state);
  266,506 ( 0.01%)                  self.state.v0 ^= self.tail;
  133,253 ( 0.00%)                  self.ntail = 0;
        .                       }
        .                   }
        .           
        .                   // Buffered tail is now flushed, process new input.
  490,821 ( 0.02%)          let len = length - needed;
  490,832 ( 0.02%)          let left = len & 0x7; // len % 8
        .           
        .                   let mut i = needed;
  736,574 ( 0.02%)          while i < len - left {
        .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
        .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
        .                       // `i + 8` is guaranteed to be less than or equal to `length`.
        .                       let mi = unsafe { load_int_le!(msg, i, u64) };
        .           
      163 ( 0.00%)              self.state.v3 ^= mi;
        .                       S::c_rounds(&mut self.state);
      163 ( 0.00%)              self.state.v0 ^= mi;
        .           
      326 ( 0.00%)              i += 8;
        .                   }
        .           
        .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
        .                   // so `i + left` = `needed + len` = `length`, which is by
        .                   // definition equal to `msg.len()`.
  511,672 ( 0.02%)          self.tail = unsafe { u8to64_le(msg, i, left) };
        .                   self.ntail = left;
        .               }
        .           
        .               #[inline]
        .               fn finish(&self) -> u64 {
  132,947 ( 0.00%)          let mut state = self.state;
        .           
  664,735 ( 0.02%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
        .           
  132,947 ( 0.00%)          state.v3 ^= b;
        .                   S::c_rounds(&mut state);
  132,947 ( 0.00%)          state.v0 ^= b;
        .           
  132,947 ( 0.00%)          state.v2 ^= 0xff;
        .                   S::d_rounds(&mut state);
        .           
  265,894 ( 0.01%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
        .               }
        .           }
        .           
        .           impl<S: Sip> Clone for Hasher<S> {
        .               #[inline]
        .               fn clone(&self) -> Hasher<S> {
        .                   Hasher {
        .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip13Rounds;
        .           
        .           impl Sip for Sip13Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,731,953 ( 0.06%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  531,788 ( 0.02%)          compress!(state);
  531,788 ( 0.02%)          compress!(state);
  398,841 ( 0.01%)          compress!(state);
        .               }
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip for Sip24Rounds {
        .               #[inline]
-- line 377 ----------------------------------------

3,594,587 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 342 ----------------------------------------
        .           
        .               // for symbol names src/librustc_ast/expand/allocator.rs
        .               // for signatures src/librustc_allocator/lib.rs
        .           
        .               // linkage directives are provided as part of the current compiler allocator
        .               // ABI
        .           
        .               #[rustc_std_internal_symbol]
3,283,244 ( 0.11%)      pub unsafe extern "C" fn __rdl_alloc(size: usize, align: usize) -> *mut u8 {
        .                   // SAFETY: see the guarantees expected by `Layout::from_size_align` and
        .                   // `GlobalAlloc::alloc`.
        .                   unsafe {
        .                       let layout = Layout::from_size_align_unchecked(size, align);
        .                       System.alloc(layout)
        .                   }
        .               }
        .           
-- line 358 ----------------------------------------
-- line 359 ----------------------------------------
        .               #[rustc_std_internal_symbol]
        .               pub unsafe extern "C" fn __rdl_dealloc(ptr: *mut u8, size: usize, align: usize) {
        .                   // SAFETY: see the guarantees expected by `Layout::from_size_align` and
        .                   // `GlobalAlloc::dealloc`.
        .                   unsafe { System.dealloc(ptr, Layout::from_size_align_unchecked(size, align)) }
        .               }
        .           
        .               #[rustc_std_internal_symbol]
  738,872 ( 0.02%)      pub unsafe extern "C" fn __rdl_realloc(
        .                   ptr: *mut u8,
        .                   old_size: usize,
        .                   align: usize,
        .                   new_size: usize,
        .               ) -> *mut u8 {
        .                   // SAFETY: see the guarantees expected by `Layout::from_size_align` and
        .                   // `GlobalAlloc::realloc`.
        .                   unsafe {
        .                       let old_layout = Layout::from_size_align_unchecked(old_size, align);
        .                       System.realloc(ptr, old_layout, new_size)
        .                   }
        .               }
        .           
        .               #[rustc_std_internal_symbol]
   89,220 ( 0.00%)      pub unsafe extern "C" fn __rdl_alloc_zeroed(size: usize, align: usize) -> *mut u8 {
        .                   // SAFETY: see the guarantees expected by `Layout::from_size_align` and
        .                   // `GlobalAlloc::alloc_zeroed`.
        .                   unsafe {
        .                       let layout = Layout::from_size_align_unchecked(size, align);
        .                       System.alloc_zeroed(layout)
        .                   }
        .               }
        .           }
-- line 390 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 36,976 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
462,864 ( 0.01%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 60,252 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
451,548 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 70,222 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
 28,441 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
 12,372 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
      .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
 10,284 ( 0.00%)      pub fn new() -> ObligationForest<O> {
123,408 ( 0.00%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
 10,284 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
316,979 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
560,791 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
101,962 ( 0.00%)          let cache_key = obligation.as_cache_key();
101,962 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
224,532 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
 16,986 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
 16,986 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
 16,452 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
 25,479 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 86,787 ( 0.00%)              Entry::Vacant(v) => {
173,574 ( 0.01%)                  let obligation_tree_id = match parent {
 20,882 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
 28,929 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
458,829 ( 0.01%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
111,699 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
 31,914 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 95,742 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     27 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
      .               fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
      .                       .insert(node.obligation.as_cache_key());
      .               }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
315,999 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
203,883 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
337,544 ( 0.01%)              if node.state.get() != NodeState::Pending {
 25,175 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
160,550 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
113,764 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
166,960 ( 0.01%)                      for child in children {
452,166 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 53,196 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
      .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
287,194 ( 0.01%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
 12,372 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
 13,280 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
315,999 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
      .               fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
      .                   trace
      .               }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
157,587 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 74,068 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
 16,098 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
 16,098 ( 0.00%)              let state = node.state.get();
 16,098 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
 25,485 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
 59,465 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
 67,960 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  6,640 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 74,068 ( 0.00%)              if node.state.get() == NodeState::Success {
136,450 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 53,120 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
374,616 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 83,248 ( 0.00%)          if node.state.get() == NodeState::Success {
  2,302 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
 14,334 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 57,336 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
332,992 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
164,819 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 22,597 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
396,900 ( 0.01%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 91,254 ( 0.00%)                      if dead_nodes > 0 {
 38,934 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 64,890 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
106,776 ( 0.00%)                      if let Some((predicate, _)) =
 85,323 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 56,882 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 56,882 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      .                               self.active_cache.remove(&node.obligation.as_cache_key());
      .                               self.insert_into_error_cache(index);
      .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
      .                               dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
 12,908 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  6,454 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 90,388 ( 0.00%)          self.reused_node_vec = node_rewrites;
180,776 ( 0.01%)      }
      .           
      .               #[inline(never)]
 58,086 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
 53,635 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
 53,836 ( 0.00%)                  let new_index = node_rewrites[*dependent];
 26,918 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
 13,459 ( 0.00%)                      *dependent = new_index;
 26,918 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
188,656 ( 0.01%)              let new_index = node_rewrites[*index];
 94,328 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
 40,176 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
 51,632 ( 0.00%)      }
      .           }

873,723 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  8,758 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  4,406 ( 0.00%)              self.file = file;
  6,796 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  3,378 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
 14,224 ( 0.00%)          self.line_number = line_index + 1;
 20,849 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
119,900 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  2,776 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
  1,388 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  6,940 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  9,716 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  5,552 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
442,190 ( 0.01%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
252,680 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 63,170 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 63,170 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
113,748 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
113,460 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
340,380 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
113,460 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 56,730 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 56,730 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 56,730 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
226,920 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
 12,592 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 50,844 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
 15,310 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
 18,372 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
 12,248 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 10,134 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 10,134 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 32,200 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 15,411 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    288 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    432 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
  1,159 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
  2,318 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  4,636 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
 12,880 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  6,440 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 12,880 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  6,440 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 32,200 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 19,320 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 19,320 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 19,320 ( 0.00%)          Some((
  6,440 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  6,440 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
568,530 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
623,065 ( 0.02%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 30,822 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
 11,602 ( 0.00%)              if idx != avoid_idx
  5,882 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
 15,310 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  3,062 ( 0.00%)          if !self.source_map.files().is_empty() {
  6,124 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
 24,496 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
 15,310 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

776,897 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs
--------------------------------------------------------------------------------
Ir                 

-- line 221 ----------------------------------------
        .                   NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {
        .               fn new_internal(child: Root<K, V>) -> Self {
        .                   let mut new_node = unsafe { InternalNode::new() };
        .                   new_node.edges[0].write(child.node);
    6,164 ( 0.00%)          unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }
        .               }
        .           
        .               /// # Safety
        .               /// `height` must not be zero.
        .               unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {
        .                   debug_assert!(height > 0);
        .                   let node = NonNull::from(Box::leak(internal)).cast();
        .                   let mut this = NodeRef { height, node, _marker: PhantomData };
-- line 237 ----------------------------------------
-- line 269 ----------------------------------------
        .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
        .               /// Finds the length of the node. This is the number of keys or values.
        .               /// The number of edges is `len() + 1`.
        .               /// Note that, despite being safe, calling this function can have the side effect
        .               /// of invalidating mutable references that unsafe code has created.
        .               pub fn len(&self) -> usize {
        .                   // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,
        .                   // there might be outstanding mutable references to values that we must not invalidate.
  121,009 ( 0.00%)          unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }
        .               }
        .           
        .               /// Returns the number of levels that the node and leaves are apart. Zero
        .               /// height means the node is a leaf itself. If you picture trees with the
        .               /// root on top, the number says at which elevation the node appears.
        .               /// If you picture trees with leaves on top, the number says how high
        .               /// the tree extends above the node.
        .               pub fn height(&self) -> usize {
        .                   self.height
        .               }
        .           
        .               /// Temporarily takes out another, immutable reference to the same node.
        .               pub fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {
  973,806 ( 0.03%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Exposes the leaf portion of any leaf or internal node.
        .               ///
        .               /// Returns a raw ptr to avoid invalidating other references to this node.
        .               fn as_leaf_ptr(this: &Self) -> *mut LeafNode<K, V> {
        .                   // The node must be valid for at least the LeafNode portion.
        .                   // This is not a reference in the NodeRef type because we don't know if
-- line 299 ----------------------------------------
-- line 314 ----------------------------------------
        .               /// both, upon success, do nothing.
        .               pub fn ascend(
        .                   self,
        .               ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {
        .                   assert!(BorrowType::PERMITS_TRAVERSAL);
        .                   // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,
        .                   // there might be outstanding mutable references to values that we must not invalidate.
        .                   let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);
  152,315 ( 0.00%)          unsafe { (*leaf_ptr).parent }
        .                       .as_ref()
        .                       .map(|parent| Handle {
   42,781 ( 0.00%)                  node: NodeRef::from_internal(*parent, self.height + 1),
   18,027 ( 0.00%)                  idx: unsafe { usize::from((*leaf_ptr).parent_idx.assume_init()) },
        .                           _marker: PhantomData,
        .                       })
        .                       .ok_or(self)
        .               }
        .           
        .               pub fn first_edge(self) -> Handle<Self, marker::Edge> {
        .                   unsafe { Handle::new_edge(self, 0) }
        .               }
-- line 334 ----------------------------------------
-- line 373 ----------------------------------------
        .                   // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.
        .                   unsafe { &*ptr }
        .               }
        .           
        .               /// Borrows a view into the keys stored in the node.
        .               pub fn keys(&self) -> &[K] {
        .                   let leaf = self.into_leaf();
        .                   unsafe {
1,192,101 ( 0.04%)              MaybeUninit::slice_assume_init_ref(leaf.keys.get_unchecked(..usize::from(leaf.len)))
        .                   }
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {
        .               /// Similar to `ascend`, gets a reference to a node's parent node, but also
        .               /// deallocates the current node in the process. This is unsafe because the
        .               /// current node will still be accessible despite being deallocated.
-- line 389 ----------------------------------------
-- line 391 ----------------------------------------
        .                   self,
        .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Internal>, marker::Edge>> {
        .                   let height = self.height;
        .                   let node = self.node;
        .                   let ret = self.ascend().ok();
        .                   unsafe {
        .                       Global.deallocate(
        .                           node.cast(),
   44,631 ( 0.00%)                  if height > 0 {
        .                               Layout::new::<InternalNode<K, V>>()
        .                           } else {
        .                               Layout::new::<LeafNode<K, V>>()
        .                           },
        .                       );
        .                   }
        .                   ret
        .               }
-- line 407 ----------------------------------------
-- line 435 ----------------------------------------
        .                   // SAFETY: we have exclusive access to the entire node.
        .                   unsafe { &mut *ptr }
        .               }
        .           }
        .           
        .           impl<K, V, Type> NodeRef<marker::Dying, K, V, Type> {
        .               /// Borrows exclusive access to the leaf portion of a dying leaf or internal node.
        .               fn as_leaf_dying(&mut self) -> &mut LeafNode<K, V> {
        3 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
        .                   // SAFETY: we have exclusive access to the entire node.
        .                   unsafe { &mut *ptr }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
        .               /// Borrows exclusive access to an element of the key storage area.
        .               ///
-- line 451 ----------------------------------------
-- line 467 ----------------------------------------
        .               /// `index` is in bounds of 0..CAPACITY
        .               unsafe fn val_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
        .               where
        .                   I: SliceIndex<[MaybeUninit<V>], Output = Output>,
        .               {
        .                   // SAFETY: the caller will not be able to call further methods on self
        .                   // until the value slice reference is dropped, as we have unique access
        .                   // for the lifetime of the borrow.
  188,736 ( 0.01%)          unsafe { self.as_leaf_mut().vals.as_mut_slice().get_unchecked_mut(index) }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
        .               /// Borrows exclusive access to an element or slice of the node's storage area for edge contents.
        .               ///
        .               /// # Safety
        .               /// `index` is in bounds of 0..CAPACITY + 1
-- line 483 ----------------------------------------
-- line 534 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .               /// Sets the node's link to its parent edge,
        .               /// without invalidating other references to the node.
        .               fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {
        .                   let leaf = Self::as_leaf_ptr(self);
   11,253 ( 0.00%)          unsafe { (*leaf).parent = Some(parent) };
        .                   unsafe { (*leaf).parent_idx.write(parent_idx as u16) };
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
        .               /// Clears the root's link to its parent edge.
        .               fn clear_parent_link(&mut self) {
        .                   let mut root_node = self.borrow_mut();
        .                   let leaf = root_node.as_leaf_mut();
    2,763 ( 0.00%)          leaf.parent = None;
        .               }
        .           }
        .           
        .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
        .               /// Returns a new owned tree, with its own root node that is initially empty.
        .               pub fn new() -> Self {
        .                   NodeRef::new_leaf().forget_type()
        .               }
        .           
        .               /// Adds a new internal node with a single edge pointing to the previous root node,
        .               /// make that new node the root node, and return it. This increases the height by 1
        .               /// and is the opposite of `pop_internal_level`.
   18,492 ( 0.00%)      pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {
        .                   super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());
        .           
        .                   // `self.borrow_mut()`, except that we just forgot we're internal now:
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
   24,656 ( 0.00%)      }
        .           
        .               /// Removes the internal root node, using its first child as the new root node.
        .               /// As it is intended only to be called when the root node has only one child,
        .               /// no cleanup is done on any of the keys, values and other children.
        .               /// This decreases the height by 1 and is the opposite of `push_internal_level`.
        .               ///
        .               /// Requires exclusive access to the `NodeRef` object but not to the root node;
        .               /// it will not invalidate other handles or references to the root node.
        .               ///
        .               /// Panics if there is no internal level, i.e., if the root node is a leaf.
        .               pub fn pop_internal_level(&mut self) {
    8,155 ( 0.00%)          assert!(self.height > 0);
        .           
        .                   let top = self.node;
        .           
        .                   // SAFETY: we asserted to be internal.
        .                   let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };
        .                   // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.
        .                   let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };
        .                   // SAFETY: the first edge is always initialized.
    2,763 ( 0.00%)          self.node = unsafe { internal_node.edges[0].assume_init_read() };
    5,526 ( 0.00%)          self.height -= 1;
        .                   self.clear_parent_link();
        .           
        .                   unsafe {
        .                       Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());
        .                   }
        .               }
        .           }
        .           
        .           impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {
        .               /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe
        .               /// because the return value cannot be used to destroy the root, and there
        .               /// cannot be other references to the tree.
        .               pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
1,009,300 ( 0.03%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Slightly mutably borrows the owned root node.
        .               pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           
        .               /// Irreversibly transitions to a reference that permits traversal and offers
-- line 614 ----------------------------------------
-- line 617 ----------------------------------------
        .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
        .               /// Adds a key-value pair to the end of the node.
        .               pub fn push(&mut self, key: K, val: V) {
        .                   let len = self.len_mut();
       24 ( 0.00%)          let idx = usize::from(*len);
       12 ( 0.00%)          assert!(idx < CAPACITY);
       30 ( 0.00%)          *len += 1;
        .                   unsafe {
        .                       self.key_area_mut(idx).write(key);
        .                       self.val_area_mut(idx).write(val);
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
        .               /// Adds a key-value pair, and an edge to go to the right of that pair,
        .               /// to the end of the node.
        .               pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {
   12,328 ( 0.00%)          assert!(edge.height == self.height - 1);
        .           
        .                   let len = self.len_mut();
    6,164 ( 0.00%)          let idx = usize::from(*len);
    3,082 ( 0.00%)          assert!(idx < CAPACITY);
    6,164 ( 0.00%)          *len += 1;
        .                   unsafe {
        .                       self.key_area_mut(idx).write(key);
        .                       self.val_area_mut(idx).write(val);
    3,082 ( 0.00%)              self.edge_area_mut(idx + 1).write(edge.node);
        .                       Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();
        .                   }
        .               }
        .           }
        .           
        .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {
        .               /// Removes any static information asserting that this node is a `Leaf` node.
        .               pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
-- line 656 ----------------------------------------
-- line 668 ----------------------------------------
        .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Checks whether a node is an `Internal` node or a `Leaf` node.
        .               pub fn force(
        .                   self,
        .               ) -> ForceResult<
        .                   NodeRef<BorrowType, K, V, marker::Leaf>,
        .                   NodeRef<BorrowType, K, V, marker::Internal>,
        .               > {
  992,307 ( 0.03%)          if self.height == 0 {
        .                       ForceResult::Leaf(NodeRef {
        .                           height: self.height,
        .                           node: self.node,
        .                           _marker: PhantomData,
        .                       })
        .                   } else {
        .                       ForceResult::Internal(NodeRef {
        .                           height: self.height,
-- line 684 ----------------------------------------
-- line 747 ----------------------------------------
        .                   Handle { node, idx, _marker: PhantomData }
        .               }
        .           
        .               pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
        .                   unsafe { Handle::new_edge(self.node, self.idx) }
        .               }
        .           
        .               pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
   94,790 ( 0.00%)          unsafe { Handle::new_edge(self.node, self.idx + 1) }
        .               }
        .           }
        .           
        .           impl<BorrowType, K, V, NodeType, HandleType> PartialEq
        .               for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>
        .           {
        .               fn eq(&self, other: &Self) -> bool {
        .                   let Self { node, idx, _marker } = self;
-- line 763 ----------------------------------------
-- line 790 ----------------------------------------
        .           }
        .           
        .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
        .               /// Creates a new handle to an edge in `node`.
        .               /// Unsafe because the caller must ensure that `idx <= node.len()`.
        .               pub unsafe fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
        .                   debug_assert!(idx <= node.len());
        .           
  195,408 ( 0.01%)          Handle { node, idx, _marker: PhantomData }
        .               }
        .           
        .               pub fn left_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
    3,674 ( 0.00%)          if self.idx > 0 {
    3,124 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx - 1) })
        .                   } else {
        .                       Err(self)
        .                   }
        .               }
        .           
        .               pub fn right_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
  154,850 ( 0.00%)          if self.idx < self.node.len() {
        .                       Ok(unsafe { Handle::new_kv(self.node, self.idx) })
        .                   } else {
        .                       Err(self)
        .                   }
        .               }
        .           }
        .           
        .           pub enum LeftOrRight<T> {
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
        .               Right(T),
        .           }
        .           
        .           /// Given an edge index where we want to insert into a node filled to capacity,
        .           /// computes a sensible KV index of a split point and where to perform the insertion.
        .           /// The goal of the split point is for its key and value to end up in a parent node;
        .           /// the keys, values and edges to the left of the split point become the left child;
        .           /// the keys, values and edges to the right of the split point become the right child.
    5,603 ( 0.00%)  fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {
        .               debug_assert!(edge_idx <= CAPACITY);
        .               // Rust issue #74834 tries to explain these symmetric rules.
   21,620 ( 0.00%)      match edge_idx {
   11,206 ( 0.00%)          0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, LeftOrRight::Left(edge_idx)),
        .                   EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Left(edge_idx)),
        .                   EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Right(0)),
   15,765 ( 0.00%)          _ => (KV_IDX_CENTER + 1, LeftOrRight::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),
        .               }
    5,603 ( 0.00%)  }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method assumes that there is enough space in the node for the new
        .               /// pair to fit.
        .               ///
        .               /// The returned pointer points to the inserted value.
1,532,370 ( 0.05%)      fn insert_fit(&mut self, key: K, val: V) -> *mut V {
        .                   debug_assert!(self.node.len() < CAPACITY);
        .                   let new_len = self.node.len() + 1;
        .           
        .                   unsafe {
  194,506 ( 0.01%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
  179,182 ( 0.01%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
  194,497 ( 0.01%)              *self.node.len_mut() = new_len as u16;
        .           
        .                       self.node.val_area_mut(self.idx).assume_init_mut()
        .                   }
1,555,976 ( 0.05%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method splits the node if there isn't enough room.
        .               ///
        .               /// The returned pointer points to the inserted value.
        .               fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {
  583,491 ( 0.02%)          if self.node.len() < CAPACITY {
  968,395 ( 0.03%)              let val_ptr = self.insert_fit(key, val);
  378,004 ( 0.01%)              let kv = unsafe { Handle::new_kv(self.node, self.idx) };
        .                       (InsertResult::Fit(kv), val_ptr)
        .                   } else {
   43,960 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
   10,419 ( 0.00%)              let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
        .                       let mut result = middle.split();
   26,463 ( 0.00%)              let mut insertion_edge = match insertion {
        .                           LeftOrRight::Left(insert_idx) => unsafe {
        .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
        .                           },
        .                           LeftOrRight::Right(insert_idx) => unsafe {
        .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
        .                           },
        .                       };
   25,315 ( 0.00%)              let val_ptr = insertion_edge.insert_fit(key, val);
   15,559 ( 0.00%)              (InsertResult::Split(result), val_ptr)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
        .               /// Fixes the parent pointer and index in the child node that this edge
        .               /// links to. This is useful when the ordering of edges has been changed,
        .               fn correct_parent_link(self) {
-- line 890 ----------------------------------------
-- line 895 ----------------------------------------
        .                   child.set_parent_link(ptr, idx);
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
        .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
        .               /// between this edge and the key-value pair to the right of this edge. This method assumes
        .               /// that there is enough space in the node for the new pair to fit.
   19,621 ( 0.00%)      fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {
        .                   debug_assert!(self.node.len() < CAPACITY);
        .                   debug_assert!(edge.height == self.node.height - 1);
        .                   let new_len = self.node.len() + 1;
        .           
        .                   unsafe {
    2,521 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
    4,712 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
        .                       slice_insert(self.node.edge_area_mut(..new_len + 1), self.idx + 1, edge.node);
    2,521 ( 0.00%)              *self.node.len_mut() = new_len as u16;
        .           
        .                       self.node.correct_childrens_parent_links(self.idx + 1..new_len + 1);
        .                   }
   20,168 ( 0.00%)      }
        .           
        .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
        .               /// between this edge and the key-value pair to the right of this edge. This method splits
        .               /// the node if there isn't enough room.
        .               fn insert(
        .                   mut self,
        .                   key: K,
        .                   val: V,
        .                   edge: Root<K, V>,
        .               ) -> InsertResult<'a, K, V, marker::Internal> {
    7,563 ( 0.00%)          assert!(edge.height == self.node.height - 1);
        .           
    5,042 ( 0.00%)          if self.node.len() < CAPACITY {
   20,095 ( 0.00%)              self.insert_fit(key, val, edge);
        .                       let kv = unsafe { Handle::new_kv(self.node, self.idx) };
        .                       InsertResult::Fit(kv)
        .                   } else {
      824 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
        .                       let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
        .                       let mut result = middle.split();
      176 ( 0.00%)              let mut insertion_edge = match insertion {
        .                           LeftOrRight::Left(insert_idx) => unsafe {
        .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
        .                           },
        .                           LeftOrRight::Right(insert_idx) => unsafe {
        .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
        .                           },
        .                       };
      926 ( 0.00%)              insertion_edge.insert_fit(key, val, edge);
      280 ( 0.00%)              InsertResult::Split(result)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
        .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
        .               /// this edge. This method splits the node if there isn't enough room, and tries to
        .               /// insert the split off portion into the parent node recursively, until the root is reached.
        .               ///
        .               /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.
        .               /// If the returned result is a `Split`, the `left` field will be the root node.
        .               /// The returned pointer points to the inserted value.
1,936,039 ( 0.06%)      pub fn insert_recursing(
        .                   self,
        .                   key: K,
        .                   value: V,
        .               ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {
1,090,963 ( 0.03%)          let (mut split, val_ptr) = match self.insert(key, value) {
        .                       (InsertResult::Fit(handle), ptr) => {
  945,010 ( 0.03%)                  return (InsertResult::Fit(handle.forget_node_type()), ptr);
        .                       }
        .                       (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),
        .                   };
        .           
        .                   loop {
    7,480 ( 0.00%)              split = match split.left.ascend() {
   13,365 ( 0.00%)                  Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {
        .                               InsertResult::Fit(handle) => {
   13,921 ( 0.00%)                          return (InsertResult::Fit(handle.forget_node_type()), val_ptr);
        .                               }
        .                               InsertResult::Split(split) => split.forget_node_type(),
        .                           },
        .                           Err(root) => {
   27,625 ( 0.00%)                      return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);
        .                           }
        .                       };
        .                   }
1,750,473 ( 0.06%)      }
        .           }
        .           
        .           impl<BorrowType: marker::BorrowType, K, V>
        .               Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>
        .           {
        .               /// Finds the node pointed to by this edge.
        .               ///
        .               /// The method name assumes you picture trees with the root node on top.
-- line 992 ----------------------------------------
-- line 999 ----------------------------------------
        .                   // marker::ValMut, there might be outstanding mutable references to
        .                   // values that we must not invalidate. There's no worry accessing the
        .                   // height field because that value is copied. Beware that, once the
        .                   // node pointer is dereferenced, we access the edges array with a
        .                   // reference (Rust issue #73987) and invalidate any other references
        .                   // to or inside the array, should any be around.
        .                   let parent_ptr = NodeRef::as_internal_ptr(&self.node);
        .                   let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };
    9,793 ( 0.00%)          NodeRef { node, height: self.node.height - 1, _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn into_kv(self) -> (&'a K, &'a V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let leaf = self.node.into_leaf();
        .                   let k = unsafe { leaf.keys.get_unchecked(self.idx).assume_init_ref() };
        .                   let v = unsafe { leaf.vals.get_unchecked(self.idx).assume_init_ref() };
  194,636 ( 0.01%)          (k, v)
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn key_mut(&mut self) -> &mut K {
        .                   unsafe { self.node.key_area_mut(self.idx).assume_init_mut() }
        .               }
        .           
-- line 1025 ----------------------------------------
-- line 1037 ----------------------------------------
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               pub fn kv_mut(&mut self) -> (&mut K, &mut V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   // We cannot call separate key and value methods, because calling the second one
        .                   // invalidates the reference returned by the first.
        .                   unsafe {
      154 ( 0.00%)              let leaf = self.node.as_leaf_mut();
      154 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_mut();
        .                       let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_mut();
      631 ( 0.00%)              (key, val)
        .                   }
        .               }
        .           
        .               /// Replaces the key and value that the KV handle refers to.
        .               pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {
        .                   let (key, val) = self.kv_mut();
        .                   (mem::replace(key, k), mem::replace(val, v))
        .               }
-- line 1056 ----------------------------------------
-- line 1069 ----------------------------------------
        .                       (key, val)
        .                   }
        .               }
        .           
        .               /// Drops the key and value that the KV handle refers to.
        .               /// # Safety
        .               /// The node that the handle refers to must not yet have been deallocated.
        .               #[inline]
       18 ( 0.00%)      pub unsafe fn drop_key_val(mut self) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let leaf = self.node.as_leaf_dying();
        .                   unsafe {
        3 ( 0.00%)              leaf.keys.get_unchecked_mut(self.idx).assume_init_drop();
    9,800 ( 0.00%)              leaf.vals.get_unchecked_mut(self.idx).assume_init_drop();
        .                   }
       21 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
        .               /// Helps implementations of `split` for a particular `NodeType`,
        .               /// by taking care of leaf data.
        .               fn split_leaf_data(&mut self, new_node: &mut LeafNode<K, V>) -> (K, V) {
        .                   debug_assert!(self.idx < self.node.len());
        .                   let old_len = self.node.len();
   29,419 ( 0.00%)          let new_len = old_len - self.idx - 1;
    5,614 ( 0.00%)          new_node.len = new_len as u16;
        .                   unsafe {
    2,835 ( 0.00%)              let k = self.node.key_area_mut(self.idx).assume_init_read();
    2,482 ( 0.00%)              let v = self.node.val_area_mut(self.idx).assume_init_read();
        .           
        .                       move_to_slice(
   16,809 ( 0.00%)                  self.node.key_area_mut(self.idx + 1..old_len),
    5,603 ( 0.00%)                  &mut new_node.keys[..new_len],
        .                       );
        .                       move_to_slice(
        .                           self.node.val_area_mut(self.idx + 1..old_len),
    5,603 ( 0.00%)                  &mut new_node.vals[..new_len],
        .                       );
        .           
    8,086 ( 0.00%)              *self.node.len_mut() = self.idx as u16;
   11,947 ( 0.00%)              (k, v)
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
        .               /// Splits the underlying node into three parts:
        .               ///
        .               /// - The node is truncated to only contain the key-value pairs to the left of
-- line 1117 ----------------------------------------
-- line 1120 ----------------------------------------
        .               /// - All the key-value pairs to the right of this handle are put into a newly
        .               ///   allocated node.
        .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {
        .                   let mut new_node = LeafNode::new();
        .           
        .                   let kv = self.split_leaf_data(&mut new_node);
        .           
        .                   let right = NodeRef::from_new_leaf(new_node);
   46,132 ( 0.00%)          SplitResult { left: self.node, kv, right }
        .               }
        .           
        .               /// Removes the key-value pair pointed to by this handle and returns it, along with the edge
        .               /// that the key-value pair collapsed into.
        .               pub fn remove(
        .                   mut self,
        .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
        .                   let old_len = self.node.len();
        .                   unsafe {
        .                       let k = slice_remove(self.node.key_area_mut(..old_len), self.idx);
  127,314 ( 0.00%)              let v = slice_remove(self.node.val_area_mut(..old_len), self.idx);
  604,215 ( 0.02%)              *self.node.len_mut() = (old_len - 1) as u16;
  444,273 ( 0.01%)              ((k, v), self.left_edge())
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
        .               /// Splits the underlying node into three parts:
        .               ///
        .               /// - The node is truncated to only contain the edges and key-value pairs to the
-- line 1149 ----------------------------------------
-- line 1153 ----------------------------------------
        .               ///   a newly allocated node.
        .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {
        .                   let old_len = self.node.len();
        .                   unsafe {
        .                       let mut new_node = InternalNode::new();
        .                       let kv = self.split_leaf_data(&mut new_node.data);
        .                       let new_len = usize::from(new_node.data.len);
        .                       move_to_slice(
      108 ( 0.00%)                  self.node.edge_area_mut(self.idx + 1..old_len + 1),
      216 ( 0.00%)                  &mut new_node.edges[..new_len + 1],
        .                       );
        .           
        .                       let height = self.node.height;
        .                       let right = NodeRef::from_new_internal(new_node, height);
        .           
      560 ( 0.00%)              SplitResult { left: self.node, kv, right }
        .                   }
        .               }
        .           }
        .           
        .           /// Represents a session for evaluating and performing a balancing operation
        .           /// around an internal key-value pair.
        .           pub struct BalancingContext<'a, K, V> {
        .               parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,
-- line 1176 ----------------------------------------
-- line 1242 ----------------------------------------
        .           
        .               pub fn into_right_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .                   self.right_child
        .               }
        .           
        .               /// Returns whether merging is possible, i.e., whether there is enough room
        .               /// in a node to combine the central KV with both adjacent child nodes.
        .               pub fn can_merge(&self) -> bool {
   10,444 ( 0.00%)          self.left_child.len() + 1 + self.right_child.len() <= CAPACITY
        .               }
        .           }
        .           
        .           impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {
        .               /// Performs a merge and lets a closure decide what to return.
        .               fn do_merge<
        .                   F: FnOnce(
        .                       NodeRef<marker::Mut<'a>, K, V, marker::Internal>,
-- line 1258 ----------------------------------------
-- line 1264 ----------------------------------------
        .                   result: F,
        .               ) -> R {
        .                   let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;
        .                   let old_parent_len = parent_node.len();
        .                   let mut left_node = self.left_child;
        .                   let old_left_len = left_node.len();
        .                   let mut right_node = self.right_child;
        .                   let right_len = right_node.len();
    6,632 ( 0.00%)          let new_left_len = old_left_len + 1 + right_len;
        .           
    6,632 ( 0.00%)          assert!(new_left_len <= CAPACITY);
        .           
        .                   unsafe {
    3,316 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
        .           
        .                       let parent_key = slice_remove(parent_node.key_area_mut(..old_parent_len), parent_idx);
        .                       left_node.key_area_mut(old_left_len).write(parent_key);
        .                       move_to_slice(
        .                           right_node.key_area_mut(..right_len),
        .                           left_node.key_area_mut(old_left_len + 1..new_left_len),
        .                       );
        .           
        .                       let parent_val = slice_remove(parent_node.val_area_mut(..old_parent_len), parent_idx);
        .                       left_node.val_area_mut(old_left_len).write(parent_val);
        .                       move_to_slice(
        .                           right_node.val_area_mut(..right_len),
        .                           left_node.val_area_mut(old_left_len + 1..new_left_len),
        .                       );
        .           
    3,316 ( 0.00%)              slice_remove(&mut parent_node.edge_area_mut(..old_parent_len + 1), parent_idx + 1);
        .                       parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);
   19,903 ( 0.00%)              *parent_node.len_mut() -= 1;
        .           
    6,632 ( 0.00%)              if parent_node.height > 1 {
        .                           // SAFETY: the height of the nodes being merged is one below the height
        .                           // of the node of this edge, thus above zero, so they are internal.
        .                           let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();
        .                           let mut right_node = right_node.cast_to_internal_unchecked();
        .                           move_to_slice(
        .                               right_node.edge_area_mut(..right_len + 1),
        7 ( 0.00%)                      left_node.edge_area_mut(old_left_len + 1..new_left_len + 1),
        .                           );
        .           
        .                           left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
        .           
        .                           Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());
        .                       } else {
        .                           Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());
        .                       }
-- line 1312 ----------------------------------------
-- line 1313 ----------------------------------------
        .                   }
        .                   result(parent_node, left_node)
        .               }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns the shrunk parent node.
        .               ///
        .               /// Panics unless we `.can_merge()`.
       49 ( 0.00%)      pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
       14 ( 0.00%)          self.do_merge(|parent, _child| parent)
       70 ( 0.00%)      }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns that child node.
        .               ///
        .               /// Panics unless we `.can_merge()`.
        .               pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
        .                   self.do_merge(|_parent, child| child)
        .               }
        .           
        .               /// Merges the parent's key-value pair and both adjacent child nodes into
        .               /// the left child node and returns the edge handle in that child node
        .               /// where the tracked child edge ended up,
        .               ///
        .               /// Panics unless we `.can_merge()`.
   23,163 ( 0.00%)      pub fn merge_tracking_child_edge(
        .                   self,
        .                   track_edge_idx: LeftOrRight<usize>,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
    3,309 ( 0.00%)          let old_left_len = self.left_child.len();
    3,309 ( 0.00%)          let right_len = self.right_child.len();
    9,927 ( 0.00%)          assert!(match track_edge_idx {
        .                       LeftOrRight::Left(idx) => idx <= old_left_len,
        .                       LeftOrRight::Right(idx) => idx <= right_len,
        .                   });
        .                   let child = self.merge_tracking_child();
    3,309 ( 0.00%)          let new_idx = match track_edge_idx {
        .                       LeftOrRight::Left(idx) => idx,
    9,231 ( 0.00%)              LeftOrRight::Right(idx) => old_left_len + 1 + idx,
        .                   };
        .                   unsafe { Handle::new_edge(child, new_idx) }
   26,472 ( 0.00%)      }
        .           
        .               /// Removes a key-value pair from the left child and places it in the key-value storage
        .               /// of the parent, while pushing the old parent key-value pair into the right child.
        .               /// Returns a handle to the edge in the right child corresponding to where the original
        .               /// edge specified by `track_right_edge_idx` ended up.
        .               pub fn steal_left(
        .                   mut self,
        .                   track_right_edge_idx: usize,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
       80 ( 0.00%)          self.bulk_steal_left(1);
        .                   unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }
        .               }
        .           
        .               /// Removes a key-value pair from the right child and places it in the key-value storage
        .               /// of the parent, while pushing the old parent key-value pair onto the left child.
        .               /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,
        .               /// which didn't move.
        .               pub fn steal_right(
        .                   mut self,
        .                   track_left_edge_idx: usize,
        .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
      228 ( 0.00%)          self.bulk_steal_right(1);
        .                   unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }
        .               }
        .           
        .               /// This does stealing similar to `steal_left` but steals multiple elements at once.
      280 ( 0.00%)      pub fn bulk_steal_left(&mut self, count: usize) {
       80 ( 0.00%)          assert!(count > 0);
        .                   unsafe {
        .                       let left_node = &mut self.left_child;
        .                       let old_left_len = left_node.len();
        .                       let right_node = &mut self.right_child;
       40 ( 0.00%)              let old_right_len = right_node.len();
        .           
        .                       // Make sure that we may steal safely.
      200 ( 0.00%)              assert!(old_right_len + count <= CAPACITY);
       93 ( 0.00%)              assert!(old_left_len >= count);
        .           
        .                       let new_left_len = old_left_len - count;
        .                       let new_right_len = old_right_len + count;
       40 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
       40 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
        .           
        .                       // Move leaf data.
        .                       {
        .                           // Make room for stolen elements in the right child.
        .                           slice_shr(right_node.key_area_mut(..new_right_len), count);
        .                           slice_shr(right_node.val_area_mut(..new_right_len), count);
        .           
        .                           // Move elements from the left child to the right one.
        .                           move_to_slice(
       80 ( 0.00%)                      left_node.key_area_mut(new_left_len + 1..old_left_len),
       40 ( 0.00%)                      right_node.key_area_mut(..count - 1),
        .                           );
        .                           move_to_slice(
        .                               left_node.val_area_mut(new_left_len + 1..old_left_len),
        .                               right_node.val_area_mut(..count - 1),
        .                           );
        .           
        .                           // Move the left-most stolen pair to the parent.
       13 ( 0.00%)                  let k = left_node.key_area_mut(new_left_len).assume_init_read();
        .                           let v = left_node.val_area_mut(new_left_len).assume_init_read();
      335 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
        .           
        .                           // Move parent's key-value pair to the right child.
        .                           right_node.key_area_mut(count - 1).write(k);
        .                           right_node.val_area_mut(count - 1).write(v);
        .                       }
        .           
      200 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
        .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
        .                               // Make room for stolen edges.
        .                               slice_shr(right.edge_area_mut(..new_right_len + 1), count);
        .           
        .                               // Steal edges.
        .                               move_to_slice(
        .                                   left.edge_area_mut(new_left_len + 1..old_left_len + 1),
        .                                   right.edge_area_mut(..count),
-- line 1432 ----------------------------------------
-- line 1433 ----------------------------------------
        .                               );
        .           
        .                               right.correct_childrens_parent_links(0..new_right_len + 1);
        .                           }
        .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
        .                           _ => unreachable!(),
        .                       }
        .                   }
      320 ( 0.00%)      }
        .           
        .               /// The symmetric clone of `bulk_steal_left`.
      798 ( 0.00%)      pub fn bulk_steal_right(&mut self, count: usize) {
      228 ( 0.00%)          assert!(count > 0);
        .                   unsafe {
        .                       let left_node = &mut self.left_child;
      114 ( 0.00%)              let old_left_len = left_node.len();
        .                       let right_node = &mut self.right_child;
        .                       let old_right_len = right_node.len();
        .           
        .                       // Make sure that we may steal safely.
      570 ( 0.00%)              assert!(old_left_len + count <= CAPACITY);
      230 ( 0.00%)              assert!(old_right_len >= count);
        .           
        .                       let new_left_len = old_left_len + count;
        .                       let new_right_len = old_right_len - count;
      114 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
      114 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
        .           
        .                       // Move leaf data.
        .                       {
        .                           // Move the right-most stolen pair to the parent.
      228 ( 0.00%)                  let k = right_node.key_area_mut(count - 1).assume_init_read();
        .                           let v = right_node.val_area_mut(count - 1).assume_init_read();
      456 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
        .           
        .                           // Move parent's key-value pair to the left child.
        .                           left_node.key_area_mut(old_left_len).write(k);
        .                           left_node.val_area_mut(old_left_len).write(v);
        .           
        .                           // Move elements from the right child to the left one.
        .                           move_to_slice(
        .                               right_node.key_area_mut(..count - 1),
      114 ( 0.00%)                      left_node.key_area_mut(old_left_len + 1..new_left_len),
        .                           );
        .                           move_to_slice(
        .                               right_node.val_area_mut(..count - 1),
        .                               left_node.val_area_mut(old_left_len + 1..new_left_len),
        .                           );
        .           
        .                           // Fill gap where stolen elements used to be.
        .                           slice_shl(right_node.key_area_mut(..old_right_len), count);
        .                           slice_shl(right_node.val_area_mut(..old_right_len), count);
        .                       }
        .           
      570 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
        .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
        .                               // Steal edges.
        .                               move_to_slice(
        .                                   right.edge_area_mut(..count),
        .                                   left.edge_area_mut(old_left_len + 1..new_left_len + 1),
        .                               );
        .           
        .                               // Fill gap where stolen edges used to be.
-- line 1495 ----------------------------------------
-- line 1497 ----------------------------------------
        .           
        .                               left.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
        .                               right.correct_childrens_parent_links(0..new_right_len + 1);
        .                           }
        .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
        .                           _ => unreachable!(),
        .                       }
        .                   }
      912 ( 0.00%)      }
        .           }
        .           
        .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {
        .               pub fn forget_node_type(
        .                   self,
        .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
        .                   unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
        .               }
-- line 1513 ----------------------------------------
-- line 1681 ----------------------------------------
        .           ///
        .           /// # Safety
        .           /// The slice has more than `idx` elements.
        .           unsafe fn slice_insert<T>(slice: &mut [MaybeUninit<T>], idx: usize, val: T) {
        .               unsafe {
        .                   let len = slice.len();
        .                   debug_assert!(len > idx);
        .                   let slice_ptr = slice.as_mut_ptr();
1,369,384 ( 0.04%)          if len > idx + 1 {
  123,200 ( 0.00%)              ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx - 1);
        .                   }
        .                   (*slice_ptr.add(idx)).write(val);
        .               }
        .           }
        .           
        .           /// Removes and returns a value from a slice of all initialized elements, leaving behind one
        .           /// trailing uninitialized element.
        .           ///
-- line 1698 ----------------------------------------
-- line 1699 ----------------------------------------
        .           /// # Safety
        .           /// The slice has more than `idx` elements.
        .           unsafe fn slice_remove<T>(slice: &mut [MaybeUninit<T>], idx: usize) -> T {
        .               unsafe {
        .                   let len = slice.len();
        .                   debug_assert!(idx < len);
        .                   let slice_ptr = slice.as_mut_ptr();
        .                   let ret = (*slice_ptr.add(idx)).assume_init_read();
1,324,792 ( 0.04%)          ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);
        .                   ret
        .               }
        .           }
        .           
        .           /// Shifts the elements in a slice `distance` positions to the left.
        .           ///
        .           /// # Safety
        .           /// The slice has at least `distance` elements.
-- line 1715 ----------------------------------------
-- line 1722 ----------------------------------------
        .           
        .           /// Shifts the elements in a slice `distance` positions to the right.
        .           ///
        .           /// # Safety
        .           /// The slice has at least `distance` elements.
        .           unsafe fn slice_shr<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
        .               unsafe {
        .                   let slice_ptr = slice.as_mut_ptr();
      120 ( 0.00%)          ptr::copy(slice_ptr, slice_ptr.add(distance), slice.len() - distance);
        .               }
        .           }
        .           
        .           /// Moves all values from a slice of initialized elements to a slice
        .           /// of uninitialized elements, leaving behind `src` as all uninitialized.
        .           /// Works like `dst.copy_from_slice(src)` but does not require `T` to be `Copy`.
        .           fn move_to_slice<T>(src: &mut [MaybeUninit<T>], dst: &mut [MaybeUninit<T>]) {
   18,402 ( 0.00%)      assert!(src.len() == dst.len());
        .               unsafe {
        .                   ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());
        .               }
        .           }
        .           
        .           #[cfg(test)]
        .           mod tests;

3,447,701 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .               // NOTE: Do not implement clone on this - there are raw pointers inside
        .               // these entries which will be messed up. Moving the `TokenBuffer` itself is
        .               // safe as the data pointed to won't be moved.
        .               ptr: *const Entry,
        .               len: usize,
        .           }
        .           
        .           impl Drop for TokenBuffer {
    6,597 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
   15,393 ( 0.00%)              let slice = slice::from_raw_parts_mut(self.ptr as *mut Entry, self.len);
   13,194 ( 0.00%)              let _ = Box::from_raw(slice);
        .                   }
    4,398 ( 0.00%)      }
        .           }
        .           
        .           impl TokenBuffer {
        .               // NOTE: Do not mutate the Vec returned from this function once it returns;
        .               // the address of its backing memory must remain stable.
    8,796 ( 0.00%)      fn inner_new(stream: TokenStream, up: *const Entry) -> TokenBuffer {
        .                   // Build up the entries list, recording the locations of any Groups
        .                   // in the list to be processed later.
   28,587 ( 0.00%)          let mut entries = Vec::new();
   10,995 ( 0.00%)          let mut groups = Vec::new();
  377,579 ( 0.01%)          for tt in stream {
   32,338 ( 0.00%)              match tt {
   43,860 ( 0.00%)                  TokenTree::Ident(sym) => {
  138,890 ( 0.00%)                      entries.push(Entry::Ident(sym));
        .                           }
   26,956 ( 0.00%)                  TokenTree::Punct(op) => {
  101,085 ( 0.00%)                      entries.push(Entry::Punct(op));
        .                           }
      620 ( 0.00%)                  TokenTree::Literal(l) => {
    2,325 ( 0.00%)                      entries.push(Entry::Literal(l));
        .                           }
   13,755 ( 0.00%)                  TokenTree::Group(g) => {
        .                               // Record the index of the interesting entry, and store an
        .                               // `End(null)` there temporarily.
   47,160 ( 0.00%)                      groups.push((entries.len(), g));
   13,755 ( 0.00%)                      entries.push(Entry::End(ptr::null()));
    3,930 ( 0.00%)                  }
        .                       }
        .                   }
        .                   // Add an `End` entry to the end with a reference to the enclosing token
        .                   // stream which was passed in.
   15,393 ( 0.00%)          entries.push(Entry::End(up));
        .           
        .                   // NOTE: This is done to ensure that we don't accidentally modify the
        .                   // length of the backing buffer. The backing buffer must remain at a
        .                   // constant address after this point, as we are going to store a raw
        .                   // pointer into it.
   41,781 ( 0.00%)          let mut entries = entries.into_boxed_slice();
  117,762 ( 0.00%)          for (idx, group) in groups {
        .                       // We know that this index refers to one of the temporary
        .                       // `End(null)` entries, and we know that the last entry is
        .                       // `End(up)`, so the next index is also valid.
   21,615 ( 0.00%)              let group_up = unsafe { entries.as_ptr().add(idx + 1) };
        .           
        .                       // The end entry stored at the end of this Entry::Group should
        .                       // point to the Entry which follows the Group in the list.
   21,615 ( 0.00%)              let inner = Self::inner_new(group.stream(), group_up);
   66,810 ( 0.00%)              entries[idx] = Entry::Group(group, inner);
    1,965 ( 0.00%)          }
        .           
   10,995 ( 0.00%)          let len = entries.len();
   19,791 ( 0.00%)          let ptr = Box::into_raw(entries);
    4,398 ( 0.00%)          TokenBuffer {
        .                       ptr: ptr as *const Entry,
        .                       len,
        .                   }
   17,592 ( 0.00%)      }
        .           
        .               /// Creates a `TokenBuffer` containing all the tokens from the input
        .               /// `proc_macro::TokenStream`.
        .               ///
        .               /// *This method is available only if Syn is built with both the `"parsing"` and
        .               /// `"proc-macro"` features.*
        .               #[cfg(all(
        .                   not(all(target_arch = "wasm32", any(target_os = "unknown", target_os = "wasi"))),
-- line 118 ----------------------------------------
-- line 119 ----------------------------------------
        .                   feature = "proc-macro"
        .               ))]
        .               pub fn new(stream: pm::TokenStream) -> Self {
        .                   Self::new2(stream.into())
        .               }
        .           
        .               /// Creates a `TokenBuffer` containing all the tokens from the input
        .               /// `proc_macro2::TokenStream`.
      468 ( 0.00%)      pub fn new2(stream: TokenStream) -> Self {
    3,276 ( 0.00%)          Self::inner_new(stream, ptr::null())
      468 ( 0.00%)      }
        .           
        .               /// Creates a cursor referencing the first token in the buffer and able to
        .               /// traverse until the end of the buffer.
    7,310 ( 0.00%)      pub fn begin(&self) -> Cursor {
   51,170 ( 0.00%)          unsafe { Cursor::create(self.ptr, self.ptr.add(self.len - 1)) }
    7,310 ( 0.00%)      }
        .           }
        .           
        .           /// A cheaply copyable cursor into a `TokenBuffer`.
        .           ///
        .           /// This cursor holds a shared reference into the immutable data which is used
        .           /// internally to represent a `TokenStream`, and can be efficiently manipulated
        .           /// and copied around.
        .           ///
-- line 143 ----------------------------------------
-- line 156 ----------------------------------------
        .               scope: *const Entry,
        .               // Cursor is covariant in 'a. This field ensures that our pointers are still
        .               // valid.
        .               marker: PhantomData<&'a Entry>,
        .           }
        .           
        .           impl<'a> Cursor<'a> {
        .               /// Creates a cursor referencing a static empty TokenStream.
      115 ( 0.00%)      pub fn empty() -> Self {
        .                   // It's safe in this situation for us to put an `Entry` object in global
        .                   // storage, despite it not actually being safe to send across threads
        .                   // (`Ident` is a reference into a thread-local table). This is because
        .                   // this entry never includes a `Ident` object.
        .                   //
        .                   // This wrapper struct allows us to break the rules and put a `Sync`
        .                   // object in global storage.
        .                   struct UnsafeSyncEntry(Entry);
        .                   unsafe impl Sync for UnsafeSyncEntry {}
        .                   static EMPTY_ENTRY: UnsafeSyncEntry = UnsafeSyncEntry(Entry::End(0 as *const Entry));
        .           
      345 ( 0.00%)          Cursor {
        .                       ptr: &EMPTY_ENTRY.0,
        .                       scope: &EMPTY_ENTRY.0,
        .                       marker: PhantomData,
        .                   }
      460 ( 0.00%)      }
        .           
        .               /// This create method intelligently exits non-explicitly-entered
        .               /// `None`-delimited scopes when the cursor reaches the end of them,
        .               /// allowing for them to be treated transparently.
  609,648 ( 0.02%)      unsafe fn create(mut ptr: *const Entry, scope: *const Entry) -> Self {
        .                   // NOTE: If we're looking at a `End(..)`, we want to advance the cursor
        .                   // past it, unless `ptr == scope`, which means that we're at the edge of
        .                   // our cursor's scope. We should only have `ptr != scope` at the exit
        .                   // from None-delimited groups entered with `ignore_none`.
  690,692 ( 0.02%)          while let Entry::End(exit) = *ptr {
   40,522 ( 0.00%)              if ptr == scope {
        .                           break;
        .                       }
        .                       ptr = exit;
        .                   }
        .           
  304,824 ( 0.01%)          Cursor {
  152,412 ( 0.00%)              ptr,
        .                       scope,
        .                       marker: PhantomData,
        .                   }
  609,648 ( 0.02%)      }
        .           
        .               /// Get the current entry.
2,406,744 ( 0.08%)      fn entry(self) -> &'a Entry {
        .                   unsafe { &*self.ptr }
1,203,372 ( 0.04%)      }
        .           
        .               /// Bump the cursor to point at the next token after the current one. This
        .               /// is undefined behavior if the cursor is currently looking at an
        .               /// `Entry::End`.
  892,542 ( 0.03%)      unsafe fn bump(self) -> Cursor<'a> {
  446,271 ( 0.01%)          Cursor::create(self.ptr.offset(1), self.scope)
  297,514 ( 0.01%)      }
        .           
        .               /// While the cursor is looking at a `None`-delimited group, move it to look
        .               /// at the first token inside instead. If the group is empty, this will move
        .               /// the cursor past the `None`-delimited group.
        .               ///
        .               /// WARNING: This mutates its argument.
1,052,860 ( 0.03%)      fn ignore_none(&mut self) {
1,995,721 ( 0.06%)          while let Entry::Group(group, buf) = self.entry() {
  255,360 ( 0.01%)              if group.delimiter() == Delimiter::None {
        .                           // NOTE: We call `Cursor::create` here to make sure that
        .                           // situations where we should immediately exit the span after
        .                           // entering it are handled correctly.
        .                           unsafe {
        .                               *self = Cursor::create(buf.ptr, self.scope);
        .                           }
        .                       } else {
        .                           break;
        .                       }
        .                   }
  526,430 ( 0.02%)      }
        .           
        .               /// Checks whether the cursor is currently pointing at the end of its valid
        .               /// scope.
  177,543 ( 0.01%)      pub fn eof(self) -> bool {
        .                   // We're at eof if we're at the end of our scope.
  118,362 ( 0.00%)          self.ptr == self.scope
  236,724 ( 0.01%)      }
        .           
        .               /// If the cursor is pointing at a `Group` with the given delimiter, returns
        .               /// a cursor into that group and one pointing to the next `TokenTree`.
  298,466 ( 0.01%)      pub fn group(mut self, delim: Delimiter) -> Option<(Cursor<'a>, Span, Cursor<'a>)> {
        .                   // If we're not trying to enter a none-delimited group, we want to
        .                   // ignore them. We have to make sure to _not_ ignore them when we want
        .                   // to enter them, of course. For obvious reasons.
  282,527 ( 0.01%)          if delim != Delimiter::None {
   47,817 ( 0.00%)              self.ignore_none();
        .                   }
        .           
  387,528 ( 0.01%)          if let Entry::Group(group, buf) = self.entry() {
   62,899 ( 0.00%)              if group.delimiter() == delim {
   82,104 ( 0.00%)                  return Some((buf.begin(), group.span(), unsafe { self.bump() }));
        .                       }
        .                   }
        .           
   39,217 ( 0.00%)          None
  124,493 ( 0.00%)      }
        .           
        .               /// If the cursor is pointing at a `Ident`, returns it along with a cursor
        .               /// pointing at the next `TokenTree`.
  443,135 ( 0.01%)      pub fn ident(mut self) -> Option<(Ident, Cursor<'a>)> {
  177,254 ( 0.01%)          self.ignore_none();
  620,389 ( 0.02%)          match self.entry() {
1,886,976 ( 0.06%)              Entry::Ident(ident) => Some((ident.clone(), unsafe { self.bump() })),
   10,003 ( 0.00%)              _ => None,
        .                   }
  177,254 ( 0.01%)      }
        .           
        .               /// If the cursor is pointing at a `Punct`, returns it along with a cursor
        .               /// pointing at the next `TokenTree`.
  766,650 ( 0.02%)      pub fn punct(mut self) -> Option<(Punct, Cursor<'a>)> {
  306,660 ( 0.01%)          self.ignore_none();
1,073,310 ( 0.03%)          match self.entry() {
2,406,008 ( 0.08%)              Entry::Punct(op) if op.as_char() != '\'' => Some((op.clone(), unsafe { self.bump() })),
  180,028 ( 0.01%)              _ => None,
        .                   }
  306,660 ( 0.01%)      }
        .           
        .               /// If the cursor is pointing at a `Literal`, return it along with a cursor
        .               /// pointing at the next `TokenTree`.
   21,690 ( 0.00%)      pub fn literal(mut self) -> Option<(Literal, Cursor<'a>)> {
    8,676 ( 0.00%)          self.ignore_none();
   30,366 ( 0.00%)          match self.entry() {
    3,950 ( 0.00%)              Entry::Literal(lit) => Some((lit.clone(), unsafe { self.bump() })),
    4,180 ( 0.00%)              _ => None,
        .                   }
    8,676 ( 0.00%)      }
        .           
        .               /// If the cursor is pointing at a `Lifetime`, returns it along with a
        .               /// cursor pointing at the next `TokenTree`.
    4,905 ( 0.00%)      pub fn lifetime(mut self) -> Option<(Lifetime, Cursor<'a>)> {
    1,962 ( 0.00%)          self.ignore_none();
    6,867 ( 0.00%)          match self.entry() {
      180 ( 0.00%)              Entry::Punct(op) if op.as_char() == '\'' && op.spacing() == Spacing::Joint => {
        .                           let next = unsafe { self.bump() };
        .                           match next.ident() {
        .                               Some((ident, rest)) => {
        .                                   let lifetime = Lifetime {
        .                                       apostrophe: op.span(),
        .                                       ident,
        .                                   };
        .                                   Some((lifetime, rest))
        .                               }
        .                               None => None,
        .                           }
        .                       }
    1,962 ( 0.00%)              _ => None,
        .                   }
    1,962 ( 0.00%)      }
        .           
        .               /// Copies all remaining tokens visible from this cursor into a
        .               /// `TokenStream`.
      805 ( 0.00%)      pub fn token_stream(self) -> TokenStream {
      460 ( 0.00%)          let mut tts = Vec::new();
      230 ( 0.00%)          let mut cursor = self;
    6,289 ( 0.00%)          while let Some((tt, rest)) = cursor.token_tree() {
    1,672 ( 0.00%)              tts.push(tt);
      304 ( 0.00%)              cursor = rest;
        .                   }
    1,610 ( 0.00%)          tts.into_iter().collect()
      345 ( 0.00%)      }
        .           
        .               /// If the cursor is pointing at a `TokenTree`, returns it along with a
        .               /// cursor pointing at the next `TokenTree`.
        .               ///
        .               /// Returns `None` if the cursor has reached the end of its stream.
        .               ///
        .               /// This method does not treat `None`-delimited groups as transparent, and
        .               /// will return a `Group(None, ..)` if the cursor is looking at one.
    3,410 ( 0.00%)      pub fn token_tree(self) -> Option<(TokenTree, Cursor<'a>)> {
    1,240 ( 0.00%)          let tree = match self.entry() {
      387 ( 0.00%)              Entry::Group(group, _) => group.clone().into(),
      608 ( 0.00%)              Entry::Literal(lit) => lit.clone().into(),
        .                       Entry::Ident(ident) => ident.clone().into(),
    1,368 ( 0.00%)              Entry::Punct(op) => op.clone().into(),
      115 ( 0.00%)              Entry::End(..) => return None,
        .                   };
        .           
    4,290 ( 0.00%)          Some((tree, unsafe { self.bump() }))
      815 ( 0.00%)      }
        .           
        .               /// Returns the `Span` of the current token, or `Span::call_site()` if this
        .               /// cursor points to eof.
   90,885 ( 0.00%)      pub fn span(self) -> Span {
  121,180 ( 0.00%)          match self.entry() {
    8,365 ( 0.00%)              Entry::Group(group, _) => group.span(),
      721 ( 0.00%)              Entry::Literal(l) => l.span(),
  138,810 ( 0.00%)              Entry::Ident(t) => t.span(),
   64,169 ( 0.00%)              Entry::Punct(o) => o.span(),
        .                       Entry::End(..) => Span::call_site(),
        .                   }
   90,885 ( 0.00%)      }
        .           
        .               /// Skip over the next token without cloning it. Returns `None` if this
        .               /// cursor points to eof.
        .               ///
        .               /// This method treats `'lifetimes` as a single token.
   33,473 ( 0.00%)      pub(crate) fn skip(self) -> Option<Cursor<'a>> {
   20,966 ( 0.00%)          match self.entry() {
        .                       Entry::End(..) => None,
        .           
        .                       // Treat lifetimes as a single tt for the purposes of 'skip'.
   23,660 ( 0.00%)              Entry::Punct(op) if op.as_char() == '\'' && op.spacing() == Spacing::Joint => {
        .                           let next = unsafe { self.bump() };
        .                           match next.entry() {
        .                               Entry::Ident(_) => Some(unsafe { next.bump() }),
        .                               _ => Some(next),
        .                           }
        .                       }
   24,344 ( 0.00%)              _ => Some(unsafe { self.bump() }),
        .                   }
    6,086 ( 0.00%)      }
        .           }
        .           
        .           impl<'a> Copy for Cursor<'a> {}
        .           
        .           impl<'a> Clone for Cursor<'a> {
        .               fn clone(&self) -> Self {
        .                   *self
        .               }
-- line 384 ----------------------------------------
-- line 393 ----------------------------------------
        .                   *ptr == other.ptr && *scope == other.scope
        .               }
        .           }
        .           
        .           pub(crate) fn same_scope(a: Cursor, b: Cursor) -> bool {
        .               a.scope == b.scope
        .           }
        .           
   65,325 ( 0.00%)  pub(crate) fn open_span_of_group(cursor: Cursor) -> Span {
   65,325 ( 0.00%)      match cursor.entry() {
    5,047 ( 0.00%)          Entry::Group(group, _) => group.span_open(),
   49,376 ( 0.00%)          _ => cursor.span(),
        .               }
   39,195 ( 0.00%)  }
        .           
    9,220 ( 0.00%)  pub(crate) fn close_span_of_group(cursor: Cursor) -> Span {
    9,220 ( 0.00%)      match cursor.entry() {
   12,908 ( 0.00%)          Entry::Group(group, _) => group.span_close(),
        .                   _ => cursor.span(),
        .               }
    5,532 ( 0.00%)  }

2,454,973 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           #[derive(Clone, Debug)]
        .           #[must_use = "iterators are lazy and do nothing unless consumed"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub struct Enumerate<I> {
        .               iter: I,
        .               count: usize,
        .           }
        .           impl<I> Enumerate<I> {
  592,504 ( 0.02%)      pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
  444,378 ( 0.01%)          Enumerate { iter, count: 0 }
  296,252 ( 0.01%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I> Iterator for Enumerate<I>
        .           where
        .               I: Iterator,
        .           {
        .               type Item = (usize, <I as Iterator>::Item);
-- line 32 ----------------------------------------
-- line 37 ----------------------------------------
        .               /// `usize::MAX` elements either produces the wrong result or panics. If
        .               /// debug assertions are enabled, a panic is guaranteed.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Might panic if the index of the element overflows a `usize`.
        .               #[inline]
        .               #[rustc_inherit_overflow_checks]
  451,623 ( 0.01%)      fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
2,018,996 ( 0.06%)          let a = self.iter.next()?;
  557,578 ( 0.02%)          let i = self.count;
2,203,377 ( 0.07%)          self.count += 1;
  941,596 ( 0.03%)          Some((i, a))
  751,873 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
  117,808 ( 0.00%)          self.iter.size_hint()
        .               }
        .           
        .               #[inline]
        .               #[rustc_inherit_overflow_checks]
        .               fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {
        .                   let a = self.iter.nth(n)?;
      746 ( 0.00%)          let i = self.count + n;
      753 ( 0.00%)          self.count = i + 1;
        .                   Some((i, a))
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        .                   self.iter.count()
        .               }
        .           
-- line 70 ----------------------------------------
-- line 76 ----------------------------------------
        .                   R: Try<Output = Acc>,
        .               {
        .                   #[inline]
        .                   fn enumerate<'a, T, Acc, R>(
        .                       count: &'a mut usize,
        .                       mut fold: impl FnMut(Acc, (usize, T)) -> R + 'a,
        .                   ) -> impl FnMut(Acc, T) -> R + 'a {
        .                       #[rustc_inherit_overflow_checks]
    5,325 ( 0.00%)              move |acc, item| {
   11,163 ( 0.00%)                  let acc = fold(acc, (*count, item));
  239,673 ( 0.01%)                  *count += 1;
        .                           acc
        .                       }
        .                   }
        .           
        .                   self.iter.try_fold(init, enumerate(&mut self.count, fold))
        .               }
        .           
        .               #[inline]
-- line 94 ----------------------------------------
-- line 97 ----------------------------------------
        .                   Fold: FnMut(Acc, Self::Item) -> Acc,
        .               {
        .                   #[inline]
        .                   fn enumerate<T, Acc>(
        .                       mut count: usize,
        .                       mut fold: impl FnMut(Acc, (usize, T)) -> Acc,
        .                   ) -> impl FnMut(Acc, T) -> Acc {
        .                       #[rustc_inherit_overflow_checks]
   49,358 ( 0.00%)              move |acc, item| {
      142 ( 0.00%)                  let acc = fold(acc, (count, item));
   49,848 ( 0.00%)                  count += 1;
        .                           acc
        .                       }
        .                   }
        .           
  222,129 ( 0.01%)          self.iter.fold(init, enumerate(self.count, fold))
        .               }
        .           
        .               #[inline]
        .               #[rustc_inherit_overflow_checks]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   match self.iter.advance_by(n) {
        .                       ret @ Ok(_) => {
        .                           self.count += n;
-- line 120 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[doc(hidden)]
        .               unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item
        .               where
        .                   Self: TrustedRandomAccessNoCoerce,
        .               {
        .                   // SAFETY: the caller must uphold the contract for
        .                   // `Iterator::__iterator_get_unchecked`.
        .                   let value = unsafe { try_get_unchecked(&mut self.iter, idx) };
       20 ( 0.00%)          (self.count + idx, value)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<I> DoubleEndedIterator for Enumerate<I>
        .           where
        .               I: ExactSizeIterator + DoubleEndedIterator,
        .           {
-- line 147 ----------------------------------------
-- line 172 ----------------------------------------
        .               {
        .                   // Can safely add and subtract the count, as `ExactSizeIterator` promises
        .                   // that the number of elements fits into a `usize`.
        .                   fn enumerate<T, Acc, R>(
        .                       mut count: usize,
        .                       mut fold: impl FnMut(Acc, (usize, T)) -> R,
        .                   ) -> impl FnMut(Acc, T) -> R {
        .                       move |acc, item| {
   22,600 ( 0.00%)                  count -= 1;
        .                           fold(acc, (count, item))
        .                       }
        .                   }
        .           
    6,725 ( 0.00%)          let count = self.count + self.iter.len();
        .                   self.iter.try_rfold(init, enumerate(count, fold))
        .               }
        .           
        .               #[inline]
        .               fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
        .               where
        .                   Fold: FnMut(Acc, Self::Item) -> Acc,
        .               {
-- line 193 ----------------------------------------

1,165,229 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
4,543,092 ( 0.15%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  178,471 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
4,697,402 ( 0.15%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
  262,219 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  107,545 ( 0.00%)          self.try_fold_with(folder).into_ok()
  245,129 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
6,223,825 ( 0.20%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
2,051,615 ( 0.07%)          self.try_super_fold_with(folder)
6,344,575 ( 0.20%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  401,921 ( 0.01%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  345,885 ( 0.01%)          self.super_visit_with(visitor)
  189,448 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
  286,281 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
      162 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  695,278 ( 0.02%)      fn has_escaping_bound_vars(&self) -> bool {
  112,051 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  698,708 ( 0.02%)      }
        .           
   88,525 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   47,470 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    6,510 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
   17,848 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
   17,848 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
    2,160 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
  144,110 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   49,863 ( 0.00%)      fn needs_infer(&self) -> bool {
  101,604 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   50,434 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   40,904 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
1,299,082 ( 0.04%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  157,510 ( 0.01%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    5,761 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   18,080 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   32,660 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    9,960 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
  186,948 ( 0.01%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  347,735 ( 0.01%)          Ok(self.fold_binder(t))
  265,651 ( 0.01%)      }
        .           
  113,269 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
2,189,064 ( 0.07%)          Ok(self.fold_ty(t))
   78,571 ( 0.00%)      }
        .           
   10,796 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
  299,929 ( 0.01%)          Ok(self.fold_region(r))
   10,796 ( 0.00%)      }
        .           
   57,314 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
   53,121 ( 0.00%)          Ok(self.fold_const(c))
   54,974 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 330 ----------------------------------------
        .           
        .           pub trait TypeVisitor<'tcx>: Sized {
        .               type BreakTy = !;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
    3,249 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
    3,312 ( 0.00%)          t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
      528 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   c.super_visit_with(self)
      462 ( 0.00%)      }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
        .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    3,248 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        5 ( 0.00%)          let ct = ct.super_fold_with(self);
        .                   (self.ct_op)(ct)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Region folder
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
-- line 406 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
    3,210 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
   24,287 ( 0.00%)              callback(r);
        .                       false
        .                   });
    2,790 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
    4,140 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 473 ----------------------------------------
        .                       F: FnMut(ty::Region<'tcx>) -> bool,
        .                   {
        .                       type BreakTy = ();
        .           
        .                       fn visit_binder<T: TypeFoldable<'tcx>>(
        .                           &mut self,
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
    2,909 ( 0.00%)                  self.outer_index.shift_in(1);
    3,340 ( 0.00%)                  let result = t.as_ref().skip_binder().visit_with(self);
    2,505 ( 0.00%)                  self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
   21,815 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   37,600 ( 0.00%)                  match *r {
      216 ( 0.00%)                      ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
   30,541 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
   27,773 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
   32,848 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
   48,172 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
  210,595 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   56,453 ( 0.00%)          self.tcx
   56,453 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
    5,804 ( 0.00%)          self.current_index.shift_in(1);
   11,206 ( 0.00%)          let t = t.super_fold_with(self);
    5,226 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
    2,694 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   39,726 ( 0.00%)          match *r {
    2,694 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
    2,694 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
  111,096 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   74,910 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
  265,496 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
   37,455 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   70,021 ( 0.00%)          self.tcx
   29,941 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   90,774 ( 0.00%)          self.current_index.shift_in(1);
  168,110 ( 0.01%)          let t = t.super_fold_with(self);
   82,173 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
  296,985 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  200,800 ( 0.01%)          match *t.kind() {
    5,040 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
    1,009 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
    1,009 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
  198,782 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
  219,454 ( 0.01%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
  242,214 ( 0.01%)      }
        .           
  121,128 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  110,768 ( 0.00%)          match *r {
  110,680 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
   55,025 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
  113,054 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
    1,502 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
   14,985 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
  121,128 ( 0.00%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      141 ( 0.00%)          match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
        .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
        .                           }
        .                       }
       47 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
        .                           return ct.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   ct
        .               }
        .           }
        .           
-- line 681 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
  139,064 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    4,345 ( 0.00%)          let value = value.skip_binder();
   31,136 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   48,054 ( 0.00%)              value
        .                   } else {
   21,900 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
   14,872 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
  111,433 ( 0.00%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
  223,834 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
   44,315 ( 0.00%)          if !value.has_escaping_bound_vars() {
   84,144 ( 0.00%)              value
        .                   } else {
        .                       let mut replacer =
  416,853 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
   38,279 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
  153,095 ( 0.00%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  601,946 ( 0.02%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
  163,453 ( 0.01%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  552,726 ( 0.02%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  494,365 ( 0.02%)          (value, region_map)
  438,616 ( 0.01%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
   13,299 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
   26,416 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
    4,064 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    7,254 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
   28,980 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    1,676 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
    3,096 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    3,020 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   70,494 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   50,200 ( 0.00%)          let mut counter = 0;
    4,149 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
    3,004 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
   12,016 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
    7,510 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
   10,040 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
   30,120 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
   56,166 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   60,564 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
    2,624 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      909 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
        .                   self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
        .                   self.current_index.shift_out(1);
        .                   t
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      646 ( 0.00%)          match *r {
        .                       ty::ReLateBound(debruijn, br) => {
    1,212 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
        .                               r
        .                           } else {
      303 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
        .                               let shifted = ty::ReLateBound(debruijn, br);
    3,030 ( 0.00%)                      self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
    4,362 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
    6,558 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1073 ----------------------------------------
        .           
        .           pub fn shift_region<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               region: ty::Region<'tcx>,
        .               amount: u32,
        .           ) -> ty::Region<'tcx> {
        .               match region {
        .                   ty::ReLateBound(debruijn, br) if amount > 0 => {
    1,690 ( 0.00%)              tcx.mk_region(ty::ReLateBound(debruijn.shifted_in(amount), *br))
        .                   }
        .                   _ => region,
        .               }
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
    2,644 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
   19,727 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
   26,772 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        2 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
       69 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
       99 ( 0.00%)              _ => ct.super_visit_with(self),
        .                   }
        2 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
  365,622 ( 0.01%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
   10,272 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   23,471 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
      668 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
      109 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      774 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    5,418 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      774 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        3 ( 0.00%)          self.current_index.shift_in(1);
        3 ( 0.00%)          let result = t.super_visit_with(self);
        3 ( 0.00%)          self.current_index.shift_out(1);
        .                   result
        .               }
        .           
    3,309 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
    4,632 ( 0.00%)          if self.just_constrained {
    4,636 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
    5,617 ( 0.00%)          t.super_visit_with(self)
    2,404 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
      198 ( 0.00%)          if self.just_constrained {
      198 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    3,257 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      595 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

  300,664 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 137 ----------------------------------------
        .               ///
        .               /// assert_eq!("ƒoo".len(), 4); // fancy f!
        .               /// assert_eq!("ƒoo".chars().count(), 3);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_str_len", since = "1.39.0")]
        .               #[must_use]
        .               #[inline]
  142,690 ( 0.00%)      pub const fn len(&self) -> usize {
        .                   self.as_bytes().len()
   57,076 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` has a length of zero bytes.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
        .               /// ```
-- line 155 ----------------------------------------
-- line 158 ----------------------------------------
        .               ///
        .               /// let s = "not empty";
        .               /// assert!(!s.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_str_is_empty", since = "1.39.0")]
        .               #[must_use]
        .               #[inline]
      216 ( 0.00%)      pub const fn is_empty(&self) -> bool {
   80,696 ( 0.00%)          self.len() == 0
      288 ( 0.00%)      }
        .           
        .               /// Checks that `index`-th byte is the first byte in a UTF-8 code point
        .               /// sequence or the end of the string.
        .               ///
        .               /// The start and end of the string (when `index == self.len()`) are
        .               /// considered to be boundaries.
        .               ///
        .               /// Returns `false` if `index` is greater than `self.len()`.
-- line 176 ----------------------------------------
-- line 188 ----------------------------------------
        .               /// assert!(!s.is_char_boundary(2));
        .               ///
        .               /// // third byte of `老`
        .               /// assert!(!s.is_char_boundary(8));
        .               /// ```
        .               #[must_use]
        .               #[stable(feature = "is_char_boundary", since = "1.9.0")]
        .               #[inline]
    8,638 ( 0.00%)      pub fn is_char_boundary(&self, index: usize) -> bool {
        .                   // 0 is always ok.
        .                   // Test for 0 explicitly so that it can optimize out the check
        .                   // easily and skip reading string data for that case.
        .                   // Note that optimizing `self.get(..index)` relies on this.
  231,529 ( 0.01%)          if index == 0 {
        .                       return true;
        .                   }
        .           
  125,863 ( 0.00%)          match self.as_bytes().get(index) {
        .                       // For `None` we have two options:
        .                       //
        .                       // - index == self.len()
        .                       //   Empty strings are valid, so return true
        .                       // - index > self.len()
        .                       //   In this case return false
        .                       //
        .                       // The check is placed exactly here, because it improves generated
        .                       // code on higher opt-levels. See PR #84751 for more details.
   43,339 ( 0.00%)              None => index == self.len(),
        .           
        .                       // This is bit magic equivalent to: b < 128 || b >= 192
   91,654 ( 0.00%)              Some(&b) => (b as i8) >= -0x40,
        .                   }
    7,404 ( 0.00%)      }
        .           
        .               /// Converts a string slice to a byte slice. To convert the byte slice back
        .               /// into a string slice, use the [`from_utf8`] function.
        .               ///
        .               /// # Examples
        .               ///
        .               /// Basic usage:
        .               ///
-- line 228 ----------------------------------------
-- line 232 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "str_as_bytes", since = "1.39.0")]
        .               #[must_use]
        .               #[inline(always)]
        .               #[allow(unused_attributes)]
        .               pub const fn as_bytes(&self) -> &[u8] {
        .                   // SAFETY: const sound because we transmute two types with the same layout
6,081,998 ( 0.19%)          unsafe { mem::transmute(self) }
        .               }
        .           
        .               /// Converts a mutable string slice to a mutable byte slice.
        .               ///
        .               /// # Safety
        .               ///
        .               /// The caller must ensure that the content of the slice is valid UTF-8
        .               /// before the borrow ends and the underlying `str` is used.
-- line 248 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// assert_eq!(Some('y'), chars.next()); // not 'y̆'
        .               /// assert_eq!(Some('\u{0306}'), chars.next());
        .               ///
        .               /// assert_eq!(None, chars.next());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
  775,590 ( 0.02%)      pub fn chars(&self) -> Chars<'_> {
  775,590 ( 0.02%)          Chars { iter: self.as_bytes().iter() }
  620,472 ( 0.02%)      }
        .           
        .               /// Returns an iterator over the [`char`]s of a string slice, and their
        .               /// positions.
        .               ///
        .               /// As a string slice consists of valid UTF-8, we can iterate through a
        .               /// string slice by [`char`]. This method returns an iterator of both
        .               /// these [`char`]s, as well as their byte positions.
        .               ///
-- line 698 ----------------------------------------
-- line 808 ----------------------------------------
        .               ///
        .               /// assert_eq!(None, iter.next());
        .               /// ```
        .               #[must_use = "this returns the split string as an iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "split_whitespace", since = "1.1.0")]
        .               #[inline]
        .               pub fn split_whitespace(&self) -> SplitWhitespace<'_> {
        9 ( 0.00%)          SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }
        .               }
        .           
        .               /// Splits a string slice by ASCII whitespace.
        .               ///
        .               /// The iterator returned will return string slices that are sub-slices of
        .               /// the original string slice, separated by any amount of ASCII whitespace.
        .               ///
        .               /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].
-- line 824 ----------------------------------------
-- line 979 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let bananas = "bananas";
        .               ///
        .               /// assert!(bananas.starts_with("bana"));
        .               /// assert!(!bananas.starts_with("nana"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   38,176 ( 0.00%)      pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {
    6,988 ( 0.00%)          pat.is_prefix_of(self)
   13,976 ( 0.00%)      }
        .           
        .               /// Returns `true` if the given pattern matches a suffix of this
        .               /// string slice.
        .               ///
        .               /// Returns `false` if it does not.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 997 ----------------------------------------
-- line 1005 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let bananas = "bananas";
        .               ///
        .               /// assert!(bananas.ends_with("anas"));
        .               /// assert!(!bananas.ends_with("nana"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   43,362 ( 0.00%)      pub fn ends_with<'a, P>(&'a self, pat: P) -> bool
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
    7,884 ( 0.00%)          pat.is_suffix_of(self)
   15,768 ( 0.00%)      }
        .           
        .               /// Returns the byte index of the first character of this string slice that
        .               /// matches the pattern.
        .               ///
        .               /// Returns [`None`] if the pattern doesn't match.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 1026 ----------------------------------------
-- line 1056 ----------------------------------------
        .               /// ```
        .               /// let s = "Löwe 老虎 Léopard";
        .               /// let x: &[_] = &['1', '2'];
        .               ///
        .               /// assert_eq!(s.find(x), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        6 ( 0.00%)      pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {
        1 ( 0.00%)          pat.into_searcher(self).next_match().map(|(i, _)| i)
        2 ( 0.00%)      }
        .           
        .               /// Returns the byte index for the first character of the rightmost match of the pattern in
        .               /// this string slice.
        .               ///
        .               /// Returns [`None`] if the pattern doesn't match.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
-- line 1074 ----------------------------------------
-- line 1102 ----------------------------------------
        .               /// ```
        .               /// let s = "Löwe 老虎 Léopard";
        .               /// let x: &[_] = &['1', '2'];
        .               ///
        .               /// assert_eq!(s.rfind(x), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    7,936 ( 0.00%)      pub fn rfind<'a, P>(&'a self, pat: P) -> Option<usize>
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
        .                   pat.into_searcher(self).next_match_back().map(|(i, _)| i)
    7,936 ( 0.00%)      }
        .           
        .               /// An iterator over substrings of this string slice, separated by
        .               /// characters matched by a pattern.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 1123 ----------------------------------------
-- line 1225 ----------------------------------------
        .               /// ```
        .               ///
        .               /// Use [`split_whitespace`] for this behavior.
        .               ///
        .               /// [`split_whitespace`]: str::split_whitespace
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {
    6,012 ( 0.00%)          Split(SplitInternal {
        .                       start: 0,
        .                       end: self.len(),
        .                       matcher: pat.into_searcher(self),
        .                       allow_trailing_empty: true,
        .                       finished: false,
        .                   })
        .               }
        .           
-- line 1241 ----------------------------------------
-- line 1472 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v: Vec<&str> = "abc1defXghi".splitn(2, |c| c == '1' || c == 'X').collect();
        .               /// assert_eq!(v, ["abc", "defXghi"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {
      243 ( 0.00%)          SplitN(SplitNInternal { iter: self.split(pat).0, count: n })
        .               }
        .           
        .               /// An iterator over substrings of this string slice, separated by a
        .               /// pattern, starting from the end of the string, restricted to returning
        .               /// at most `n` items.
        .               ///
        .               /// If `n` substrings are returned, the last substring (the `n`th substring)
        .               /// will contain the remainder of the string.
-- line 1488 ----------------------------------------
-- line 1540 ----------------------------------------
        .               /// ```
        .               /// assert_eq!("cfg".split_once('='), None);
        .               /// assert_eq!("cfg=foo".split_once('='), Some(("cfg", "foo")));
        .               /// assert_eq!("cfg=foo=bar".split_once('='), Some(("cfg", "foo=bar")));
        .               /// ```
        .               #[stable(feature = "str_split_once", since = "1.52.0")]
        .               #[inline]
        .               pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {
       50 ( 0.00%)          let (start, end) = delimiter.into_searcher(self).next_match()?;
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
        .               }
        .           
        .               /// Splits the string on the last occurrence of the specified delimiter and
        .               /// returns prefix before delimiter and suffix after delimiter.
        .               ///
        .               /// # Examples
-- line 1556 ----------------------------------------
-- line 1749 ----------------------------------------
        .               ///
        .               /// assert_eq!("Hello\tworld", s.trim());
        .               /// ```
        .               #[inline]
        .               #[must_use = "this returns the trimmed string as a slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn trim(&self) -> &str {
        8 ( 0.00%)          self.trim_matches(|c: char| c.is_whitespace())
        .               }
        .           
        .               /// Returns a string slice with leading whitespace removed.
        .               ///
        .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
        .               /// Core Property `White_Space`.
        .               ///
        .               /// # Text directionality
-- line 1765 ----------------------------------------
-- line 1825 ----------------------------------------
        .               /// let s = "  עברית  ";
        .               /// assert!(Some('ת') == s.trim_end().chars().rev().next());
        .               /// ```
        .               #[inline]
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
        .               pub fn trim_end(&self) -> &str {
      501 ( 0.00%)          self.trim_end_matches(|c: char| c.is_whitespace())
        .               }
        .           
        .               /// Returns a string slice with leading whitespace removed.
        .               ///
        .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
        .               /// Core Property `White_Space`.
        .               ///
        .               /// # Text directionality
-- line 1841 ----------------------------------------
-- line 1945 ----------------------------------------
        .               /// A more complex pattern, using a closure:
        .               ///
        .               /// ```
        .               /// assert_eq!("1foo1barXX".trim_matches(|c| c == '1' || c == 'X'), "foo1bar");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   16,304 ( 0.00%)      pub fn trim_matches<'a, P>(&'a self, pat: P) -> &'a str
        .               where
        .                   P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,
        .               {
        .                   let mut i = 0;
        .                   let mut j = 0;
        .                   let mut matcher = pat.into_searcher(self);
        .                   if let Some((a, b)) = matcher.next_reject() {
        .                       i = a;
-- line 1961 ----------------------------------------
-- line 1962 ----------------------------------------
        .                       j = b; // Remember earliest known match, correct it below if
        .                       // last match is different
        .                   }
        .                   if let Some((_, b)) = matcher.next_reject_back() {
        .                       j = b;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { self.get_unchecked(i..j) }
   16,304 ( 0.00%)      }
        .           
        .               /// Returns a string slice with all prefixes that match a pattern
        .               /// repeatedly removed.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 1978 ----------------------------------------
-- line 1994 ----------------------------------------
        .               /// assert_eq!("123foo1bar123".trim_start_matches(char::is_numeric), "foo1bar123");
        .               ///
        .               /// let x: &[_] = &['1', '2'];
        .               /// assert_eq!("12foo1bar12".trim_start_matches(x), "foo1bar12");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
   10,494 ( 0.00%)      pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {
        .                   let mut i = self.len();
        .                   let mut matcher = pat.into_searcher(self);
        .                   if let Some((a, _)) = matcher.next_reject() {
        .                       i = a;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { self.get_unchecked(i..self.len()) }
   10,494 ( 0.00%)      }
        .           
        .               /// Returns a string slice with the prefix removed.
        .               ///
        .               /// If the string starts with the pattern `prefix`, returns substring after the prefix, wrapped
        .               /// in `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.
        .               ///
        .               /// If the string does not start with `prefix`, returns `None`.
        .               ///
-- line 2018 ----------------------------------------
-- line 2098 ----------------------------------------
        .               /// A more complex pattern, using a closure:
        .               ///
        .               /// ```
        .               /// assert_eq!("1fooX".trim_end_matches(|c| c == '1' || c == 'X'), "1foo");
        .               /// ```
        .               #[must_use = "this returns the trimmed string as a new slice, \
        .                             without modifying the original"]
        .               #[stable(feature = "trim_direction", since = "1.30.0")]
    4,509 ( 0.00%)      pub fn trim_end_matches<'a, P>(&'a self, pat: P) -> &'a str
        .               where
        .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
        .               {
        .                   let mut j = 0;
        .                   let mut matcher = pat.into_searcher(self);
        .                   if let Some((_, b)) = matcher.next_reject_back() {
        .                       j = b;
        .                   }
        .                   // SAFETY: `Searcher` is known to return valid indices.
        .                   unsafe { self.get_unchecked(0..j) }
    5,010 ( 0.00%)      }
        .           
        .               /// Returns a string slice with all prefixes that match a pattern
        .               /// repeatedly removed.
        .               ///
        .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
        .               /// function or closure that determines if a character matches.
        .               ///
        .               /// [`char`]: prim@char
-- line 2125 ----------------------------------------
-- line 2240 ----------------------------------------
        .               /// ```
        .               /// let nope = "j".parse::<u32>();
        .               ///
        .               /// assert!(nope.is_err());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
       18 ( 0.00%)          FromStr::from_str(self)
        .               }
        .           
        .               /// Checks if all characters in this string are within the ASCII range.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let ascii = "hello!\n";
-- line 2256 ----------------------------------------
-- line 2420 ----------------------------------------
        .               /// Using `to_string`:
        .               ///
        .               /// ```
        .               /// assert_eq!("❤\n!".escape_default().to_string(), "\\u{2764}\\n!");
        .               /// ```
        .               #[must_use = "this returns the escaped string as an iterator, \
        .                             without modifying the original"]
        .               #[stable(feature = "str_escape", since = "1.34.0")]
       85 ( 0.00%)      pub fn escape_default(&self) -> EscapeDefault<'_> {
      340 ( 0.00%)          EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }
       85 ( 0.00%)      }
        .           
        .               /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].
        .               ///
        .               /// # Examples
        .               ///
        .               /// As an iterator:
        .               ///
        .               /// ```
-- line 2438 ----------------------------------------
-- line 2466 ----------------------------------------
        .               pub fn escape_unicode(&self) -> EscapeUnicode<'_> {
        .                   EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl AsRef<[u8]> for str {
        .               #[inline]
    8,040 ( 0.00%)      fn as_ref(&self) -> &[u8] {
        .                   self.as_bytes()
    3,216 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl const Default for &str {
        .               /// Creates an empty str
        .               #[inline]
        .               fn default() -> Self {
-- line 2484 ----------------------------------------

  791,095 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .               /// ```
         .               /// let mut s = [1, 2, 3];
         .               /// let ptr: *mut u32 = s.as_mut_ptr();
         .               /// assert!(!ptr.is_null());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
         .               #[inline]
 2,690,244 ( 0.09%)      pub const fn is_null(self) -> bool {
         .                   // Compare via a cast to a thin pointer, so fat pointers are only
         .                   // considering their "data" part for null-ness.
 2,690,244 ( 0.09%)          (self as *mut u8).guaranteed_eq(null_mut())
 2,690,244 ( 0.09%)      }
         .           
         .               /// Casts to a pointer of another type.
         .               #[stable(feature = "ptr_cast", since = "1.38.0")]
         .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
         .               #[inline(always)]
         .               pub const fn cast<U>(self) -> *mut U {
         .                   self as _
         .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
         .               #[inline(always)]
         .               pub const unsafe fn offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `offset`.
         .                   // The obtained pointer is valid for writes since the caller must
         .                   // guarantee that it points to the same allocated object as `self`.
18,346,253 ( 0.59%)          unsafe { intrinsics::offset(self, count) as *mut T }
         .               }
         .           
         .               /// Calculates the offset from a pointer using wrapping arithmetic.
         .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
         .               /// offset of `3 * size_of::<T>()` bytes.
         .               ///
         .               /// # Safety
         .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
         .               #[must_use = "returns a new pointer rather than modifying its argument"]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline(always)]
         .               pub const fn wrapping_offset(self, count: isize) -> *mut T
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
       635 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
         .               }
         .           
         .               /// Returns `None` if the pointer is null, or else returns a unique reference to
         .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
         .               /// must be used instead.
         .               ///
         .               /// For the shared counterpart see [`as_ref`].
         .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
         .               /// affect the outcome, but just the performance.
         .               /// The consequences of using this method to make runtime and compile-time code behave
         .               /// differently have not been explored. This method should not be used to introduce such
         .               /// differences, and it should also not be stabilized before we have a better understanding
         .               /// of this issue.
         .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
         .               #[inline]
 2,017,683 ( 0.06%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
         .               where
         .                   T: Sized,
         .               {
 4,035,725 ( 0.13%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
 2,690,244 ( 0.09%)      }
         .           
         .               /// Returns whether two pointers are guaranteed to be unequal.
         .               ///
         .               /// At runtime this function behaves like `self != other`.
         .               /// However, in some contexts (e.g., compile-time evaluation),
         .               /// it is not always possible to determine the inequality of two pointers, so this function may
         .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
         .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 1055 ----------------------------------------
         .               ///
         .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[inline(always)]
         .               pub unsafe fn drop_in_place(self) {
         .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
        88 ( 0.00%)          unsafe { drop_in_place(self) }
         .               }
         .           
         .               /// Overwrites a memory location with the given value without reading or
         .               /// dropping the old value.
         .               ///
         .               /// See [`ptr::write`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
         .               #[stable(feature = "pointer_methods", since = "1.26.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
         .               #[inline(always)]
         .               pub const unsafe fn write(self, val: T)
         .               where
         .                   T: Sized,
         .               {
         .                   // SAFETY: the caller must uphold the safety contract for `write`.
     5,061 ( 0.00%)          unsafe { write(self, val) }
         .               }
         .           
         .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
         .               /// bytes of memory starting at `self` to `val`.
         .               ///
         .               /// See [`ptr::write_bytes`] for safety concerns and examples.
         .               ///
         .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
-- line 1088 ----------------------------------------
-- line 1416 ----------------------------------------
         .               }
         .           }
         .           
         .           // Equality for pointers
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> PartialEq for *mut T {
         .               #[inline(always)]
         .               fn eq(&self, other: &*mut T) -> bool {
    31,512 ( 0.00%)          *self == *other
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Eq for *mut T {}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

 1,635,351 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  534,999 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
    1,123 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,084 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
      216 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,030 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       32 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      128 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,372 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       17 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       17 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
       17 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    7,077 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,752 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        3 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      119 ( 0.00%)      fn from(p: PathBuf) -> Self {
       34 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      102 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      119 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       68 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      102 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      102 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       85 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,112 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       17 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       34 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       15 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        6 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       15 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        2 ( 0.00%)      pub lo: BytePos,
        2 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        6 ( 0.00%)      pub ctxt: SyntaxContext,
        2 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  196,493 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      756 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   31,112 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   23,334 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   31,112 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   65,493 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   43,662 ( 0.00%)      }
        .               #[inline]
    2,304 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    2,304 ( 0.00%)      }
        .               #[inline]
   12,042 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    8,028 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    4,335 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    2,601 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
      693 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
      462 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      453 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
      302 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    2,268 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
    1,512 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    1,380 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      690 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    1,518 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   16,491 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   10,994 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    3,046 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    2,509 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    2,075 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    1,200 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      240 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      960 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
   10,143 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    8,694 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    7,245 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       75 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       90 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  426,514 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   76,376 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
    1,172 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      973 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  263,256 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  348,966 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,991 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    1,267 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    1,448 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    4,554 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      828 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    2,898 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    3,726 ( 0.00%)      }
        .           
      451 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      287 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    1,284 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       80 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
       78 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    8,652 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    5,047 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   70,353 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   54,513 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   36,342 ( 0.00%)          let mut span = self.data();
   29,767 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   54,513 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   60,052 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      279 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      228 ( 0.00%)          let mut span = self.data();
      239 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      447 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      310 ( 0.00%)      }
        .           
        .               #[inline]
   59,856 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   52,374 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    2,860 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
       20 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       60 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
       20 ( 0.00%)      }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      235 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        8 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    2,860 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    2,860 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       40 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       32 ( 0.00%)          MultiSpan::from_spans(spans)
       40 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       99 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      320 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      556 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      160 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      556 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      480 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       48 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      370 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,100 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       96 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,200 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       60 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       60 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      928 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       16 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       16 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       16 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       64 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       32 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       32 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       48 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      176 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,950 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      550 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  899,466 ( 0.03%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,100 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,050 ( 0.00%)              SourceFile {
    4,400 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,200 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,200 ( 0.00%)                  lines,
    2,200 ( 0.00%)                  multibyte_chars,
    2,200 ( 0.00%)                  non_narrow_chars,
    2,200 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,950 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      220 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       60 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       40 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       40 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       60 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      240 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       40 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      340 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      220 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       80 ( 0.00%)              lines,
       80 ( 0.00%)              multibyte_chars,
       80 ( 0.00%)              non_narrow_chars,
       80 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      180 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    3,829 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      547 ( 0.00%)          if matches!(
    1,094 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      547 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    4,923 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      556 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    8,815 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    8,087 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   22,008 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   15,383 ( 0.00%)          assert!(line_index < self.lines.len());
   21,336 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      137 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   14,118 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      866 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    2,598 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    5,196 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    4,330 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    1,732 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    3,031 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      866 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      288 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      433 ( 0.00%)                  let linebpos = self.lines[a];
      866 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      433 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    3,464 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    3,464 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    1,299 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      866 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      433 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    2,165 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    3,031 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      200 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      180 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       20 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       20 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   45,896 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    1,896 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   52,846 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,639,733 ( 0.05%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,411,528 ( 0.05%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   97,860 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        2 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      252 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      126 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  450,408 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   84,447 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  365,961 ( 0.01%)          let span = self.data_untracked();
  132,723 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
  193,032 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  129,862 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  126,340 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  252,680 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  126,340 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   63,170 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   63,170 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  514,752 ( 0.02%)      }
        .           }

2,091,022 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       340 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       170 ( 0.00%)              from_str_radix(src, radix)
       510 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   103,470 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   437,240 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
   363,640 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
14,145,009 ( 0.45%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
         .                   )]
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   182,400 ( 0.01%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   146,177 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   364,800 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   145,920 ( 0.00%)          }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
   873,765 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
    57,776 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
   228,972 ( 0.01%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   152,648 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   381,620 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   152,648 ( 0.00%)          }
         .           
         .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
         .                   /// This results in undefined behavior when
         .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   145,012 ( 0.00%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     4,376 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 6,750,410 ( 0.22%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 2,811,261 ( 0.09%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
 7,176,766 ( 0.23%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
         4 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 1,309,971 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    72,960 ( 0.00%)              (a as Self, b)
   145,920 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   258,053 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,183,857 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    76,324 ( 0.00%)              (a as Self, b)
   152,648 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       180 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
    20,442 ( 0.00%)              if self <= 1 { return 0; }
         .           
   106,631 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   319,283 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   107,201 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   192,800 ( 0.01%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
         .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
         .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
       195 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       156 ( 0.00%)              self.to_le().to_ne_bytes()
       117 ( 0.00%)          }
         .           
         .                   /// Return the memory representation of this integer as a byte array in
         .                   /// native byte order.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
         .                   /// instead.
         .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute them to arrays of bytes
         .                   #[inline]
        78 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
         .                       // arrays of bytes
        39 ( 0.00%)              unsafe { mem::transmute(self) }
       117 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its representation
         .                   /// as a byte array in big endian.
         .                   ///
         .                   #[doc = $from_xe_bytes_doc]
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
         .                   ///     *input = rest;
         .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   #[inline]
       312 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
       390 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
       156 ( 0.00%)          }
         .           
         .                   /// Create a native endian integer value from its memory representation
         .                   /// as a byte array in native endianness.
         .                   ///
         .                   /// As the target platform's native endianness is used, portable code
         .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
         .                   /// appropriate instead.
         .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
         .                   /// }
         .                   /// ```
         .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
         .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
         .                   #[must_use]
         .                   // SAFETY: const sound because integers are plain old datatypes so we can always
         .                   // transmute to them
         .                   #[inline]
       312 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
         .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
       468 ( 0.00%)              unsafe { mem::transmute(bytes) }
       156 ( 0.00%)          }
         .           
         .                   /// New code should prefer to use
         .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
         .                   ///
         .                   /// Returns the smallest value that can be represented by this integer type.
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_promotable]
         .                   #[inline(always)]
-- line 2421 ----------------------------------------

   556,870 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,821,114 ( 0.06%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   139,155 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
39,433,194 ( 1.26%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   253,798 ( 0.01%)          self.stride += Group::WIDTH;
   253,798 ( 0.01%)          self.pos += self.stride;
   218,112 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   151,834 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   320,265 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    71,184 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   408,341 ( 0.01%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    85,898 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   300,923 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   408,370 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
     1,536 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
       894 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       635 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     9,906 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    28,441 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    28,441 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    56,882 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
    13,976 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    42,906 ( 0.00%)          self.erase_no_drop(&item);
        88 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   688,469 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,254 ( 0.00%)          match self.find(hash, eq) {
     7,931 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   134,657 ( 0.00%)              None => None,
         .                   }
   918,212 ( 0.03%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    16,320 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   395,783 ( 0.01%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   266,748 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   609,002 ( 0.02%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   428,760 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,475,350 ( 0.08%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     6,272 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,764,621 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,823,973 ( 0.06%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   786,056 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       211 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   589,542 ( 0.02%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     2,267 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   384,753 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    12,258 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   808,302 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   638,529 ( 0.02%)          self.table.items += 1;
         .                   bucket
     4,493 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     4,808 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     7,509 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    18,290 ( 0.00%)              eq(self.bucket(index).as_ref())
     2,666 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
       873 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     4,808 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    16,341 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
         .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     3,985 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   827,437 ( 0.03%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    99,898 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     7,712 ( 0.00%)          let allocation = self.into_allocation();
     5,784 ( 0.00%)          RawIntoIter {
     9,640 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     3,475 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       586 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   834,871 ( 0.03%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   540,633 ( 0.02%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
   122,246 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   299,106 ( 0.01%)          Ok(Self {
         .                       ctrl,
   125,895 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   393,656 ( 0.01%)      }
         .           
         .               #[inline]
    22,898 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     6,026 ( 0.00%)          if capacity == 0 {
     5,561 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   245,205 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    10,931 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    22,898 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   136,920 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   136,920 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   273,840 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,186,663 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 3,472,762 ( 0.11%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,598,176 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    91,396 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 3,834,354 ( 0.12%)              for bit in group.match_byte(h2_hash) {
 7,626,964 ( 0.24%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 4,662,094 ( 0.15%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,129,153 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         3 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 4,230,424 ( 0.14%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
21,113,977 ( 0.68%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 2,205,140 ( 0.07%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,764,112 ( 0.06%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        15 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
         .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
         .                   self.set_ctrl(index, h2(hash));
         .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 3,326,958 ( 0.11%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,108,986 ( 0.04%)          *self.ctrl(index) = ctrl;
 1,109,416 ( 0.04%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   329,165 ( 0.01%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   321,558 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 1,538,427 ( 0.05%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     1,308 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   164,385 ( 0.01%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    74,524 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   149,053 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   149,050 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   316,622 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         2 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    74,524 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     3,161 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   663,966 ( 0.02%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    74,524 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
        64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
         5 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    50,588 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
    11,817 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
    13,317 ( 0.00%)          self.items = 0;
    11,817 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   108,831 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   435,324 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   537,375 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   435,324 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     2,400 ( 0.00%)      fn clone(&self) -> Self {
       428 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
     2,700 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
       254 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   728,318 ( 0.02%)      fn drop(&mut self) {
   660,340 ( 0.02%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   775,792 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     7,712 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     9,640 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   230,771 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    34,547 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    53,143 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   201,566 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     5,598 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     4,632 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    11,277 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
     1,442 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    37,965 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    88,458 ( 0.00%)          if let Some(b) = self.iter.next() {
   343,168 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    75,930 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,798 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
    16,465 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       294 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       447 ( 0.00%)      fn next(&mut self) -> Option<T> {
       225 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       894 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       848 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       106 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
       848 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

11,762,114 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
   582,235 ( 0.02%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
 1,131,198 ( 0.04%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
 2,012,867 ( 0.06%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
   188,533 ( 0.01%)                      old
         .                           }
   377,066 ( 0.01%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
   106,206 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
    30,338 ( 0.00%)                      self.end
         .                           }
    30,338 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   216,795 ( 0.01%)                  len!(self)
     7,742 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
   690,315 ( 0.02%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
 1,110,262 ( 0.04%)                      assume(!self.ptr.as_ptr().is_null());
 1,150,525 ( 0.04%)                      if mem::size_of::<T>() != 0 {
   500,989 ( 0.02%)                          assume(!self.end.is_null());
         .                               }
43,143,482 ( 1.38%)                      if is_empty!(self) {
    41,572 ( 0.00%)                          None
         .                               } else {
   377,078 ( 0.01%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
   690,315 ( 0.02%)              }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
 1,079,182 ( 0.03%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    21,910 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     4,635 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
    10,422 ( 0.00%)                  while let Some(x) = self.next() {
    14,597 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
        40 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   355,364 ( 0.01%)                  while let Some(x) = self.next() {
   584,454 ( 0.02%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
        40 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
    43,256 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
   122,151 ( 0.00%)                  while let Some(x) = self.next() {
    56,860 ( 0.00%)                      if predicate(&x) {
       382 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
     8,422 ( 0.00%)                  None
    27,774 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    54,772 ( 0.00%)                  while let Some(x) = self.next() {
   165,468 ( 0.01%)                      if let Some(y) = f(x) {
    22,712 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     4,615 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   127,181 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    11,720 ( 0.00%)                  while let Some(x) = self.next_back() {
   139,063 ( 0.00%)                      i -= 1;
   112,620 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
   110,482 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
    45,723 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
    60,965 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
    76,205 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    30,505 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   840,437 ( 0.03%)                      if is_empty!(self) {
        72 ( 0.00%)                          None
         .                               } else {
    30,338 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
    45,723 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

 8,265,639 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .           #[cfg(feature = "parsing")]
        .           #[doc(hidden)]
        .           #[allow(non_snake_case)]
        .           pub fn Ident(marker: lookahead::TokenMarker) -> Ident {
        .               match marker {}
        .           }
        .           
        .           #[cfg(feature = "parsing")]
   35,106 ( 0.00%)  fn accept_as_ident(ident: &Ident) -> bool {
  117,020 ( 0.00%)      match ident.to_string().as_str() {
   93,511 ( 0.00%)          "_" |
        .                   // Based on https://doc.rust-lang.org/grammar.html#keywords
        .                   // and https://github.com/rust-lang/rfcs/blob/master/text/2421-unreservations-2018.md
        .                   // and https://github.com/rust-lang/rfcs/blob/master/text/2420-unreserve-proc.md
  648,820 ( 0.02%)          "abstract" | "as" | "become" | "box" | "break" | "const" | "continue" |
  728,337 ( 0.02%)          "crate" | "do" | "else" | "enum" | "extern" | "false" | "final" | "fn" |
  709,449 ( 0.02%)          "for" | "if" | "impl" | "in" | "let" | "loop" | "macro" | "match" |
  597,405 ( 0.02%)          "mod" | "move" | "mut" | "override" | "priv" | "pub" | "ref" |
  584,290 ( 0.02%)          "return" | "Self" | "self" | "static" | "struct" | "super" | "trait" |
  582,778 ( 0.02%)          "true" | "type" | "typeof" | "unsafe" | "unsized" | "use" | "virtual" |
  252,292 ( 0.01%)          "where" | "while" | "yield" => false,
   10,404 ( 0.00%)          _ => true,
        .               }
   81,914 ( 0.00%)  }
        .           
        .           #[cfg(feature = "parsing")]
        .           #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
        .           impl Parse for Ident {
   20,288 ( 0.00%)      fn parse(input: ParseStream) -> Result<Self> {
   35,504 ( 0.00%)          input.step(|cursor| {
  147,088 ( 0.00%)              if let Some((ident, rest)) = cursor.ident() {
   25,360 ( 0.00%)                  if accept_as_ident(&ident) {
   96,368 ( 0.00%)                      return Ok((ident, rest));
        .                           }
    5,072 ( 0.00%)              }
        .                       Err(cursor.error("expected identifier"))
   10,144 ( 0.00%)          })
   10,144 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(feature = "parsing")]
        .           impl Token for Ident {
   34,960 ( 0.00%)      fn peek(cursor: Cursor) -> bool {
  163,464 ( 0.01%)          if let Some((ident, _rest)) = cursor.ident() {
   33,150 ( 0.00%)              accept_as_ident(&ident)
   19,890 ( 0.00%)          } else {
      362 ( 0.00%)              false
        .                   }
  111,510 ( 0.00%)      }
        .           
        .               fn display() -> &'static str {
        .                   "identifier"
      681 ( 0.00%)      }
        .           }
        .           
        .           macro_rules! ident_from_token {
        .               ($token:ident) => {
        .                   impl From<Token![$token]> for Ident {
        .                       fn from(token: Token![$token]) -> Ident {
        .                           Ident::new(stringify!($token), token.span)
        .                       }
-- line 73 ----------------------------------------

1,617,036 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.86/src/ident.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/dl-tls.c
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,481,971,093 (47.51%)  events annotated

