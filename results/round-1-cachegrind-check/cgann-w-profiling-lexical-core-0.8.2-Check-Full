--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name lexical_core --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="floats" --cfg feature="integers" --cfg feature="lexical-parse-float" --cfg feature="lexical-parse-integer" --cfg feature="lexical-write-float" --cfg feature="lexical-write-integer" --cfg feature="parse" --cfg feature="parse-floats" --cfg feature="parse-integers" --cfg feature="std" --cfg feature="write" --cfg feature="write-floats" --cfg feature="write-integers" -C metadata=16341bf13a5130fa -C extra-filename=-16341bf13a5130fa --out-dir /usr/home/liquid/tmp/.tmptc60gg/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps --extern lexical_parse_float=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps/liblexical_parse_float-0d5eb33f20e17d81.rmeta --extern lexical_parse_integer=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps/liblexical_parse_integer-7446b8c071abee3c.rmeta --extern lexical_util=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps/liblexical_util-4624d9e623cb5f76.rmeta --extern lexical_write_float=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps/liblexical_write_float-ec4a65bd2407b3e1.rmeta --extern lexical_write_integer=/usr/home/liquid/tmp/.tmptc60gg/target/debug/deps/liblexical_write_integer-54193f7a696bd2c8.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-lexical-core-0.8.2-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
309,883,070 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,670,303 ( 3.44%)  ./malloc/malloc.c:_int_free
10,305,124 ( 3.33%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,441,494 ( 2.72%)  ./malloc/malloc.c:_int_malloc
 5,993,176 ( 1.93%)  ./malloc/malloc.c:malloc
 4,835,679 ( 1.56%)  ./elf/dl-lookup.c:do_lookup_x
 4,358,704 ( 1.41%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 4,141,271 ( 1.34%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 3,106,115 ( 1.00%)  ./malloc/malloc.c:free
 2,953,777 ( 0.95%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,635,985 ( 0.85%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,471,872 ( 0.80%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,139,033 ( 0.69%)  ./elf/do-rel.h:_dl_relocate_object
 2,062,088 ( 0.67%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,383,264 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,362,217 ( 0.44%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,208,970 ( 0.39%)  ./malloc/malloc.c:realloc
 1,160,784 ( 0.37%)  ./malloc/malloc.c:malloc_consolidate
 1,141,775 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,137,279 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,133,863 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,127,095 ( 0.36%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,115,541 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   966,301 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   959,406 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_ast::ast::Lit>::from_lit_token
   929,761 ( 0.30%)  ./malloc/malloc.c:calloc
   893,848 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   871,003 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   864,856 ( 0.28%)  ./elf/dl-lookup.c:check_match
   841,996 ( 0.27%)  ./malloc/malloc.c:_int_realloc
   835,711 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   834,602 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   818,213 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   802,610 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   756,878 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   747,488 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   692,565 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   647,361 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   644,742 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   626,976 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   625,193 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   598,842 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<(rustc_span::hygiene::SyntaxContext, rustc_span::hygiene::ExpnId, rustc_span::hygiene::Transparency), rustc_span::hygiene::SyntaxContext, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   582,875 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   538,007 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   531,632 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::has_escaping_bound_vars
   529,040 ( 0.17%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   503,437 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   499,565 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   499,053 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   491,937 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   474,362 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::context::TyCtxt>::anonymize_late_bound_regions::<rustc_middle::ty::PredicateKind>
   472,678 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   469,099 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs:<rustc_infer::traits::util::Elaborator as core::iter::traits::iterator::Iterator>::next
   460,774 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   459,896 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   459,321 ( 0.15%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   459,089 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   455,160 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::Predicate, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::Predicate, rustc_middle::ty::Predicate, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   447,554 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (core::option::Option<rustc_middle::hir::Owner>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   431,893 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   424,768 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
   419,368 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   419,000 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs:<rustc_ast::ast::Lit>::from_lit_token
   419,000 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:<rustc_ast::ast::Lit>::from_lit_token
   406,185 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::Predicate, ())>>::insert::<hashbrown::map::make_hasher<rustc_middle::ty::Predicate, rustc_middle::ty::Predicate, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   404,437 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   402,359 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   401,812 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark
   401,749 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   400,742 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   400,740 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   397,318 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   393,230 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find
   387,534 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lint::builtin::MissingDoc as rustc_lint::passes::LateLintPass>::enter_lint_attrs
   387,478 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   379,312 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   376,055 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   376,055 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   376,055 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   369,860 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
   369,339 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   369,275 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
   361,468 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
   355,923 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
   351,907 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs:rustc_expand::mbe::transcribe::transcribe
   346,868 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   343,404 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:rustc_infer::traits::util::anonymize_predicate
   341,334 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   339,394 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
   330,961 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::apply_mark_internal
   324,353 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs:<rustc_infer::infer::canonical::canonicalizer::Canonicalizer as rustc_middle::ty::fold::TypeFolder>::fold_ty
   322,882 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::register_obligation_at
   322,016 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs:<rustc_ast::ast::Lit>::from_lit_token
   313,460 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::SyntaxContext as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  6,997 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
861,747 ( 0.28%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 68,839 ( 0.02%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 56,003 ( 0.02%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
  4,085 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
  4,800 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
  3,420 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
  1,950 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
    120 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  1,680 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

195,888 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .           use rustc_span::hygiene::MacroKind;
      .           use rustc_span::source_map::Spanned;
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use rustc_span::Span;
      .           use rustc_target::spec::abi::Abi;
      .           use std::collections::VecDeque;
      .           
      .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
  1,800 ( 0.00%)      match node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
      .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
      .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
      .                       Some(fn_decl)
      .                   }
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
    360 ( 0.00%)      match &node {
      .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
      .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
      .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
      .                   _ => None,
      .               }
      .           }
      .           
      .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
 21,176 ( 0.01%)      match node {
      .                   Node::Item(Item {
      .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
      .                       ..
      .                   })
      .                   | Node::TraitItem(TraitItem {
      .                       kind:
      .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
      .                       ..
      .                   })
      .                   | Node::ImplItem(ImplItem {
      .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
      .                       ..
      .                   })
  3,508 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
      .           
  4,140 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
      .           
      .                   _ => None,
      .               }
      .           }
      .           
      .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
      .               match associated_body(node) {
      .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
      .           pub struct ParentHirIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentHirIterator<'hir> {
      .               type Item = (HirId, Node<'hir>);
      .           
  4,802 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
  1,014 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      .                       return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.get_parent_node(self.current_id);
      .           
  3,042 ( 0.00%)              if parent_id == self.current_id {
      .                           self.current_id = CRATE_HIR_ID;
      .                           return None;
      .                       }
      .           
  2,028 ( 0.00%)              self.current_id = parent_id;
  8,112 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
  2,744 ( 0.00%)                  return Some((parent_id, node));
      .                       }
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      .                   }
  6,174 ( 0.00%)      }
      .           }
      .           
      .           /// An iterator that walks up the ancestor tree of a given `HirId`.
      .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
      .           pub struct ParentOwnerIterator<'hir> {
      .               current_id: HirId,
      .               map: Map<'hir>,
      .           }
      .           
      .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
      .               type Item = (LocalDefId, OwnerNode<'hir>);
      .           
 23,832 ( 0.01%)      fn next(&mut self) -> Option<Self::Item> {
  7,944 ( 0.00%)          if self.current_id.local_id.index() != 0 {
  1,308 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
  5,232 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
  1,340 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
    272 ( 0.00%)              return None;
      .                   }
      .                   loop {
      .                       // There are nodes that do not have entries, so we need to skip them.
      .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
      .           
      .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
      .                           let def_id = LocalDefId { local_def_index };
      .                           self.map.local_def_id_to_hir_id(def_id).owner
      .                       });
  2,408 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
      .           
      .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
  2,408 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
      .                           return Some((self.current_id.owner, node.node));
      .                       }
      .                   }
 21,184 ( 0.01%)      }
      .           }
      .           
      .           impl<'hir> Map<'hir> {
    203 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
     29 ( 0.00%)          self.tcx.hir_crate(())
    232 ( 0.00%)      }
      .           
      7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
      1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
      .                       Some(OwnerNode::Crate(item)) => item,
      .                       _ => bug!(),
      .                   }
      8 ( 0.00%)      }
      .           
      .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
      .                   let krate = self.krate();
      .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
      .                       OwnerNode::Item(item) => Some(item),
      .                       _ => None,
      .                   })
      .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
      .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
      .               }
      .           
      .               #[inline]
 32,784 ( 0.01%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
  7,848 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
      .                           hir_id,
      .                           self.find(hir_id)
      .                       )
      .                   })
 24,588 ( 0.01%)      }
      .           
      .               #[inline]
 20,928 ( 0.01%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
  5,848 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
      .                       Some(hir_id.owner)
      .                   } else {
  3,544 ( 0.00%)              self.tcx
      .                           .hir_owner_nodes(hir_id.owner)?
      .                           .local_id_to_def_id
      .                           .get(&hir_id.local_id)
      .                           .copied()
      .                   }
 23,544 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
      .                   // FIXME(#85914) is this access safe for incr. comp.?
  1,719 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
      .               }
      .           
      7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
      .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
      .                   // definitions change.
      1 ( 0.00%)          self.tcx.ensure().hir_crate(());
      .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
      9 ( 0.00%)      }
      .           
  3,703 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
      .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
  6,877 ( 0.00%)          let def_kind = match self.find(hir_id)? {
    480 ( 0.00%)              Node::Item(item) => match item.kind {
      .                           ItemKind::Static(..) => DefKind::Static,
      .                           ItemKind::Const(..) => DefKind::Const,
      .                           ItemKind::Fn(..) => DefKind::Fn,
      .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
      .                           ItemKind::Mod(..) => DefKind::Mod,
      .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
      .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
      .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
      .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
      .                           ItemKind::Impl { .. } => DefKind::Impl,
      .                       },
      .                       Node::ForeignItem(item) => match item.kind {
      .                           ForeignItemKind::Fn(..) => DefKind::Fn,
      .                           ForeignItemKind::Static(..) => DefKind::Static,
      .                           ForeignItemKind::Type => DefKind::ForeignTy,
      .                       },
     20 ( 0.00%)              Node::TraitItem(item) => match item.kind {
      .                           TraitItemKind::Const(..) => DefKind::AssocConst,
      .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
      .                           TraitItemKind::Type(..) => DefKind::AssocTy,
      .                       },
    140 ( 0.00%)              Node::ImplItem(item) => match item.kind {
      .                           ImplItemKind::Const(..) => DefKind::AssocConst,
      .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
      .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
      .                       },
      .                       Node::Variant(_) => DefKind::Variant,
      .                       Node::Ctor(variant_data) => {
      .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      .                           assert_ne!(variant_data.ctor_hir_id(), None);
-- line 268 ----------------------------------------
-- line 270 ----------------------------------------
      .                           let ctor_of = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Item(..)) => def::CtorOf::Struct,
      .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
      .                               _ => unreachable!(),
      .                           };
      .                           DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      .                       }
      .                       Node::AnonConst(_) => {
    480 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
      .                               Some(Node::Expr(&Expr {
      .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
      .                               })) if anon_const.hir_id == hir_id => true,
      .                               _ => false,
      .                           };
      .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
      .                       }
      .                       Node::Field(_) => DefKind::Field,
      .                       Node::Expr(expr) => match expr.kind {
      .                           ExprKind::Closure(.., None) => DefKind::Closure,
      .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
      .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
      .                       },
    402 ( 0.00%)              Node::GenericParam(param) => match param.kind {
      .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
      .                           GenericParamKind::Type { .. } => DefKind::TyParam,
      .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
      .                       },
      .                       Node::Crate(_) => DefKind::Mod,
      .                       Node::Stmt(_)
      .                       | Node::PathSegment(_)
      .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
      .                       | Node::Binding(_)
      .                       | Node::Local(_)
      .                       | Node::Param(_)
      .                       | Node::Arm(_)
      .                       | Node::Lifetime(_)
      .                       | Node::Visibility(_)
      .                       | Node::Block(_) => return None,
      .                   };
  1,860 ( 0.00%)          Some(def_kind)
  5,290 ( 0.00%)      }
      .           
      .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
      .                   self.opt_def_kind(local_def_id)
      .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
      .               }
      .           
 69,696 ( 0.02%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  8,712 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       Some(self.tcx.hir_owner_parent(id.owner))
      .                   } else {
 15,484 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  7,742 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
 23,226 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
      .                       Some(hir_id)
      .                   }
 69,696 ( 0.02%)      }
      .           
  1,030 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
 26,510 ( 0.01%)          self.find_parent_node(hir_id).unwrap()
  2,060 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
151,408 ( 0.05%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
 18,926 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
      .                       let owner = self.tcx.hir_owner(id.owner)?;
 12,074 ( 0.00%)              Some(owner.node.into())
      .                   } else {
 13,496 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  6,748 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
 20,244 ( 0.01%)              Some(node.node)
      .                   }
151,408 ( 0.05%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
      .               #[inline]
      .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
  3,018 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
      .               }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
 12,600 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
  6,724 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
  8,400 ( 0.00%)      }
      .           
      .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
      .               #[inline]
      .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
      .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
      .               }
      .           
    420 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
    210 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
    420 ( 0.00%)      }
      .           
      .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
      .                   let node = self.tcx.hir_owner(id)?;
      .                   match node.node {
      .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
      .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
      .                       OwnerNode::Item(Item {
      .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
      .                               | ItemKind::TraitAlias(generics, _)
      .                               | ItemKind::Impl(Impl { generics, .. }),
      .                           ..
      .                       }) => Some(generics),
      .                       _ => None,
      .                   }
      .               }
      .           
 22,820 ( 0.01%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  6,520 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
 26,080 ( 0.01%)      }
      .           
  1,890 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    540 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
  2,160 ( 0.00%)      }
      .           
 28,420 ( 0.01%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
  8,120 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
 32,480 ( 0.01%)      }
      .           
      .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
      .               }
      .           
 42,812 ( 0.01%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
 12,232 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
 48,928 ( 0.02%)      }
      .           
  1,080 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
  1,080 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_decl(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
    720 ( 0.00%)      }
      .           
    180 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
    180 ( 0.00%)          if let Some(node) = self.find(hir_id) {
      .                       fn_sig(node)
      .                   } else {
      .                       bug!("no node for hir_id `{}`", hir_id)
      .                   }
    180 ( 0.00%)      }
      .           
    660 ( 0.00%)      pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
    180 ( 0.00%)          for (parent, _) in self.parent_iter(hir_id) {
      .                       if let Some(body) = self.maybe_body_owned_by(parent) {
    480 ( 0.00%)                  return self.body_owner(body);
      .                       }
      .                   }
      .           
      .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
      .               }
      .           
      .               /// Returns the `HirId` that corresponds to the definition of
      .               /// which this is the body of, i.e., a `fn`, `const` or `static`
      .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
 27,648 ( 0.01%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
      .                   let parent = self.get_parent_node(hir_id);
 20,736 ( 0.01%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
      .                   parent
 27,648 ( 0.01%)      }
      .           
  8,700 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
 13,080 ( 0.00%)          self.local_def_id(self.body_owner(id))
  8,700 ( 0.00%)      }
      .           
      .               /// Given a `HirId`, returns the `BodyId` associated with it,
      .               /// if the node is a body owner, otherwise returns `None`.
  1,326 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
  5,382 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
  3,978 ( 0.00%)      }
      .           
      .               /// Given a body owner's id, returns the `BodyId` associated with it.
  3,780 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
      .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
      .                       span_bug!(
      .                           self.span(id),
      .                           "body_owned_by: {} has no associated body",
      .                           self.node_to_string(id)
      .                       );
      .                   })
  2,940 ( 0.00%)      }
      .           
    120 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
  1,320 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
    480 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
      .                       _ => Ident::empty(),
      .                   })
    360 ( 0.00%)      }
      .           
      .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
  5,760 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
 11,920 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
      .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
      .                       Node::Ctor(..)
      .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
      .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
      .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
      .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
      .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
      .                       node => bug!("{:#?} is not a body node", node),
      .                   }
  5,760 ( 0.00%)      }
      .           
      .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
      .               ///
      .               /// Panics if `LocalDefId` does not have an associated body.
      .               ///
      .               /// This should only be used for determining the context of a body, a return
      .               /// value of `Some` does not always suggest that the owner of the body is `const`,
      .               /// just that it has to be checked as if it were.
  6,720 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
      .                   let hir_id = self.local_def_id_to_hir_id(did);
 10,080 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
      .                       BodyOwnerKind::Const => ConstContext::Const,
      .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
      .           
    480 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
    480 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
      .                       BodyOwnerKind::Fn
    960 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
      .                       {
      .                           ConstContext::ConstFn
      .                       }
      .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
      .                   };
      .           
      .                   Some(ccx)
  7,560 ( 0.00%)      }
      .           
      .               /// Returns an iterator of the `DefId`s for all body-owners in this
      .               /// crate. If you would prefer to iterate over the bodies
      .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
     21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
      3 ( 0.00%)          self.krate()
      .                       .owners
      .                       .iter_enumerated()
      .                       .flat_map(move |(owner, owner_info)| {
  1,407 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
      .                           Some(bodies.iter().map(move |&(local_id, _)| {
     60 ( 0.00%)                      let hir_id = HirId { owner, local_id };
      .                               let body_id = BodyId { hir_id };
  1,620 ( 0.00%)                      self.body_owner_def_id(body_id)
      .                           }))
      .                       })
      .                       .flatten()
     15 ( 0.00%)      }
      .           
     10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   #[cfg(parallel_compiler)]
      .                   use rustc_rayon::iter::IndexedParallelIterator;
      .           
      3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
      .                       let owner = LocalDefId::new(owner);
  2,814 ( 0.00%)              if let Some(owner_info) = owner_info {
      .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
      .                               let hir_id = HirId { owner, local_id: *local_id };
      .                               let body_id = BodyId { hir_id };
  1,620 ( 0.00%)                      f(self.body_owner_def_id(body_id))
      .                           })
      .                       }
      .                   });
      8 ( 0.00%)      }
      .           
    100 ( 0.00%)      pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
     56 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           id.expect_owner()
      .                       }
      .                       Node::GenericParam(_) => self.get_parent_item(id),
      .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
      .                   }
     70 ( 0.00%)      }
      .           
    340 ( 0.00%)      pub fn ty_param_name(&self, id: HirId) -> Symbol {
    194 ( 0.00%)          match self.get(id) {
      .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
      .                           kw::SelfUpper
      .                       }
     32 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
      .                   }
    204 ( 0.00%)      }
      .           
    423 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
     47 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
    423 ( 0.00%)      }
      .           
      .               /// Gets the attributes on the crate. This is preferable to
      .               /// invoking `krate.attrs` because it registers a tighter
      .               /// dep-graph access.
      .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
     20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
      .               }
      .           
     77 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
      .                   let hir_id = HirId::make_owner(module);
     55 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
      .                       Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
      .                           (m, span, hir_id)
      .                       }
     33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
      .                       node => panic!("not a module: {:?}", node),
      .                   }
     99 ( 0.00%)      }
      .           
      .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
     11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
     30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
      .                   visitor.visit_mod(top_mod, span, hir_id);
      8 ( 0.00%)      }
      .           
      .               /// Walks the attributes in a crate.
     20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
      2 ( 0.00%)          let krate = self.krate();
      .                   for (owner, info) in krate.owners.iter_enumerated() {
  1,876 ( 0.00%)              if let Some(info) = info {
      .                           for (local_id, attrs) in info.attrs.map.iter() {
      .                               let id = HirId { owner, local_id: *local_id };
      .                               for a in *attrs {
  4,955 ( 0.00%)                          visitor.visit_attribute(id, a)
      .                               }
      .                           }
      .                       }
      .                   }
     16 ( 0.00%)      }
      .           
      .               /// Visits all items in the crate in some deterministic (but
      .               /// unspecified) order. If you just need to process every item,
      .               /// but don't care about nesting, this method is the best choice.
      .               ///
      .               /// If you do care about nesting -- usually because your algorithm
      .               /// follows lexical scoping rules -- then you want a different
      .               /// approach. You should override `visit_nested_item` in your
      .               /// visitor and then call `intravisit::walk_crate` instead.
    136 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
      .               where
      .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
      .               {
     19 ( 0.00%)          let krate = self.krate();
     69 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
  8,130 ( 0.00%)              match owner.node() {
  4,680 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
      .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
    420 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
      .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
      .                           OwnerNode::Crate(_) => {}
      .                       }
      .                   }
    136 ( 0.00%)      }
      .           
      .               /// A parallel version of `visit_all_item_likes`.
      .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
      .               where
      .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
      .               {
      1 ( 0.00%)          let krate = self.krate();
      2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
    120 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
      .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
    140 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
     10 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
      .                       Some(OwnerNode::Crate(_)) | None => {}
      .                   })
      .               }
      .           
     86 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
      .               where
      .                   V: ItemLikeVisitor<'hir>,
      .               {
     11 ( 0.00%)          let module = self.tcx.hir_module_items(module);
      .           
     12 ( 0.00%)          for id in module.items.iter() {
  5,400 ( 0.00%)              visitor.visit_item(self.item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.trait_items.iter() {
    400 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.impl_items.iter() {
  5,460 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
      .                   }
      .           
     12 ( 0.00%)          for id in module.foreign_items.iter() {
      .                       visitor.visit_foreign_item(self.foreign_item(*id));
      .                   }
     88 ( 0.00%)      }
      .           
     46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
      .                   let mut queue = VecDeque::new();
      .                   queue.push_back(CRATE_DEF_ID);
      .           
      8 ( 0.00%)          while let Some(id) = queue.pop_front() {
      .                       f(id);
      3 ( 0.00%)              let items = self.tcx.hir_module_items(id);
     32 ( 0.00%)              queue.extend(items.submodules.iter().copied())
      .                   }
     40 ( 0.00%)      }
      .           
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
      4 ( 0.00%)          self.for_each_module(f)
      .               }
      .           
      .               #[cfg(parallel_compiler)]
      .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
      .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
      .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
      .           
      .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
      .                       (*f)(module);
      .                       let items = tcx.hir_module_items(module);
      .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
      .                   }
      .               }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
    418 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
      .                   ParentHirIterator { current_id, map: self }
  1,912 ( 0.00%)      }
      .           
      .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
      .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
      .                   ParentOwnerIterator { current_id, map: self }
  7,324 ( 0.00%)      }
      .           
      .               /// Checks if the node is left-hand side of an assignment.
      .               pub fn is_lhs(&self, id: HirId) -> bool {
      .                   match self.find(self.get_parent_node(id)) {
      .                       Some(Node::Expr(expr)) => match expr.kind {
      .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
      .                           _ => false,
      .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
      .                   }
      .                   None
      .               }
      .           
      .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
      .               /// parent item is in this map. The "parent item" is the closest parent node
      .               /// in the HIR which is recorded by the map and is an item, either an item
      .               /// in a module, trait, or impl.
  2,256 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
 20,340 ( 0.01%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
      .                       def_id
      .                   } else {
      .                       CRATE_DEF_ID
      .                   }
  4,512 ( 0.00%)      }
      .           
      .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
      .               /// module parent is in this map.
      .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
  2,600 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
    736 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
      .                           return def_id;
      .                       }
      .                   }
      .                   CRATE_DEF_ID
      .               }
      .           
      .               /// When on an if expression, a match arm tail expression or a match arm, give back
      .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
      .                       }
      .                   }
      .                   bug!(
      .                       "expected foreign mod or inlined parent, found {}",
      .                       self.node_to_string(HirId::make_owner(parent))
      .                   )
      .               }
      .           
  7,343 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
  3,147 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
      .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  8,392 ( 0.00%)      }
      .           
  1,960 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
    840 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
      .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
  2,240 ( 0.00%)      }
      .           
    140 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
     60 ( 0.00%)          match self.tcx.hir_owner(id) {
      .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
      .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
      .                   }
    160 ( 0.00%)      }
      .           
      .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Variant(variant)) => variant,
      .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
-- line 920 ----------------------------------------
-- line 929 ----------------------------------------
      .           
      .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
      .                   match self.find(id) {
      .                       Some(Node::Expr(expr)) => expr,
      .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
      .                   }
      .               }
      .           
  5,040 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
  1,680 ( 0.00%)          Some(match self.get(id) {
      .                       Node::Item(i) => i.ident.name,
      .                       Node::ForeignItem(fi) => fi.ident.name,
      .                       Node::ImplItem(ii) => ii.ident.name,
      .                       Node::TraitItem(ti) => ti.ident.name,
      .                       Node::Variant(v) => v.ident.name,
      .                       Node::Field(f) => f.ident.name,
      .                       Node::Lifetime(lt) => lt.name.ident().name,
  1,680 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
      .                       Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
      .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
      .                       _ => return None,
      .                   })
  2,800 ( 0.00%)      }
      .           
  4,480 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
  1,680 ( 0.00%)          match self.opt_name(id) {
      .                       Some(name) => name,
      .                       None => bug!("no name for {}", self.node_to_string(id)),
      .                   }
  3,360 ( 0.00%)      }
      .           
      .               /// Given a node ID, gets a list of attributes associated with the AST
      .               /// corresponding to the node-ID.
 99,862 ( 0.03%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
 14,266 ( 0.00%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
114,128 ( 0.04%)      }
      .           
      .               /// Gets the span of the definition of the specified HIR node.
      .               /// This is used by `tcx.get_span`
  2,073 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
  2,251 ( 0.00%)          self.opt_span(hir_id)
      .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
  2,073 ( 0.00%)      }
      .           
 11,802 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
 11,802 ( 0.00%)          let span = match self.find(hir_id)? {
      .                       Node::Param(param) => param.span,
    288 ( 0.00%)              Node::Item(item) => match &item.kind {
      .                           ItemKind::Fn(sig, _, _) => sig.span,
    224 ( 0.00%)                  _ => item.span,
      .                       },
      .                       Node::ForeignItem(foreign_item) => foreign_item.span,
    300 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
    240 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
     60 ( 0.00%)                  _ => trait_item.span,
      .                       },
    952 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
    896 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
     56 ( 0.00%)                  _ => impl_item.span,
      .                       },
      .                       Node::Variant(variant) => variant.span,
      .                       Node::Field(field) => field.span,
  2,520 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
      .                       Node::Expr(expr) => expr.span,
      .                       Node::Stmt(stmt) => stmt.span,
      .                       Node::PathSegment(seg) => seg.ident.span,
      .                       Node::Ty(ty) => ty.span,
      .                       Node::TraitRef(tr) => tr.path.span,
      .                       Node::Binding(pat) => pat.span,
      .                       Node::Pat(pat) => pat.span,
      .                       Node::Arm(arm) => arm.span,
-- line 999 ----------------------------------------
-- line 1007 ----------------------------------------
      .                       Node::GenericParam(param) => param.span,
      .                       Node::Visibility(&Spanned {
      .                           node: VisibilityKind::Restricted { ref path, .. },
      .                           ..
      .                       }) => path.span,
      .                       Node::Infer(i) => i.span,
      .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
      .                       Node::Local(local) => local.span,
      4 ( 0.00%)              Node::Crate(item) => item.inner,
      .                   };
      .                   Some(span)
 16,860 ( 0.01%)      }
      .           
      .               /// Like `hir.span()`, but includes the body of function items
      .               /// (instead of just the function header)
      .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
      .                   match self.find(hir_id) {
      .                       Some(Node::TraitItem(item)) => item.span,
      .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
      .                       Some(Node::Item(item)) => item.span,
      .                       Some(_) => self.span(hir_id),
      .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
      .                   }
      .               }
      .           
    280 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
  1,070 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
    420 ( 0.00%)      }
      .           
      .               pub fn res_span(&self, res: Res) -> Option<Span> {
      .                   match res {
      .                       Res::Err => None,
      .                       Res::Local(id) => Some(self.span(id)),
      .                       res => self.span_if_local(res.opt_def_id()?),
      .                   }
      .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
      .           }
      .           
      .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
      .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
      .                   self.find(hir_id)
      .               }
      .           
      .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
  3,584 ( 0.00%)          self.body(id)
      .               }
      .           
      .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
  1,560 ( 0.00%)          self.item(id)
      .               }
      .           
      .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    150 ( 0.00%)          self.trait_item(id)
      .               }
      .           
      .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
  1,960 ( 0.00%)          self.impl_item(id)
      .               }
      .           
      .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
      .                   self.foreign_item(id)
      .               }
      .           }
      .           
      7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
      .               debug_assert_eq!(crate_num, LOCAL_CRATE);
      .               let krate = tcx.hir_crate(());
      3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
      .           
      .               let upstream_crates = upstream_crates(tcx);
      .           
      .               // We hash the final, remapped names of all local source files so we
      .               // don't have to include the path prefix remapping commandline args.
      .               // If we included the full mapping in the SVH, we could only have
      .               // reproducible builds by compiling from the same directory. So we just
      .               // hash the result of the mapping instead of the mapping itself.
      2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
      .                   .sess
      .                   .source_map()
      .                   .files()
      .                   .iter()
      .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
      2 ( 0.00%)          .map(|source_file| source_file.name_hash)
      .                   .collect();
      .           
      .               source_file_names.sort_unstable();
      .           
      .               let mut hcx = tcx.create_stable_hashing_context();
      .               let mut stable_hasher = StableHasher::new();
      .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
      .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
      .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
      3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
      .                   let definitions = &tcx.untracked_resolutions.definitions;
      .                   let mut owner_spans: Vec<_> = krate
      .                       .owners
      .                       .iter_enumerated()
      .                       .filter_map(|(def_id, info)| {
      .                           let _ = info.as_ref()?;
      .                           let def_path_hash = definitions.def_path_hash(def_id);
      .                           let span = definitions.def_span(def_id);
      .                           debug_assert_eq!(span.parent(), None);
      .                           Some((def_path_hash, span))
      .                       })
      .                       .collect();
      .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
      .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
      .               }
      3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
      2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
      .           
      .               let crate_hash: Fingerprint = stable_hasher.finish();
      1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
      9 ( 0.00%)  }
      .           
      .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
      .               let mut upstream_crates: Vec<_> = tcx
      .                   .crates(())
      .                   .iter()
      .                   .map(|&cnum| {
    125 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
     25 ( 0.00%)              let hash = tcx.crate_hash(cnum);
      .                       (stable_crate_id, hash)
      .                   })
      .                   .collect();
      .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
      .               upstream_crates
      .           }
      .           
      .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
      .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
      .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
      .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
      .                   Some(Node::Crate(..)) => String::from("root_crate"),
      .                   None => format!("unknown node{}", id_str),
      .               }
      .           }
      .           
      9 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
      6 ( 0.00%)      let mut collector = ModuleCollector {
      .                   tcx,
      .                   submodules: Vec::default(),
      .                   items: Vec::default(),
      .                   trait_items: Vec::default(),
      .                   impl_items: Vec::default(),
      .                   foreign_items: Vec::default(),
      .               };
      .           
      5 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
      .               collector.visit_mod(hir_mod, span, hir_id);
      .           
     16 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
      .                   collector;
     11 ( 0.00%)      return ModuleItems {
      4 ( 0.00%)          submodules: submodules.into_boxed_slice(),
      4 ( 0.00%)          items: items.into_boxed_slice(),
      4 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
      4 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
      4 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
      .               };
      .           
      .               struct ModuleCollector<'tcx> {
      .                   tcx: TyCtxt<'tcx>,
      .                   submodules: Vec<LocalDefId>,
      .                   items: Vec<ItemId>,
      .                   trait_items: Vec<TraitItemId>,
      .                   impl_items: Vec<ImplItemId>,
      .                   foreign_items: Vec<ForeignItemId>,
      .               }
      .           
      .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
      .                   type NestedFilter = nested_filter::All;
      .           
      .                   fn nested_visit_map(&mut self) -> Self::Map {
    449 ( 0.00%)              self.tcx.hir()
      .                   }
      .           
    600 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
    360 ( 0.00%)              self.items.push(item.item_id());
    240 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
      .                           // If this declares another module, do not recurse inside it.
      .                           self.submodules.push(item.def_id);
      .                       } else {
    720 ( 0.00%)                  intravisit::walk_item(self, item)
      .                       }
      .                   }
      .           
      .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
     30 ( 0.00%)              self.trait_items.push(item.trait_item_id());
     30 ( 0.00%)              intravisit::walk_trait_item(self, item)
      .                   }
      .           
      .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
    420 ( 0.00%)              self.impl_items.push(item.impl_item_id());
    420 ( 0.00%)              intravisit::walk_impl_item(self, item)
      .                   }
      .           
      .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
      .                       self.foreign_items.push(item.foreign_item_id());
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      8 ( 0.00%)  }

116,488 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  334,911 ( 0.11%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   28,670 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
4,316,240 ( 1.39%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   22,018 ( 0.01%)          self.stride += Group::WIDTH;
   22,018 ( 0.01%)          self.pos += self.stride;
   18,352 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   32,098 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   64,180 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   19,278 ( 0.01%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   81,541 ( 0.03%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   23,028 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   65,376 ( 0.02%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   87,616 ( 0.03%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      417 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       10 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    2,992 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    5,123 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    5,123 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
   10,246 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
      480 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    9,766 ( 0.00%)          self.erase_no_drop(&item);
       44 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  136,071 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      264 ( 0.00%)          match self.find(hash, eq) {
      668 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   19,870 ( 0.01%)              None => None,
        .                   }
  188,887 ( 0.06%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    4,020 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   78,375 ( 0.03%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   52,559 ( 0.02%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  130,596 ( 0.04%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   84,528 ( 0.03%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  556,688 ( 0.18%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,947 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  314,508 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  409,456 ( 0.13%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
   52,968 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        4 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   39,726 ( 0.01%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       75 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   81,995 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
      419 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  171,604 ( 0.06%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  135,345 ( 0.04%)          self.table.items += 1;
        .                   bucket
      113 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    2,544 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    1,580 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,737 ( 0.00%)              eq(self.bucket(index).as_ref())
       65 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
        .                       Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    2,544 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,336 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,497 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  104,527 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   20,565 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,720 ( 0.00%)          let allocation = self.into_allocation();
    2,040 ( 0.00%)          RawIntoIter {
    3,400 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,278 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      252 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  157,143 ( 0.05%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  118,560 ( 0.04%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   26,718 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   66,348 ( 0.02%)          Ok(Self {
        .                       ctrl,
   27,109 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   86,412 ( 0.03%)      }
        .           
        .               #[inline]
    7,868 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    2,102 ( 0.00%)          if capacity == 0 {
    3,270 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   54,188 ( 0.02%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    2,166 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    7,868 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   28,624 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   28,624 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   57,248 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  217,401 ( 0.07%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  643,955 ( 0.21%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  293,248 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   12,024 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  537,978 ( 0.17%)              for bit in group.match_byte(h2_hash) {
  995,676 ( 0.32%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  686,274 ( 0.22%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  178,309 ( 0.06%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  759,264 ( 0.25%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
3,515,224 ( 1.13%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  393,135 ( 0.13%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  314,508 ( 0.10%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  606,615 ( 0.20%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  202,205 ( 0.07%)          *self.ctrl(index) = ctrl;
  202,234 ( 0.07%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   70,011 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   59,433 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  295,142 ( 0.10%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      774 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   33,491 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   15,946 ( 0.01%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   31,895 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   31,892 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   65,970 ( 0.02%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   15,946 ( 0.01%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    1,910 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  120,290 ( 0.04%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   15,946 ( 0.01%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    9,272 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,208 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    1,816 ( 0.00%)          self.items = 0;
    1,208 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   26,226 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  104,904 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  131,130 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  104,904 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    1,128 ( 0.00%)      fn clone(&self) -> Self {
      141 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,269 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  173,520 ( 0.06%)      fn drop(&mut self) {
  127,643 ( 0.04%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  185,120 ( 0.06%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,720 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    3,400 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   44,151 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    6,217 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    9,803 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   43,554 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,030 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      618 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    2,155 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      595 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    8,220 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   17,974 ( 0.01%)          if let Some(b) = self.iter.next() {
   46,384 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   16,440 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,074 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    6,192 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      134 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      230 ( 0.00%)      fn next(&mut self) -> Option<T> {
      114 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      460 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        4 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      296 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       37 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      296 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,877,635 ( 0.61%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 121 ----------------------------------------
     .           #[derive(Debug)]
     .           pub enum ProcessResult<O, E> {
     .               Unchanged,
     .               Changed(Vec<O>),
     .               Error(E),
     .           }
     .           
     .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
 8,170 ( 0.00%)  struct ObligationTreeId(usize);
     .           
     .           type ObligationTreeIdGenerator =
     .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
     .           
     .           pub struct ObligationForest<O: ForestObligation> {
     .               /// The list of obligations. In between calls to `process_obligations`,
     .               /// this list only contains nodes in the `Pending` or `Waiting` state.
     .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
     .               has_parent: bool,
     .           
     .               /// Identifier of the obligation tree to which this node belongs.
     .               obligation_tree_id: ObligationTreeId,
     .           }
     .           
     .           impl<O> Node<O> {
     .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
81,968 ( 0.03%)          Node {
     .                       obligation,
     .                       state: Cell::new(NodeState::Pending),
 8,237 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
     .                       has_parent: parent.is_some(),
     .                       obligation_tree_id,
     .                   }
     .               }
     .           }
     .           
     .           /// The state of one node in some tree within the forest. This represents the
     .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
     .           ///  |     compress()
     .           ///  v
     .           /// (Removed)
     .           /// ```
     .           /// The `Error` state can be introduced in several places, via `error_at()`.
     .           ///
     .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
     .           /// `Waiting`.
26,715 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
     .           enum NodeState {
     .               /// This obligation has not yet been selected successfully. Cannot have
     .               /// subobligations.
     .               Pending,
     .           
     .               /// This obligation was selected successfully, but may or may not have
     .               /// subobligations.
     .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
     .               pub stalled: bool,
     .           }
     .           
     .           impl<O, E> OutcomeTrait for Outcome<O, E> {
     .               type Error = Error<O, E>;
     .               type Obligation = O;
     .           
     .               fn new() -> Self {
11,866 ( 0.00%)          Self { stalled: true, errors: vec![] }
     .               }
     .           
     .               fn mark_not_stalled(&mut self) {
 5,123 ( 0.00%)          self.stalled = false;
     .               }
     .           
     .               fn is_stalled(&self) -> bool {
   773 ( 0.00%)          self.stalled
     .               }
     .           
     .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
     .                   // do nothing
     .               }
     .           
     .               fn record_error(&mut self, error: Self::Error) {
     .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
     .           
     .           #[derive(Debug, PartialEq, Eq)]
     .           pub struct Error<O, E> {
     .               pub error: E,
     .               pub backtrace: Vec<O>,
     .           }
     .           
     .           impl<O: ForestObligation> ObligationForest<O> {
 2,037 ( 0.00%)      pub fn new() -> ObligationForest<O> {
24,444 ( 0.01%)          ObligationForest {
     .                       nodes: vec![],
     .                       done_cache: Default::default(),
     .                       active_cache: Default::default(),
     .                       reused_node_vec: vec![],
     .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
     .                       error_cache: Default::default(),
     .                   }
 2,037 ( 0.00%)      }
     .           
     .               /// Returns the total number of nodes in the forest that have not
     .               /// yet been fully resolved.
     .               pub fn len(&self) -> usize {
     .                   self.nodes.len()
     .               }
     .           
     .               /// Registers an obligation.
     .               pub fn register_obligation(&mut self, obligation: O) {
     .                   // Ignore errors here - there is no guarantee of success.
59,891 ( 0.02%)          let _ = self.register_obligation_at(obligation, None);
     .               }
     .           
     .               // Returns Err(()) if we already know this obligation failed.
62,953 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
11,446 ( 0.00%)          let cache_key = obligation.as_cache_key();
11,446 ( 0.00%)          if self.done_cache.contains(&cache_key) {
     .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
     .                       return Ok(());
     .                   }
     .           
33,282 ( 0.01%)          match self.active_cache.entry(cache_key) {
     .                       Entry::Occupied(o) => {
   848 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   848 ( 0.00%)                  if let Some(parent_index) = parent {
     .                               // If the node is already in `active_cache`, it has already
     .                               // had its chance to be marked with a parent. So if it's
     .                               // not already present, just dump `parent` into the
     .                               // dependents as a non-parent.
   222 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
     .                                   node.dependents.push(parent_index);
     .                               }
     .                           }
 1,272 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
     .                       }
15,369 ( 0.00%)              Entry::Vacant(v) => {
30,738 ( 0.01%)                  let obligation_tree_id = match parent {
 2,076 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
     .                               None => self.obligation_tree_id_generator.next().unwrap(),
     .                           };
     .           
     .                           let already_failed = parent.is_some()
     .                               && self
     .                                   .error_cache
     .                                   .get(&obligation_tree_id)
     .                                   .map_or(false, |errors| errors.contains(v.key()));
     .           
     .                           if already_failed {
     .                               Err(())
     .                           } else {
 5,123 ( 0.00%)                      let new_index = self.nodes.len();
     .                               v.insert(new_index);
     .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
     .                               Ok(())
     .                           }
     .                       }
     .                   }
51,507 ( 0.02%)      }
     .           
     .               /// Converts all remaining obligations to the given error.
28,875 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
     .                   let errors = self
     .                       .nodes
     .                       .iter()
     .                       .enumerate()
     .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
     .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
     .                       .collect();
     .           
 8,250 ( 0.00%)          self.compress(|_| assert!(false));
     .                   errors
24,750 ( 0.01%)      }
     .           
     .               /// Returns the set of obligations that are in a pending state.
     .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
     .               where
     .                   F: Fn(&O) -> P,
     .               {
     .                   self.nodes
     .                       .iter()
-- line 403 ----------------------------------------
-- line 414 ----------------------------------------
     .                       .insert(node.obligation.as_cache_key());
     .               }
     .           
     .               /// Performs a pass through the obligation list. This must
     .               /// be called in a loop until `outcome.stalled` is false.
     .               ///
     .               /// This _cannot_ be unrolled (presently, at least).
     .               #[inline(never)]
53,397 ( 0.02%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
     .               {
     .                   let mut outcome = OUT::new();
     .           
     .                   // Note that the loop body can append new nodes, and those new nodes
     .                   // will then be processed by subsequent iterations of the loop.
     .                   //
     .                   // We can't use an iterator for the loop because `self.nodes` is
     .                   // appended to and the borrow checker would complain. We also can't use
     .                   // `for index in 0..self.nodes.len() { ... }` because the range would
     .                   // be computed with the initial length, and we would miss the appended
     .                   // nodes. Therefore we use a `while` loop.
     .                   let mut index = 0;
11,056 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
     .                       // `processor.process_obligation` can modify the predicate within
     .                       // `node.obligation`, and that predicate is the key used for
     .                       // `self.active_cache`. This means that `self.active_cache` can get
     .                       // out of sync with `nodes`. It's not very common, but it does
     .                       // happen, and code in `compress` has to allow for it.
10,246 ( 0.00%)              if node.state.get() != NodeState::Pending {
     .                           index += 1;
     .                           continue;
     .                       }
     .           
25,615 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
     .                           ProcessResult::Unchanged => {
     .                               // No change in state.
     .                           }
20,492 ( 0.01%)                  ProcessResult::Changed(children) => {
     .                               // We are not (yet) stalled.
     .                               outcome.mark_not_stalled();
     .                               node.state.set(NodeState::Success);
     .           
22,724 ( 0.01%)                      for child in children {
18,972 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
 2,232 ( 0.00%)                          if let Err(()) = st {
     .                                       // Error already reported - propagate it
     .                                       // to our node.
     .                                       self.error_at(index);
     .                                   }
     .                               }
     .                           }
     .                           ProcessResult::Error(err) => {
     .                               outcome.mark_not_stalled();
     .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
     .                           }
     .                       }
10,246 ( 0.00%)              index += 1;
     .                   }
     .           
     .                   // There's no need to perform marking, cycle processing and compression when nothing
     .                   // changed.
   773 ( 0.00%)          if !outcome.is_stalled() {
     .                       self.mark_successes();
     .                       self.process_cycles(processor);
 1,546 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
     .                   }
     .           
     .                   outcome
53,397 ( 0.02%)      }
     .           
     .               /// Returns a vector of obligations for `p` and all of its
     .               /// ancestors, putting them into the error state in the process.
     .               fn error_at(&self, mut index: usize) -> Vec<O> {
     .                   let mut error_stack: Vec<usize> = vec![];
     .                   let mut trace = vec![];
     .           
     .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
     .                   trace
     .               }
     .           
     .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
     .               /// pending node.
     .               fn mark_successes(&self) {
     .                   // Convert all `Waiting` nodes to `Success`.
     .                   for node in &self.nodes {
14,629 ( 0.00%)              if node.state.get() == NodeState::Waiting {
     .                           node.state.set(NodeState::Success);
     .                       }
     .                   }
     .           
     .                   // Convert `Success` nodes that depend on a pending node back to
     .                   // `Waiting`.
     .                   for node in &self.nodes {
 5,123 ( 0.00%)              if node.state.get() == NodeState::Pending {
     .                           // This call site is hot.
     .                           self.inlined_mark_dependents_as_waiting(node);
     .                       }
     .                   }
     .               }
     .           
     .               // This always-inlined function is for the hot call site.
     .               #[inline(always)]
-- line 540 ----------------------------------------
-- line 560 ----------------------------------------
     .               }
     .           
     .               /// Report cycles between all `Success` nodes, and convert all `Success`
     .               /// nodes to `Done`. This must be called after `mark_successes`.
     .               fn process_cycles<P>(&mut self, processor: &mut P)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
   773 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
     .                   for (index, node) in self.nodes.iter().enumerate() {
     .                       // For some benchmarks this state test is extremely hot. It's a win
     .                       // to handle the no-op cases immediately to avoid the cost of the
     .                       // function call.
 5,123 ( 0.00%)              if node.state.get() == NodeState::Success {
25,555 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
     .                       }
     .                   }
     .           
     .                   debug_assert!(stack.is_empty());
 6,184 ( 0.00%)          self.reused_node_vec = stack;
     .               }
     .           
56,007 ( 0.02%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
     .               where
     .                   P: ObligationProcessor<Obligation = O>,
     .               {
     .                   let node = &self.nodes[index];
12,446 ( 0.00%)          if node.state.get() == NodeState::Success {
    24 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
     .                           None => {
     .                               stack.push(index);
 1,112 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 4,448 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
     .                               }
     .                               stack.pop();
     .                               node.state.set(NodeState::Done);
     .                           }
     .                           Some(rpos) => {
     .                               // Cycle detected.
     .                               processor.process_backedge(
     .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
     .                                   PhantomData,
     .                               );
     .                           }
     .                       }
     .                   }
49,784 ( 0.02%)      }
     .           
     .               /// Compresses the vector, removing all popped nodes. This adjusts the
     .               /// indices and hence invalidates any outstanding indices. `process_cycles`
     .               /// must be run beforehand to remove any cycles on `Success` nodes.
     .               #[inline(never)]
35,059 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
 4,898 ( 0.00%)          let orig_nodes_len = self.nodes.len();
     .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
     .                   debug_assert!(node_rewrites.is_empty());
     .                   node_rewrites.extend(0..orig_nodes_len);
     .                   let mut dead_nodes = 0;
     .           
     .                   // Move removable nodes to the end, preserving the order of the
     .                   // remaining nodes.
     .                   //
     .                   // LOOP INVARIANT:
     .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
     .                   //     self.nodes[index - dead_nodes..index] are all dead
     .                   //     self.nodes[index..] are unchanged
     .                   for index in 0..orig_nodes_len {
     .                       let node = &self.nodes[index];
28,707 ( 0.01%)              match node.state.get() {
     .                           NodeState::Pending | NodeState::Waiting => {
     .                               if dead_nodes > 0 {
     .                                   self.nodes.swap(index, index - dead_nodes);
     .                                   node_rewrites[index] -= dead_nodes;
     .                               }
     .                           }
     .                           NodeState::Done => {
     .                               // This lookup can fail because the contents of
     .                               // `self.active_cache` are not guaranteed to match those of
     .                               // `self.nodes`. See the comment in `process_obligation`
     .                               // for more details.
20,252 ( 0.01%)                      if let Some((predicate, _)) =
15,369 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
     .                               {
     .                                   self.done_cache.insert(predicate);
     .                               } else {
     .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
     .                               }
     .                               // Extract the success stories.
     .                               outcome_cb(&node.obligation);
10,246 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
10,246 ( 0.00%)                      dead_nodes += 1;
     .                           }
     .                           NodeState::Error => {
     .                               // We *intentionally* remove the node from the cache at this point. Otherwise
     .                               // tests must come up with a different type on every type error they
     .                               // check against.
     .                               self.active_cache.remove(&node.obligation.as_cache_key());
     .                               self.insert_into_error_cache(index);
     .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
     .                               dead_nodes += 1;
     .                           }
     .                           NodeState::Success => unreachable!(),
     .                       }
     .                   }
     .           
     .                   if dead_nodes > 0 {
     .                       // Remove the dead nodes and rewrite indices.
 1,546 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   773 ( 0.00%)              self.apply_rewrites(&node_rewrites);
     .                   }
     .           
     .                   node_rewrites.truncate(0);
19,592 ( 0.01%)          self.reused_node_vec = node_rewrites;
39,184 ( 0.01%)      }
     .           
     .               #[inline(never)]
 6,957 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
     .                   let orig_nodes_len = node_rewrites.len();
     .           
     .                   for node in &mut self.nodes {
     .                       let mut i = 0;
     .                       while let Some(dependent) = node.dependents.get_mut(i) {
     .                           let new_index = node_rewrites[*dependent];
     .                           if new_index >= orig_nodes_len {
     .                               node.dependents.swap_remove(i);
-- line 684 ----------------------------------------
-- line 691 ----------------------------------------
     .                               i += 1;
     .                           }
     .                       }
     .                   }
     .           
     .                   // This updating of `self.active_cache` is necessary because the
     .                   // removal of nodes within `compress` can fail. See above.
     .                   self.active_cache.retain(|_predicate, index| {
   960 ( 0.00%)              let new_index = node_rewrites[*index];
   480 ( 0.00%)              if new_index >= orig_nodes_len {
     .                           false
     .                       } else {
     .                           *index = new_index;
     .                           true
     .                       }
     .                   });
 6,184 ( 0.00%)      }
     .           }

87,917 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs
--------------------------------------------------------------------------------
Ir               

-- line 2 ----------------------------------------
      .           
      .           use crate::infer::outlives::components::{push_outlives_components, Component};
      .           use crate::traits::{Obligation, ObligationCause, PredicateObligation};
      .           use rustc_data_structures::fx::{FxHashSet, FxIndexSet};
      .           use rustc_middle::ty::{self, ToPredicate, TyCtxt};
      .           use rustc_span::symbol::Ident;
      .           use rustc_span::Span;
      .           
 88,326 ( 0.03%)  pub fn anonymize_predicate<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               pred: ty::Predicate<'tcx>,
      .           ) -> ty::Predicate<'tcx> {
 19,628 ( 0.01%)      let new = tcx.anonymize_late_bound_regions(pred.kind());
107,954 ( 0.03%)      tcx.reuse_or_mk_predicate(pred, new)
 88,326 ( 0.03%)  }
      .           
      .           pub struct PredicateSet<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               set: FxHashSet<ty::Predicate<'tcx>>,
      .           }
      .           
      .           impl<'tcx> PredicateSet<'tcx> {
      .               pub fn new(tcx: TyCtxt<'tcx>) -> Self {
  5,724 ( 0.00%)          Self { tcx, set: Default::default() }
      .               }
      .           
      .               pub fn insert(&mut self, pred: ty::Predicate<'tcx>) -> bool {
      .                   // We have to be careful here because we want
      .                   //
      .                   //    for<'a> Foo<&'a i32>
      .                   //
      .                   // and
      .                   //
      .                   //    for<'b> Foo<&'b i32>
      .                   //
      .                   // to be considered equivalent. So normalize all late-bound
      .                   // regions before we throw things into the underlying set.
 28,827 ( 0.01%)          self.set.insert(anonymize_predicate(self.tcx, pred))
      .               }
      .           }
      .           
      .           impl<'tcx> Extend<ty::Predicate<'tcx>> for PredicateSet<'tcx> {
      .               fn extend<I: IntoIterator<Item = ty::Predicate<'tcx>>>(&mut self, iter: I) {
      .                   for pred in iter {
      .                       self.insert(pred);
      .                   }
-- line 47 ----------------------------------------
-- line 66 ----------------------------------------
      .           /// if we know that `T: Ord`, the elaborator would deduce that `T: PartialOrd`
      .           /// holds as well. Similarly, if we have `trait Foo: 'static`, and we know that
      .           /// `T: Foo`, then we know that `T: 'static`.
      .           pub struct Elaborator<'tcx> {
      .               stack: Vec<PredicateObligation<'tcx>>,
      .               visited: PredicateSet<'tcx>,
      .           }
      .           
  1,008 ( 0.00%)  pub fn elaborate_trait_ref<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               trait_ref: ty::PolyTraitRef<'tcx>,
      .           ) -> Elaborator<'tcx> {
    336 ( 0.00%)      elaborate_predicates(tcx, std::iter::once(trait_ref.without_const().to_predicate(tcx)))
  1,008 ( 0.00%)  }
      .           
      .           pub fn elaborate_trait_refs<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               trait_refs: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
      .           ) -> Elaborator<'tcx> {
  1,012 ( 0.00%)      let predicates = trait_refs.map(|trait_ref| trait_ref.without_const().to_predicate(tcx));
      .               elaborate_predicates(tcx, predicates)
      .           }
      .           
      .           pub fn elaborate_predicates<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
      .           ) -> Elaborator<'tcx> {
      .               let obligations = predicates
      .                   .map(|predicate| {
  1,108 ( 0.00%)              predicate_obligation(predicate, ty::ParamEnv::empty(), ObligationCause::dummy())
      .                   })
      .                   .collect();
  4,322 ( 0.00%)      elaborate_obligations(tcx, obligations)
      .           }
      .           
      .           pub fn elaborate_predicates_with_span<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               predicates: impl Iterator<Item = (ty::Predicate<'tcx>, Span)>,
      .           ) -> Elaborator<'tcx> {
      .               let obligations = predicates
      .                   .map(|(predicate, span)| {
    130 ( 0.00%)              predicate_obligation(
      .                           predicate,
      .                           ty::ParamEnv::empty(),
     52 ( 0.00%)                  ObligationCause::dummy_with_span(span),
      .                       )
      .                   })
      .                   .collect();
  1,744 ( 0.00%)      elaborate_obligations(tcx, obligations)
      .           }
      .           
  4,548 ( 0.00%)  pub fn elaborate_obligations<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               mut obligations: Vec<PredicateObligation<'tcx>>,
      .           ) -> Elaborator<'tcx> {
      .               let mut visited = PredicateSet::new(tcx);
  1,684 ( 0.00%)      obligations.retain(|obligation| visited.insert(obligation.predicate));
  9,260 ( 0.00%)      Elaborator { stack: obligations, visited }
  4,548 ( 0.00%)  }
      .           
    297 ( 0.00%)  fn predicate_obligation<'tcx>(
      .               predicate: ty::Predicate<'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .           ) -> PredicateObligation<'tcx> {
 65,828 ( 0.02%)      Obligation { cause, param_env, recursion_depth: 0, predicate }
    297 ( 0.00%)  }
      .           
      .           impl<'tcx> Elaborator<'tcx> {
      8 ( 0.00%)      pub fn filter_to_traits(self) -> FilterToTraits<Self> {
  1,408 ( 0.00%)          FilterToTraits::new(self)
      8 ( 0.00%)      }
      .           
      .               fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {
 17,194 ( 0.01%)          let tcx = self.visited.tcx;
      .           
  8,597 ( 0.00%)          let bound_predicate = obligation.predicate.kind();
 49,422 ( 0.02%)          match bound_predicate.skip_binder() {
 20,931 ( 0.01%)              ty::PredicateKind::Trait(data) => {
      .                           // Get predicates declared on the trait.
 34,885 ( 0.01%)                  let predicates = tcx.super_predicates_of(data.def_id());
      .           
      .                           let obligations = predicates.predicates.iter().map(|&(pred, _)| {
      .                               predicate_obligation(
 54,642 ( 0.02%)                          pred.subst_supertrait(tcx, &bound_predicate.rebind(data.trait_ref)),
  9,107 ( 0.00%)                          obligation.param_env,
      .                                   obligation.cause.clone(),
      .                               )
      .                           });
      .                           debug!(?data, ?obligations, "super_predicates");
      .           
      .                           // Only keep those bounds that we haven't already seen.
      .                           // This is necessary to prevent infinite recursion in some
      .                           // cases. One common case is when people define
-- line 159 ----------------------------------------
-- line 206 ----------------------------------------
      .                           // We can basically ignore bound regions here. So for
      .                           // example `for<'c> Foo<'a,'c>: 'b` can be elaborated to
      .                           // `'a: 'b`.
      .           
      .                           // Ignore `for<'a> T: 'a` -- we might in the future
      .                           // consider this as evidence that `T: 'static`, but
      .                           // I'm a bit wary of such constructions and so for now
      .                           // I want to be conservative. --nmatsakis
    270 ( 0.00%)                  if r_min.is_late_bound() {
      .                               return;
      .                           }
      .           
      .                           let visited = &mut self.visited;
    540 ( 0.00%)                  let mut components = smallvec![];
    540 ( 0.00%)                  push_outlives_components(tcx, ty_max, &mut components);
      .                           self.stack.extend(
  1,350 ( 0.00%)                      components
      .                                   .into_iter()
    230 ( 0.00%)                          .filter_map(|component| match component {
      .                                       Component::Region(r) => {
      .                                           if r.is_late_bound() {
      .                                               None
      .                                           } else {
      .                                               Some(ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(
      .                                                   r, r_min,
      .                                               )))
      .                                           }
      .                                       }
      .           
     92 ( 0.00%)                              Component::Param(p) => {
     46 ( 0.00%)                                  let ty = tcx.mk_ty_param(p.index, p.name);
      .                                           Some(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(
      .                                               ty, r_min,
      .                                           )))
      .                                       }
      .           
      .                                       Component::UnresolvedInferenceVariable(_) => None,
      .           
      .                                       Component::Projection(projection) => {
-- line 244 ----------------------------------------
-- line 253 ----------------------------------------
      .           
      .                                       Component::EscapingProjection(_) => {
      .                                           // We might be able to do more here, but we don't
      .                                           // want to deal with escaping vars right now.
      .                                           None
      .                                       }
      .                                   })
      .                                   .map(ty::Binder::dummy)
     46 ( 0.00%)                          .map(|predicate_kind| predicate_kind.to_predicate(tcx))
      .                                   .filter(|&predicate| visited.insert(predicate))
      .                                   .map(|predicate| {
      .                                       predicate_obligation(
      .                                           predicate,
      .                                           obligation.param_env,
      .                                           obligation.cause.clone(),
      .                                       )
      .                                   }),
-- line 269 ----------------------------------------
-- line 274 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Iterator for Elaborator<'tcx> {
      .               type Item = PredicateObligation<'tcx>;
      .           
    238 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
    714 ( 0.00%)          (self.stack.len(), None)
    238 ( 0.00%)      }
      .           
 76,184 ( 0.02%)      fn next(&mut self) -> Option<Self::Item> {
      .                   // Extract next item from top-most stack frame, if any.
 77,373 ( 0.02%)          if let Some(obligation) = self.stack.pop() {
      .                       self.elaborate(&obligation);
 51,582 ( 0.02%)              Some(obligation)
      .                   } else {
  1,852 ( 0.00%)              None
      .                   }
 85,707 ( 0.03%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Supertrait iterator
      .           ///////////////////////////////////////////////////////////////////////////
      .           
      .           pub type Supertraits<'tcx> = FilterToTraits<Elaborator<'tcx>>;
      .           
    504 ( 0.00%)  pub fn supertraits<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               trait_ref: ty::PolyTraitRef<'tcx>,
      .           ) -> Supertraits<'tcx> {
  1,176 ( 0.00%)      elaborate_trait_ref(tcx, trait_ref).filter_to_traits()
    672 ( 0.00%)  }
      .           
      .           pub fn transitive_bounds<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
      .           ) -> Supertraits<'tcx> {
     24 ( 0.00%)      elaborate_trait_refs(tcx, bounds).filter_to_traits()
      .           }
      .           
      .           /// A specialized variant of `elaborate_trait_refs` that only elaborates trait references that may
      .           /// define the given associated type `assoc_name`. It uses the
      .           /// `super_predicates_that_define_assoc_type` query to avoid enumerating super-predicates that
      .           /// aren't related to `assoc_item`.  This is used when resolving types like `Self::Item` or
      .           /// `T::Item` and helps to avoid cycle errors (see e.g. #35237).
      .           pub fn transitive_bounds_that_define_assoc_type<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               bounds: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,
      .               assoc_name: Ident,
      .           ) -> impl Iterator<Item = ty::PolyTraitRef<'tcx>> {
      .               let mut stack: Vec<_> = bounds.collect();
      .               let mut visited = FxIndexSet::default();
      .           
    168 ( 0.00%)      std::iter::from_fn(move || {
    192 ( 0.00%)          while let Some(trait_ref) = stack.pop() {
    312 ( 0.00%)              let anon_trait_ref = tcx.anonymize_late_bound_regions(trait_ref);
     96 ( 0.00%)              if visited.insert(anon_trait_ref) {
     48 ( 0.00%)                  let super_predicates = tcx.super_predicates_that_define_assoc_type((
     48 ( 0.00%)                      trait_ref.def_id(),
      .                               Some(assoc_name),
      .                           ));
      .                           for (super_predicate, _) in super_predicates.predicates {
      .                               let subst_predicate = super_predicate.subst_supertrait(tcx, &trait_ref);
      .                               if let Some(binder) = subst_predicate.to_opt_poly_trait_pred() {
      .                                   stack.push(binder.map_bound(|t| t.trait_ref));
      .                               }
      .                           }
      .           
    168 ( 0.00%)                  return Some(trait_ref);
      .                       }
      .                   }
      .           
      .                   return None;
      .               })
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
-- line 353 ----------------------------------------
-- line 364 ----------------------------------------
      .               fn new(base: I) -> FilterToTraits<I> {
      .                   FilterToTraits { base_iterator: base }
      .               }
      .           }
      .           
      .           impl<'tcx, I: Iterator<Item = PredicateObligation<'tcx>>> Iterator for FilterToTraits<I> {
      .               type Item = ty::PolyTraitRef<'tcx>;
      .           
 46,640 ( 0.02%)      fn next(&mut self) -> Option<ty::PolyTraitRef<'tcx>> {
 52,536 ( 0.02%)          while let Some(obligation) = self.base_iterator.next() {
 27,720 ( 0.01%)              if let Some(data) = obligation.predicate.to_opt_poly_trait_pred() {
 22,440 ( 0.01%)                  return Some(data.map_bound(|t| t.trait_ref));
      .                       }
      .                   }
    176 ( 0.00%)          None
 41,976 ( 0.01%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   let (_, upper) = self.base_iterator.size_hint();
      .                   (0, upper)
      .               }
      .           }

 74,717 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/traits/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs
--------------------------------------------------------------------------------
Ir               

-- line 39 ----------------------------------------
      .               pub fn canonicalize_query<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
  2,992 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
 14,952 ( 0.00%)          Canonicalizer::canonicalize(value, self, self.tcx, &CanonicalizeAllFreeRegions, query_state)
      .               }
      .           
      .               /// Canonicalizes a query *response* `V`. When we canonicalize a
      .               /// query response, we only canonicalize unbound inference
      .               /// variables, and we leave other free regions alone. So,
      .               /// continuing with the example from `canonicalize_query`, if
      .               /// there was an input query `T: Trait<'static>`, it would have
      .               /// been canonicalized to
-- line 57 ----------------------------------------
-- line 73 ----------------------------------------
      .               /// To get a good understanding of what is happening here, check
      .               /// out the [chapter in the rustc dev guide][c].
      .               ///
      .               /// [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html#canonicalizing-the-query-result
      .               pub fn canonicalize_response<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
    882 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
  3,087 ( 0.00%)          Canonicalizer::canonicalize(
  5,246 ( 0.00%)              value,
      .                       self,
    441 ( 0.00%)              self.tcx,
      .                       &CanonicalizeQueryResponse,
      .                       &mut query_state,
      .                   )
      .               }
      .           
      .               pub fn canonicalize_user_type_annotation<V>(&self, value: V) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
      4 ( 0.00%)          let mut query_state = OriginalQueryValues::default();
     14 ( 0.00%)          Canonicalizer::canonicalize(
     10 ( 0.00%)              value,
      .                       self,
      2 ( 0.00%)              self.tcx,
      .                       &CanonicalizeUserTypeAnnotation,
      .                       &mut query_state,
      .                   )
      .               }
      .           
      .               /// A variant of `canonicalize_query` that does not
      .               /// canonicalize `'static`. This is useful when
      .               /// the query implementation can perform more efficient
      .               /// handling of `'static` regions (e.g. trait evaluation).
    450 ( 0.00%)      pub fn canonicalize_query_keep_static<V>(
      .                   &self,
      .                   value: V,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
  8,688 ( 0.00%)          self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);
      .           
 38,954 ( 0.01%)          Canonicalizer::canonicalize(
    612 ( 0.00%)              value,
      .                       self,
  4,344 ( 0.00%)              self.tcx,
      .                       &CanonicalizeFreeRegionsOtherThanStatic,
      .                       query_state,
      .                   )
    450 ( 0.00%)      }
      .           }
      .           
      .           /// Controls how we canonicalize "free regions" that are not inference
      .           /// variables. This depends on what we are canonicalizing *for* --
      .           /// e.g., if we are canonicalizing to create a query, we want to
      .           /// replace those with inference variables, since we want to make a
      .           /// maximally general query. But if we are canonicalizing a *query
      .           /// response*, then we don't typically replace free regions, as they
-- line 134 ----------------------------------------
-- line 141 ----------------------------------------
      .               ) -> ty::Region<'tcx>;
      .           
      .               fn any(&self) -> bool;
      .           }
      .           
      .           struct CanonicalizeQueryResponse;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeQueryResponse {
  2,090 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  1,254 ( 0.00%)          match r {
      .                       ty::ReFree(_)
      .                       | ty::ReErased
      .                       | ty::ReStatic
      .                       | ty::ReEmpty(ty::UniverseIndex::ROOT)
      .                       | ty::ReEarlyBound(..) => r,
      .           
      .                       ty::RePlaceholder(placeholder) => canonicalizer.canonical_var_for_region(
      .                           CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderRegion(*placeholder) },
      .                           r,
      .                       ),
      .           
      .                       ty::ReVar(vid) => {
    418 ( 0.00%)                  let universe = canonicalizer.region_var_universe(*vid);
      .                           canonicalizer.canonical_var_for_region(
      .                               CanonicalVarInfo { kind: CanonicalVarKind::Region(universe) },
      .                               r,
      .                           )
      .                       }
      .           
      .                       ty::ReEmpty(ui) => {
      .                           bug!("canonicalizing 'empty in universe {:?}", ui) // FIXME
-- line 175 ----------------------------------------
-- line 188 ----------------------------------------
      .                               tcx.sess.delay_span_bug(
      .                                   rustc_span::DUMMY_SP,
      .                                   &format!("unexpected region in query response: `{:?}`", r),
      .                               );
      .                           });
      .                           r
      .                       }
      .                   }
  2,090 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   false
      .               }
      .           }
      .           
      .           struct CanonicalizeUserTypeAnnotation;
      .           
-- line 204 ----------------------------------------
-- line 215 ----------------------------------------
      .                           // We only expect region names that the user can type.
      .                           bug!("unexpected region in query response: `{:?}`", r)
      .                       }
      .                   }
      .               }
      .           
      .               fn any(&self) -> bool {
      .                   false
    886 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeAllFreeRegions;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeAllFreeRegions {
  3,264 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
      .                   canonicalizer.canonical_var_for_region_in_root_universe(r)
  2,448 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
 11,680 ( 0.00%)      }
      .           }
      .           
      .           struct CanonicalizeFreeRegionsOtherThanStatic;
      .           
      .           impl CanonicalizeRegionMode for CanonicalizeFreeRegionsOtherThanStatic {
  2,574 ( 0.00%)      fn canonicalize_free_region<'tcx>(
      .                   &self,
      .                   canonicalizer: &mut Canonicalizer<'_, 'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  1,716 ( 0.00%)          if let ty::ReStatic = r {
      .                       r
      .                   } else {
      .                       canonicalizer.canonical_var_for_region_in_root_universe(r)
      .                   }
  2,574 ( 0.00%)      }
      .           
      .               fn any(&self) -> bool {
      .                   true
      .               }
      .           }
      .           
      .           struct Canonicalizer<'cx, 'tcx> {
      .               infcx: &'cx InferCtxt<'cx, 'tcx>,
-- line 263 ----------------------------------------
-- line 270 ----------------------------------------
      .               canonicalize_region_mode: &'cx dyn CanonicalizeRegionMode,
      .               needs_canonical_flags: TypeFlags,
      .           
      .               binder_index: ty::DebruijnIndex,
      .           }
      .           
      .           impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 11,609 ( 0.00%)          self.tcx
  8,483 ( 0.00%)      }
      .           
      .               fn fold_binder<T>(&mut self, t: ty::Binder<'tcx, T>) -> ty::Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 25,135 ( 0.01%)          self.binder_index.shift_in(1);
 50,270 ( 0.02%)          let t = t.super_fold_with(self);
 24,807 ( 0.01%)          self.binder_index.shift_out(1);
      .                   t
      .               }
      .           
  8,368 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
 12,552 ( 0.00%)          match *r {
      .                       ty::ReLateBound(index, ..) => {
      .                           if index >= self.binder_index {
      .                               bug!("escaping late-bound region during canonicalization");
      .                           } else {
      .                               r
      .                           }
      .                       }
      .           
      .                       ty::ReVar(vid) => {
  1,122 ( 0.00%)                  let resolved_vid = self
      .                               .infcx
      .                               .inner
      .                               .borrow_mut()
      .                               .unwrap_region_constraints()
      .                               .opportunistic_resolve_var(vid);
      .                           debug!(
      .                               "canonical: region var found with vid {:?}, \
      .                                opportunistically resolved to {:?}",
      .                               vid, r
      .                           );
  4,488 ( 0.00%)                  let r = self.tcx.reuse_or_mk_region(r, ty::ReVar(resolved_vid));
  6,732 ( 0.00%)                  self.canonicalize_region_mode.canonicalize_free_region(self, r)
      .                       }
      .           
      .                       ty::ReStatic
      .                       | ty::ReEarlyBound(..)
      .                       | ty::ReFree(_)
      .                       | ty::ReEmpty(_)
      .                       | ty::RePlaceholder(..)
  9,700 ( 0.00%)              | ty::ReErased => self.canonicalize_region_mode.canonicalize_free_region(self, r),
      .                   }
  6,732 ( 0.00%)      }
      .           
101,898 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 84,943 ( 0.03%)          match *t.kind() {
      6 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      .                           debug!("canonical: type var found with vid {:?}", vid);
     24 ( 0.00%)                  match self.infcx.probe_ty_var(vid) {
      .                               // `t` could be a float / int variable; canonicalize that instead.
      .                               Ok(t) => {
      .                                   debug!("(resolved to {:?})", t);
      .                                   self.fold_ty(t)
      .                               }
      .           
      .                               // `TyVar(vid)` is unresolved, track its universe index in the canonicalized
      .                               // result.
      .                               Err(mut ui) => {
      .                                   // FIXME: perf problem described in #55921.
      .                                   ui = ty::UniverseIndex::ROOT;
      .                                   self.canonicalize_ty_var(
      4 ( 0.00%)                              CanonicalVarInfo {
      .                                           kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),
      .                                       },
      .                                       t,
      .                                   )
      .                               }
      .                           }
      .                       }
      .           
-- line 351 ----------------------------------------
-- line 395 ----------------------------------------
      .                       | ty::FnPtr(_)
      .                       | ty::Dynamic(..)
      .                       | ty::Never
      .                       | ty::Tuple(..)
      .                       | ty::Projection(..)
      .                       | ty::Foreign(..)
      .                       | ty::Param(..)
      .                       | ty::Opaque(..) => {
 33,958 ( 0.01%)                  if t.flags().intersects(self.needs_canonical_flags) {
 11,214 ( 0.00%)                      t.super_fold_with(self)
      .                           } else {
      .                               t
      .                           }
      .                       }
      .                   }
 92,286 ( 0.03%)      }
      .           
     28 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     28 ( 0.00%)          match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           debug!("canonical: const var found with vid {:?}", vid);
      .                           match self.infcx.probe_const_var(vid) {
      .                               Ok(c) => {
      .                                   debug!("(resolved to {:?})", c);
      .                                   return self.fold_const(c);
      .                               }
      .           
-- line 421 ----------------------------------------
-- line 445 ----------------------------------------
      .                           return self.canonicalize_const_var(
      .                               CanonicalVarInfo { kind: CanonicalVarKind::PlaceholderConst(placeholder) },
      .                               ct,
      .                           );
      .                       }
      .                       _ => {}
      .                   }
      .           
      8 ( 0.00%)          let flags = FlagComputation::for_const(ct);
      4 ( 0.00%)          if flags.intersects(self.needs_canonical_flags) { ct.super_fold_with(self) } else { ct }
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {
      .               /// The main `canonicalize` method, shared impl of
      .               /// `canonicalize_query` and `canonicalize_response`.
 87,271 ( 0.03%)      fn canonicalize<V>(
      .                   value: V,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   tcx: TyCtxt<'tcx>,
      .                   canonicalize_region_mode: &dyn CanonicalizeRegionMode,
      .                   query_state: &mut OriginalQueryValues<'tcx>,
      .               ) -> Canonicalized<'tcx, V>
      .               where
      .                   V: TypeFoldable<'tcx>,
      .               {
 37,794 ( 0.01%)          let needs_canonical_flags = if canonicalize_region_mode.any() {
      .                       TypeFlags::NEEDS_INFER |
      .                       TypeFlags::HAS_FREE_REGIONS | // `HAS_RE_PLACEHOLDER` implies `HAS_FREE_REGIONS`
      .                       TypeFlags::HAS_TY_PLACEHOLDER |
      .                       TypeFlags::HAS_CT_PLACEHOLDER
      .                   } else {
      .                       TypeFlags::NEEDS_INFER
      .                           | TypeFlags::HAS_RE_PLACEHOLDER
      .                           | TypeFlags::HAS_TY_PLACEHOLDER
      .                           | TypeFlags::HAS_CT_PLACEHOLDER
      .                   };
      .           
      .                   // Fast path: nothing that needs to be canonicalized.
  7,623 ( 0.00%)          if !value.has_type_flags(needs_canonical_flags) {
      .                       let canon_value = Canonical {
      .                           max_universe: ty::UniverseIndex::ROOT,
      .                           variables: List::empty(),
  3,806 ( 0.00%)                  value,
      .                       };
 22,776 ( 0.01%)              return canon_value;
      .                   }
      .           
 17,654 ( 0.01%)          let mut canonicalizer = Canonicalizer {
      .                       infcx,
      .                       tcx,
      .                       canonicalize_region_mode,
      .                       needs_canonical_flags,
      .                       variables: SmallVec::new(),
      .                       query_state,
      .                       indices: FxHashMap::default(),
      .                       binder_index: ty::INNERMOST,
      .                   };
  3,584 ( 0.00%)          let out_value = value.fold_with(&mut canonicalizer);
      .           
      .                   // Once we have canonicalized `out_value`, it should not
      .                   // contain anything that ties it to this inference context
      .                   // anymore, so it should live in the global arena.
      .                   debug_assert!(!out_value.needs_infer());
      .           
  3,208 ( 0.00%)          let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables);
      .           
      .                   let max_universe = canonical_variables
      .                       .iter()
  3,302 ( 0.00%)              .map(|cvar| cvar.universe())
      .                       .max()
      .                       .unwrap_or(ty::UniverseIndex::ROOT);
      .           
  8,348 ( 0.00%)          Canonical { max_universe, variables: canonical_variables, value: out_value }
 56,691 ( 0.02%)      }
      .           
      .               /// Creates a canonical variable replacing `kind` from the input,
      .               /// or returns an existing variable if `kind` has already been
      .               /// seen. `kind` is expected to be an unbound variable (or
      .               /// potentially a free region).
 19,420 ( 0.01%)      fn canonical_var(&mut self, info: CanonicalVarInfo<'tcx>, kind: GenericArg<'tcx>) -> BoundVar {
  3,884 ( 0.00%)          let Canonicalizer { variables, query_state, indices, .. } = self;
      .           
  3,884 ( 0.00%)          let var_values = &mut query_state.var_values;
      .           
      .                   // This code is hot. `variables` and `var_values` are usually small
      .                   // (fewer than 8 elements ~95% of the time). They are SmallVec's to
      .                   // avoid allocations in those cases. We also don't use `indices` to
      .                   // determine if a kind has been seen before until the limit of 8 has
      .                   // been exceeded, to also avoid allocations for `indices`.
  3,884 ( 0.00%)          if !var_values.spilled() {
      .                       // `var_values` is stack-allocated. `indices` isn't used yet. Do a
      .                       // direct linear search of `var_values`.
      .                       if let Some(idx) = var_values.iter().position(|&k| k == kind) {
      .                           // `kind` is already present in `var_values`.
      .                           BoundVar::new(idx)
      .                       } else {
      .                           // `kind` isn't present in `var_values`. Append it. Likewise
      .                           // for `info` and `variables`.
      .                           variables.push(info);
      .                           var_values.push(kind);
  8,570 ( 0.00%)                  assert_eq!(variables.len(), var_values.len());
      .           
      .                           // If `var_values` has become big enough to be heap-allocated,
      .                           // fill up `indices` to facilitate subsequent lookups.
  1,714 ( 0.00%)                  if var_values.spilled() {
      .                               assert!(indices.is_empty());
      .                               *indices = var_values
      .                                   .iter()
      .                                   .enumerate()
      .                                   .map(|(i, &kind)| (kind, BoundVar::new(i)))
      .                                   .collect();
      .                           }
      .                           // The cv is the index of the appended element.
  3,428 ( 0.00%)                  BoundVar::new(var_values.len() - 1)
      .                       }
      .                   } else {
      .                       // `var_values` is large. Do a hashmap search via `indices`.
      .                       *indices.entry(kind).or_insert_with(|| {
      .                           variables.push(info);
      .                           var_values.push(kind);
      .                           assert_eq!(variables.len(), var_values.len());
      .                           BoundVar::new(variables.len() - 1)
      .                       })
      .                   }
 17,478 ( 0.01%)      }
      .           
      .               /// Shorthand helper that creates a canonical region variable for
      .               /// `r` (always in the root universe). The reason that we always
      .               /// put these variables into the root universe is because this
      .               /// method is used during **query construction:** in that case, we
      .               /// are taking all the regions and just putting them into the most
      .               /// generic context we can. This may generate solutions that don't
      .               /// fit (e.g., that equate some region variable with a placeholder
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
      .           
      .               /// Creates a canonical variable (with the given `info`)
      .               /// representing the region `r`; return a region referencing it.
      .               fn canonical_var_for_region(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
      .                   r: ty::Region<'tcx>,
      .               ) -> ty::Region<'tcx> {
  7,334 ( 0.00%)          let var = self.canonical_var(info, r.into());
      .                   let br = ty::BoundRegion { var, kind: ty::BrAnon(var.as_u32()) };
  1,520 ( 0.00%)          let region = ty::ReLateBound(self.binder_index, br);
 10,640 ( 0.00%)          self.tcx().mk_region(region)
      .               }
      .           
      .               /// Given a type variable `ty_var` of the given kind, first check
      .               /// if `ty_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `ty_var`.
     32 ( 0.00%)      fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo<'tcx>, ty_var: Ty<'tcx>) -> Ty<'tcx> {
      4 ( 0.00%)          let infcx = self.infcx;
      .                   let bound_to = infcx.shallow_resolve(ty_var);
      4 ( 0.00%)          if bound_to != ty_var {
      .                       self.fold_ty(bound_to)
      .                   } else {
     28 ( 0.00%)              let var = self.canonical_var(info, ty_var.into());
      4 ( 0.00%)              self.tcx().mk_ty(ty::Bound(self.binder_index, var.into()))
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Given a type variable `const_var` of the given kind, first check
      .               /// if `const_var` is bound to anything; if so, canonicalize
      .               /// *that*. Otherwise, create a new canonical variable for
      .               /// `const_var`.
      .               fn canonicalize_const_var(
      .                   &mut self,
      .                   info: CanonicalVarInfo<'tcx>,
-- line 634 ----------------------------------------

 28,962 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/canonical/canonicalizer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs
--------------------------------------------------------------------------------
Ir              

-- line 19 ----------------------------------------
     .               InvalidFloatSuffix,
     .               NonDecimalFloat(u32),
     .               IntTooLarge,
     .           }
     .           
     .           impl LitKind {
     .               /// Converts literal token into a semantic literal.
     .               fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {
 5,552 ( 0.00%)          let token::Lit { kind, symbol, suffix } = lit;
 5,552 ( 0.00%)          if suffix.is_some() && !kind.may_have_suffix() {
     .                       return Err(LitError::InvalidSuffix);
     .                   }
     .           
72,176 ( 0.02%)          Ok(match kind {
     .                       token::Bool => {
     .                           assert!(symbol.is_bool_lit());
     .                           LitKind::Bool(symbol == kw::True)
     .                       }
     .                       token::Byte => {
     .                           return unescape_byte(symbol.as_str())
     .                               .map(LitKind::Byte)
     .                               .map_err(|_| LitError::LexerError);
-- line 40 ----------------------------------------
-- line 50 ----------------------------------------
     .                       token::Integer => return integer_lit(symbol, suffix),
     .                       token::Float => return float_lit(symbol, suffix),
     .           
     .                       token::Str => {
     .                           // If there are no characters requiring special treatment we can
     .                           // reuse the symbol from the token. Otherwise, we must generate a
     .                           // new symbol because the string in the LitKind is different to the
     .                           // string in the token.
16,656 ( 0.01%)                  let s = symbol.as_str();
     .                           let symbol =
     .                               if s.contains(&['\\', '\r']) {
     .                                   let mut buf = String::with_capacity(s.len());
     .                                   let mut error = Ok(());
     .                                   unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {
     .                                       match unescaped_char {
     .                                           Ok(c) => buf.push(c),
     .                                           Err(err) => {
-- line 66 ----------------------------------------
-- line 68 ----------------------------------------
     .                                                   error = Err(LitError::LexerError);
     .                                               }
     .                                           }
     .                                       }
     .                                   });
     .                                   error?;
     .                                   Symbol::intern(&buf)
     .                               } else {
11,104 ( 0.00%)                          symbol
     .                               };
27,760 ( 0.01%)                  LitKind::Str(symbol, ast::StrStyle::Cooked)
     .                       }
     .                       token::StrRaw(n) => {
     .                           // Ditto.
     .                           let s = symbol.as_str();
     .                           let symbol =
     .                               if s.contains('\r') {
     .                                   let mut buf = String::with_capacity(s.len());
     .                                   let mut error = Ok(());
-- line 86 ----------------------------------------
-- line 198 ----------------------------------------
     .                   };
     .           
     .                   token::Lit::new(kind, symbol, suffix)
     .               }
     .           }
     .           
     .           impl Lit {
     .               /// Converts literal token into an AST literal.
77,728 ( 0.03%)      pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {
33,312 ( 0.01%)          Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })
49,968 ( 0.02%)      }
     .           
     .               /// Converts arbitrary token into an AST literal.
     .               ///
     .               /// Keep this in sync with `Token::can_begin_literal_or_bool` excluding unary negation.
52,029 ( 0.02%)      pub fn from_token(token: &Token) -> Result<Lit, LitError> {
18,850 ( 0.01%)          let lit = match token.uninterpolate().kind {
 1,182 ( 0.00%)              token::Ident(name, false) if name.is_bool_lit() => {
     .                           token::Lit::new(token::Bool, name, None)
     .                       }
22,208 ( 0.01%)              token::Literal(lit) => lit,
    96 ( 0.00%)              token::Interpolated(ref nt) => {
   192 ( 0.00%)                  if let token::NtExpr(expr) | token::NtLiteral(expr) = &**nt {
    64 ( 0.00%)                      if let ast::ExprKind::Lit(lit) = &expr.kind {
   320 ( 0.00%)                          return Ok(lit.clone());
     .                               }
     .                           }
     .                           return Err(LitError::NotLiteral);
     .                       }
     .                       _ => return Err(LitError::NotLiteral),
     .                   };
     .           
16,656 ( 0.01%)          Lit::from_lit_token(lit, token.span)
52,029 ( 0.02%)      }
     .           
     .               /// Attempts to recover an AST literal from semantic literal.
     .               /// This function is used when the original token doesn't exist (e.g. the literal is created
     .               /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).
     .               pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {
     .                   Lit { token: kind.to_lit_token(), kind, span }
     .               }
     .           
-- line 239 ----------------------------------------

22,831 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir               

-- line 173 ----------------------------------------
      .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
      .           #[macro_export]
      .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
      .           #[allow_internal_unsafe]
      .           macro_rules! __thread_local_inner {
      .               // used to generate the `LocalKey` value for const-initialized thread locals
      .               (@key $t:ty, const $init:expr) => {{
      .                   #[cfg_attr(not(windows), inline)] // see comments below
      4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
      .                       const INIT_EXPR: $t = $init;
      .           
      .                       // wasm without atomics maps directly to `static mut`, and dtors
      .                       // aren't implemented because thread dtors aren't really a thing
      .                       // on wasm right now
      .                       //
      .                       // FIXME(#84224) this should come after the `target_thread_local`
      .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
      .                           }
      .           
      .                           // 0 == dtor not registered
      .                           // 1 == dtor registered, dtor not run
      .                           // 2 == dtor registered and is running or has run
      .                           #[thread_local]
      .                           static mut STATE: u8 = 0;
      .           
      8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
      .                               let ptr = ptr as *mut $t;
      .           
      .                               unsafe {
      .                                   debug_assert_eq!(STATE, 1);
     12 ( 0.00%)                          STATE = 2;
      .                                   $crate::ptr::drop_in_place(ptr);
      .                               }
      8 ( 0.00%)                  }
      .           
      .                           unsafe {
     48 ( 0.00%)                      match STATE {
      .                                   // 0 == we haven't registered a destructor, so do
      .                                   //   so now.
      .                                   0 => {
      .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
      .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
      .                                           destroy,
      .                                       );
      8 ( 0.00%)                              STATE = 1;
      .                                       Some(&VAL)
      .                                   }
      .                                   // 1 == the destructor is registered and the value
      .                                   //   is valid, so return the pointer.
      .                                   1 => Some(&VAL),
      .                                   // otherwise the destructor has already run, so we
      .                                   // can't give access.
      .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
      .                       {
      .                           #[inline]
      .                           const fn __init() -> $t { INIT_EXPR }
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
      .                       }
 60,122 ( 0.02%)          }
      .           
      .                   unsafe {
      .                       $crate::thread::LocalKey::new(__getit)
      .                   }
      .               }};
      .           
      .               // used to generate the `LocalKey` value for `thread_local!`
      .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .           
      .                           // FIXME: remove the #[allow(...)] marker when macros don't
      .                           // raise warning for missing/extraneous unsafe blocks anymore.
      .                           // See https://github.com/rust-lang/rust/issues/74838.
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
285,311 ( 0.09%)              }
      .           
      .                       unsafe {
      .                           $crate::thread::LocalKey::new(__getit)
      .                       }
      .                   }
      .               };
      .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
      .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
      .               /// this key yet.
      .               ///
      .               /// # Panics
      .               ///
      .               /// This function will `panic!()` if the key currently has its
      .               /// destructor running, and it **may** panic if the destructor has
      .               /// previously been run for this thread.
      .               #[stable(feature = "rust1", since = "1.0.0")]
     12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
     17 ( 0.00%)          self.try_with(f).expect(
      .                       "cannot access a Thread Local Storage value \
      .                        during or after destruction",
      .                   )
     16 ( 0.00%)      }
      .           
      .               /// Acquires a reference to the value in this TLS key.
      .               ///
      .               /// This will lazily initialize the value if this thread has not referenced
      .               /// this key yet. If the key has been destroyed (which may happen if this is called
      .               /// in a destructor), this function will return an [`AccessError`].
      .               ///
      .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
      .               /// key's initializer panics.
      .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
      .               #[inline]
      .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
      .                   unsafe {
234,194 ( 0.08%)              let thread_local = (self.inner)().ok_or(AccessError)?;
168,089 ( 0.05%)              Ok(f(thread_local))
      .                   }
      .               }
      .           }
      .           
      .           mod lazy {
      .               use crate::cell::UnsafeCell;
      .               use crate::hint;
      .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
      .                       // the inner cell nor mutable reference to the Option<T> inside said
      .                       // cell. This make it safe to hand a reference, though the lifetime
      .                       // of 'static is itself unsafe, making the get method unsafe.
      .                       unsafe { (*self.inner.get()).as_ref() }
      .                   }
      .           
      .                   /// The caller must ensure that no reference is active: this method
      .                   /// needs unique access.
      9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
      .                       // Execute the initialization up front, *then* move it into our slot,
      .                       // just in case initialization fails.
      .                       let value = init();
      .                       let ptr = self.inner.get();
      .           
      .                       // SAFETY:
      .                       //
      .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
      .                           // always work it empirically doesn't seem to always get optimized away,
      .                           // which means that using something like `try_with` can pull in
      .                           // panicking code and cause a large size bloat.
      .                           match *ptr {
      .                               Some(ref x) => x,
      .                               None => hint::unreachable_unchecked(),
      .                           }
      .                       }
     10 ( 0.00%)          }
      .           
      .                   /// The other methods hand out references while taking &self.
      .                   /// As such, callers of this method must ensure no `&` and `&mut` are
      .                   /// available and used at the same time.
      .                   #[allow(unused)]
      .                   pub unsafe fn take(&mut self) -> Option<T> {
      .                       // SAFETY: See doc comment for this method.
      .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
      .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
      .                       // `try_initialize` for more information.
      .                       //
      .                       // The caller must ensure no mutable references are ever active to
      .                       // the inner cell or the inner T when this is called.
      .                       // The `try_initialize` is dependant on the passed `init` function
      .                       // for this.
      .                       unsafe {
108,149 ( 0.03%)                  match self.inner.get() {
      .                               Some(val) => Some(val),
     18 ( 0.00%)                      None => self.try_initialize(init),
      .                           }
      .                       }
      .                   }
      .           
      .                   // `try_initialize` is only called once per fast thread local variable,
      .                   // except in corner cases where thread_local dtors reference other
      .                   // thread_local's, or it is being recursively initialized.
      .                   //
      .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
      .                   // be performed for every call to `Key::get`.
      .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
      .                   #[inline(never)]
      8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
      .                       // SAFETY: See comment above (this function doc).
      .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
      .                           // SAFETY: See comment above (his function doc).
      6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
      .                       } else {
      .                           None
      .                       }
      8 ( 0.00%)          }
      .           
      .                   // `try_register_dtor` is only called once per fast thread local
      .                   // variable, except in corner cases where thread_local dtors reference
      .                   // other thread_local's, or it is being recursively initialized.
      .                   unsafe fn try_register_dtor(&self) -> bool {
      6 ( 0.00%)              match self.dtor_state.get() {
      .                           DtorState::Unregistered => {
      .                               // SAFETY: dtor registration happens before initialization.
      .                               // Passing `self` as a pointer while using `destroy_value<T>`
      .                               // is safe because the function will build a pointer to a
      .                               // Key<T>, which is the type of self and so find the correct
      .                               // size.
      6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
      .                               self.dtor_state.set(DtorState::Registered);
      .                               true
      .                           }
      .                           DtorState::Registered => {
      .                               // recursively initialized
      .                               true
      .                           }
      .                           DtorState::RunningOrHasRun => false,
      .                       }
      .                   }
      .               }
      .           
      4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
      .                   let ptr = ptr as *mut Key<T>;
      .           
      .                   // SAFETY:
      .                   //
      .                   // The pointer `ptr` has been built just above and comes from
      .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
      .                   // making it non-NUL and of the correct type.
      .                   //
-- line 661 ----------------------------------------

      4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  2,061 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    687 ( 0.00%)          let tcx = self.tcx();
113,549 ( 0.04%)          DecodeContext {
 12,185 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
    687 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  2,636 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 10,390 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  2,061 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  7,504 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
  6,768 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 33,180 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 13,972 ( 0.00%)          T::decode(&mut dcx)
  9,779 ( 0.00%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
      .                   let mut dcx = metadata.decoder(self.position.get());
      .                   dcx.lazy_state = LazyState::NodeStart(self.position);
  4,517 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 27,862 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 24,362 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 23,318 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  1,751 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  3,502 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 10,839 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 10,728 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 24,362 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
  9,780 ( 0.00%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
  3,689 ( 0.00%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
    527 ( 0.00%)          let tcx = self.tcx();
      .           
    527 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
  1,304 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
    201 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
  4,743 ( 0.00%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
  1,235 ( 0.00%)          self.opaque = old_opaque;
    247 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 13,560 ( 0.00%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    224 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 38,138 ( 0.01%)          DefIndex::from_u32(d.read_u32())
    448 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 17,876 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
  4,469 ( 0.00%)          let cdata = decoder.cdata();
  4,469 ( 0.00%)          let sess = decoder.sess.unwrap();
  8,938 ( 0.00%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    424 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 22,345 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,500 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    500 ( 0.00%)          let local_cdata = decoder.cdata();
    500 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    112 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    560 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    560 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,120 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  4,000 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
 33,208 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
  4,151 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
  8,302 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 12,453 ( 0.00%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 10,849 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
    505 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
  1,010 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
    505 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 12,453 ( 0.00%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 16,447 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  5,094 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  2,547 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  2,043 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  5,094 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 16,604 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
 37,359 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  2,555 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,377 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 12,844 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    228 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     76 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    380 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    152 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    304 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    228 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    380 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     50 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     25 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     50 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     50 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 15,026 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 11,088 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
  7,749 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     90 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 19,188 ( 0.01%)      }
      .           
    222 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  2,694 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    444 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  3,012 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 12,048 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  9,036 ( 0.00%)      }
      .           
  5,579 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  5,413 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  3,188 ( 0.00%)      }
      .           
  1,998 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  2,855 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  1,110 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    286 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
     88 ( 0.00%)          match self.kind(item_id) {
     22 ( 0.00%)              EntryKind::Trait(data) => {
    132 ( 0.00%)                  let data = data.decode((self, sess));
    352 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     44 ( 0.00%)                      data.unsafety,
     44 ( 0.00%)                      data.paren_sugar,
     44 ( 0.00%)                      data.has_auto_impl,
     44 ( 0.00%)                      data.is_marker,
     22 ( 0.00%)                      data.skip_array_during_method_dispatch,
     22 ( 0.00%)                      data.specialization_kind,
     88 ( 0.00%)                      self.def_path_hash(item_id),
     22 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    198 ( 0.00%)      }
      .           
    513 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    228 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    285 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    122 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    114 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  1,254 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    228 ( 0.00%)              data.discr,
    342 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     38 ( 0.00%)                      did: self.local_def_id(index),
     76 ( 0.00%)                      name: self.item_ident(index, sess).name,
     76 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     57 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    513 ( 0.00%)      }
      .           
    105 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     28 ( 0.00%)          let kind = self.kind(item_id);
     14 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
     29 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    901 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
     32 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    113 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
     49 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  2,105 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  2,105 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
      .                       .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    135 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      .                   self.root
-- line 945 ----------------------------------------
-- line 946 ----------------------------------------
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      .                       .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  2,965 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  1,115 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
     30 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      .                   self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    250 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     12 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  2,887 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      8 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
  3,516 ( 0.00%)          match self.kind(id) {
  2,930 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
    468 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    374 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     56 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  3,130 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  7,572 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,410 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     75 ( 0.00%)          tcx.arena.alloc_from_iter(
     50 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     12 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
     91 ( 0.00%)                  let id = self.local_def_id(def_index);
     91 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     54 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    204 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    408 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    816 ( 0.00%)              for child_index in children.decode((self, sess)) {
  4,188 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,239 ( 0.00%)                      let kind = self.def_kind(child_index);
    826 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  1,592 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
      .                                       if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
-- line 1119 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    533 ( 0.00%)          match self.kind(id) {
     28 ( 0.00%)              EntryKind::Mod(exports) => {
    806 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
-- line 1162 ----------------------------------------
-- line 1164 ----------------------------------------
      .                   self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,918 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    645 ( 0.00%)          match self.kind(id) {
    516 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
  1,113 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    477 ( 0.00%)              tcx.arena.alloc_from_iter(
    159 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  4,152 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  2,422 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  2,648 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     12 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    236 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  1,652 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    214 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
  6,228 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  3,114 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     30 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    119 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
     51 ( 0.00%)                  let vdata = data.decode(self);
     25 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
     85 ( 0.00%)      }
      .           
     60 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    153 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
     45 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
     85 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  2,220 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      4 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
      .                   tcx.arena.alloc_from_iter(
      .                       self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    346 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
  8,325 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
    925 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,018 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    652 ( 0.00%)              tcx.arena.alloc_from_iter(
    326 ( 0.00%)                  impls
      .                               .decode(self)
  6,542 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
  7,400 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
     64 ( 0.00%)          let def_key = self.def_key(id);
     80 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    144 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     50 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    125 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     30 ( 0.00%)          match self.kind(id) {
      5 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
      .                   let constness = match self.kind(id) {
-- line 1496 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
     80 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 14,826 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
  4,236 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
  6,375 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 16,944 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  1,524 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    410 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  5,334 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  6,096 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  8,302 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
  8,302 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,000 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
  7,797 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
     36 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,600 ( 0.00%)                          mut name,
  3,600 ( 0.00%)                          src_hash,
    600 ( 0.00%)                          start_pos,
  1,200 ( 0.00%)                          end_pos,
  3,000 ( 0.00%)                          mut lines,
  3,000 ( 0.00%)                          mut multibyte_chars,
  3,600 ( 0.00%)                          mut non_narrow_chars,
  3,000 ( 0.00%)                          mut normalized_pos,
  3,600 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,200 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
752,110 ( 0.24%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,768 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
 10,800 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,800 ( 0.00%)                          name,
  4,200 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,200 ( 0.00%)                          self.cnum,
  3,000 ( 0.00%)                          lines,
  3,600 ( 0.00%)                          multibyte_chars,
  3,000 ( 0.00%)                          non_narrow_chars,
  2,400 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,800 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    300 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     75 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     75 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     25 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    575 ( 0.00%)          CrateMetadata {
     25 ( 0.00%)              blob,
     75 ( 0.00%)              root,
    100 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    100 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    175 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    100 ( 0.00%)              cnum_map,
    125 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    300 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    225 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    140 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    424 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    279 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
  2,378 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 10,605 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  5,772 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

117,726 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
197,214 ( 0.06%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 64,908 ( 0.02%)      Token(Token),
      .               /// A delimited sequence of token trees.
  6,034 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
    712 ( 0.00%)          match self {
    298 ( 0.00%)              TokenTree::Token(token) => token.span,
    240 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
    296 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
    712 ( 0.00%)          match self {
    296 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    120 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
    356 ( 0.00%)      }
      .           
  1,060 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 23,340 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
  1,060 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  2,422 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  7,266 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  2,422 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  2,353 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  7,059 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  2,353 ( 0.00%)      }
      .           
     18 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
     12 ( 0.00%)          match self {
     54 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
     24 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
  1,773 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
 13,316 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
  1,576 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 140 ----------------------------------------
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
      .               pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
      .               }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
  1,936 ( 0.00%)          self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
      .               }
      .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  5,214 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  5,214 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
    160 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
    560 ( 0.00%)          let trees: Vec<_> = self
      .                       .0
      .                       .iter()
  5,696 ( 0.00%)              .flat_map(|tree| match &tree.0 {
  2,464 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
  6,160 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
      .                           }
  8,000 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
  1,200 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
    400 ( 0.00%)                      tree.1,
      .                           )]
      .                           .into_iter(),
      .                           AttrAnnotatedTokenTree::Attributes(data) => {
      .                               let mut outer_attrs = Vec::new();
      .                               let mut inner_attrs = Vec::new();
      .                               for attr in &data.attrs {
      .                                   match attr.style {
      .                                       crate::AttrStyle::Outer => {
-- line 223 ----------------------------------------
-- line 279 ----------------------------------------
      .                                   flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
      .                               }
      .                               flat.extend(target_tokens);
      .                               flat.into_iter()
      .                           }
      .                       })
      .                       .collect();
      .                   TokenStream::new(trees)
    320 ( 0.00%)      }
      .           }
      .           
      .           /// Stores the tokens for an attribute target, along
      .           /// with its attributes.
      .           ///
      .           /// This is constructed during parsing when we need to capture
      .           /// tokens.
      .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 17,792 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
    270 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
 12,975 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
    418 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
      .           
      .           impl Eq for TokenStream {}
      .           
      .           impl PartialEq<TokenStream> for TokenStream {
      .               fn eq(&self, other: &TokenStream) -> bool {
      .                   self.trees().eq(other.trees())
-- line 399 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    432 ( 0.00%)          self.0.is_empty()
    432 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 24,372 ( 0.01%)          self.0.len()
     68 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
    636 ( 0.00%)          self.clone().into_trees()
  1,272 ( 0.00%)      }
      .           
  2,899 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  5,798 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     32 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
  2,136 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 13,290 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
 23,091 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 17,720 ( 0.01%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
 99,030 ( 0.03%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 72,708 ( 0.02%)          if self.index < self.stream.len() {
 37,314 ( 0.01%)              self.index += 1;
103,775 ( 0.03%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  9,962 ( 0.00%)              None
      .                   }
118,836 ( 0.04%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  6,534 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
 13,068 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
 13,068 ( 0.00%)      }
      .           }
      .           
 12,069 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
    369 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
    738 ( 0.00%)      }
      .           
  1,368 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    684 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
  1,191 ( 0.00%)      }
      .           
  1,680 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  1,260 ( 0.00%)      }
      .           }

 15,653 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
3,122,119 ( 1.01%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
        2 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   54,323 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  640,718 ( 0.21%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
4,129,487 ( 1.33%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
    1,500 ( 0.00%)          return wrapping_sub(
    5,556 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  214,333 ( 0.07%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  420,511 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
  3,080 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    812 ( 0.00%)      Spanned { node: t, span: sp }
  1,110 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      2 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      3 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     53 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,200 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  3,075 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    615 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,690 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 176 ----------------------------------------
      .               // `--remap-path-prefix` to all `SourceFile`s allocated within this `SourceMap`.
      .               path_mapping: FilePathMapping,
      .           
      .               /// The algorithm used for hashing the contents of each source file.
      .               hash_kind: SourceFileHashAlgorithm,
      .           }
      .           
      .           impl SourceMap {
     14 ( 0.00%)      pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
     56 ( 0.00%)              path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
     14 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
     89 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      3 ( 0.00%)          &self.path_mapping
      3 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     16 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     48 ( 0.00%)      }
      .           
     60 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
     75 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    615 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    615 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,845 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
    120 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
    180 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
    135 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
    195 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
     30 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
     90 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
     90 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
    135 ( 0.00%)                      filename,
     45 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  4,800 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
376,055 ( 0.12%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    884 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    616 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
      .                       nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,800 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  4,800 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,400 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
      3 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      1 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      1 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
      3 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
      .               pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
      5 ( 0.00%)          let sf = self.lookup_source_file(pos);
      6 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
      3 ( 0.00%)          Loc { file: sf, line, col, col_display }
      .               }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
-- line 425 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     44 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
     16 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
     16 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
      8 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
      8 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
     36 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
  1,386 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
  1,386 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
    396 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
    198 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
    792 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
    594 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
  2,376 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
  1,782 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
  2,178 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
    792 ( 0.00%)          match self.span_to_snippet(sp) {
    792 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
    396 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
    710 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
  1,782 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
    396 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
      .               pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
      .                       let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
-- line 766 ----------------------------------------
-- line 782 ----------------------------------------
      .                           },
      .                       }
      .                   };
      .           
      .                   sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  4,680 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
  1,560 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  3,900 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
  2,816 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
    256 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
  1,024 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
    512 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
    512 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
  2,304 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  7,752 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    646 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  2,730 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  3,510 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
    780 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
  1,560 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    390 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
  1,560 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
  1,170 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
      .                   } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  2,340 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
  1,560 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
  1,560 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  5,814 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  5,880 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
  1,176 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
  2,352 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  5,880 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  3,693 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  2,460 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  4,924 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
  1,386 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
     14 ( 0.00%)      pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
     14 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     68 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     45 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     25 ( 0.00%)          (path, false)
     45 ( 0.00%)      }
      .           
    120 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
     30 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
    154 ( 0.00%)              other => (other.clone(), false),
      .                   }
    112 ( 0.00%)      }
      .           }

 12,649 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   30,600 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  106,016 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   85,940 ( 0.03%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
2,307,639 ( 0.74%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       24 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  163,848 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   14,577 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   32,441 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    1,348 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,317,682 ( 0.43%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  326,982 ( 0.11%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
1,058,611 ( 0.34%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  158,289 ( 0.05%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   24,381 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  295,347 ( 0.10%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      192 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      494 ( 0.00%)              if self <= 1 { return 0; }
        .           
    4,832 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   14,492 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    4,836 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    9,170 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   25,340 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
 79,397 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
110,301 ( 0.04%)      if enough_space {
  8,793 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
 73,534 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
 73,534 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
147,068 ( 0.05%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
 73,534 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 46,252 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir               

-- line 46 ----------------------------------------
      .           ///
      .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
      .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
      .               /// Consumers may find this more convenient to use with infallible folders than
      .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
      .               /// provided default definition delegates.  Implementors **should not** override
      .               /// this provided default definition, to ensure that the two methods are coherent
      .               /// (provide a definition of `try_super_fold_with` instead).
193,792 ( 0.06%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
  9,705 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
203,373 ( 0.07%)      }
      .               /// Consumers may find this more convenient to use with infallible folders than
      .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
      .               /// default definition delegates.  Implementors **should not** override this
      .               /// provided default definition, to ensure that the two methods are coherent
      .               /// (provide a definition of `try_fold_with` instead).
 12,676 ( 0.00%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
 94,132 ( 0.03%)          self.try_fold_with(folder).into_ok()
 11,728 ( 0.00%)      }
      .           
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error>;
      .           
487,319 ( 0.16%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
186,778 ( 0.06%)          self.try_super_fold_with(folder)
522,390 ( 0.17%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
 35,350 ( 0.01%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 54,908 ( 0.02%)          self.super_visit_with(visitor)
 23,165 ( 0.01%)      }
      .           
      .               /// Returns `true` if `self` has any late-bound regions that are either
      .               /// bound by `binder` or bound by some binder outside of `binder`.
      .               /// If `binder` is `ty::INNERMOST`, this indicates whether
      .               /// there are any late-bound regions that appear free.
      .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
 46,264 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
      .               }
      .           
      .               /// Returns `true` if this `self` has any regions that escape `binder` (and
      .               /// hence are not bound by it).
      .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
      .                   self.has_vars_bound_at_or_above(binder.shifted_in(1))
      .               }
      .           
239,008 ( 0.08%)      fn has_escaping_bound_vars(&self) -> bool {
 12,785 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
239,810 ( 0.08%)      }
      .           
  9,347 ( 0.00%)      #[instrument(level = "trace")]
      .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
  7,055 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
      .               }
      .               fn has_projections(&self) -> bool {
    588 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
      .               }
      .               fn has_opaque_types(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
      .               }
    504 ( 0.00%)      fn references_error(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    504 ( 0.00%)      }
      .               fn has_param_types_or_consts(&self) -> bool {
     78 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
      .               }
      .               fn has_infer_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
      .               }
      .               fn has_infer_types(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
      .               }
      .               fn has_infer_types_or_consts(&self) -> bool {
 20,969 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
      .               }
  7,008 ( 0.00%)      fn needs_infer(&self) -> bool {
  8,590 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
  7,232 ( 0.00%)      }
      .               fn has_placeholders(&self) -> bool {
      .                   self.has_type_flags(
      .                       TypeFlags::HAS_RE_PLACEHOLDER
      .                           | TypeFlags::HAS_TY_PLACEHOLDER
      .                           | TypeFlags::HAS_CT_PLACEHOLDER,
      .                   )
      .               }
      .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
      .               fn has_erasable_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
      .               }
      .           
      .               /// Indicates whether this value references only 'global'
      .               /// generic parameters that are the same regardless of what fn we are
      .               /// in. This is used for caching.
      .               fn is_global(&self) -> bool {
  8,684 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
      .               }
      .           
      .               /// True if there are any late-bound regions
      .               fn has_late_bound_regions(&self) -> bool {
      .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
      .               }
      .           
      .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
      .           
      .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
      .           
      .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
 31,244 ( 0.01%)          t.super_fold_with(self)
      .               }
      .           
      .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
 10,894 ( 0.00%)          t.super_fold_with(self)
      .               }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
      .                   r.super_fold_with(self)
      .               }
      .           
      .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
    738 ( 0.00%)          c.super_fold_with(self)
      .               }
      .           
      .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
    372 ( 0.00%)          p.super_fold_with(self)
      .               }
      .           
      .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
      .               where
      .                   Self: TypeFolder<'tcx, Error = !>,
      .               {
      .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
      .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
      .           /// A blanket implementation of this trait (that defers to the relevant
      .           /// method of [`TypeFolder`]) is provided for all infallible folders in
      .           /// order to ensure the two APIs are coherent.
      .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
      .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  6,930 ( 0.00%)          t.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
      .                   t.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
      .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
      .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
      .                   c.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_predicate(
      .                   &mut self,
      .                   p: ty::Predicate<'tcx>,
      .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
  1,606 ( 0.00%)          p.try_super_fold_with(self)
      .               }
      .           
      .               fn try_fold_mir_const(
      .                   &mut self,
      .                   c: mir::ConstantKind<'tcx>,
      .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
      .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
      .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
      .           }
      .           
      .           // Blanket implementation of fallible trait for infallible folders
      .           // delegates to infallible methods to prevent incoherence
      .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
      .           where
      .               F: TypeFolder<'tcx, Error = !>,
      .           {
  9,860 ( 0.00%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 17,675 ( 0.01%)          Ok(self.fold_binder(t))
 14,004 ( 0.00%)      }
      .           
  1,200 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
205,065 ( 0.07%)          Ok(self.fold_ty(t))
  1,500 ( 0.00%)      }
      .           
      .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
 21,586 ( 0.01%)          Ok(self.fold_region(r))
      .               }
      .           
      .               fn try_fold_const(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
  3,368 ( 0.00%)          Ok(self.fold_const(c))
      .               }
      .           
      .               fn try_fold_predicate(
      .                   &mut self,
      .                   p: ty::Predicate<'tcx>,
      .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
      .                   Ok(self.fold_predicate(p))
      .               }
-- line 321 ----------------------------------------
-- line 380 ----------------------------------------
      .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
      .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
      .           {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  1,140 ( 0.00%)          let t = ty.super_fold_with(self);
      .                   (self.ty_op)(t)
      .               }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   let r = r.super_fold_with(self);
      .                   (self.lt_op)(r)
      .               }
      .           
-- line 396 ----------------------------------------
-- line 421 ----------------------------------------
      .           
      .               /// Invoke `callback` on every region appearing free in `value`.
      .               pub fn for_each_free_region(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   mut callback: impl FnMut(ty::Region<'tcx>),
      .               ) {
      .                   self.any_free_region_meets(value, |r| {
    480 ( 0.00%)              callback(r);
      .                       false
      .                   });
      .               }
      .           
      .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
      .               pub fn all_free_regions_meet(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
      .               ) -> bool {
    570 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
      .               }
      .           
      .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
      .               pub fn any_free_region_meets(
      .                   self,
      .                   value: &impl TypeFoldable<'tcx>,
      .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
      .               ) -> bool {
-- line 448 ----------------------------------------
-- line 479 ----------------------------------------
      .                           t: &Binder<'tcx, T>,
      .                       ) -> ControlFlow<Self::BreakTy> {
      .                           self.outer_index.shift_in(1);
      .                           let result = t.as_ref().skip_binder().visit_with(self);
      .                           self.outer_index.shift_out(1);
      .                           result
      .                       }
      .           
    600 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
  2,730 ( 0.00%)                  match *r {
      .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
      .                                   ControlFlow::CONTINUE
      .                               }
      .                               _ => {
      .                                   if (self.callback)(r) {
      .                                       ControlFlow::BREAK
      .                                   } else {
      .                                       ControlFlow::CONTINUE
      .                                   }
      .                               }
      .                           }
    840 ( 0.00%)              }
      .           
      .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                           // We're only interested in types involving regions
  1,680 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
  2,070 ( 0.00%)                      ty.super_visit_with(self)
      .                           } else {
      .                               ControlFlow::CONTINUE
      .                           }
      .                       }
      .                   }
      .           
  3,630 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
      .               }
      .           }
      .           
      .           /// Folds over the substructure of a type, visiting its component
      .           /// types and all regions that occur *free* within it.
      .           ///
      .           /// That is, `Ty` can contain function or method types that bind
      .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
      .           
      .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
      .               #[inline]
      .               pub fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   skipped_regions: &'a mut bool,
      .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
      .               ) -> RegionFolder<'a, 'tcx> {
 15,616 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  2,232 ( 0.00%)          self.tcx
  2,232 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
    360 ( 0.00%)          self.current_index.shift_in(1);
      .                   let t = t.super_fold_with(self);
    360 ( 0.00%)          self.current_index.shift_out(1);
      .                   t
      .               }
      .           
    480 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  2,400 ( 0.00%)          match *r {
    480 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
      .                           debug!(?self.current_index, "skipped bound region");
    480 ( 0.00%)                  *self.skipped_regions = true;
      .                           r
      .                       }
      .                       _ => {
      .                           debug!(?self.current_index, "folding free region");
  5,760 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Bound vars replacer
      .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
      .               current_index: ty::DebruijnIndex,
      .           
      .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
      .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
      .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
      .           }
      .           
      .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
  6,344 ( 0.00%)      fn new(
      .                   tcx: TyCtxt<'tcx>,
      .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
      .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
      .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
      .               ) -> Self {
 22,204 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
  3,172 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  5,365 ( 0.00%)          self.tcx
  2,843 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
  6,299 ( 0.00%)          self.current_index.shift_in(1);
 15,730 ( 0.01%)          let t = t.super_fold_with(self);
  6,045 ( 0.00%)          self.current_index.shift_out(1);
      .                   t
      .               }
      .           
 34,165 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 18,710 ( 0.01%)          match *t.kind() {
     20 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      4 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
      .                               let ty = fld_t(bound_ty);
      4 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
      .                           }
      .                       }
 18,702 ( 0.01%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
 17,654 ( 0.01%)                  return t.super_fold_with(self);
      .                       }
      .                       _ => {}
      .                   }
      .                   t
 25,866 ( 0.01%)      }
      .           
  7,216 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
  8,652 ( 0.00%)          match *r {
  8,612 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
  4,306 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
      .                               let region = fld_r(br);
  8,612 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
      .                                   // If the callback returns a late-bound region,
      .                                   // that region should always use the INNERMOST
      .                                   // debruijn index. Then we adjust it to the
      .                                   // correct depth.
      .                                   assert_eq!(debruijn1, ty::INNERMOST);
      .                                   self.tcx.mk_region(ty::ReLateBound(debruijn, br))
      .                               } else {
      .                                   region
      .                               };
      .                           }
      .                       }
      .                       _ => {}
      .                   }
      .                   r
  7,216 ( 0.00%)      }
      .           
     28 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     12 ( 0.00%)          match *ct {
      .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
      .                           if debruijn == self.current_index =>
      .                       {
      .                           if let Some(fld_c) = self.fld_c.as_mut() {
      .                               let ct = fld_c(bound_const, ty);
      .                               return ty::fold::shift_vars(self.tcx, &ct, self.current_index.as_u32());
      .                           }
      .                       }
      4 ( 0.00%)              _ if ct.has_vars_bound_at_or_above(self.current_index) => {
      .                           return ct.super_fold_with(self);
      .                       }
      .                       _ => {}
      .                   }
      .                   ct
     28 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
      .               /// Replaces all regions bound by the given `Binder` with the
      .               /// results returned by the closure; the closure is expected to
      .               /// return a free region (relative to this binder), and hence the
      .               /// binder is removed in the return type. The closure is invoked
      .               /// once for each unique `BoundRegionKind`; multiple references to the
-- line 687 ----------------------------------------
-- line 697 ----------------------------------------
      .                   mut fld_r: F,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let mut region_map = BTreeMap::new();
      .                   let mut real_fld_r =
 57,610 ( 0.02%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    912 ( 0.00%)          let value = value.skip_binder();
 30,808 ( 0.01%)          let value = if !value.has_escaping_bound_vars() {
 60,396 ( 0.02%)              value
      .                   } else {
  3,788 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
      .                       value.fold_with(&mut replacer)
      .                   };
 79,150 ( 0.03%)          (value, region_map)
      .               }
      .           
      .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
      .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
      .               /// closure replaces escaping bound consts.
 11,750 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
      .                   self,
      .                   value: T,
      .                   mut fld_r: F,
      .                   mut fld_t: G,
      .                   mut fld_c: H,
      .               ) -> T
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
      .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
 33,159 ( 0.01%)          if !value.has_escaping_bound_vars() {
 64,322 ( 0.02%)              value
      .                   } else {
      .                       let mut replacer =
 31,182 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
  1,210 ( 0.00%)              value.fold_with(&mut replacer)
      .                   }
  8,058 ( 0.00%)      }
      .           
      .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
      .               /// closure replaces bound regions while the `fld_t` closure replaces bound
      .               /// types.
 39,211 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
      .                   self,
      .                   value: Binder<'tcx, T>,
      .                   mut fld_r: F,
      .                   fld_t: G,
      .                   fld_c: H,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
      .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
      .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let mut region_map = BTreeMap::new();
 18,910 ( 0.01%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
 38,073 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
 37,766 ( 0.01%)          (value, region_map)
 27,594 ( 0.01%)      }
      .           
      .               /// Replaces any late-bound regions bound in `value` with
      .               /// free variants attached to `all_outlive_scope`.
  4,620 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
      .                   self,
      .                   all_outlive_scope: DefId,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.replace_late_bound_regions(value, |br| {
  8,190 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
  1,260 ( 0.00%)                  scope: all_outlive_scope,
      .                           bound_region: br.kind,
      .                       }))
      .                   })
      .                   .0
  2,520 ( 0.00%)      }
      .           
      .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.replace_escaping_bound_vars(
136,605 ( 0.04%)              value,
      .                       |r| {
      .                           self.mk_region(ty::ReLateBound(
      .                               ty::INNERMOST,
      .                               ty::BoundRegion {
      .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
      .                                   kind: r.kind,
      .                               },
      .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
      .               fn collect_late_bound_regions<T>(
      .                   self,
      .                   value: &Binder<'tcx, T>,
      .                   just_constraint: bool,
      .               ) -> FxHashSet<ty::BoundRegionKind>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    512 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
      .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
      .                   assert!(result.is_continue()); // should never have stopped early
  1,024 ( 0.00%)          collector.regions
      .               }
      .           
      .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
      .               /// method lookup and a few other places where precise region relationships are not required.
      .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
     96 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
      .               }
      .           
      .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
      .               /// assigned starting at 0 and increasing monotonically in the order traversed
      .               /// by the fold operation.
      .               ///
      .               /// The chief purpose of this function is to canonicalize regions so that two
      .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
      .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
      .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
 70,450 ( 0.02%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 50,450 ( 0.02%)          let mut counter = 0;
    756 ( 0.00%)          let inner = self
      .                       .replace_late_bound_regions(sig, |_| {
      .                           let br = ty::BoundRegion {
      .                               var: ty::BoundVar::from_u32(counter),
      .                               kind: ty::BrAnon(counter),
      .                           };
      .                           let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
      .                           counter += 1;
      .                           r
      .                       })
      .                       .0;
 10,090 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
 30,270 ( 0.01%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
      .                   );
 60,396 ( 0.02%)          Binder::bind_with_vars(inner, bound_vars)
 60,360 ( 0.02%)      }
      .           }
      .           
      .           pub struct ValidateBoundVars<'tcx> {
      .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
      .               binder_index: ty::DebruijnIndex,
      .               // We may encounter the same variable at different levels of binding, so
      .               // this can't just be `Ty`
      .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               current_index: ty::DebruijnIndex,
      .               amount: u32,
      .           }
      .           
      .           impl<'tcx> Shifter<'tcx> {
      .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
      .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
      .                               self.tcx.mk_region(shifted)
      .                           }
      .                       }
      .                       _ => r,
      .                   }
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      8 ( 0.00%)          match *ty.kind() {
      .                       ty::Bound(debruijn, bound_ty) => {
      .                           if self.amount == 0 || debruijn < self.current_index {
      .                               ty
      .                           } else {
      .                               let debruijn = debruijn.shifted_in(self.amount);
      .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
      .                           }
      .                       }
      .           
     12 ( 0.00%)              _ => ty.super_fold_with(self),
      .                   }
      .               }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
      .                       if self.amount == 0 || debruijn < self.current_index {
      .                           ct
      .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
      .           }
      .           
      .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               debug!("shift_vars(value={:?}, amount={})", value, amount);
      .           
      8 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
      .           }
      .           
      .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
      .           struct FoundEscapingVars;
      .           
      .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
      .           /// bound region or a bound type.
      .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
      .           
      .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
      .               type BreakTy = FoundEscapingVars;
      .           
      .               fn visit_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: &Binder<'tcx, T>,
      .               ) -> ControlFlow<Self::BreakTy> {
    504 ( 0.00%)          self.outer_index.shift_in(1);
      .                   let result = t.super_visit_with(self);
    516 ( 0.00%)          self.outer_index.shift_out(1);
      .                   result
      .               }
      .           
      .               #[inline]
      .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // If the outer-exclusive-binder is *strictly greater* than
      .                   // `outer_index`, that means that `t` contains some content
      .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
      .                   // visited.
      .                   if r.bound_at_or_above_binder(self.outer_index) {
      .                       ControlFlow::Break(FoundEscapingVars)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
    476 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // we don't have a `visit_infer_const` callback, so we have to
      .                   // hook in here to catch this case (annoying...), but
      .                   // otherwise we do want to remember to visit the rest of the
      .                   // const, as it has types/regions embedded in a lot of other
      .                   // places.
    826 ( 0.00%)          match ct.val {
      .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
      .                           ControlFlow::Break(FoundEscapingVars)
      .                       }
    168 ( 0.00%)              _ => ct.super_visit_with(self),
      .                   }
    476 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
      .                       ControlFlow::Break(FoundEscapingVars)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
      .               #[instrument(level = "trace")]
      .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
      .                   debug!(
      .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
      .                       t,
      .                       t.flags(),
      .                       self.flags
      .                   );
 27,060 ( 0.01%)          if t.flags().intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(skip(self), level = "trace")]
      .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    312 ( 0.00%)          let flags = r.type_flags();
      .                   trace!(r.flags=?flags);
      .                   if flags.intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(level = "trace")]
      .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  1,184 ( 0.00%)          let flags = FlagComputation::for_const(c);
      .                   trace!(r.flags=?flags);
    240 ( 0.00%)          if flags.intersects(self.flags) {
      .                       ControlFlow::Break(FoundFlags)
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
      .               }
      .           
      .               #[inline]
      .               #[instrument(level = "trace")]
-- line 1250 ----------------------------------------
-- line 1285 ----------------------------------------
      .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
      .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
      .               /// types may mean that `'a` and `'b` don't appear in the results,
      .               /// so they are not considered *constrained*.
      .               just_constrained: bool,
      .           }
      .           
      .           impl LateBoundRegionsCollector {
    256 ( 0.00%)      fn new(just_constrained: bool) -> Self {
  1,792 ( 0.00%)          LateBoundRegionsCollector {
      .                       current_index: ty::INNERMOST,
      .                       regions: Default::default(),
      .                       just_constrained,
      .                   }
    256 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
      .               fn visit_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: &Binder<'tcx, T>,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   self.current_index.shift_in(1);
      .                   let result = t.super_visit_with(self);
      .                   self.current_index.shift_out(1);
      .                   result
      .               }
      .           
  1,152 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // if we are only looking for "constrained" region, we have to
      .                   // ignore the inputs to a projection, as they may not appear
      .                   // in the normalized form
  1,152 ( 0.00%)          if self.just_constrained {
  1,024 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
      .                           return ControlFlow::CONTINUE;
      .                       }
      .                   }
      .           
  1,344 ( 0.00%)          t.super_visit_with(self)
    768 ( 0.00%)      }
      .           
      .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   // if we are only looking for "constrained" region, we have to
      .                   // ignore the inputs of an unevaluated const, as they may not appear
      .                   // in the normalized form
      .                   if self.just_constrained {
      .                       if let ty::ConstKind::Unevaluated(..) = c.val {
      .                           return ControlFlow::CONTINUE;
      .                       }
      .                   }
      .           
      .                   c.super_visit_with(self)
      .               }
      .           
      .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
  1,280 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
    256 ( 0.00%)              if debruijn == self.current_index {
      .                           self.regions.insert(br.kind);
      .                       }
      .                   }
      .                   ControlFlow::CONTINUE
      .               }
      .           }

 23,765 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .           ///
      .           /// # Safety
      .           ///
      .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
      .           #[unstable(feature = "str_internals", issue = "none")]
      .           #[inline]
      .           pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
      .               // Decode UTF-8
186,962 ( 0.06%)      let x = *bytes.next()?;
370,532 ( 0.12%)      if x < 128 {
     36 ( 0.00%)          return Some(x as u32);
      .               }
      .           
      .               // Multibyte case follows
      .               // Decode from a byte combination out of: [[[x y] z] w]
      .               // NOTE: Performance is sensitive to the exact formulation here
      .               let init = utf8_first_byte(x, 2);
      .               // SAFETY: `bytes` produces an UTF-8-like string,
      .               // so the iterator must produce a value here.
-- line 48 ----------------------------------------
-- line 77 ----------------------------------------
      .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
      .           #[inline]
      .           pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
      .           where
      .               I: DoubleEndedIterator<Item = &'a u8>,
      .           {
      .               // Decode UTF-8
      .               let w = match *bytes.next_back()? {
  2,025 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
      .                   back_byte => back_byte,
      .               };
      .           
      .               // Multibyte case follows
      .               // Decode from a byte combination out of: [x [y [z w]]]
      .               let mut ch;
      .               // SAFETY: `bytes` produces an UTF-8-like string,
      .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 113 ----------------------------------------
      .           }
      .           
      .           // use truncation to fit u64 into usize
      .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
      .           
      .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
      .           #[inline]
      .           const fn contains_nonascii(x: usize) -> bool {
  2,169 ( 0.00%)      (x & NONASCII_MASK) != 0
      .           }
      .           
      .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
      .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
      .           #[inline(always)]
      .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
      .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
      .               let mut index = 0;
      .               let len = v.len();
      .           
      .               let usize_bytes = mem::size_of::<usize>();
      .               let ascii_block_size = 2 * usize_bytes;
    537 ( 0.00%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
      .               let align = v.as_ptr().align_offset(usize_bytes);
      .           
    884 ( 0.00%)      while index < len {
      .                   let old_offset = index;
      .                   macro_rules! err {
      .                       ($error_len: expr) => {
      .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
      .                       };
      .                   }
      .           
      .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
      .                           // we needed data, but there was none: error!
      .                           if index >= len {
      .                               err!(None)
      .                           }
      .                           v[index]
      .                       }};
      .                   }
      .           
    431 ( 0.00%)          let first = v[index];
    862 ( 0.00%)          if first >= 128 {
      .                       let w = utf8_char_width(first);
      .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
      .                       //        first  C2 80        last DF BF
      .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
      .                       //        first  E0 A0 80     last EF BF BF
      .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
      .                       //               ED A0 80 to       ED BF BF
      .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 206 ----------------------------------------
      .                           }
      .                           _ => err!(Some(1)),
      .                       }
      .                       index += 1;
      .                   } else {
      .                       // Ascii case, try to skip forward quickly.
      .                       // When the pointer is aligned, read 2 words of data per iteration
      .                       // until we find a word containing a non-ascii byte.
  1,471 ( 0.00%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
      .                           let ptr = v.as_ptr();
  4,694 ( 0.00%)                  while index < blocks_end {
      .                               // SAFETY: since `align - index` and `ascii_block_size` are
      .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
      .                               // always aligned with a `usize` so it's safe to dereference
      .                               // both `block` and `block.offset(1)`.
      .                               unsafe {
      .                                   let block = ptr.add(index) as *const usize;
      .                                   // break if there is a nonascii byte
  2,169 ( 0.00%)                          let zu = contains_nonascii(*block);
      .                                   let zv = contains_nonascii(*block.offset(1));
  4,338 ( 0.00%)                          if zu || zv {
      .                                       break;
      .                                   }
      .                               }
  4,338 ( 0.00%)                      index += ascii_block_size;
      .                           }
      .                           // step from the point where the wordwise loop stopped
  6,048 ( 0.00%)                  while index < len && v[index] < 128 {
  1,297 ( 0.00%)                      index += 1;
      .                           }
      .                       } else {
    253 ( 0.00%)                  index += 1;
      .                       }
      .                   }
      .               }
      .           
      .               Ok(())
      .           }
      .           
      .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------

128,292 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir               

-- line 17 ----------------------------------------
      .                   #[inline]
      .                   pub fn $fn_name(
      .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
      .                       mut value: $int_ty,
      .                   ) -> &[u8] {
      .                       let mut i = 0;
      .           
      .                       loop {
 91,699 ( 0.03%)                  if value < 0x80 {
      .                               unsafe {
 42,917 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
      .                               }
      .           
 58,856 ( 0.02%)                      i += 1;
      .                               break;
      .                           } else {
      .                               unsafe {
 43,764 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
      .                               }
      .           
 18,885 ( 0.01%)                      value >>= 7;
      .                               i += 1;
      .                           }
      .                       }
      .           
      .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
      .                   }
      .               };
      .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
      .           macro_rules! impl_read_unsigned_leb128 {
      .               ($fn_name:ident, $int_ty:ty) => {
      .                   #[inline]
      .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
      .                       // The first iteration of this loop is unpeeled. This is a
      .                       // performance win because this code is hot and integer values less
      .                       // than 128 are very common, typically occurring 50-80% or more of
      .                       // the time, even for u64 and u128.
452,700 ( 0.15%)              let byte = slice[*position];
226,350 ( 0.07%)              *position += 1;
226,350 ( 0.07%)              if (byte & 0x80) == 0 {
      .                           return byte as $int_ty;
      .                       }
  1,200 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
      .                       let mut shift = 7;
      .                       loop {
184,197 ( 0.06%)                  let byte = slice[*position];
116,659 ( 0.04%)                  *position += 1;
122,798 ( 0.04%)                  if (byte & 0x80) == 0 {
101,796 ( 0.03%)                      result |= (byte as $int_ty) << shift;
      .                               return result;
      .                           } else {
      .                               result |= ((byte & 0x7F) as $int_ty) << shift;
      .                           }
      .                           shift += 7;
      .                       }
      .                   }
      .               };
-- line 80 ----------------------------------------

207,898 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  193,680 ( 0.06%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,188 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,995 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,392 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        1 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,839 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,171 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
       14 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,202 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       70 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
       28 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       70 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   44,334 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
        .                   self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
-- line 501 ----------------------------------------
-- line 502 ----------------------------------------
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    6,192 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    4,644 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    6,192 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    3,906 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    2,604 ( 0.00%)      }
        .               #[inline]
       24 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
       24 ( 0.00%)      }
        .               #[inline]
    1,332 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      888 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,700 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,020 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    3,111 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    2,074 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      874 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
        8 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       20 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,624 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,392 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,160 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      248 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       62 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      248 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   86,526 ( 0.03%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   15,648 ( 0.01%)          if span_data.ctxt != end_data.ctxt {
       84 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       84 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   54,670 ( 0.02%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   70,794 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      616 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      392 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      448 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    2,156 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      392 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
    1,372 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,764 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
       24 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   70,893 ( 0.02%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    6,363 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    4,242 ( 0.00%)          let mut span = self.data();
    3,255 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    6,363 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    6,790 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   12,640 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   11,060 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,605 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      191 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,605 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,605 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,200 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,400 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       45 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       45 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,400 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      600 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  911,306 ( 0.29%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,200 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,600 ( 0.00%)              SourceFile {
    4,800 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,400 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,400 ( 0.00%)                  lines,
    2,400 ( 0.00%)                  multibyte_chars,
    2,400 ( 0.00%)                  non_narrow_chars,
    2,400 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,400 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      165 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       45 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       30 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       30 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       45 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      180 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       30 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      255 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      165 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       60 ( 0.00%)              lines,
       60 ( 0.00%)              multibyte_chars,
       60 ( 0.00%)              non_narrow_chars,
       60 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      135 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    1,386 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      198 ( 0.00%)          if matches!(
      396 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      198 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,782 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      601 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    4,524 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    3,142 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    9,754 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    6,936 ( 0.00%)          assert!(line_index < self.lines.len());
    9,591 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       11 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    6,386 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      150 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      135 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       15 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       15 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    8,511 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      675 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    9,280 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,547,230 ( 0.50%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  905,068 ( 0.29%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   30,274 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  103,418 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   21,112 ( 0.01%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   82,306 ( 0.03%)          let span = self.data_untracked();
   25,308 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
   44,322 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   29,688 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   29,268 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   58,536 ( 0.02%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   29,268 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   14,634 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   14,634 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  118,192 ( 0.04%)      }
        .           }

1,358,082 ( 0.44%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
 14,500 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 21,226 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 45,648 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  6,460 ( 0.00%)          i += 2
      .               }
      .           
 21,226 ( 0.01%)      if i < count {
 10,064 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
134,934 ( 0.04%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
932,518 ( 0.30%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
292,481 ( 0.09%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 48,433 ( 0.02%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
 14,831 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 14,831 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
148,310 ( 0.05%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
118,648 ( 0.04%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
133,479 ( 0.04%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 70,663 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 59,324 ( 0.02%)          self.processed += BUFFER_SIZE;
 29,662 ( 0.01%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  7,635 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 59,232 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 21,294 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
 10,651 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  8,108 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  5,800 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  1,160 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  3,480 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
  1,160 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  2,320 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  8,673 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  9,833 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 17,346 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  2,320 ( 0.00%)          let input_left = length - processed;
  1,452 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    943 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    943 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    943 ( 0.00%)              self.state.v0 ^= elem;
  1,886 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
  1,160 ( 0.00%)          self.nbuf = extra_bytes_left;
  5,800 ( 0.00%)          self.processed += nbuf + processed;
  6,960 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  7,503 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
 10,004 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  8,315 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  8,315 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  8,315 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  5,002 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  2,055 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  7,057 ( 0.00%)          let length = self.processed + self.nbuf;
  5,000 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  2,500 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  2,500 ( 0.00%)          state.v0 ^= b;
      .           
  2,500 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  7,592 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  2,590 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,590 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
574,627 ( 0.19%)          compress!(state);
626,828 ( 0.20%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 15,180 ( 0.00%)          compress!(state);
 15,180 ( 0.00%)          compress!(state);
 15,180 ( 0.00%)          compress!(state);
 12,681 ( 0.00%)          compress!(state);
      .               }
      .           }

101,655 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .               pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    4,574 ( 0.00%)      pub scope: DefId,
   13,253 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   52,081 ( 0.02%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
      856 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
    1,162 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
    1,010 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    7,062 ( 0.00%)      pub var: BoundVar,
    5,170 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
  677,829 ( 0.22%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
   13,834 ( 0.00%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
-- line 115 ----------------------------------------
-- line 118 ----------------------------------------
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  132,970 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
        3 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
    2,102 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  175,694 ( 0.06%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
       25 ( 0.00%)      pub def_id: DefId,
  134,732 ( 0.04%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      172 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
      688 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      225 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      100 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      150 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      200 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      960 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
      120 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    1,320 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
   14,256 ( 0.00%)          self.skip_binder().def_id
    4,752 ( 0.00%)      }
        .           
      522 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    1,044 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
      522 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
-- line 956 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    7,862 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
      720 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   42,125 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    2,070 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    9,052 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   26,362 ( 0.01%)          Binder(value, ty::List::empty())
    2,070 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   29,621 ( 0.01%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  208,350 ( 0.07%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    9,107 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      623 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1089 ----------------------------------------
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
        .               pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    4,187 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   31,358 ( 0.01%)          Binder(value, self.1)
        .               }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    2,079 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
   28,104 ( 0.01%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   27,653 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        .               }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      508 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   14,818 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
    4,184 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    9,291 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    3,234 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      924 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    3,696 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    2,800 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    1,200 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    2,000 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    3,600 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    4,158 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      462 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      462 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    5,082 ( 0.00%)      }
        .           
      924 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    2,772 ( 0.00%)          self.substs.type_at(0)
    1,848 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    4,984 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    3,142 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
        6 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    1,605 ( 0.00%)      pub c_variadic: bool,
      116 ( 0.00%)      pub unsafety: hir::Unsafety,
    3,152 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    2,758 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   11,884 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    5,516 ( 0.00%)      }
        .           
    1,664 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   12,500 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    3,328 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      808 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,610 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      120 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      836 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      240 ( 0.00%)          self.skip_binder().c_variadic
      120 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      240 ( 0.00%)          self.skip_binder().unsafety
      120 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
      480 ( 0.00%)          self.skip_binder().abi
      120 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
      504 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
      408 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      136 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       68 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        .                   ParamTy::new(def.index, def.name)
        .               }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
    1,116 ( 0.00%)      pub index: u32,
    1,116 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  347,420 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
        6 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   10,340 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    1,230 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
        .               pub def_id: DefId,
      917 ( 0.00%)      pub index: u32,
       20 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      120 ( 0.00%)      pub index: u32,
        .               pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
        3 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
       57 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      270 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    4,494 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
    6,685 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      156 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      300 ( 0.00%)          match self.kind() {
        .                       Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    3,070 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    3,968 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    6,998 ( 0.00%)          match self.kind() {
      240 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
        .                   matches!(self.kind(), Infer(_))
        .               }
-- line 1763 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       20 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
-- line 1791 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      330 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    3,672 ( 0.00%)          match self.kind() {
      296 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1922 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      420 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
        .                   matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
-- line 1938 ----------------------------------------
-- line 1947 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      707 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      288 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
      992 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    4,964 ( 0.00%)          match self.kind() {
        .                       Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    3,300 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    1,984 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        .               }
        .           
    2,848 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    1,424 ( 0.00%)          match self.kind() {
    1,068 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    3,204 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
        .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
      224 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
        .               pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
-- line 2046 ----------------------------------------
-- line 2229 ----------------------------------------
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
    7,560 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    5,040 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2264 ----------------------------------------
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    7,560 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    3,240 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    4,860 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    1,620 ( 0.00%)      }
        .           }

1,175,627 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 187 ----------------------------------------
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      .               fn clone(&self) -> Self {
    663 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
    140 ( 0.00%)              table: self.table.clone(),
      .                   }
      .               }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 13,656 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 39,492 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 47,005 ( 0.02%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 26,003 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     73 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  4,596 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
 10,489 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      8 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      .                       Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
     10 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
     10 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 66,596 ( 0.02%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
102,448 ( 0.03%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 54,051 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 69,672 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     13 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     39 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     26 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     13 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
593,343 ( 0.19%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    256 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      .                       Some(mem::replace(item, v))
      .                   } else {
282,578 ( 0.09%)              self.table
248,731 ( 0.08%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 29,069 ( 0.01%)              None
      .                   }
538,996 ( 0.17%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  7,510 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
141,434 ( 0.05%)          match self.remove_entry(k) {
  3,284 ( 0.00%)              Some((_, v)) => Some(v),
  7,425 ( 0.00%)              None => None,
      .                   }
 16,780 ( 0.01%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 43,817 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
202,476 ( 0.07%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
536,415 ( 0.17%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
574,129 ( 0.19%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 73,098 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
352,283 ( 0.11%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 22,411 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
198,070 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
235,166 ( 0.08%)          self.from_hash(hash, equivalent(k))
353,026 ( 0.11%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
341,065 ( 0.11%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
 37,365 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    598 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
 12,061 ( 0.00%)          IntoIter {
  6,007 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
  1,794 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 24,390 ( 0.01%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    194 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
    456 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  9,172 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  7,218 ( 0.00%)          let iter = iter.into_iter();
  3,844 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      7 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 25,278 ( 0.01%)              self.insert(k, v);
      .                   });
  6,088 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

222,337 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 168 ----------------------------------------
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
 16,940 ( 0.01%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
  1,290 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
 20,107 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
 24,399 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
  6,120 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
  9,180 ( 0.00%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
  7,093 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
  3,060 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 279 ----------------------------------------
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
      .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      .                   if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
    123 ( 0.00%)          while descendant != ancestor {
      .                       match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    480 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    720 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     56 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
    168 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
     48 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     56 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
  5,562 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 13,842 ( 0.00%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
    123 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   tree.is_descendant_of(module, restriction)
  5,562 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
  1,044 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  2,408 ( 0.00%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
  1,044 ( 0.00%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
    758 ( 0.00%)          matches!(self, Visibility::Public)
    379 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
 27,712 ( 0.01%)          ptr::eq(self.inner, other.inner)
 22,268 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
295,660 ( 0.10%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
585,813 ( 0.19%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
613,383 ( 0.20%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
 81,963 ( 0.03%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
  9,107 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
 81,963 ( 0.03%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
 63,749 ( 0.02%)      }
      .           }
      .           
  1,671 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 41,559 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
 93,988 ( 0.03%)      pub constness: BoundConstness,
      .           
 66,117 ( 0.02%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 32,264 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 28,231 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
      .                       param_env.remap_constness_with(self.constness)
      .                   } else {
  4,033 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 24,198 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
 19,940 ( 0.01%)          self.trait_ref.def_id
  9,970 ( 0.00%)      }
      .           
  7,545 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 22,635 ( 0.01%)          self.trait_ref.self_ty()
 15,090 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
 11,069 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
    112 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
     56 ( 0.00%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  2,152 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  5,405 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
 17,588 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
 18,182 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
      .               Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
     84 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
  1,676 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    838 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
  4,556 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
 16,530 ( 0.01%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
-- line 886 ----------------------------------------
-- line 905 ----------------------------------------
      .               }
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
      .               pub fn projection_def_id(&self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
    896 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
    448 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    503 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    503 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    503 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
  2,198 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
 10,990 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  4,396 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     28 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    140 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
     56 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
 23,412 ( 0.01%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
 70,236 ( 0.02%)          match predicate.skip_binder() {
 47,290 ( 0.02%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
  2,248 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
 23,412 ( 0.01%)      }
      .           
  2,094 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
  4,188 ( 0.00%)          match predicate.skip_binder() {
    180 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
  2,034 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
  2,094 ( 0.00%)      }
      .           }
      .           
      .           /// Represents the bounds declared on a particular set of type
      .           /// parameters. Should eventually be generalized into a flag list of
      .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
      .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
      .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
      .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
    192 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
      .               pub fn empty() -> InstantiatedPredicates<'tcx> {
  3,204 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
     28 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
  2,453 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
  7,359 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  3,060 ( 0.00%)          self.private >= other.private
  1,530 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
      .                   self.private < other.private
      .               }
      .           }
-- line 1116 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
    540 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
  1,968 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
  2,254 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
  2,616 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    660 ( 0.00%)          if self.const_param_did.is_none() {
    660 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
    180 ( 0.00%)      }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
    420 ( 0.00%)      }
      .           
    240 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
    360 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
     60 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
    360 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
    360 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    240 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    120 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn is_local(self) -> bool {
-- line 1271 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
 12,771 ( 0.00%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
 75,414 ( 0.02%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
  1,432 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
  1,384 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
  1,557 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
  8,844 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
      1 ( 0.00%)                  if value.is_global() {
      .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
  8,514 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
  1,234 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    138 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  5,024 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 49,011 ( 0.02%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
    360 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
     64 ( 0.00%)  bitflags! {
  1,053 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
 10,641 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
    456 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     57 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    171 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
    513 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    228 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    228 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
-- line 1644 ----------------------------------------
-- line 1648 ----------------------------------------
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
      .               pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
      .                   Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
      .               }
      .           }
      .           
  6,871 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
  8,923 ( 0.00%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
      .           bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
-- line 1677 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
  5,788 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1836 ----------------------------------------
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      .                   self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
    448 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    128 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
    512 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
      .               pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
      .                   Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
      .               }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
-- line 1854 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  7,008 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
  1,752 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
  7,008 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
 22,360 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
  8,944 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
 20,124 ( 0.01%)      }
      .           
      .               pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
      .               }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
-- line 1969 ----------------------------------------
-- line 2091 ----------------------------------------
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
      .               }
      .           
      .               /// Gets the attributes of a definition.
 40,210 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
 12,063 ( 0.00%)          if let Some(did) = did.as_local() {
 11,649 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
 32,168 ( 0.01%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
  5,432 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
 16,569 ( 0.01%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
      .               pub fn is_doc_hidden(self, did: DefId) -> bool {
      .                   self.get_attrs(did)
      .                       .iter()
      .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
      .               }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  1,589 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    227 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  1,816 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
  3,234 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
  4,158 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
    140 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    560 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
    280 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
  1,824 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    228 ( 0.00%)          use_name.name == def_name.name
    684 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
  1,824 ( 0.00%)      }
      .           
      .               pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      .                   ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      .                   ident
      .               }
      .           
  2,016 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
    224 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    896 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
  1,344 ( 0.00%)          (ident, scope)
  2,016 ( 0.00%)      }
      .           
      .               pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
      .               }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    990 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    990 ( 0.00%)      let def_id = def_id.as_local()?;
  1,320 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    240 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
  1,320 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2224 ----------------------------------------
      .                   ast::UintTy::U8 => UintTy::U8,
      .                   ast::UintTy::U16 => UintTy::U16,
      .                   ast::UintTy::U32 => UintTy::U32,
      .                   ast::UintTy::U64 => UintTy::U64,
      .                   ast::UintTy::U128 => UintTy::U128,
      .               }
      .           }
      .           
     16 ( 0.00%)  pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
     16 ( 0.00%)  }
      .           
  1,120 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
  1,120 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
      .               pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
      6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
-- line 2308 ----------------------------------------

593,086 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
      .           use std::fmt;
      .           use std::hash::Hash;
      .           use tracing::*;
      .           
      .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 69,954 ( 0.02%)  pub struct SyntaxContext(u32);
      .           
  3,356 ( 0.00%)  #[derive(Debug, Encodable, Decodable, Clone)]
      .           pub struct SyntaxContextData {
     38 ( 0.00%)      outer_expn: ExpnId,
    114 ( 0.00%)      outer_transparency: Transparency,
      .               parent: SyntaxContext,
      .               /// This context, but with all transparent and semi-transparent expansions filtered away.
      .               opaque: SyntaxContext,
      .               /// This context, but with all transparent expansions filtered away.
      .               opaque_and_semitransparent: SyntaxContext,
      .               /// Name of the crate to which `$crate` with this context would resolve.
      .               dollar_crate_name: Symbol,
      .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
      .               pub struct ExpnIndex {
      .                   ENCODABLE = custom
      .               }
      .           }
      .           
      .           /// A unique ID associated with a macro invocation and expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
      .           pub struct ExpnId {
    324 ( 0.00%)      pub krate: CrateNum,
 22,885 ( 0.01%)      pub local_id: ExpnIndex,
      .           }
      .           
      .           impl fmt::Debug for ExpnId {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   // Generate crate_::{{expn_}}.
      .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
      .               }
      .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
      .                   // or ensure that this method is always invoked with the same
      .                   // `NodeIdHashingMode`
      .                   //
      .                   // Note that we require that `hash_spans` be set according to the global
      .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
      .                   // which will cause us to require that this method always be called with `Span` hashing
      .                   // enabled.
      .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
 23,896 ( 0.01%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
      .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
      .               }
      .           }
      .           
      .           /// A unique hash value associated to an expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
    220 ( 0.00%)  pub struct ExpnHash(Fingerprint);
      .           
      .           impl ExpnHash {
      .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
      .               /// originates from.
      .               #[inline]
      .               pub fn stable_crate_id(self) -> StableCrateId {
      .                   StableCrateId(self.0.as_value().0)
      .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_root(self) -> bool {
      .                   self.0 == Fingerprint::ZERO
      .               }
      .           
      .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
      .               /// `local_hash`, where `local_hash` must be unique within its crate.
     74 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
      .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
     37 ( 0.00%)      }
      .           }
      .           
      .           /// A property of a macro expansion that determines how identifiers
      .           /// produced by that expansion are resolved.
134,102 ( 0.04%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Transparency {
      .               /// Identifier produced by a transparent expansion is always resolved at call-site.
      .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
      .               Transparent,
      .               /// Identifier produced by a semi-transparent expansion may be resolved
      .               /// either at call-site or at definition-site.
      .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
      .           }
      .           
      .           impl LocalExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
      .           
      .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
      .                   LocalExpnId::from_u32(idx.as_u32())
 23,974 ( 0.01%)      }
      .           
      .               pub fn as_raw(self) -> ExpnIndex {
      .                   ExpnIndex::from_u32(self.as_u32())
 17,000 ( 0.01%)      }
      .           
      .               pub fn fresh_empty() -> LocalExpnId {
      .                   HygieneData::with(|data| {
      .                       let expn_id = data.local_expn_data.push(None);
      .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
      .                       debug_assert_eq!(expn_id, _eid);
      .                       expn_id
      .                   })
      .               }
      .           
      .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
     15 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
     10 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
      .                       let _eid = data.local_expn_hashes.push(expn_hash);
      .                       debug_assert_eq!(expn_id, _eid);
      2 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                       expn_id
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.local_expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
    168 ( 0.00%)          HygieneData::with(|data| data.local_expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn to_expn_id(self) -> ExpnId {
 17,748 ( 0.01%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
      .               }
      .           
      .               #[inline]
      .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
    576 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
     72 ( 0.00%)              let old_expn_data = &mut data.local_expn_data[self];
     72 ( 0.00%)              assert!(old_expn_data.is_none(), "expansion data is reset for an expansion ID");
    360 ( 0.00%)              *old_expn_data = Some(expn_data);
      .                       debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);
    144 ( 0.00%)              data.local_expn_hashes[self] = expn_hash;
    108 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                   });
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: LocalExpnId) -> bool {
      .                   self.to_expn_id().is_descendant_of(ancestor.to_expn_id())
      .               }
-- line 238 ----------------------------------------
-- line 259 ----------------------------------------
      .               }
      .           }
      .           
      .           impl ExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
      .               pub const fn root() -> ExpnId {
      .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
 42,483 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
      .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
      .               }
      .           
      .               #[inline]
      .               pub fn as_local(self) -> Option<LocalExpnId> {
 31,629 ( 0.01%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
      .               }
      .           
      .               #[inline]
      .               #[track_caller]
      .               pub fn expect_local(self) -> LocalExpnId {
      .                   self.as_local().unwrap()
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
    167 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
      .                   // a few "fast path" cases to avoid locking HygieneData
      .                   if ancestor == ExpnId::root() || ancestor == self {
      .                       return true;
      .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
      .                   if ancestor.krate != self.krate {
      .                       return false;
      .                   }
      .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
      .               }
      .           
      .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
      .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
  4,392 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
      .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
  2,196 ( 0.00%)      }
      .           
      .               /// Returns span for the macro which originally caused this expansion to happen.
      .               ///
      .               /// Stops backtracing at include! boundary.
      .               pub fn expansion_cause(mut self) -> Option<Span> {
      .                   let mut last_macro = None;
      .                   loop {
      .                       let expn_data = self.expn_data();
-- line 319 ----------------------------------------
-- line 348 ----------------------------------------
      .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
      .               /// would have collisions without a disambiguator.
      .               /// The keys of this map are always computed with `ExpnData.disambiguator`
      .               /// set to 0.
      .               expn_data_disambiguators: FxHashMap<u64, u32>,
      .           }
      .           
      .           impl HygieneData {
     10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
      .                   let root_data = ExpnData::default(
      .                       ExpnKind::Root,
      .                       DUMMY_SP,
      .                       edition,
      .                       Some(CRATE_DEF_ID.to_def_id()),
      .                       None,
      .                   );
      .           
     50 ( 0.00%)          HygieneData {
      .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
      .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
      .                       foreign_expn_data: FxHashMap::default(),
      .                       foreign_expn_hashes: FxHashMap::default(),
      .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
      .                           .collect(),
      8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
      .                           outer_expn: ExpnId::root(),
      .                           outer_transparency: Transparency::Opaque,
      .                           parent: SyntaxContext(0),
      .                           opaque: SyntaxContext(0),
      .                           opaque_and_semitransparent: SyntaxContext(0),
      .                           dollar_crate_name: kw::DollarCrate,
      .                       }],
      .                       syntax_context_map: FxHashMap::default(),
      .                       expn_data_disambiguators: FxHashMap::default(),
      .                   }
     10 ( 0.00%)      }
      .           
    135 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
 41,373 ( 0.01%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
    135 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
      .                   self.local_expn_hashes[expn_id]
      .               }
      .           
      .               #[inline]
      .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
      .                   match expn_id.as_local() {
      .                       Some(expn_id) => self.local_expn_hashes[expn_id],
      .                       None => self.foreign_expn_hashes[&expn_id],
      .                   }
      .               }
      .           
    336 ( 0.00%)      fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
      .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
    336 ( 0.00%)      }
      .           
 11,780 ( 0.00%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
 35,340 ( 0.01%)          if let Some(expn_id) = expn_id.as_local() {
      .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .                   } else {
      .                       &self.foreign_expn_data[&expn_id]
      .                   }
 23,560 ( 0.01%)      }
      .           
      .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
      .                   // a couple "fast path" cases to avoid traversing parents in the loop below
  3,131 ( 0.00%)          if ancestor == ExpnId::root() {
      .                       return true;
      .                   }
      8 ( 0.00%)          if expn_id.krate != ancestor.krate {
      .                       return false;
      .                   }
      .                   loop {
      8 ( 0.00%)              if expn_id == ancestor {
      .                           return true;
      .                       }
      8 ( 0.00%)              if expn_id == ExpnId::root() {
      .                           return false;
      .                       }
      .                       expn_id = self.expn_data(expn_id).parent;
      .                   }
      4 ( 0.00%)      }
      .           
  6,080 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
 80,101 ( 0.03%)          self.syntax_context_data[ctxt.0 as usize].opaque
  6,080 ( 0.00%)      }
      .           
  1,694 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
  6,876 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
  1,694 ( 0.00%)      }
      .           
  1,840 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
 37,331 ( 0.01%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
  1,840 ( 0.00%)      }
      .           
 23,700 ( 0.01%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
 11,979 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
 47,948 ( 0.02%)          (data.outer_expn, data.outer_transparency)
 35,679 ( 0.01%)      }
      .           
      .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
    141 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
      .               }
      .           
      .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
      4 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
     16 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
      .                   outer_mark
      .               }
      .           
  1,048 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
      .                   let mut marks = Vec::new();
    260 ( 0.00%)          while ctxt != SyntaxContext::root() {
      .                       debug!("marks: getting parent of {:?}", ctxt);
      .                       marks.push(self.outer_mark(ctxt));
      .                       ctxt = self.parent_ctxt(ctxt);
      .                   }
      .                   marks.reverse();
      .                   marks
  1,179 ( 0.00%)      }
      .           
      .               fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
      .                   debug!("walk_chain({:?}, {:?})", span, to);
      .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
      .                   while span.from_expansion() && span.ctxt() != to {
      .                       let outer_expn = self.outer_expn(span.ctxt());
      .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
      .                       let expn_data = self.expn_data(outer_expn);
      .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
      .                       span = expn_data.call_site;
      .                   }
      .                   span
      .               }
      .           
 20,290 ( 0.01%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut scope = None;
  6,087 ( 0.00%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
      .                       scope = Some(self.remove_mark(ctxt).0);
      .                   }
      .                   scope
 20,290 ( 0.01%)      }
      .           
 70,911 ( 0.02%)      fn apply_mark(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
 15,758 ( 0.01%)          assert_ne!(expn_id, ExpnId::root());
  7,879 ( 0.00%)          if transparency == Transparency::Opaque {
      6 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
 55,146 ( 0.02%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
  7,878 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
      .                       self.normalize_to_macros_2_0(call_site_ctxt)
      .                   } else {
      .                       self.normalize_to_macro_rules(call_site_ctxt)
      .                   };
      .           
  7,878 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
 23,634 ( 0.01%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
      .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
      .                   //
      .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
      .                   // at their invocation. That is, we pretend that the macros 1.0 definition
      .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
-- line 519 ----------------------------------------
-- line 521 ----------------------------------------
      .                   //
      .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
      .                   for (expn_id, transparency) in self.marks(ctxt) {
      .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
      .                   }
      .                   self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
      .               }
      .           
 63,032 ( 0.02%)      fn apply_mark_internal(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      .                   let syntax_context_data = &mut self.syntax_context_data;
 47,274 ( 0.02%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
      .                   let mut opaque_and_semitransparent =
  7,879 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
      .           
  7,879 ( 0.00%)          if transparency >= Transparency::Opaque {
      .                       let parent = opaque;
     10 ( 0.00%)              opaque = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      1 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque: new_opaque,
      .                                   opaque_and_semitransparent: new_opaque,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque
      .                           });
      .                   }
      .           
  7,879 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
      .                       let parent = opaque_and_semitransparent;
 23,634 ( 0.01%)              opaque_and_semitransparent = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      .                               let new_opaque_and_semitransparent =
     36 ( 0.00%)                          SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque,
      .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque_and_semitransparent
      .                           });
      .                   }
      .           
      .                   let parent = ctxt;
 15,758 ( 0.01%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
      .                       let new_opaque_and_semitransparent_and_transparent =
      2 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
      .                       syntax_context_data.push(SyntaxContextData {
      .                           outer_expn: expn_id,
      .                           outer_transparency: transparency,
      .                           parent,
      .                           opaque,
      .                           opaque_and_semitransparent,
      .                           dollar_crate_name: kw::DollarCrate,
      .                       });
      .                       new_opaque_and_semitransparent_and_transparent
      .                   })
 63,032 ( 0.02%)      }
      .           }
      .           
      .           pub fn clear_syntax_context_map() {
      5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
      .           }
      .           
      .           pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
      .               HygieneData::with(|data| data.walk_chain(span, to))
      .           }
      .           
    222 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
      .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
      .               let (len, to_update) = HygieneData::with(|data| {
      .                   (
     37 ( 0.00%)              data.syntax_context_data.len(),
      .                       data.syntax_context_data
      .                           .iter()
      .                           .rev()
      .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
      .                           .count(),
      .                   )
      .               });
      .               // The callback must be called from outside of the `HygieneData` lock,
      .               // since it will try to acquire it too.
    111 ( 0.00%)      let range_to_update = len - to_update..len;
      .               let names: Vec<_> =
      .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
      .               HygieneData::with(|data| {
     74 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
    131 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
      .                   })
      .               })
    222 ( 0.00%)  }
      .           
      .           pub fn debug_hygiene_data(verbose: bool) -> String {
      .               HygieneData::with(|data| {
      .                   if verbose {
      .                       format!("{:#?}", data)
      .                   } else {
      .                       let mut s = String::from("");
      .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 674 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               crate fn from_u32(raw: u32) -> SyntaxContext {
      .                   SyntaxContext(raw)
      .               }
      .           
      .               /// Extend a syntax context with a given expansion and transparency.
 47,262 ( 0.02%)      crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
 15,758 ( 0.01%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
 15,754 ( 0.01%)      }
      .           
      .               /// Pulls a single mark off of the syntax context. This effectively moves the
      .               /// context up one macro definition level. That is, if we have a nested macro
      .               /// definition as follows:
      .               ///
      .               /// ```rust
      .               /// macro_rules! f {
      .               ///    macro_rules! g {
-- line 692 ----------------------------------------
-- line 694 ----------------------------------------
      .               ///    }
      .               /// }
      .               /// ```
      .               ///
      .               /// and we have a SyntaxContext that is referring to something declared by an invocation
      .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
      .               /// invocation of f that created g1.
      .               /// Returns the mark that was removed.
      4 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
      .                   HygieneData::with(|data| data.remove_mark(self).0)
      .               }
      .           
    524 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
    262 ( 0.00%)          HygieneData::with(|data| data.marks(self))
    524 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion.
      .               /// For example, consider the following three resolutions of `f`:
      .               ///
      .               /// ```rust
      .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
      .               /// m!(f);
      .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
      .               ///     //| and it resolves to `::bar::f`.
      .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
      .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
      .               ///     //| and it resolves to `::bar::$f`.
      .               /// }
      .               /// ```
      .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
      .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
  4,376 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  2,188 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
  2,188 ( 0.00%)      }
      .           
      .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
  2,828 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   HygieneData::with(|data| {
  1,414 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
  2,121 ( 0.00%)              data.adjust(self, expn_id)
      .                   })
  1,414 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion
      .               /// via a glob import with the given `SyntaxContext`.
      .               /// For example:
      .               ///
      .               /// ```rust
      .               /// m!(f);
      .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 811 ----------------------------------------
      .                       let scope = marks.last().map(|mark| mark.0);
      .                       while let Some((expn_id, transparency)) = marks.pop() {
      .                           *self = data.apply_mark(*self, expn_id, transparency);
      .                       }
      .                       Some(scope)
      .                   })
      .               }
      .           
  1,368 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
      .                   HygieneData::with(|data| {
    228 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
  1,140 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
    228 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
      .                   })
    456 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
  3,040 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
      .               }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
    847 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
      .               }
      .           
      .               #[inline]
      .               pub fn outer_expn(self) -> ExpnId {
      .                   HygieneData::with(|data| data.outer_expn(self))
      .               }
      .           
      .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
      .               /// `ctxt.outer_expn().expn_data()`.
      .               #[inline]
      .               pub fn outer_expn_data(self) -> ExpnData {
  5,190 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
 19,420 ( 0.01%)          HygieneData::with(|data| data.outer_mark(self))
      .               }
      .           
      .               pub fn dollar_crate_name(self) -> Symbol {
      .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
      .               }
      .           
  2,920 ( 0.00%)      pub fn edition(self) -> Edition {
  7,491 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
  2,920 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SyntaxContext {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "#{}", self.0)
      .               }
      .           }
      .           
-- line 868 ----------------------------------------
-- line 902 ----------------------------------------
      .                       ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
      .                   };
      .                   self.fresh_expansion(expn_data, ctx)
      .               }
      .           }
      .           
      .           /// A subset of properties from both macro definition and macro call available through global data.
      .           /// Avoid using this if you have access to the original definition or call structures.
 25,571 ( 0.01%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub struct ExpnData {
      .               // --- The part unique to each expansion.
      .               /// The kind of this expansion - macro or compiler desugaring.
      .               pub kind: ExpnKind,
      .               /// The expansion that produced this expansion.
  3,146 ( 0.00%)      pub parent: ExpnId,
      .               /// The location of the actual macro invocation or syntax sugar , e.g.
      .               /// `let x = foo!();` or `if let Some(y) = x {}`
      .               ///
      .               /// This may recursively refer to other macro invocations, e.g., if
      .               /// `foo!()` invoked `bar!()` internally, and there was an
      .               /// expression inside `bar!`; the call_site of the expression in
      .               /// the expansion would point to the `bar!` invocation; that
      .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
      .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
      .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
      .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
      .               /// implementation).
      .               ///
      .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
      .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
      .               /// a `krate` field, this value only needs to be unique within a single crate.
  1,573 ( 0.00%)      disambiguator: u32,
      .           
      .               // --- The part specific to the macro/desugaring definition.
      .               // --- It may be reasonable to share this part between expansions with the same definition,
      .               // --- but such sharing is known to bring some minor inconveniences without also bringing
      .               // --- noticeable perf improvements (PR #62898).
      .               /// The span of the macro definition (possibly dummy).
      .               /// This span serves only informational purpose and is not used for resolution.
      .               pub def_site: Span,
      .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
      .               /// internally without forcing the whole crate to opt-in
      .               /// to them.
    224 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .               /// Whether the macro is allowed to use `unsafe` internally
      .               /// even if the user crate has `#![forbid(unsafe_code)]`.
      .               pub allow_internal_unsafe: bool,
      .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
      .               /// for a given macro.
      .               pub local_inner_macros: bool,
      .               /// Edition of the crate in which the macro is defined.
  1,573 ( 0.00%)      pub edition: Edition,
      .               /// The `DefId` of the macro being invoked,
      .               /// if this `ExpnData` corresponds to a macro invocation
  1,573 ( 0.00%)      pub macro_def_id: Option<DefId>,
      .               /// The normal module (`mod`) in which the expanded macro was defined.
      .               pub parent_module: Option<DefId>,
      .           }
      .           
      .           impl !PartialEq for ExpnData {}
      .           impl !Hash for ExpnData {}
      .           
      .           impl ExpnData {
    468 ( 0.00%)      pub fn new(
      .                   kind: ExpnKind,
      .                   parent: ExpnId,
      .                   call_site: Span,
      .                   def_site: Span,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   allow_internal_unsafe: bool,
      .                   local_inner_macros: bool,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
    504 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent,
      .                       call_site,
      .                       def_site,
      .                       allow_internal_unstable,
      .                       allow_internal_unsafe,
      .                       local_inner_macros,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
    180 ( 0.00%)      }
      .           
      .               /// Constructs expansion data with default properties.
      .               pub fn default(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
-- line 1002 ----------------------------------------
-- line 1011 ----------------------------------------
      .                       local_inner_macros: false,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
      .               }
      .           
      6 ( 0.00%)      pub fn allow_unstable(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   allow_internal_unstable: Lrc<[Symbol]>,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     13 ( 0.00%)          ExpnData {
      .                       allow_internal_unstable: Some(allow_internal_unstable),
      .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
      .                   }
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_root(&self) -> bool {
      .                   matches!(self.kind, ExpnKind::Root)
      .               }
      .           
      .               #[inline]
    549 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
      .                   let mut hasher = StableHasher::new();
      .                   self.hash_stable(ctx, &mut hasher);
      .                   hasher.finish()
    488 ( 0.00%)      }
      .           }
      .           
      .           /// Expansion kind.
 23,429 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ExpnKind {
      .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
      .               Root,
      .               /// Expansion produced by a macro.
  1,546 ( 0.00%)      Macro(MacroKind, Symbol),
      .               /// Transform done by the compiler on the AST.
     43 ( 0.00%)      AstPass(AstPass),
      .               /// Desugaring done by the compiler during HIR lowering.
      .               Desugaring(DesugaringKind),
      .               /// MIR inlining
      .               Inlined,
      .           }
      .           
      .           impl ExpnKind {
      .               pub fn descr(&self) -> String {
-- line 1062 ----------------------------------------
-- line 1070 ----------------------------------------
      .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
      .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
      .                       ExpnKind::Inlined => "inlined source".to_string(),
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of macro invocation or definition.
    868 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
     16 ( 0.00%)  #[derive(HashStable_Generic)]
      .           pub enum MacroKind {
      .               /// A bang macro `foo!()`.
      .               Bang,
      .               /// An attribute macro `#[foo]`.
      .               Attr,
      .               /// A derive macro `#[derive(Foo)]`
      .               Derive,
      .           }
      .           
      .           impl MacroKind {
      .               pub fn descr(self) -> &'static str {
     12 ( 0.00%)          match self {
      .                       MacroKind::Bang => "macro",
      .                       MacroKind::Attr => "attribute macro",
      .                       MacroKind::Derive => "derive macro",
      .                   }
      6 ( 0.00%)      }
      .           
      .               pub fn descr_expected(self) -> &'static str {
      .                   match self {
      .                       MacroKind::Attr => "attribute",
      .                       _ => self.descr(),
      .                   }
      .               }
      .           
      .               pub fn article(self) -> &'static str {
     18 ( 0.00%)          match self {
      .                       MacroKind::Attr => "an",
      .                       _ => "a",
      .                   }
      6 ( 0.00%)      }
      .           }
      .           
      .           /// The kind of AST transform.
      .           #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum AstPass {
      .               StdImports,
      .               TestHarness,
      .               ProcMacroHarness,
-- line 1118 ----------------------------------------
-- line 1161 ----------------------------------------
      .                       DesugaringKind::OpaqueTy => "`impl Trait`",
      .                       DesugaringKind::ForLoop => "`for` loop",
      .                       DesugaringKind::LetElse => "`let...else`",
      .                       DesugaringKind::WhileLoop => "`while` loop",
      .                   }
      .               }
      .           }
      .           
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct HygieneEncodeContext {
      .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
      .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
      .               /// that we don't accidentally try to encode any more `SyntaxContexts`
      .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
      .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
      .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
      .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
      .           
      .               serialized_expns: Lock<FxHashSet<ExpnId>>,
      .           
      .               latest_expns: Lock<FxHashSet<ExpnId>>,
      .           }
      .           
      .           impl HygieneEncodeContext {
      .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
  2,705 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
  1,082 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
  1,062 ( 0.00%)              self.latest_expns.lock().insert(expn);
      .                   }
  2,164 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn encode<T, R>(
      .                   &self,
      .                   encoder: &mut T,
      .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
      .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
      .               ) -> Result<(), R> {
      .                   // When we serialize a `SyntaxContextData`, we may end up serializing
      .                   // a `SyntaxContext` that we haven't seen before
      4 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
      .                       debug!(
      .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
      .                           self.latest_ctxts.lock().len(),
      .                           self.latest_ctxts
      .                       );
      .           
      .                       // Consume the current round of SyntaxContexts.
      .                       // Drop the lock() temporary early
      .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
      .           
      .                       // It's fine to iterate over a HashMap, because the serialization
      .                       // of the table that we insert data into doesn't depend on insertion
      .                       // order
      .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
     76 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
      .                               encode_ctxt(encoder, index, data)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .           
      .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
      .           
      .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
    152 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
      .                               encode_expn(encoder, expn, data, hash)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .                   }
      .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
      .                   Ok(())
      8 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Default)]
      .           /// Additional information used to assist in decoding hygiene data
      .           pub struct HygieneDecodeContext {
      .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
      .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
      .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
      .           
      .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .                   expn_id
      .               })
      .           }
      .           
      .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
    336 ( 0.00%)  pub fn register_expn_id(
      .               krate: CrateNum,
      .               local_id: ExpnIndex,
      .               data: ExpnData,
      .               hash: ExpnHash,
      .           ) -> ExpnId {
      .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
    336 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
      .               HygieneData::with(|hygiene_data| {
    336 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
      .                   debug_assert!(_old_data.is_none());
    560 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
      .                   debug_assert!(_old_hash.is_none());
    448 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .               });
      .               expn_id
    448 ( 0.00%)  }
      .           
      .           /// Decode an expansion from the metadata of a foreign crate.
      .           pub fn decode_expn_id(
      .               krate: CrateNum,
      .               index: u32,
      .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
      .           ) -> ExpnId {
  1,000 ( 0.00%)      if index == 0 {
      .                   debug!("decode_expn_id: deserialized root");
    620 ( 0.00%)          return ExpnId::root();
      .               }
      .           
      .               let index = ExpnIndex::from_u32(index);
      .           
      .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
      .               debug_assert_ne!(krate, LOCAL_CRATE);
    380 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
      .           
      .               // Fast path if the expansion has already been decoded.
    380 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
    234 ( 0.00%)          return expn_id;
      .               }
      .           
      .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
      .               // other ExpnIds
    784 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
      .           
  1,008 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
      .           }
      .           
      .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
      .           // to track which `SyntaxContext`s we have already decoded.
      .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
      .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
      .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
      .               d: &mut D,
      .               context: &HygieneDecodeContext,
      .               decode_data: F,
      .           ) -> SyntaxContext {
  4,469 ( 0.00%)      let raw_id: u32 = Decodable::decode(d);
  8,938 ( 0.00%)      if raw_id == 0 {
      .                   debug!("decode_syntax_context: deserialized root");
      .                   // The root is special
      .                   return SyntaxContext::root();
      .               }
      .           
      .               let outer_ctxts = &context.remapped_ctxts;
      .           
      .               // Ensure that the lock() temporary is dropped early
      .               {
  2,670 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
      .                       return ctxt;
      .                   }
      .               }
      .           
      .               // Allocate and store SyntaxContext id *before* calling the decoder function,
      .               // as the SyntaxContextData may reference itself.
    106 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
    106 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
      .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
      .                   // same ID as us. This will be overwritten after call `decode_Data`
      .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
    106 ( 0.00%)              outer_expn: ExpnId::root(),
      .                       outer_transparency: Transparency::Transparent,
      .                       parent: SyntaxContext::root(),
      .                       opaque: SyntaxContext::root(),
      .                       opaque_and_semitransparent: SyntaxContext::root(),
      .                       dollar_crate_name: kw::Empty,
      .                   });
      .                   let mut ctxts = outer_ctxts.lock();
      .                   let new_len = raw_id as usize + 1;
    318 ( 0.00%)          if ctxts.len() < new_len {
      .                       ctxts.resize(new_len, None);
      .                   }
    212 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
      .                   drop(ctxts);
      .                   new_ctxt
      .               });
      .           
      .               // Don't try to decode data while holding the lock, since we need to
      .               // be able to recursively decode a SyntaxContext
    212 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
      .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
      .               // We don't care what the encoding crate set this to - we want to resolve it
      .               // from the perspective of the current compilation session
    212 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
      .           
      .               // Overwrite the dummy data with our decoded SyntaxContextData
      .               HygieneData::with(|hygiene_data| {
      .                   let dummy = std::mem::replace(
    106 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
      .                       ctxt_data,
      .                   );
      .                   // Make sure nothing weird happening while `decode_data` was running
    106 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
      .               });
      .           
    212 ( 0.00%)      new_ctxt
      .           }
      .           
      .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
      .               ctxts: impl Iterator<Item = SyntaxContext>,
      .               mut f: F,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
     78 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
      .               });
    342 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
      .                   f(ctxt.0, ctxt, &data)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           fn for_all_expns_in<E>(
      .               expns: impl Iterator<Item = ExpnId>,
      .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
    684 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
      .               });
    580 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
      .                   f(expn, &data, hash)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for LocalExpnId {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
      .               }
      .           }
      .           
      .           pub fn raw_encode_syntax_context<E: Encoder>(
      .               ctxt: SyntaxContext,
      .               context: &HygieneEncodeContext,
      .               e: &mut E,
      .           ) -> Result<(), E::Error> {
  8,218 ( 0.00%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
  3,947 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
      .               }
      .               ctxt.0.encode(e)
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for SyntaxContext {
      .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
      .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
      .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
      .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
      .           /// any other `ExpnIds`.
      .           ///
      .           /// This method is called only when an `ExpnData` is first associated
      .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
      .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
      .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
      .           /// collisions are only possible between `ExpnId`s within the same crate.
    333 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
      .               // This disambiguator should not have been set yet.
     74 ( 0.00%)      assert_eq!(
      .                   expn_data.disambiguator, 0,
      .                   "Already set disambiguator for ExpnData: {:?}",
      .                   expn_data
      .               );
     74 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
    185 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .               let disambiguator = HygieneData::with(|data| {
      .                   // If this is the first ExpnData with a given hash, then keep our
      .                   // disambiguator at 0 (the default u32 value)
      .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
     37 ( 0.00%)          let disambiguator = *disambig;
    148 ( 0.00%)          *disambig += 1;
      .                   disambiguator
      .               });
      .           
     74 ( 0.00%)      if disambiguator != 0 {
      .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
      .           
     24 ( 0.00%)          expn_data.disambiguator = disambiguator;
     72 ( 0.00%)          expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .                   // Verify that the new disambiguator makes the hash unique
      .                   #[cfg(debug_assertions)]
      .                   HygieneData::with(|data| {
      .                       assert_eq!(
      .                           data.expn_data_disambiguators.get(&expn_hash),
      .                           None,
      .                           "Hash collision after disambiguator update!",
      .                       );
      .                   });
      .               }
      .           
     74 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
    333 ( 0.00%)  }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
 67,244 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_EXPANSION: u8 = 0;
      .                   const TAG_NO_EXPANSION: u8 = 1;
      .           
 23,210 ( 0.01%)          if *self == SyntaxContext::root() {
      .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
      .                   } else {
      .                       TAG_EXPANSION.hash_stable(ctx, hasher);
  8,560 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
 40,820 ( 0.01%)              expn_id.hash_stable(ctx, hasher);
      .                       transparency.hash_stable(ctx, hasher);
      .                   }
 61,342 ( 0.02%)      }
      .           }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
 30,387 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   assert_default_hashing_controls(ctx, "ExpnId");
 47,644 ( 0.02%)          let hash = if *self == ExpnId::root() {
      .                       // Avoid fetching TLS storage for a trivial often-used value.
      .                       Fingerprint::ZERO
      .                   } else {
      .                       self.expn_hash().0
      .                   };
      .           
      .                   hash.hash_stable(ctx, hasher);
 21,705 ( 0.01%)      }
      .           }

315,793 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 223 ----------------------------------------
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ne(&self, other: &Rhs) -> bool {
    7,493 ( 0.00%)          !self.eq(other)
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
      240 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
      361 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    5,488 ( 0.00%)          max_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
-- line 808 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
    8,598 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
   92,857 ( 0.03%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn gt(&self, other: &Rhs) -> bool {
  249,281 ( 0.08%)          matches!(self.partial_cmp(other), Some(Greater))
        .               }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1156 ----------------------------------------
-- line 1210 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   26,334 ( 0.01%)      match compare(&v1, &v2) {
        .                   Ordering::Less | Ordering::Equal => v1,
        .                   Ordering::Greater => v2,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   88,475 ( 0.03%)      match compare(&v1, &v2) {
        .                   Ordering::Less | Ordering::Equal => v2,
        .                   Ordering::Greater => v1,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
-- line 1289 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
    1,040 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
      915 ( 0.00%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
1,122,439 ( 0.36%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
    6,240 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
        .                           fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
  196,509 ( 0.06%)                      if *self < *other { Less }
        .                               else if *self == *other { Equal }
        .                               else { Greater }
        .                           }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    1,796 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
        6 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
  161,038 ( 0.05%)              PartialEq::eq(*self, *other)
   13,220 ( 0.00%)          }
        .                   #[inline]
        .                   fn ne(&self, other: &&B) -> bool {
       75 ( 0.00%)              PartialEq::ne(*self, *other)
    3,494 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
      270 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

  310,680 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           
      .           /// An entity in the Rust type system, which can be one of
      .           /// several kinds (types, lifetimes, and consts).
      .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
      .           /// with the lowest 2 bits being reserved for a tag to
      .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub struct GenericArg<'tcx> {
 31,590 ( 0.01%)      ptr: NonZeroUsize,
 94,781 ( 0.03%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
      .           }
      .           
      .           const TAG_MASK: usize = 0b11;
      .           const TYPE_TAG: usize = 0b00;
      .           const REGION_TAG: usize = 0b01;
      .           const CONST_TAG: usize = 0b10;
      .           
  5,192 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
      .           pub enum GenericArgKind<'tcx> {
      .               Lifetime(ty::Region<'tcx>),
      .               Type(Ty<'tcx>),
      .               Const(&'tcx ty::Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> GenericArgKind<'tcx> {
  1,272 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
  1,272 ( 0.00%)          let (tag, ptr) = match self {
      .                       GenericArgKind::Lifetime(lt) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
      .                           (REGION_TAG, lt as *const _ as usize)
      .                       }
      .                       GenericArgKind::Type(ty) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
      .                       }
      .                       GenericArgKind::Const(ct) => {
      .                           // Ensure we can use the tag bits.
      .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
      .                           (CONST_TAG, ct as *const _ as usize)
      .                       }
      .                   };
      .           
  7,307 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
  1,272 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self.unpack() {
      .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
      .                       GenericArgKind::Type(ty) => ty.fmt(f),
      .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
      .           
      .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
      .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
      .                   Some(self.cmp(&other))
      .               }
      .           }
      .           
      .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
  4,579 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Lifetime(r).pack()
  4,579 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
 44,483 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Type(ty).pack()
 44,483 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
    384 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
      .                   GenericArgKind::Const(c).pack()
    384 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               #[inline]
      .               pub fn unpack(self) -> GenericArgKind<'tcx> {
      .                   let ptr = self.ptr.get();
      .                   unsafe {
864,806 ( 0.28%)              match ptr & TAG_MASK {
  3,146 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
198,733 ( 0.06%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
    678 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
      .                           _ => intrinsics::unreachable(),
      .                       }
      .                   }
      .               }
      .           
      .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
      .               /// This is true in cases where `Substs` is used in places where the kinds are known
      .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
      .               pub fn expect_ty(self) -> Ty<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Type(ty) => ty,
      .                       _ => bug!("expected a type, but found another kind"),
      .                   }
  1,556 ( 0.00%)      }
      .           
      .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
      .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
      .                   match self.unpack() {
      .                       GenericArgKind::Const(c) => c,
      .                       _ => bug!("expected a const, but found another kind"),
      .                   }
      .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
      .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
      .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    697 ( 0.00%)          self.unpack().encode(e)
      .               }
      .           }
      .           
      .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  6,360 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  6,360 ( 0.00%)          GenericArgKind::decode(d).pack()
      .               }
      .           }
      .           
      .           /// A substitution mapping generic parameters to new values.
      .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
      .           
      .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
      .           
-- line 192 ----------------------------------------
-- line 211 ----------------------------------------
      .               /// Inline const substitutions have a particular structure controlled by the
      .               /// compiler that encodes information like the inferred type;
      .               /// see `ty::InlineConstSubsts` struct for more comments.
      .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
      .                   InlineConstSubsts { substs: self }
      .               }
      .           
      .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
  5,670 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    940 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
  5,103 ( 0.00%)      }
      .           
      .               /// Creates an `InternalSubsts` for generic parameter definitions,
      .               /// by calling closures to obtain each kind.
      .               /// The closures get to observe the `InternalSubsts` as they're
      .               /// being built, which can be used to correctly
      .               /// substitute defaults of generic parameters.
 16,934 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   let defs = tcx.generics_of(def_id);
      .                   let count = defs.count();
      .                   let mut substs = SmallVec::with_capacity(count);
  7,349 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
  3,764 ( 0.00%)          tcx.intern_substs(&substs)
 16,938 ( 0.01%)      }
      .           
      .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
      .               where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   Self::for_item(tcx, def_id, |param, substs| {
      .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
      .                   })
      .               }
      .           
 30,398 ( 0.01%)      pub fn fill_item<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   tcx: TyCtxt<'tcx>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
 12,498 ( 0.00%)          if let Some(def_id) = defs.parent {
      .                       let parent_defs = tcx.generics_of(def_id);
  2,660 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
      .                   }
      .                   Self::fill_single(substs, defs, mk_kind)
 24,072 ( 0.01%)      }
      .           
    224 ( 0.00%)      pub fn fill_single<F>(
      .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
      .                   defs: &ty::Generics,
      .                   mk_kind: &mut F,
      .               ) where
      .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
      .               {
      .                   substs.reserve(defs.params.len());
      .                   for param in &defs.params {
      .                       let kind = mk_kind(param, substs);
  7,672 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
      .                       substs.push(kind);
      .                   }
    224 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
      .                   self.iter()
      .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
      .               }
      .           
      .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
      .                   self.iter().filter_map(|k| match k.unpack() {
      .                       GenericArgKind::Lifetime(_) => None,
      .                       generic => Some(generic),
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
 31,854 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
      .                       ty
      .                   } else {
      .                       bug!("expected type for param #{} in {:?}", i, self);
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
      .               /// impl<U> X<U> for U { fn f<V>() {} }
      .               /// ```
      .               ///
      .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
      .               /// * If `source_ancestor` is the def_id of the trait.
      .               /// * If `target_substs` is `[U]`, the substs for the impl.
      .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
      .               ///   are needed for it to match the trait.
  4,606 ( 0.00%)      pub fn rebase_onto(
      .                   &self,
      .                   tcx: TyCtxt<'tcx>,
      .                   source_ancestor: DefId,
      .                   target_substs: SubstsRef<'tcx>,
      .               ) -> SubstsRef<'tcx> {
      .                   let defs = tcx.generics_of(source_ancestor);
  1,316 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
  5,264 ( 0.00%)      }
      .           
      .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
      .                   tcx.mk_substs(self.iter().take(generics.count()))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
  4,480 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
      .                   // typically hit in 90--99.99% of cases. When folding doesn't change
      .                   // the substs, it's faster to reuse the existing substs rather than
      .                   // calling `intern_substs`.
172,728 ( 0.06%)          match self.len() {
      .                       1 => {
 18,228 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 52,918 ( 0.02%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
      .                       }
      .                       2 => {
 18,812 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
 53,300 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
 55,366 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
      .                               Ok(self)
      .                           } else {
 28,768 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
      .                           }
      .                       }
      .                       0 => Ok(self),
      .                       _ => {
      .                           let params: SmallVec<[_; 8]> =
      .                               self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      .                           if params[..] == self[..] {
      .                               Ok(self)
      .                           } else {
      .                               Ok(folder.tcx().intern_substs(&params))
      .                           }
      .                       }
      .                   }
  7,133 ( 0.00%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 26,082 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Public trait `Subst`
      .           //
      .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
      .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
      .               fn subst_spanned(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   substs: &[GenericArg<'tcx>],
      .                   span: Option<Span>,
      .               ) -> T {
 82,407 ( 0.03%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
      .                   self.fold_with(&mut folder)
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The actual substitution engine itself is a type folder.
      .           
      .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
      .               span: Option<Span>,
      .           
      .               /// Number of region binders we have passed through while doing the substitution
      .               binders_passed: u32,
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
 14,062 ( 0.00%)          self.tcx
      .               }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
  9,244 ( 0.00%)          self.binders_passed += 1;
  2,075 ( 0.00%)          let t = t.super_fold_with(self);
  9,244 ( 0.00%)          self.binders_passed -= 1;
      .                   t
      .               }
      .           
  8,976 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   // Note: This routine only handles regions that are bound on
      .                   // type declarations and other outer declarations, not those
      .                   // bound in *fn types*. Region substitution of the bound
      .                   // regions that appear in a function signature is done using
      .                   // the specialized routine `ty::replace_late_regions()`.
  2,992 ( 0.00%)          match *r {
  1,848 ( 0.00%)              ty::ReEarlyBound(data) => {
  1,848 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
      .                           match rk {
    924 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
      .                               _ => {
      .                                   let span = self.span.unwrap_or(DUMMY_SP);
      .                                   let msg = format!(
      .                                       "Region parameter out of range \
      .                                        when substituting in region {} (index={})",
      .                                       data.name, data.index
      .                                   );
      .                                   span_bug!(span, "{}", msg);
      .                               }
      .                           }
      .                       }
      .                       _ => r,
      .                   }
 10,472 ( 0.00%)      }
      .           
 78,228 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 26,076 ( 0.01%)          if !t.needs_subst() {
      .                       return t;
      .                   }
      .           
 43,740 ( 0.01%)          match *t.kind() {
 99,030 ( 0.03%)              ty::Param(p) => self.ty_for_param(p, t),
 12,384 ( 0.00%)              _ => t.super_fold_with(self),
      .                   }
120,060 ( 0.04%)      }
      .           
    420 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    420 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
      .                       self.const_for_param(p, c)
      .                   } else {
      .                       c.super_fold_with(self)
      .                   }
    480 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
      .                   c.super_fold_with(self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
      .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   // Look up the type in the substitutions. It really should be in there.
 39,612 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ty = match opt_ty {
      .                       Some(GenericArgKind::Type(ty)) => ty,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
      .               }
      .           
      .               fn const_for_param(
      .                   &self,
      .                   p: ParamConst,
      .                   source_ct: &'tcx ty::Const<'tcx>,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   // Look up the const in the substitutions. It really should be in there.
    120 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
      .                   let ct = match opt_ct {
      .                       Some(GenericArgKind::Const(ct)) => ct,
      .                       Some(kind) => {
      .                           let span = self.span.unwrap_or(DUMMY_SP);
      .                           span_bug!(
      .                               span,
      .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
      .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
      .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
      .                   debug!(
      .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
      .                       val,
      .                       self.binders_passed,
      .                       val.has_escaping_bound_vars()
      .                   );
      .           
 62,831 ( 0.02%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
      .                       return val;
      .                   }
      .           
      .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
      .                   debug!("shift_vars: shifted result = {:?}", result);
      .           
      .                   result
      .               }
      .           
      .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
  2,088 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
      .                       return region;
      .                   }
      .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
      .               }
      .           }
      .           
      .           /// Stores the user-given substs to reach some fully qualified path
      .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
     24 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub struct UserSubsts<'tcx> {
      .               /// The substitutions for the item as given by the user.
      .               pub substs: SubstsRef<'tcx>,
      .           
      .               /// The self type, in the case of a `<T>::Item` path (when applied
      .               /// to an inherent impl). See `UserSelfTy` below.
     12 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
      .           }
      .           
      .           /// Specifies the user-given self type. In the case of a path that
      .           /// refers to a member in an inherent impl, this self type is
      .           /// sometimes needed to constrain the type parameters on the impl. For
      .           /// example, in this code:
      .           ///
      .           /// ```
-- line 689 ----------------------------------------

244,426 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 51,887 ( 0.02%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    431 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  1,640 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 28,379 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 63,861 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 68,212 ( 0.02%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      1 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 583 ----------------------------------------
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
      .                   let _ = &self[a];
    248 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
     56 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
    186 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  5,710 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    592 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  6,711 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  3,740 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
226,178 ( 0.07%)          while left < right {
318,497 ( 0.10%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 45,475 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 90,612 ( 0.03%)              if cmp == Less {
123,624 ( 0.04%)                  left = mid + 1;
 51,498 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
238,088 ( 0.08%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
  6,896 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  3,000 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  3,000 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  3,000 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
      .               /// let v = [1, 2, 3, 3, 5, 6, 7];
      .               /// let i = v.partition_point(|&x| x < 5);
      .               ///
      .               /// assert_eq!(i, 4);
      .               /// assert!(v[..i].iter().all(|&x| x < 5));
      .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
      .               /// ```
      .               #[stable(feature = "partition_point", since = "1.52.0")]
    102 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
      .               where
      .                   P: FnMut(&T) -> bool,
      .               {
      .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
    204 ( 0.00%)      }
      .           
      .               /// Removes the subslice corresponding to the given range
      .               /// and returns a reference to it.
      .               ///
      .               /// Returns `None` and does not modify the slice if the given
      .               /// range is out of bounds.
      .               ///
      .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

246,241 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
    6,504 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
       54 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
    4,670 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
      613 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
    4,142 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 78 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
    1,254 ( 0.00%)      }
        .           }
        .           
        .           pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
        .               let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        .               !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
-- line 146 ----------------------------------------
-- line 164 ----------------------------------------
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
        .           }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      552 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      244 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
1,211,613 ( 0.39%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   11,322 ( 0.00%)      BinOp(BinOpToken),
        .               BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   17,310 ( 0.01%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    5,340 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    4,712 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   11,380 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
    1,428 ( 0.00%)      Lifetime(Symbol),
        .           
      384 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
    4,428 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
   96,099 ( 0.03%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
    5,394 ( 0.00%)      pub kind: TokenKind,
        .               pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
    1,045 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    1,110 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    4,440 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    1,110 ( 0.00%)              _ => return None,
        .                   })
    1,110 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
      496 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      124 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
    3,891 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   15,455 ( 0.00%)          Token { kind, span }
    3,891 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    1,138 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    1,138 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
        .                   Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
    2,142 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
    2,142 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
       72 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
       36 ( 0.00%)              _ => self.span,
        .                   }
       36 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
    6,426 ( 0.00%)          !matches!(
    2,142 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
    2,142 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    8,760 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    1,752 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
        .               pub fn can_begin_expr(&self) -> bool {
        .                   match self.uninterpolate().kind {
        .                       Ident(name, is_raw)              =>
        .                           ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
-- line 365 ----------------------------------------
-- line 379 ----------------------------------------
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      496 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
      748 ( 0.00%)          match self.uninterpolate().kind {
      828 ( 0.00%)              Ident(name, is_raw)        =>
       92 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
        .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
      744 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
      620 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
        .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
      124 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
      124 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    1,080 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      368 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      248 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
      866 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  109,919 ( 0.04%)          match &self.kind {
    9,684 ( 0.00%)              Interpolated(nt) => match **nt {
    3,080 ( 0.00%)                  NtIdent(ident, is_raw) => {
    7,700 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
      866 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
    6,890 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
   67,708 ( 0.02%)          match token.kind {
  301,082 ( 0.10%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
   55,875 ( 0.02%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
      472 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
    2,516 ( 0.00%)          match token.kind {
    2,604 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
    3,304 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
      507 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      786 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    1,572 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      266 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
      532 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    4,756 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      168 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       60 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       30 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      240 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    3,066 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      336 ( 0.00%)      }
        .           
    5,652 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    7,592 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
      817 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    7,065 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   22,716 ( 0.01%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   45,432 ( 0.01%)      }
        .           
      196 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      191 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      191 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      191 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      196 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      392 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
      120 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  148,128 ( 0.05%)          match self.ident() {
      864 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
      150 ( 0.00%)      }
        .           
    4,110 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
    2,055 ( 0.00%)          let kind = match self.kind {
       30 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
        .                       Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
       56 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        .                       Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
       96 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        .                           BinOp(And) if op == And => AndAnd,
        .                           BinOp(Or) if op == Or => OrOr,
       16 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
        .                       Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
      108 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
      988 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
    3,699 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   52,893 ( 0.02%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
       52 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
      130 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
       52 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

  393,372 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
497,716 ( 0.16%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
373,287 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 34,072 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 51,108 ( 0.02%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
132,936 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 51,476 ( 0.02%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
102,952 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  4,118 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    360 ( 0.00%)              self.file = file;
    231 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  3,000 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  6,394 ( 0.00%)          self.line_number = line_index + 1;
  9,212 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 26,234 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    852 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    426 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,130 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,982 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,704 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
102,438 ( 0.03%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 58,536 ( 0.02%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 14,634 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 14,634 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 23,712 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 23,200 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 69,600 ( 0.02%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 23,200 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 11,600 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 11,600 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 11,600 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 46,400 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  5,556 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 24,272 ( 0.01%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    170 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    204 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
    136 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  9,000 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  9,000 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 15,170 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  6,708 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    512 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    768 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    542 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
  1,084 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  2,168 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  6,068 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  3,034 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  6,068 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  3,034 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 15,170 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  9,102 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  9,102 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  9,102 ( 0.00%)          Some((
  3,034 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  3,034 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
131,706 ( 0.04%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
152,259 ( 0.05%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 13,416 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  5,668 ( 0.00%)              if idx != avoid_idx
  2,331 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
    170 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
     34 ( 0.00%)          if !self.source_map.files().is_empty() {
     68 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
    272 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
    170 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

207,488 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    8,107 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   60,772 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       25 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
  221,117 ( 0.07%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   71,366 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    6,460 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
6,373,373 ( 2.06%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
      218 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  147,258 ( 0.05%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    6,134 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      660 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      172 ( 0.00%)                  while let Some(x) = self.next() {
    3,850 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   44,012 ( 0.01%)                  while let Some(x) = self.next() {
  501,106 ( 0.16%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    2,992 ( 0.00%)                  while let Some(x) = self.next() {
   17,075 ( 0.01%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    1,424 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    7,169 ( 0.00%)                  while let Some(x) = self.next() {
   25,340 ( 0.01%)                      if let Some(y) = f(x) {
    3,086 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,470 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   27,372 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    4,815 ( 0.00%)                  while let Some(x) = self.next_back() {
   58,767 ( 0.02%)                      i -= 1;
   49,080 ( 0.02%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    7,732 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       26 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  101,931 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,004,527 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,362 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  8,840 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    254 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    158 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    139 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    237 ( 0.00%)      pub prev_token: Token,
    199 ( 0.00%)      pub capture_cfg: bool,
    458 ( 0.00%)      restrictions: Restrictions,
    278 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    278 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    278 ( 0.00%)      unmatched_angle_bracket_count: u32,
    417 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    139 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    139 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    592 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    556 ( 0.00%)      capturing: Capturing,
    139 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,736 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 23,177 ( 0.01%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  5,141 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,711 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 10,743 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,547 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  5,094 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,695 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  3,309 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
213,420 ( 0.07%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
104,408 ( 0.03%)              let (tree, spacing) = if !self.frame.open_delim {
  2,422 ( 0.00%)                  self.frame.open_delim = true;
 12,110 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
202,623 ( 0.07%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  9,942 ( 0.00%)              } else if !self.frame.close_delim {
  2,353 ( 0.00%)                  self.frame.close_delim = true;
 11,765 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  4,418 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 28,717 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  7,362 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 39,996 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
142,280 ( 0.05%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
142,280 ( 0.05%)      }
      .           
 29,880 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  9,382 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
    627 ( 0.00%)              (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 13,895 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
 48,985 ( 0.02%)          for ch in data.as_str().chars() {
      .                       count = match ch {
      .                           '"' => 1,
     10 ( 0.00%)                  '#' if count > 0 => count + 1,
      .                           _ => 0,
      .                       };
      .                       num_of_hashes = cmp::max(num_of_hashes, count);
      .                   }
      .           
    836 ( 0.00%)          let delim_span = DelimSpan::from_single(sp);
  1,045 ( 0.00%)          let body = TokenTree::Delimited(
      .                       delim_span,
      .                       token::Bracket,
  2,508 ( 0.00%)              [
  1,463 ( 0.00%)                  TokenTree::token(token::Ident(sym::doc, false), sp),
    836 ( 0.00%)                  TokenTree::token(token::Eq, sp),
  1,672 ( 0.00%)                  TokenTree::token(TokenKind::lit(token::StrRaw(num_of_hashes), data, None), sp),
      .                       ]
      .                       .iter()
      .                       .cloned()
      .                       .collect::<TokenStream>(),
    209 ( 0.00%)          );
      .           
      .                   self.stack.push(mem::replace(
      .                       &mut self.frame,
      .                       TokenCursorFrame::new(
      .                           delim_span,
      .                           token::NoDelim,
    209 ( 0.00%)                  if attr_style == AttrStyle::Inner {
      .                               [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           } else {
  2,508 ( 0.00%)                      [TokenTree::token(token::Pound, sp), body]
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
    627 ( 0.00%)          self.next()
 26,892 ( 0.01%)      }
      .           }
      .           
 10,120 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  8,096 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    382 ( 0.00%)      Some(match token.kind {
    764 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    764 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    764 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  1,337 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    382 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  1,337 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    955 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  4,746 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    339 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    678 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 10,509 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    339 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    339 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  2,034 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    678 ( 0.00%)          parser.bump();
      .           
      .                   parser
  3,051 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 91,134 ( 0.03%)              let (mut next, spacing) = if self.desugar_doc_comments {
 11,952 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 36,603 ( 0.01%)                  self.token_cursor.next()
      .                       };
 60,756 ( 0.02%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 15,189 ( 0.00%)              self.token_cursor.break_last_token = false;
 60,756 ( 0.02%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,360 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 51,426 ( 0.02%)              if matches!(
 30,378 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 59,084 ( 0.02%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 16,812 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  1,868 ( 0.00%)          if self.expected_tokens.is_empty() {
  3,714 ( 0.00%)              if self.token == *t {
  3,095 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 14,988 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 28,020 ( 0.01%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 16,428 ( 0.01%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  2,738 ( 0.00%)          if edible.contains(&self.token.kind) {
  3,747 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 20,535 ( 0.01%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  9,270 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  6,954 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 16,226 ( 0.01%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  2,318 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 13,908 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  9,272 ( 0.00%)          self.bump();
      .                   Ok(ident)
 23,180 ( 0.01%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
207,018 ( 0.07%)      fn check(&mut self, tok: &TokenKind) -> bool {
 90,496 ( 0.03%)          let is_present = self.token == *tok;
 60,888 ( 0.02%)          if !is_present {
132,615 ( 0.04%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
207,018 ( 0.07%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
 44,424 ( 0.01%)          let is_present = self.check(tok);
 29,170 ( 0.01%)          if is_present {
  4,889 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
      .               }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
 11,285 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  2,353 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 74,159 ( 0.02%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 17,350 ( 0.01%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 13,124 ( 0.00%)          if self.check_keyword(kw) {
  1,656 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 17,350 ( 0.01%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  3,988 ( 0.00%)          if self.token.is_keyword(kw) {
    796 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    650 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    520 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  5,432 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  2,716 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  6,111 ( 0.00%)      }
      .           
 14,682 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  5,194 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  3,692 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 14,682 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,820 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  4,988 ( 0.00%)      fn check_path(&mut self) -> bool {
 10,270 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  6,235 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    992 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    992 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,764 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    980 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,764 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  2,928 ( 0.00%)          self.check_or_expected(
  1,464 ( 0.00%)              self.token.is_like_plus(),
  1,464 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 23,088 ( 0.01%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 13,468 ( 0.00%)          if self.token.kind == expected {
  1,628 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  5,550 ( 0.00%)          match self.token.kind.break_two_token_op() {
      .                       Some((first, second)) if first == expected => {
      .                           let first_span = self.sess.source_map().start_point(self.token.span);
      .                           let second_span = self.token.span.with_lo(first_span.hi());
      .                           self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
      .                           // and `next_tok` will set this field to `None`
      .                           self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
      .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  3,330 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 21,756 ( 0.01%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
     64 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
  1,536 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
      .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
  1,592 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  4,576 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  2,984 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  1,336 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
  1,546 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
  1,592 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
  1,332 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    666 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    444 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  4,590 ( 0.00%)              TokenExpectType::Expect => self.check(k),
      .                       TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  4,258 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  2,616 ( 0.00%)              if let Some(ref t) = sep.sep {
  3,210 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  2,632 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  1,564 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  1,260 ( 0.00%)              let t = f(self)?;
  1,876 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,624 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,850 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  1,200 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    944 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    680 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  2,192 ( 0.00%)          Ok((val, trailing))
    960 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    804 ( 0.00%)          self.expect(bra)?;
    960 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    406 ( 0.00%)              &token::OpenDelim(delim),
    692 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
192,023 ( 0.06%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 88,626 ( 0.03%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 59,084 ( 0.02%)          self.prev_token = mem::replace(&mut self.token, next_token);
 14,771 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 14,771 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
118,168 ( 0.04%)      pub fn bump(&mut self) {
 59,084 ( 0.02%)          let next_token = self.next_tok(self.token.span);
 88,626 ( 0.03%)          self.bump_with(next_token);
118,168 ( 0.04%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  1,376 ( 0.00%)          if dist == 0 {
    508 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  3,365 ( 0.00%)          let frame = &self.token_cursor.frame;
  3,653 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  9,718 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 12,916 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 16,256 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  5,756 ( 0.00%)                      Some(tree) => match tree {
  2,516 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  2,718 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  2,744 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    505 ( 0.00%)          let mut token = Token::dummy();
      .                   while i < dist {
  3,193 ( 0.00%)              token = cursor.next().0;
  1,497 ( 0.00%)              if matches!(
    902 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
      .                       i += 1;
      .                   }
     12 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  5,148 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  1,792 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  5,148 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    376 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
    160 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  1,504 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  3,960 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  1,223 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
      .                       Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  6,930 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    512 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
-- line 1126 ----------------------------------------
-- line 1135 ----------------------------------------
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
      .                       self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    126 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    978 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  3,312 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  2,944 ( 0.00%)          Ok(
  2,496 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    492 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    492 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    856 ( 0.00%)                  match self.parse_token_tree() {
  1,070 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    428 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    308 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     32 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     32 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     32 ( 0.00%)                      let span = expr.span;
      .           
    160 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    288 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  2,576 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,656 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    536 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  1,888 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    708 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 11,868 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  9,052 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    472 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    472 ( 0.00%)                  let span = frame.span;
    236 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    472 ( 0.00%)                  self.bump();
  1,180 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
      .                           self.bump();
      .                           TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  1,652 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    426 ( 0.00%)          let old = self.restrictions;
    576 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    852 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  3,720 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,325 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,185 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  4,570 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    914 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    457 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,828 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    433 ( 0.00%)              return Ok(Visibility {
  1,299 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     24 ( 0.00%)          let lo = self.prev_token.span;
      .           
    120 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
     72 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  4,113 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    128 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
    320 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
     32 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
    320 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 17,544 ( 0.01%)      fn is_import_coupler(&mut self) -> bool {
  8,772 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  1,548 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 19,017 ( 0.01%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  3,824 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,912 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,912 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  3,824 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

105,145 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs
--------------------------------------------------------------------------------
Ir              

-- line 16 ----------------------------------------
     .           use std::mem;
     .           
     .           // A Marker adds the given mark to the syntax context.
     .           struct Marker(LocalExpnId, Transparency);
     .           
     .           impl MutVisitor for Marker {
     .               const VISIT_TOKENS: bool = true;
     .           
70,893 ( 0.02%)      fn visit_span(&mut self, span: &mut Span) {
47,262 ( 0.02%)          *span = span.apply_mark(self.0.to_expn_id(), self.1)
63,016 ( 0.02%)      }
     .           }
     .           
     .           /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`).
     .           enum Frame {
     .               Delimited { forest: Lrc<mbe::Delimited>, idx: usize, span: DelimSpan },
     .               Sequence { forest: Lrc<mbe::SequenceRepetition>, idx: usize, sep: Option<Token> },
     .           }
     .           
     .           impl Frame {
     .               /// Construct a new frame around the delimited set of tokens.
     .               fn new(tts: Vec<mbe::TokenTree>) -> Frame {
     .                   let forest = Lrc::new(mbe::Delimited { delim: token::NoDelim, tts });
   288 ( 0.00%)          Frame::Delimited { forest, idx: 0, span: DelimSpan::dummy() }
     .               }
     .           }
     .           
     .           impl Iterator for Frame {
     .               type Item = mbe::TokenTree;
     .           
     .               fn next(&mut self) -> Option<mbe::TokenTree> {
31,780 ( 0.01%)          match *self {
15,610 ( 0.01%)              Frame::Delimited { ref forest, ref mut idx, .. } => {
23,415 ( 0.01%)                  *idx += 1;
     .                           forest.tts.get(*idx - 1).cloned()
     .                       }
   420 ( 0.00%)              Frame::Sequence { ref forest, ref mut idx, .. } => {
   420 ( 0.00%)                  *idx += 1;
     .                           forest.tts.get(*idx - 1).cloned()
     .                       }
     .                   }
     .               }
     .           }
     .           
     .           /// This can do Macro-By-Example transcription.
     .           /// - `interp` is a map of meta-variables to the tokens (non-terminals) they matched in the
-- line 61 ----------------------------------------
-- line 72 ----------------------------------------
     .           /// foo!(bar);
     .           /// ```
     .           ///
     .           /// `interp` would contain `$id => bar` and `src` would contain `println!("{}", stringify!($id));`.
     .           ///
     .           /// `transcribe` would return a `TokenStream` containing `println!("{}", stringify!(bar));`.
     .           ///
     .           /// Along the way, we do some additional error checking.
   360 ( 0.00%)  pub(super) fn transcribe<'a>(
     .               cx: &ExtCtxt<'a>,
     .               interp: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
     .               src: Vec<mbe::TokenTree>,
     .               transparency: Transparency,
     .           ) -> PResult<'a, TokenStream> {
     .               // Nothing for us to transcribe...
    36 ( 0.00%)      if src.is_empty() {
     .                   return Ok(TokenStream::default());
     .               }
     .           
     .               // We descend into the RHS (`src`), expanding things as we go. This stack contains the things
     .               // we have yet to expand/are still expanding. We start the stack off with the whole RHS.
   288 ( 0.00%)      let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];
     .           
     .               // As we descend in the RHS, we will need to be able to match nested sequences of matchers.
     .               // `repeats` keeps track of where we are in matching at each level, with the last element being
     .               // the most deeply nested sequence. This is used as a stack.
     .               let mut repeats = Vec::new();
     .           
     .               // `result` contains resulting token stream from the TokenTree we just finished processing. At
     .               // the end, this will contain the full result of transcription, but at arbitrary points during
-- line 101 ----------------------------------------
-- line 105 ----------------------------------------
     .               // `result_stack` and clear `results`. We will then produce the results of transcribing the
     .               // TokenTree into `results`. Then, as we unwind back out of the `TokenTree`, we will pop the
     .               // `result_stack` and append `results` too it to produce the new `results` up to that point.
     .               //
     .               // Thus, if we try to pop the `result_stack` and it is empty, we have reached the top-level
     .               // again, and we are done transcribing.
     .               let mut result: Vec<TreeAndSpacing> = Vec::new();
     .               let mut result_stack = Vec::new();
   144 ( 0.00%)      let mut marker = Marker(cx.current_expansion.id, transparency);
     .           
     .               loop {
     .                   // Look at the last frame on the stack.
     .                   // If it still has a TokenTree we have not looked at yet, use that tree.
56,002 ( 0.02%)          let Some(tree) = stack.last_mut().unwrap().next() else {
     .                       // This else-case never produces a value for `tree` (it `continue`s or `return`s).
     .           
     .                       // Otherwise, if we have just reached the end of a sequence and we can keep repeating,
     .                       // go back to the beginning of the sequence.
 4,280 ( 0.00%)              if let Frame::Sequence { idx, sep, .. } = stack.last_mut().unwrap() {
     .                           let (repeat_idx, repeat_len) = repeats.last_mut().unwrap();
   112 ( 0.00%)                  *repeat_idx += 1;
    28 ( 0.00%)                  if repeat_idx < repeat_len {
    24 ( 0.00%)                      *idx = 0;
    48 ( 0.00%)                      if let Some(sep) = sep {
     .                                   result.push(TokenTree::Token(sep.clone()).into());
     .                               }
     .                               continue;
     .                           }
     .                       }
     .           
     .                       // We are done with the top of the stack. Pop it. Depending on what it was, we do
     .                       // different things. Note that the outermost item must be the delimited, wrapped RHS
     .                       // that was passed in originally to `transcribe`.
 2,092 ( 0.00%)              match stack.pop().unwrap() {
     .                           // Done with a sequence. Pop from repeats.
     .                           Frame::Sequence { .. } => {
     .                               repeats.pop();
     .                           }
     .           
     .                           // We are done processing a Delimited. If this is the top-level delimited, we are
     .                           // done. Otherwise, we unwind the result_stack to append what we have produced to
     .                           // any previous results.
 4,168 ( 0.00%)                  Frame::Delimited { forest, span, .. } => {
 1,042 ( 0.00%)                      if result_stack.is_empty() {
     .                                   // No results left to compute! We are back at the top-level.
   216 ( 0.00%)                          return Ok(TokenStream::new(result));
     .                               }
     .           
     .                               // Step back into the parent Delimited.
13,078 ( 0.00%)                      let tree = TokenTree::Delimited(span, forest.delim, TokenStream::new(result));
 3,018 ( 0.00%)                      result = result_stack.pop().unwrap();
     .                               result.push(tree.into());
     .                           }
 2,084 ( 0.00%)              }
     .                       continue;
     .                   };
     .           
     .                   // At this point, we know we are in the middle of a TokenTree (the last one on `stack`).
     .                   // `tree` contains the next `TokenTree` to be processed.
41,250 ( 0.01%)          match tree {
     .                       // We are descending into a sequence. We first make sure that the matchers in the RHS
     .                       // and the matches in `interp` have the same shape. Otherwise, either the caller or the
     .                       // macro writer has made a mistake.
    16 ( 0.00%)              seq @ mbe::TokenTree::Sequence(..) => {
    28 ( 0.00%)                  match lockstep_iter_size(&seq, interp, &repeats) {
     .                               LockstepIterSize::Unconstrained => {
     .                                   return Err(cx.struct_span_err(
     .                                       seq.span(), /* blame macro writer */
     .                                       "attempted to repeat an expression containing no syntax variables \
     .                                        matched as repeating at this depth",
     .                                   ));
     .                               }
     .           
-- line 177 ----------------------------------------
-- line 181 ----------------------------------------
     .                                   // sequence, but they come from different sequence matchers and repeat
     .                                   // different amounts.
     .                                   return Err(cx.struct_span_err(seq.span(), &msg));
     .                               }
     .           
     .                               LockstepIterSize::Constraint(len, _) => {
     .                                   // We do this to avoid an extra clone above. We know that this is a
     .                                   // sequence already.
    28 ( 0.00%)                          let mbe::TokenTree::Sequence(sp, seq) = seq else {
     .                                       unreachable!()
     .                                   };
     .           
     .                                   // Is the repetition empty?
     8 ( 0.00%)                          if len == 0 {
     .                                       if seq.kleene.op == mbe::KleeneOp::OneOrMore {
     .                                           // FIXME: this really ought to be caught at macro definition
     .                                           // time... It happens when the Kleene operator in the matcher and
     .                                           // the body for the same meta-variable do not match.
     .                                           return Err(cx.struct_span_err(
     .                                               sp.entire(),
     .                                               "this must repeat at least once",
     .                                           ));
-- line 202 ----------------------------------------
-- line 204 ----------------------------------------
     .                                   } else {
     .                                       // 0 is the initial counter (we have done 0 repretitions so far). `len`
     .                                       // is the total number of repetitions we should generate.
     .                                       repeats.push((0, len));
     .           
     .                                       // The first time we encounter the sequence we push it to the stack. It
     .                                       // then gets reused (see the beginning of the loop) until we are done
     .                                       // repeating.
    36 ( 0.00%)                              stack.push(Frame::Sequence {
     .                                           idx: 0,
     .                                           sep: seq.separator.clone(),
     .                                           forest: seq,
     .                                       });
     .                                   }
     .                               }
     .                           }
     .                       }
     .           
     .                       // Replace the meta-var with the matched token tree from the invocation.
 1,344 ( 0.00%)              mbe::TokenTree::MetaVar(mut sp, mut orignal_ident) => {
     .                           // Find the matched nonterminal from the macro invocation, and use it to replace
     .                           // the meta-var.
   896 ( 0.00%)                  let ident = MacroRulesNormalizedIdent::new(orignal_ident);
 1,344 ( 0.00%)                  if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {
   672 ( 0.00%)                      if let MatchedNonterminal(nt) = cur_matched {
   672 ( 0.00%)                          let token = if let NtTT(tt) = &**nt {
     .                                       // `tt`s are emitted into the output stream directly as "raw tokens",
     .                                       // without wrapping them into groups.
     .                                       tt.clone()
     .                                   } else {
     .                                       // Other variables are emitted into the output stream as groups with
     .                                       // `Delimiter::None` to maintain parsing priorities.
     .                                       // `Interpolated` is currenty used for such groups in rustc parser.
   672 ( 0.00%)                              marker.visit_span(&mut sp);
 1,344 ( 0.00%)                              TokenTree::token(token::Interpolated(nt.clone()), sp)
     .                                   };
     .                                   result.push(token.into());
     .                               } else {
     .                                   // We were unable to descend far enough. This is an error.
     .                                   return Err(cx.struct_span_err(
     .                                       sp, /* blame the macro writer */
     .                                       &format!("variable '{}' is still repeating at this depth", ident),
     .                                   ));
-- line 246 ----------------------------------------
-- line 255 ----------------------------------------
     .                           }
     .                       }
     .           
     .                       // If we are entering a new delimiter, we push its contents to the `stack` to be
     .                       // processed, and we push all of the currently produced results to the `result_stack`.
     .                       // We will produce all of the results of the inside of the `Delimited` and then we will
     .                       // jump back out of the Delimited, pop the result_stack and add the new results back to
     .                       // the previous results (from outside the Delimited).
 6,036 ( 0.00%)              mbe::TokenTree::Delimited(mut span, delimited) => {
     .                           mut_visit::visit_delim_span(&mut span, &mut marker);
 6,036 ( 0.00%)                  stack.push(Frame::Delimited { forest: delimited, idx: 0, span });
     .                           result_stack.push(mem::take(&mut result));
     .                       }
     .           
     .                       // Nothing much to do here. Just push the token to the result, being careful to
     .                       // preserve syntax context.
     .                       mbe::TokenTree::Token(token) => {
33,846 ( 0.01%)                  let mut tt = TokenTree::Token(token);
16,923 ( 0.01%)                  mut_visit::visit_tt(&mut tt, &mut marker);
     .                           result.push(tt.into());
     .                       }
     .           
     .                       // There should be no meta-var declarations in the invocation of a macro.
     .                       mbe::TokenTree::MetaVarDecl(..) => panic!("unexpected `TokenTree::MetaVarDecl"),
     .                   }
     .               }
   432 ( 0.00%)  }
     .           
     .           /// Lookup the meta-var named `ident` and return the matched token tree from the invocation using
     .           /// the set of matches `interpolations`.
     .           ///
     .           /// See the definition of `repeats` in the `transcribe` function. `repeats` is used to descend
     .           /// into the right place in nested matchers. If we attempt to descend too far, the macro writer has
     .           /// made a mistake, and we return `None`.
 2,052 ( 0.00%)  fn lookup_cur_matched<'a>(
     .               ident: MacroRulesNormalizedIdent,
     .               interpolations: &'a FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
     .               repeats: &[(usize, usize)],
     .           ) -> Option<&'a NamedMatch> {
     .               interpolations.get(&ident).map(|matched| {
     .                   let mut matched = matched;
     .                   for &(idx, _) in repeats {
   168 ( 0.00%)              match matched {
     .                           MatchedNonterminal(_) => break,
    28 ( 0.00%)                  MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),
     .                       }
     .                   }
     .           
     .                   matched
     .               })
 2,052 ( 0.00%)  }
     .           
     .           /// An accumulator over a TokenTree to be used with `fold`. During transcription, we need to make
     .           /// sure that the size of each sequence and all of its nested sequences are the same as the sizes
     .           /// of all the matched (nested) sequences in the macro invocation. If they don't match, somebody
     .           /// has made a mistake (either the macro writer or caller).
     .           #[derive(Clone)]
     .           enum LockstepIterSize {
     .               /// No constraints on length of matcher. This is true for any TokenTree variants except a
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
     .               Contradiction(String),
     .           }
     .           
     .           impl LockstepIterSize {
     .               /// Find incompatibilities in matcher/invocation sizes.
     .               /// - `Unconstrained` is compatible with everything.
     .               /// - `Contradiction` is incompatible with everything.
     .               /// - `Constraint(len)` is only compatible with other constraints of the same length.
   396 ( 0.00%)      fn with(self, other: LockstepIterSize) -> LockstepIterSize {
   188 ( 0.00%)          match self {
     .                       LockstepIterSize::Unconstrained => other,
     .                       LockstepIterSize::Contradiction(_) => self,
   196 ( 0.00%)              LockstepIterSize::Constraint(l_len, ref l_id) => match other {
     .                           LockstepIterSize::Unconstrained => self,
     .                           LockstepIterSize::Contradiction(_) => other,
     .                           LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,
     .                           LockstepIterSize::Constraint(r_len, r_id) => {
     .                               let msg = format!(
     .                                   "meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}",
     .                                   l_id,
     .                                   l_len,
-- line 342 ----------------------------------------
-- line 344 ----------------------------------------
     .                                   r_id,
     .                                   r_len,
     .                                   pluralize!(r_len),
     .                               );
     .                               LockstepIterSize::Contradiction(msg)
     .                           }
     .                       },
     .                   }
   364 ( 0.00%)      }
     .           }
     .           
     .           /// Given a `tree`, make sure that all sequences have the same length as the matches for the
     .           /// appropriate meta-vars in `interpolations`.
     .           ///
     .           /// Note that if `repeats` does not match the exact correct depth of a meta-var,
     .           /// `lookup_cur_matched` will return `None`, which is why this still works even in the presence of
     .           /// multiple nested matcher sequences.
   480 ( 0.00%)  fn lockstep_iter_size(
     .               tree: &mbe::TokenTree,
     .               interpolations: &FxHashMap<MacroRulesNormalizedIdent, NamedMatch>,
     .               repeats: &[(usize, usize)],
     .           ) -> LockstepIterSize {
     .               use mbe::TokenTree;
   336 ( 0.00%)      match *tree {
     .                   TokenTree::Delimited(_, ref delimed) => {
     4 ( 0.00%)              delimed.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
   384 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
     .                       })
     .                   }
     .                   TokenTree::Sequence(_, ref seq) => {
     4 ( 0.00%)              seq.tts.iter().fold(LockstepIterSize::Unconstrained, |size, tt| {
   228 ( 0.00%)                  size.with(lockstep_iter_size(tt, interpolations, repeats))
     .                       })
     .                   }
     .                   TokenTree::MetaVar(_, name) | TokenTree::MetaVarDecl(_, name, _) => {
     8 ( 0.00%)              let name = MacroRulesNormalizedIdent::new(name);
    36 ( 0.00%)              match lookup_cur_matched(name, interpolations, repeats) {
     8 ( 0.00%)                  Some(matched) => match matched {
     .                               MatchedNonterminal(_) => LockstepIterSize::Unconstrained,
    24 ( 0.00%)                      MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),
     .                           },
     .                           _ => LockstepIterSize::Unconstrained,
     .                       }
     .                   }
     .                   TokenTree::Token(..) => LockstepIterSize::Unconstrained,
     .               }
   384 ( 0.00%)  }

81,635 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/mbe/transcribe.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    7,605 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  146,875 ( 0.05%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
        7 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      448 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  126,162 ( 0.04%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,523 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       25 ( 0.00%)          self.position += bytes;
       25 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      600 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      508 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
    8,896 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   48,780 ( 0.02%)          read_leb128!(self, read_u32_leb128)
   17,792 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.18%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.03%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.05%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,879,068 ( 0.61%)          let value = self.data[self.position];
  350,227 ( 0.11%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   63,287 ( 0.02%)      fn read_usize(&mut self) -> usize {
   63,287 ( 0.02%)          read_leb128!(self, read_usize_leb128)
  126,574 ( 0.04%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    3,759 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    6,309 ( 0.00%)          let len = self.read_usize();
   38,008 ( 0.01%)          let sentinel = self.data[self.position + len];
    9,502 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   23,755 ( 0.01%)          self.position += len + 1;
    4,674 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       82 ( 0.00%)          let start = self.position;
      664 ( 0.00%)          self.position += s.len();
       82 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  267,398 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
565,144 ( 0.18%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    130 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 38,536 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
110,529 ( 0.04%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 94,445 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 27,738 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
370,599 ( 0.12%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  1,359 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,906 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 10,106 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  2,075 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  2,726 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 97,205 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  550,519 ( 0.18%)          Vec { buf: RawVec::NEW, len: 0 }
        8 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  174,376 ( 0.06%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   14,116 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   49,948 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   38,410 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,143 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    3,409 ( 0.00%)          if self.capacity() > self.len {
    2,728 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      713 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   75,122 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   52,374 ( 0.02%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   33,138 ( 0.01%)              self.len = len;
      773 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   90,146 ( 0.03%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  388,839 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  742,973 ( 0.24%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   91,864 ( 0.03%)          self.len = new_len;
    1,342 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      301 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       43 ( 0.00%)          let len = self.len();
      190 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      558 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      837 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      558 ( 0.00%)              self.set_len(len + 1);
        .                   }
      258 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      162 ( 0.00%)          let len = self.len();
      497 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    2,416 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      324 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      162 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   19,724 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      128 ( 0.00%)          self.retain_mut(|elem| f(elem));
   19,680 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,577 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,450 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
      966 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   26,097 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    5,883 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
        .                               g.processed_len += 1;
        .                               g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        .                               unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
-- line 1544 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
      544 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      576 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      564 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      192 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       20 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,692,424 ( 0.55%)          if self.len == self.buf.capacity() {
   82,177 ( 0.03%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   36,236 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,906,036 ( 0.62%)              self.len += 1;
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  146,837 ( 0.05%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  117,600 ( 0.04%)                  self.len -= 1;
   12,843 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      392 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      336 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    3,481 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   50,258 ( 0.02%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    3,693 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       62 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      791 ( 0.00%)              Drain {
        .                           tail_start: end,
       62 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  133,528 ( 0.04%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   57,200 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      608 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      496 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,190 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      690 ( 0.00%)          let len = self.len();
    1,380 ( 0.00%)          if new_len > len {
    5,337 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,500 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       18 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      600 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       60 ( 0.00%)          let len = self.len();
        .           
      180 ( 0.00%)          if new_len > len {
    1,809 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   27,132 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,831 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   51,886 ( 0.02%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   21,403 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    6,480 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   42,320 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    7,020 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  615,170 ( 0.20%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  109,841 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   44,141 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   57,348 ( 0.02%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   14,850 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  271,475 ( 0.09%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  103,287 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   41,891 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,200 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      720 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  200,156 ( 0.06%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      720 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   92,223 ( 0.03%)          while let Some(element) = iterator.next() {
    5,291 ( 0.00%)              let len = self.len();
   50,859 ( 0.02%)              if len == self.capacity() {
      296 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   46,863 ( 0.02%)                  self.set_len(len + 1);
        .                       }
        .                   }
      564 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    1,232 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      880 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    3,504 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  145,991 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   59,601 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  171,174 ( 0.06%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  211,477 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs
--------------------------------------------------------------------------------
Ir               

-- line 51 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   let len = self.iter.len();
      .                   // `(len + 3)` can't overflow, because we know that the `slice::Iter`
      .                   // belongs to a slice in memory which has a maximum length of
      .                   // `isize::MAX` (that's well below `usize::MAX`).
     86 ( 0.00%)          ((len + 3) / 4, Some(len))
      .               }
      .           
      .               #[inline]
      .               fn last(mut self) -> Option<char> {
      .                   // No need to go through the entire string.
      .                   self.next_back()
      .               }
      .           }
-- line 67 ----------------------------------------
-- line 138 ----------------------------------------
      .               #[inline]
      .               fn next(&mut self) -> Option<(usize, char)> {
      .                   let pre_len = self.iter.iter.len();
      .                   match self.iter.next() {
      .                       None => None,
      .                       Some(ch) => {
      .                           let index = self.front_offset;
      .                           let len = self.iter.iter.len();
419,721 ( 0.14%)                  self.front_offset += pre_len - len;
      .                           Some((index, ch))
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn count(self) -> usize {
      .                   self.iter.count()
-- line 154 ----------------------------------------
-- line 166 ----------------------------------------
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<'a> DoubleEndedIterator for CharIndices<'a> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<(usize, char)> {
      .                   self.iter.next_back().map(|ch| {
     12 ( 0.00%)              let index = self.front_offset + self.iter.iter.len();
      .                       (index, ch)
      .                   })
      .               }
      .           }
      .           
      .           #[stable(feature = "fused", since = "1.26.0")]
      .           impl FusedIterator for CharIndices<'_> {}
      .           
-- line 182 ----------------------------------------
-- line 450 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   $(#[$common_stability_attribute])*
      .                   impl<'a, P: Pattern<'a>> Iterator for $forward_iterator<'a, P> {
      .                       type Item = $iterty;
      .           
      .                       #[inline]
    934 ( 0.00%)              fn next(&mut self) -> Option<$iterty> {
      .                           self.0.next()
  1,340 ( 0.00%)              }
      .                   }
      .           
      .                   $(#[$common_stability_attribute])*
      .                   impl<'a, P> Clone for $forward_iterator<'a, P>
      .                   where
      .                       P: Pattern<'a, Searcher: Clone>,
      .                   {
      .                       fn clone(&self) -> Self {
     44 ( 0.00%)                  $forward_iterator(self.0.clone())
      .                       }
      .                   }
      .           
      .                   $(#[$reverse_iterator_attribute])*
      .                   $(#[$common_stability_attribute])*
      .                   pub struct $reverse_iterator<'a, P: Pattern<'a>>(pub(super) $internal_iterator<'a, P>);
      .           
      .                   $(#[$common_stability_attribute])*
-- line 477 ----------------------------------------
-- line 582 ----------------------------------------
      .                       .field("finished", &self.finished)
      .                       .finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> SplitInternal<'a, P> {
      .               #[inline]
      .               fn get_end(&mut self) -> Option<&'a str> {
     59 ( 0.00%)          if !self.finished && (self.allow_trailing_empty || self.end - self.start > 0) {
     28 ( 0.00%)              self.finished = true;
      .                       // SAFETY: `self.start` and `self.end` always lie on unicode boundaries.
      .                       unsafe {
     52 ( 0.00%)                  let string = self.matcher.haystack().get_unchecked(self.start..self.end);
      .                           Some(string)
      .                       }
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<&'a str> {
    290 ( 0.00%)          if self.finished {
      .                       return None;
      .                   }
      .           
     74 ( 0.00%)          let haystack = self.matcher.haystack();
    618 ( 0.00%)          match self.matcher.next_match() {
      .                       // SAFETY: `Searcher` guarantees that `a` and `b` lie on unicode boundaries.
    214 ( 0.00%)              Some((a, b)) => unsafe {
    253 ( 0.00%)                  let elt = haystack.get_unchecked(self.start..a);
    126 ( 0.00%)                  self.start = b;
      .                           Some(elt)
      .                       },
      .                       None => self.get_end(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next_inclusive(&mut self) -> Option<&'a str> {
-- line 621 ----------------------------------------
-- line 870 ----------------------------------------
      .                       .field("count", &self.count)
      .                       .finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> SplitNInternal<'a, P> {
      .               #[inline]
      .               fn next(&mut self) -> Option<&'a str> {
    310 ( 0.00%)          match self.count {
      .                       0 => None,
      .                       1 => {
     27 ( 0.00%)                  self.count = 0;
      .                           self.iter.get_end()
      .                       }
      .                       _ => {
     70 ( 0.00%)                  self.count -= 1;
      .                           self.iter.next()
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn next_back(&mut self) -> Option<&'a str>
      .               where
-- line 893 ----------------------------------------
-- line 986 ----------------------------------------
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple("MatchIndicesInternal").field(&self.0).finish()
      .               }
      .           }
      .           
      .           impl<'a, P: Pattern<'a>> MatchIndicesInternal<'a, P> {
      .               #[inline]
      .               fn next(&mut self) -> Option<(usize, &'a str)> {
     35 ( 0.00%)          self.0
      .                       .next_match()
      .                       // SAFETY: `Searcher` guarantees that `start` and `end` lie on unicode boundaries.
      .                       .map(|(start, end)| unsafe { (start, self.0.haystack().get_unchecked(start..end)) })
      .               }
      .           
      .               #[inline]
      .               fn next_back(&mut self) -> Option<(usize, &'a str)>
      .               where
-- line 1002 ----------------------------------------
-- line 1204 ----------------------------------------
      .           #[stable(feature = "split_inclusive", since = "1.51.0")]
      .           pub struct SplitInclusive<'a, P: Pattern<'a>>(pub(super) SplitInternal<'a, P>);
      .           
      .           #[stable(feature = "split_whitespace", since = "1.1.0")]
      .           impl<'a> Iterator for SplitWhitespace<'a> {
      .               type Item = &'a str;
      .           
      .               #[inline]
     30 ( 0.00%)      fn next(&mut self) -> Option<&'a str> {
      .                   self.inner.next()
     18 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           
      .               #[inline]
      .               fn last(mut self) -> Option<&'a str> {
-- line 1222 ----------------------------------------

  1,002 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
176,928 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
110,580 ( 0.04%)              .intern(kind, |kind| {
  3,718 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
  7,436 ( 0.00%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
199,044 ( 0.06%)      }
      .           
      .               #[inline(never)]
129,712 ( 0.04%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
113,498 ( 0.04%)              .intern(kind, |kind| {
  9,948 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
145,926 ( 0.05%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 22,256 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 16,468 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  3,412 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  3,412 ( 0.00%)          self.data.get(&id.local_id)
 13,176 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    720 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    480 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  3,468 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 41,038 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  3,468 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  3,756 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  2,504 ( 0.00%)          match *qpath {
  7,416 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
     96 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  6,260 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    120 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      4 ( 0.00%)      }
      .           
     28 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
     60 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
     56 ( 0.00%)      }
      .           
     64 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
     64 ( 0.00%)      }
      .           
  1,392 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  1,392 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  1,392 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      .                   LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      .               }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      .               }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    600 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    300 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      8 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      4 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  3,884 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  1,942 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  6,448 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  3,224 ( 0.00%)      }
      .           
 21,456 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  3,576 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 17,880 ( 0.01%)      }
      .           
  4,262 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  4,262 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
  8,524 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    480 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    240 ( 0.00%)      }
      .           
  1,702 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,702 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  3,404 ( 0.00%)      }
      .           
  1,376 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  1,376 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  2,752 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    960 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  3,344 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  2,744 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  1,732 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    866 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  4,912 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  2,456 ( 0.00%)      }
      .           
  1,372 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  2,744 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  2,744 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
      .               pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      .                   self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      .               }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
    116 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    232 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    232 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    232 ( 0.00%)      }
      .           
  2,160 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  2,880 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,680 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    480 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    960 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    480 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,440 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    720 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    480 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    240 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    720 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    900 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    360 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    180 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    840 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    420 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    480 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    240 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    360 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    180 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    180 ( 0.00%)          &self.coercion_casts
    180 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 823 ----------------------------------------
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
      .           #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
      2 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
      2 ( 0.00%)      pub fn is_identity(&self) -> bool {
      4 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
      2 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
      4 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      2 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      4 ( 0.00%)                          GenericArgKind::Const(ct) => match ct.val {
      .                                       ty::ConstKind::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(debruijn, ty::INNERMOST);
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
      4 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
     12 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
     38 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  7,200 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  2,880 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  5,760 ( 0.00%)      }
      .           
    540 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    180 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    720 ( 0.00%)      }
      .           
  3,000 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    600 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  4,200 ( 0.00%)      }
      .           
    720 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    180 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    900 ( 0.00%)      }
      .           
     63 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    112 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     28 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
-- line 1095 ----------------------------------------
-- line 1129 ----------------------------------------
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1223 ----------------------------------------
      .               }
      .           
      .               pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      .                   let cname = self.crate_name(LOCAL_CRATE);
      .                   self.sess.consider_optimizing(cname.as_str(), msg)
      .               }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 85,673 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
110,151 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      .               }
      .           
      .               /// Obtain the diagnostic item's name
  2,464 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,816 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  2,296 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  2,624 ( 0.00%)      }
      .           
  2,093 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,691 ( 0.00%)      }
      .           
 39,676 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 45,344 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  2,078 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
-- line 1269 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,162 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
      8 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 10,452 ( 0.00%)          &*self.untracked_resolutions.cstore
  5,226 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    181 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    784 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    360 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    540 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
    180 ( 0.00%)          self.sess.opts.borrowck_mode
    720 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
    300 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
    180 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
      .                   self.sess.crate_types().iter().any(|crate_type| {
      .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    308 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    224 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    504 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    252 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 31,591 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 36,104 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
      .               pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
      .               }
-- line 1586 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 19,636 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 81,444 ( 0.03%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 40,075 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 40,074 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 20,792 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 10,740 ( 0.00%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 15,024 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  1,788 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 25,531 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  3,792 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  8,140 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  3,342 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 69,854 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 36,075 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    683 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 78,588 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
272,724 ( 0.09%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
243,774 ( 0.08%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
      .               /// unsafe.
      .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
      .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
      .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
      .               }
      .           
      .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
      .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
    120 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
      .                   self.super_traits_of(trait_def_id).any(|trait_did| {
      .                       self.associated_items(trait_did)
      .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
      .                           .is_some()
      .                   })
     90 ( 0.00%)      }
      .           
      .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
      .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
      .               /// to identify which traits may define a given associated type to help avoid cycle errors.
      .               /// Returns a `DefId` iterator.
      .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
      .                   let mut set = FxHashSet::default();
     20 ( 0.00%)          let mut stack = vec![trait_def_id];
      .           
      .                   set.insert(trait_def_id);
      .           
     90 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
    204 ( 0.00%)              let trait_did = stack.pop()?;
    102 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
      .           
      .                       for (predicate, _) in generic_predicates.predicates {
    402 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
    220 ( 0.00%)                      if set.insert(data.def_id()) {
      .                                   stack.push(data.def_id());
      .                               }
      .                           }
      .                       }
      .           
      .                       Some(trait_did)
      .                   })
      .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  4,488 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
155,600 ( 0.05%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
175,672 ( 0.06%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
203,184 ( 0.07%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
 14,067 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
203,184 ( 0.07%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     48 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
     48 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
  1,072 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
  1,072 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
     16 ( 0.00%)          match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
     16 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
      .                   self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
-- line 2255 ----------------------------------------
-- line 2345 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      .                   let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      .                   self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    600 ( 0.00%)          iter.intern_with(|ts| {
    408 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    780 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    540 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
      .                   self.types.unit
      .               }
      .           
      .               #[inline]
-- line 2364 ----------------------------------------
-- line 2368 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    224 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     48 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2442 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_param(self, index: u32, name: Symbol) -> Ty<'tcx> {
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
  1,708 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  2,233 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  1,595 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    150 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
    976 ( 0.00%)                  self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  2,233 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      .               pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Field(f, ty))
-- line 2471 ----------------------------------------
-- line 2521 ----------------------------------------
      .                   );
      .                   self._intern_poly_existential_predicates(eps)
      .               }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,942 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    270 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  3,360 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  5,495 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     14 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 39,217 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  3,922 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    720 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    120 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  3,170 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    204 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
 10,437 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
 20,114 ( 0.01%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    652 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    218 ( 0.00%)              c_variadic,
    250 ( 0.00%)              unsafety,
    372 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
-- line 2590 ----------------------------------------
-- line 2594 ----------------------------------------
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      4 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    654 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 25,057 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  2,267 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  4,534 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 60,585 ( 0.02%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 12,964 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 12,964 ( 0.00%)          let hir = self.hir();
      .                   loop {
 13,236 ( 0.00%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 12,800 ( 0.00%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
  7,680 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 18,520 ( 0.01%)      }
      .           
  1,920 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  8,688 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    592 ( 0.00%)              let next = self.hir().get_parent_node(id);
  1,776 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,920 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    720 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    120 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
     56 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     16 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
     16 ( 0.00%)          Some(&*candidates)
     64 ( 0.00%)      }
      .           
  4,046 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  5,202 ( 0.00%)      }
      .           
  1,674 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
    186 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
  1,488 ( 0.00%)      }
      .           
  2,786 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  3,582 ( 0.00%)      }
      .           
  1,980 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  1,980 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
      .               pub fn is_const_fn(self, def_id: DefId) -> bool {
-- line 2732 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
  6,792 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
181,209 ( 0.06%)          E::intern_with(self, f)
  7,326 ( 0.00%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
114,947 ( 0.04%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 61,734 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      .                           assert!(iter.next().is_none());
  3,050 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     32 ( 0.00%)                  assert!(iter.next().is_none());
  2,852 ( 0.00%)                  f(&[t0, t1])
      .                       }
    744 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 69,046 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,100 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    880 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 23,964 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 20,206 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  1,221 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     56 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     56 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     84 ( 0.00%)                  assert!(iter.next().is_none());
  2,716 ( 0.00%)                  f(&[t0, t1])
      .                       }
    420 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 26,789 ( 0.01%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 40,075 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,376 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

118,916 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
113,166,632 (36.52%)  events annotated

